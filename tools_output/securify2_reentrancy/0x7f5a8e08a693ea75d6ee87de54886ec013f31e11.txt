[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Etherclear
Line:        1052
Source: 
>         uint x;
>         assembly {
>         ^^^^^^^^^^
>             x := mload(add(bs, add(0x20, start)))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        527
Source: 
>     // Used to test the sign and recover functionality.
>     function checkRetrieveSignature(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        570
Source: 
> 
>     function getChainId() public view returns (uint256 networkID) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return chainId;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        585
Source: 
>     */
>     function setENS(address reverseRegistrarAddr, string memory name)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        625
Source: 
> 
>     function getBaseFee() public view returns (uint feeAmt) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return baseFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        629
Source: 
> 
>     function getPaymentFee() public view returns (uint feeAmt) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return paymentFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        644
Source: 
> 
>     function disableRetrieveFunds(bool disabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         retrieveFundsEnabled = !disabled;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        648
Source: 
> 
>     function disableCreatePayment(bool disabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         createPaymentEnabled = !disabled;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        933
Source: 
>     // Will only work if the correct signature is passed in.
>     function retrieveFundsForRecipient(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherclear
Line:        968
Source: 
>     // Meant to be called by the recipient.
>     function retrieveFundsAsRecipient(uint txnId, string memory code) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Payment memory txn = allPayments[txnId];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Etherclear
Line:        590
Source: 
>         reverseRegistrar = ReverseRegistrar(reverseRegistrarAddr);
>         reverseRegistrar.setName(name);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Etherclear
Line:        599
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Etherclear
Line:        602
Source: 
>             require(
>                 IERC20(token).transfer(owner, total),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Could not successfully withdraw token"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Etherclear
Line:        711
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Etherclear
Line:        776
Source: 
>         require(token != address(0));
>         require(IERC20(token).transfer(userTo, amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens[token][userFrom] = SafeMath.sub(tokens[token][userFrom], amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Etherclear
Line:        752
Source: 
>         require(
>             IERC20(token).transferFrom(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 user,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Etherclear
Line:        1019
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        618
Source: 
>     // (once a suitable starting fee is reached).
>     function changeBaseFee(uint newFee) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         baseFee = newFee;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        621
Source: 
>     }
>     function changePaymentFee(uint newFee) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paymentFee = newFee;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        644
Source: 
> 
>     function disableRetrieveFunds(bool disabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         retrieveFundsEnabled = !disabled;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        648
Source: 
> 
>     function disableCreatePayment(bool disabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         createPaymentEnabled = !disabled;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        808
Source: 
> 
>     function getPaymentId(address recipient, bytes memory codeHash)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherclear
Line:        968
Source: 
>     // Meant to be called by the recipient.
>     function retrieveFundsAsRecipient(uint txnId, string memory code) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Payment memory txn = allPayments[txnId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        527
Source: 
>     // Used to test the sign and recover functionality.
>     function checkRetrieveSignature(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        585
Source: 
>     */
>     function setENS(address reverseRegistrarAddr, string memory name)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        608
Source: 
> 
>     function viewBalance(address token, address user)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        662
Source: 
> 
>     function getPaymentInfo(uint paymentID)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        782
Source: 
>     // TODO check order of execution.
>     function createPayment(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint amount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        804
Source: 
>     // TODO: ensure this value will be correct.
>     function getBalance(address token) external view returns (uint amt) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokens[token][msg.sender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        825
Source: 
>     // the original amount + payment fee.
>     function createTokenPayment(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        933
Source: 
>     // Will only work if the correct signature is passed in.
>     function retrieveFundsForRecipient(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 txnId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherclear
Line:        1046
Source: 
>     // This is apparently not reversible.
>     function sliceUint(bytes memory bs) public pure returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint start = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Etherclear
Line:        599
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Etherclear
Line:        711
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Etherclear
Line:        1019
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherclear
Line:        481
Source: 
> 
>     address constant verifyingContract = 0x1C56346CD2A2Bf3202F771f50d3D14a367B48070;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherclear
Line:        482
Source: 
>     address constant verifyingContract = 0x1C56346CD2A2Bf3202F771f50d3D14a367B48070;
>     bytes32 constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant RETRIEVE_FUNDS_REQUEST_TYPE = "RetrieveFundsRequest(uint256 txnId,address sender,address recipient,string passphrase)";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherclear
Line:        491
Source: 
>     );
>     bytes32 private DOMAIN_SEPARATOR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 chainId;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.2;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        153
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        232
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        342
Source: 
> 
> pragma solidity ^0.5.2;
> ^^^^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        445
Source: 
> 
>     ReverseRegistrar reverseRegistrar;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        458
Source: 
>     // Payments where msg.sender is the recipient.
>     mapping(address => Dictionary.Data) recipientPayments;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Payments where msg.sender is the sender.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        460
Source: 
>     // Payments where msg.sender is the sender.
>     mapping(address => Dictionary.Data) senderPayments;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Payments are looked up with a uint UUID generated within the contract.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        462
Source: 
>     // Payments are looked up with a uint UUID generated within the contract.
>     mapping(uint => Payment) allPayments;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        465
Source: 
>     // This contract's owner (gives ability to set fees).
>     address payable owner;
>     ^^^^^^^^^^^^^^^^^^^^^
>     // The fees are represented with a percentage times 1 ether.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        469
Source: 
>     // The paymentFee is to cover development costs
>     uint baseFee;
>     ^^^^^^^^^^^^
>     uint paymentFee;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        470
Source: 
>     uint baseFee;
>     uint paymentFee;
>     ^^^^^^^^^^^^^^^
>     // mapping of token addresses to mapping of account balances (token=0 means Ether)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        477
Source: 
>     // Failsafe to lock the create payments functionality for both ether and tokens.
>     bool createPaymentEnabled;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Failsafe to lock the retrieval (withdraw) functionality.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        479
Source: 
>     // Failsafe to lock the retrieval (withdraw) functionality.
>     bool retrieveFundsEnabled;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        481
Source: 
> 
>     address constant verifyingContract = 0x1C56346CD2A2Bf3202F771f50d3D14a367B48070;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        482
Source: 
>     address constant verifyingContract = 0x1C56346CD2A2Bf3202F771f50d3D14a367B48070;
>     bytes32 constant salt = 0xf2d857f4a3edcb9b78b4d503bfe733db1e3f6cdc2b7971ee739626c97e86a558;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private constant RETRIEVE_FUNDS_REQUEST_TYPE = "RetrieveFundsRequest(uint256 txnId,address sender,address recipient,string passphrase)";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Etherclear
Line:        492
Source: 
>     bytes32 private DOMAIN_SEPARATOR;
>     uint256 chainId;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherclear
Line:        1019
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherclear
Line:        599
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherclear
Line:        711
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherclear
Line:        1019
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherclear
Line:        599
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherclear
Line:        711
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherclear
Line:        599
Source: 
>         if (token == address(0)) {
>             owner.transfer(total);
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherclear
Line:        711
Source: 
>             );
>             txn.sender.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherclear
Line:        1019
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Etherclear
Line:        602
Source: 
>             require(
>                 IERC20(token).transfer(owner, total),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Could not successfully withdraw token"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Etherclear
Line:        776
Source: 
>         require(token != address(0));
>         require(IERC20(token).transfer(userTo, amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens[token][userFrom] = SafeMath.sub(tokens[token][userFrom], amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Etherclear
Line:        752
Source: 
>         require(
>             IERC20(token).transferFrom(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 user,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Etherclear
Line:        590
Source: 
>         reverseRegistrar = ReverseRegistrar(reverseRegistrarAddr);
>         reverseRegistrar.setName(name);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Etherclear
Line:        445
Source: 
> 
>     ReverseRegistrar reverseRegistrar;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Dictionary
Line:        11
Source: 
> library Dictionary {
>     uint private constant NULL = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Etherclear
Line:        1019
Source: 
>             // TODO: recipient must be valid!
>             txn.recipient.transfer(txn.sendAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[address(0)][txn.sender] = SafeMath.sub(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        777
Source: 
>         require(IERC20(token).transfer(userTo, amount));
>         tokens[token][userFrom] = SafeMath.sub(tokens[token][userFrom], amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        116
Source: 
> 
>         if (prevId == NULL) self.firstNodeId = nextId; //first node
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         else self.list[prevId].next = nextId;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        119
Source: 
> 
>         if (nextId == NULL) self.lastNodeId = prevId; //last node
>                             ^^^^^^^^^^^^^^^^^^^^^^^^
>         else self.list[nextId].prev = prevId;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        122
Source: 
> 
>         delete self.list[id];
>         ^^^^^^^^^^^^^^^^^^^^
>         self.len--;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        123
Source: 
>         delete self.list[id];
>         self.len--;
>         ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        120
Source: 
>         if (nextId == NULL) self.lastNodeId = prevId; //last node
>         else self.list[nextId].prev = prevId;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        117
Source: 
>         if (prevId == NULL) self.firstNodeId = nextId; //first node
>         else self.list[prevId].next = nextId;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        759
Source: 
>         //depositingTokenFlag = false;
>         tokens[token][user] = SafeMath.add(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokens[token][msg.sender],

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        890
Source: 
> 
>         allPayments[txnId] = txn;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        79
Source: 
>         if (self.list[id].initialized) {
>             self.list[id].data = data;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        83
Source: 
>         if (self.firstNodeId == NULL) {
>             self.firstNodeId = id;
>             ^^^^^^^^^^^^^^^^^^^^^
>             self.lastNodeId = id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        84
Source: 
>             self.firstNodeId = id;
>             self.lastNodeId = id;
>             ^^^^^^^^^^^^^^^^^^^^
>             self.list[id] = Node({

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        85
Source: 
>             self.lastNodeId = id;
>             self.list[id] = Node({
>             ^^^^^^^^^^^^^^^^^^^^^^
>                 prev: 0,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        91
Source: 
>             });
>             self.len++;
>             ^^^^^^^^^^
>         } else insertBefore(self, self.firstNodeId, id, data);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        58
Source: 
>         if (self.list[id].initialized) {
>             self.list[id].data = data;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        61
Source: 
>         }
>         self.list[id].next = beforeId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (self.list[beforeId].prev == NULL) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        63
Source: 
>         if (self.list[beforeId].prev == NULL) {
>             self.list[id].prev = NULL;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             self.firstNodeId = id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        64
Source: 
>             self.list[id].prev = NULL;
>             self.firstNodeId = id;
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        69
Source: 
>         }
>         self.list[id].data = data;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         self.list[id].initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        70
Source: 
>         self.list[id].data = data;
>         self.list[id].initialized = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         self.list[beforeId].prev = id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        71
Source: 
>         self.list[id].initialized = true;
>         self.list[beforeId].prev = id;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         self.len++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        72
Source: 
>         self.list[beforeId].prev = id;
>         self.len++;
>         ^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        66
Source: 
>         } else {
>             self.list[id].prev = self.list[beforeId].prev;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             self.list[self.list[beforeId].prev].next = id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        67
Source: 
>             self.list[id].prev = self.list[beforeId].prev;
>             self.list[self.list[beforeId].prev].next = id;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        34
Source: 
>         if (self.list[id].initialized) {
>             self.list[id].data = data;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        37
Source: 
>         }
>         self.list[id].prev = afterId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (self.list[afterId].next == NULL) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        39
Source: 
>         if (self.list[afterId].next == NULL) {
>             self.list[id].next = NULL;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             self.lastNodeId = id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        40
Source: 
>             self.list[id].next = NULL;
>             self.lastNodeId = id;
>             ^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        45
Source: 
>         }
>         self.list[id].data = data;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         self.list[id].initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        46
Source: 
>         self.list[id].data = data;
>         self.list[id].initialized = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         self.list[afterId].next = id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        47
Source: 
>         self.list[id].initialized = true;
>         self.list[afterId].next = id;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         self.len++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        48
Source: 
>         self.list[afterId].next = id;
>         self.len++;
>         ^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        42
Source: 
>         } else {
>             self.list[id].next = self.list[afterId].next;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             self.list[self.list[afterId].next].prev = id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dictionary
Line:        43
Source: 
>             self.list[id].next = self.list[afterId].next;
>             self.list[self.list[afterId].next].prev = id;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        1011
Source: 
> 
>         delete allPayments[txnId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         recipientPayments[txn.recipient].remove(txnId);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherclear
Line:        1020
Source: 
>             txn.recipient.transfer(txn.sendAmount);
>             tokens[address(0)][txn.sender] = SafeMath.sub(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 tokens[address(0)][txn.sender],

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Etherclear
Line:        590
Source: 
>         reverseRegistrar = ReverseRegistrar(reverseRegistrarAddr);
>         reverseRegistrar.setName(name);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
