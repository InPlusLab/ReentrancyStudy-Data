Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PureRisk
Line:        234
Source: 
>     function bytesToAddress(bytes memory _addr) internal pure returns (address payable addr) {
>         assembly {
>         ^^^^^^^^^^
>           addr := mload(add(_addr,20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PureRisk
Line:        131
Source: 
> 
>     uint public depositAmount = 0.1 ether; // 0.1 eth
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public currentPaymentIndex;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PureRisk
Line:        133
Source: 
>     uint public currentPaymentIndex;
>     uint public percent = 130;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public percentDev = 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PureRisk
Line:        134
Source: 
>     uint public percent = 130;
>     uint public percentDev = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        112
Source: 
>      */
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PureRisk
Line:        198
Source: 
> 
>     function getDepositsCount() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return deposits.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PureRisk
Line:        202
Source: 
> 
>     function lastDepositId() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return deposits.length - 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PureRisk
Line:        206
Source: 
> 
>     function getDeposit(uint _id) public view returns (address, uint, uint, uint, uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (deposits[_id].depositor, deposits[_id].amount, deposits[_id].payout,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PureRisk
Line:        211
Source: 
> 
>     function getUserDepositsCount(address depositor) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return depositors[depositor].length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PureRisk
Line:        216
Source: 
>     // lastIndex from the end of payments lest (0 - last payment), returns: address of depositor, payment time, payment amount
>     function getLastPayments(uint lastIndex) public view returns (address, uint, uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint depositIndex = currentPaymentIndex.sub(lastIndex + 1);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PureRisk
Line:        226
Source: 
> 
>     function getUserDeposit(address depositor, uint depositNumber) public view returns(uint, uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (deposits[depositors[depositor][depositNumber]].amount,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        112
Source: 
>      */
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PureRisk
Line:        216
Source: 
>     // lastIndex from the end of payments lest (0 - last payment), returns: address of depositor, payment time, payment amount
>     function getLastPayments(uint lastIndex) public view returns (address, uint, uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint depositIndex = currentPaymentIndex.sub(lastIndex + 1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PureRisk
Line:        206
Source: 
> 
>     function getDeposit(uint _id) public view returns (address, uint, uint, uint, uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (deposits[_id].depositor, deposits[_id].amount, deposits[_id].payout,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PureRisk
Line:        211
Source: 
> 
>     function getUserDepositsCount(address depositor) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return depositors[depositor].length;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PureRisk
Line:        226
Source: 
> 
>     function getUserDeposit(address depositor, uint depositNumber) public view returns(uint, uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (deposits[depositors[depositor][depositNumber]].amount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        25
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PureRisk
Line:        183
Source: 
>         if(bytesToAddress(msg.data) != address(0x00)){
>             bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner.transfer(msg.value.mul(percentDev.div(2)).div(100));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PureRisk
Line:        184
Source: 
>             bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));
>             owner.transfer(msg.value.mul(percentDev.div(2)).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PureRisk
Line:        186
Source: 
>         } else {
>             owner.transfer(msg.value.mul(percentDev).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    PureRisk
Line:        191
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.transfer(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, now, currentPaymentIndex);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.8;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    PureRisk
Line:        183
Source: 
>         if(bytesToAddress(msg.data) != address(0x00)){
>             bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner.transfer(msg.value.mul(percentDev.div(2)).div(100));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    PureRisk
Line:        184
Source: 
>             bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));
>             owner.transfer(msg.value.mul(percentDev.div(2)).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    PureRisk
Line:        186
Source: 
>         } else {
>             owner.transfer(msg.value.mul(percentDev).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PureRisk
Line:        191
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.transfer(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, now, currentPaymentIndex);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PureRisk
Line:        183
Source: 
>         if(bytesToAddress(msg.data) != address(0x00)){
>             bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner.transfer(msg.value.mul(percentDev.div(2)).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PureRisk
Line:        184
Source: 
>             bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));
>             owner.transfer(msg.value.mul(percentDev.div(2)).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PureRisk
Line:        191
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.transfer(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, now, currentPaymentIndex);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PureRisk
Line:        186
Source: 
>         } else {
>             owner.transfer(msg.value.mul(percentDev).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PureRisk
Line:        183
Source: 
>         if(bytesToAddress(msg.data) != address(0x00)){
>             bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner.transfer(msg.value.mul(percentDev.div(2)).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PureRisk
Line:        184
Source: 
>             bytesToAddress(msg.data).transfer(msg.value.mul(percentDev.div(2)).div(100));
>             owner.transfer(msg.value.mul(percentDev.div(2)).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PureRisk
Line:        191
Source: 
>             deposits[currentPaymentIndex].paymentTime = now;
>             deposits[currentPaymentIndex].depositor.transfer(deposits[currentPaymentIndex].payout);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OnPaymentSent(deposits[currentPaymentIndex].depositor, now, currentPaymentIndex);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PureRisk
Line:        186
Source: 
>         } else {
>             owner.transfer(msg.value.mul(percentDev).div(100));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PureRisk
Line:        132
Source: 
>     uint public depositAmount = 0.1 ether; // 0.1 eth
>     uint public currentPaymentIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public percent = 130;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PureRisk
Line:        136
Source: 
> 
>     uint public amountRaised;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public depositorsCount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PureRisk
Line:        137
Source: 
>     uint public amountRaised;
>     uint public depositorsCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PureRisk
Line:        156
Source: 
> 
>     mapping (address => address) public referal;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
