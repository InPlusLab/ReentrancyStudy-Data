Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        239
Source: 
>     uint256 c = _a / _b;
>     assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
>            ^^^^^^^^^^^^^^^^^^^^^^
>     return _a / _b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        224
Source: 
>     // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
>     if (_a == 0) {
>         ^^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        229
Source: 
>     c = _a * _b;
>     assert(c / _a == _b);
>            ^^^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        67
Source: 
>         changeBlockAmountList();
>         if (blockEth[block.number][token] == 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             blockTokenNum[block.number] = blockTokenNum[block.number].add(1);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        52
Source: 
>     */
>     function changeMapping(address map) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mappingContract = NEST_2_Mapping(address(map));                 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        63
Source: 
>     */
>     function oreDrawing(address token) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == offerFactoryAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        83
Source: 
>     */
>     function mining(uint256 amount, uint256 blockNum, address target, address token) public returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == offerFactoryAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        115
Source: 
>     //  View block falloff interval
>     function checkBlockAttenuation() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockAttenuation;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        120
Source: 
>     //  View attenuation factor
>     function checkAttenuation() public view returns(uint256 top, uint256 bottom) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (attenuationTop, attenuationBottom);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        125
Source: 
>     //  View the total service charge of quotation block
>     function checkBlockEth(uint256 blockNum, address token) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockEth[blockNum][token];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        130
Source: 
>     //  View block currency quantity
>     function checkBlockTokenNum(uint256 blockNum) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockTokenNum[blockNum];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        135
Source: 
>     //  View the ore yield of quotation block
>     function checkBlockMining(uint256 blockNum) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockMining[blockNum];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        140
Source: 
>     //  View the latest quotation block
>     function checkLatestMining() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return latestMining;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        145
Source: 
>     //  View falloff list
>     function checkBlockAmountList(uint256 blockNum) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockAmountList[blockNum];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        150
Source: 
>     //  View current ore output
>     function checkBlockAmountListLatest() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockAmountList[latestBlock];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        155
Source: 
>     //  View the latest falloff block
>     function checkLatestBlock() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return latestBlock;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        160
Source: 
>     //  View the output of quotation contract
>     function checkBlockRealAmount(uint256 amount, uint256 blockNum, address token) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount.mul(blockMining[blockNum]).div(blockEth[blockNum][token].mul(blockTokenNum[blockNum]));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        164
Source: 
> 
>     function changeBlockAttenuation(uint256 blockNum) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(blockNum > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        169
Source: 
>     
>     function changeAttenuation(uint256 top, uint256 bottom) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(top > 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        40
Source: 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        41
Source: 
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         latestBlock = block.number.sub(388888);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        177
Source: 
>     modifier onlyOwner(){
>         require(mappingContract.checkOwners(msg.sender) == true);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        54
Source: 
>         mappingContract = NEST_2_Mapping(address(map));                 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abonusAddress = address(mappingContract.checkAddress("abonus"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        55
Source: 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        56
Source: 
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        111
Source: 
>         address payable addr = abonusAddress.make_payable();
>         addr.transfer(asset);
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        86
Source: 
>         uint256 miningAmount = amount.mul(blockMining[blockNum]).div(blockEth[blockNum][token].mul(blockTokenNum[blockNum]));
>         uint256 realAmount = miningSave.turnOut(miningAmount, target);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit miningLog(blockNum, token,blockEth[blockNum][token],amount,blockTokenNum[blockNum]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        177
Source: 
>     modifier onlyOwner(){
>         require(mappingContract.checkOwners(msg.sender) == true);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        83
Source: 
>     */
>     function mining(uint256 amount, uint256 blockNum, address target, address token) public returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == offerFactoryAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        160
Source: 
>     //  View the output of quotation contract
>     function checkBlockRealAmount(uint256 amount, uint256 blockNum, address token) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount.mul(blockMining[blockNum]).div(blockEth[blockNum][token].mul(blockTokenNum[blockNum]));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        52
Source: 
>     */
>     function changeMapping(address map) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mappingContract = NEST_2_Mapping(address(map));                 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        125
Source: 
>     //  View the total service charge of quotation block
>     function checkBlockEth(uint256 blockNum, address token) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockEth[blockNum][token];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        130
Source: 
>     //  View block currency quantity
>     function checkBlockTokenNum(uint256 blockNum) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockTokenNum[blockNum];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        135
Source: 
>     //  View the ore yield of quotation block
>     function checkBlockMining(uint256 blockNum) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockMining[blockNum];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        145
Source: 
>     //  View falloff list
>     function checkBlockAmountList(uint256 blockNum) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return blockAmountList[blockNum];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        239
Source: 
>     uint256 c = _a / _b;
>     assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold
>                  ^^^^^^
>     return _a / _b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        228
Source: 
> 
>     c = _a * _b;
>         ^^^^^^^
>     assert(c / _a == _b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        177
Source: 
>     modifier onlyOwner(){
>         require(mappingContract.checkOwners(msg.sender) == true);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        54
Source: 
>         mappingContract = NEST_2_Mapping(address(map));                 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abonusAddress = address(mappingContract.checkAddress("abonus"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        55
Source: 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        56
Source: 
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        11
Source: 
>  */
> contract NEST_3_OrePoolLogic {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     using address_make_payable for address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        29
Source: 
>     //  Current block, last quoted block, current block ore yield, current handling fee, token address
>     event oreDrawingLog(uint256 nowBlock, uint256 frontBlock, uint256 blockAmount, uint256 miningEth, address tokenAddress);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //  Quotation block, token address, all handling charges of token, my handling charges, number of tokens

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        31
Source: 
>     //  Quotation block, token address, all handling charges of token, my handling charges, number of tokens
>     event miningLog(uint256 blockNum, address tokenAddress, uint256 miningEthAll, uint256 miningEthSelf, uint256 tokenNum);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NEST_3_MiningSave
Line:        182
Source: 
> 
> contract NEST_3_MiningSave {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function turnOut(uint256 amount, address target) public returns(uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NEST_2_Mapping
Line:        187
Source: 
> 
> contract NEST_2_Mapping {
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function checkAddress(string memory name) public view returns (address contractAddress);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    address_make_payable
Line:        205
Source: 
> 
> library address_make_payable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    function make_payable(address x) internal pure returns (address payable) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    address_make_payable
Line:        206
Source: 
> library address_make_payable {
>    function make_payable(address x) internal pure returns (address payable) {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return address(uint160(x));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        14
Source: 
>     using SafeMath for uint256;
>     uint256 blockAttenuation = 2400000;                         //  Block attenuation interval
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 attenuationTop = 90;                                //  Attenuation coefficient

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        15
Source: 
>     uint256 blockAttenuation = 2400000;                         //  Block attenuation interval
>     uint256 attenuationTop = 90;                                //  Attenuation coefficient
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 attenuationBottom = 100;                            //  Attenuation coefficient

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        16
Source: 
>     uint256 attenuationTop = 90;                                //  Attenuation coefficient
>     uint256 attenuationBottom = 100;                            //  Attenuation coefficient
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) blockEth;   //  Total service charge of quotation block. block No. = > token address = > total service charge

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        17
Source: 
>     uint256 attenuationBottom = 100;                            //  Attenuation coefficient
>     mapping(uint256 => mapping(address => uint256)) blockEth;   //  Total service charge of quotation block. block No. = > token address = > total service charge
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => uint256) blockTokenNum;                  //  Block currency quantity. block number = > currency quantity

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        18
Source: 
>     mapping(uint256 => mapping(address => uint256)) blockEth;   //  Total service charge of quotation block. block No. = > token address = > total service charge
>     mapping(uint256 => uint256) blockTokenNum;                  //  Block currency quantity. block number = > currency quantity
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => uint256) blockMining;                    //  Ore yield of quotation block. Block No. = > ore yield

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        19
Source: 
>     mapping(uint256 => uint256) blockTokenNum;                  //  Block currency quantity. block number = > currency quantity
>     mapping(uint256 => uint256) blockMining;                    //  Ore yield of quotation block. Block No. = > ore yield
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 latestMining;                                       //  Latest quotation block

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        20
Source: 
>     mapping(uint256 => uint256) blockMining;                    //  Ore yield of quotation block. Block No. = > ore yield
>     uint256 latestMining;                                       //  Latest quotation block
>     ^^^^^^^^^^^^^^^^^^^^
>     NEST_2_Mapping mappingContract;                             //  Mapping contract

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        21
Source: 
>     uint256 latestMining;                                       //  Latest quotation block
>     NEST_2_Mapping mappingContract;                             //  Mapping contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     NEST_3_MiningSave miningSave;                               //  Ore pool contract

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        22
Source: 
>     NEST_2_Mapping mappingContract;                             //  Mapping contract
>     NEST_3_MiningSave miningSave;                               //  Ore pool contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address abonusAddress;                                      //  Address of dividend pool

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        23
Source: 
>     NEST_3_MiningSave miningSave;                               //  Ore pool contract
>     address abonusAddress;                                      //  Address of dividend pool
>     ^^^^^^^^^^^^^^^^^^^^^
>     address offerFactoryAddress;                                //  Offer factory contract address

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        24
Source: 
>     address abonusAddress;                                      //  Address of dividend pool
>     address offerFactoryAddress;                                //  Offer factory contract address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => uint256) blockAmountList;                //  Attenuation list. block number = > attenuation coefficient

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        25
Source: 
>     address offerFactoryAddress;                                //  Offer factory contract address
>     mapping(uint256 => uint256) blockAmountList;                //  Attenuation list. block number = > attenuation coefficient
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 latestBlock;                                        //  Latest attenuation block

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        26
Source: 
>     mapping(uint256 => uint256) blockAmountList;                //  Attenuation list. block number = > attenuation coefficient
>     uint256 latestBlock;                                        //  Latest attenuation block
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        14
Source: 
>     using SafeMath for uint256;
>     uint256 blockAttenuation = 2400000;                         //  Block attenuation interval
>                                ^^^^^^^
>     uint256 attenuationTop = 90;                                //  Attenuation coefficient

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        111
Source: 
>         address payable addr = abonusAddress.make_payable();
>         addr.transfer(asset);
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        111
Source: 
>         address payable addr = abonusAddress.make_payable();
>         addr.transfer(asset);
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        111
Source: 
>         address payable addr = abonusAddress.make_payable();
>         addr.transfer(asset);
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        41
Source: 
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         latestBlock = block.number.sub(388888);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        177
Source: 
>     modifier onlyOwner(){
>         require(mappingContract.checkOwners(msg.sender) == true);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        56
Source: 
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        177
Source: 
>     modifier onlyOwner(){
>         require(mappingContract.checkOwners(msg.sender) == true);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        39
Source: 
>         mappingContract = NEST_2_Mapping(address(map));                  
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abonusAddress = address(mappingContract.checkAddress("abonus"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        40
Source: 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        54
Source: 
>         mappingContract = NEST_2_Mapping(address(map));                 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abonusAddress = address(mappingContract.checkAddress("abonus"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        55
Source: 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        86
Source: 
>         uint256 miningAmount = amount.mul(blockMining[blockNum]).div(blockEth[blockNum][token].mul(blockTokenNum[blockNum]));
>         uint256 realAmount = miningSave.turnOut(miningAmount, target);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit miningLog(blockNum, token,blockEth[blockNum][token],amount,blockTokenNum[blockNum]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        22
Source: 
>     NEST_2_Mapping mappingContract;                             //  Mapping contract
>     NEST_3_MiningSave miningSave;                               //  Ore pool contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address abonusAddress;                                      //  Address of dividend pool

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NEST_3_OrePoolLogic
Line:        23
Source: 
>     NEST_3_MiningSave miningSave;                               //  Ore pool contract
>     address abonusAddress;                                      //  Address of dividend pool
>     ^^^^^^^^^^^^^^^^^^^^^
>     address offerFactoryAddress;                                //  Offer factory contract address

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        53
Source: 
>     function changeMapping(address map) public onlyOwner {
>         mappingContract = NEST_2_Mapping(address(map));                 
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        54
Source: 
>         mappingContract = NEST_2_Mapping(address(map));                 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abonusAddress = address(mappingContract.checkAddress("abonus"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        55
Source: 
>         miningSave = NEST_3_MiningSave(mappingContract.checkAddress("miningSave"));
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        56
Source: 
>         abonusAddress = address(mappingContract.checkAddress("abonus"));
>         offerFactoryAddress = address(mappingContract.checkAddress("offerFactory"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        166
Source: 
>         require(blockNum > 0);
>         blockAttenuation = blockNum;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        172
Source: 
>         require(bottom > 0);
>         attenuationTop = top;
>         ^^^^^^^^^^^^^^^^^^^^
>         attenuationBottom = bottom;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_3_OrePoolLogic
Line:        173
Source: 
>         attenuationTop = top;
>         attenuationBottom = bottom;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
