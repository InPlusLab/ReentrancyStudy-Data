pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Elections
Line:        1221
Source: 
> 	}
> 	Settings settings;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        831
Source: 
>      */
>     function registryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _registryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        857
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        897
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        941
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        857
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        897
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        941
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1089
Source: 
>     /// @return contractRegistry is the registry contract address
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        857
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        897
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        941
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1089
Source: 
>     /// @return contractRegistry is the registry contract address
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        857
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        897
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        941
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1089
Source: 
>     /// @return contractRegistry is the registry contract address
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        857
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        897
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        941
Source: 
>     /// Checks if the initialization was completed
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1089
Source: 
>     /// @return contractRegistry is the registry contract address
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1082
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        995
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1025
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1033
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1037
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1041
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1261
Source: 
> 	function readyToSync() external override onlyWhenActive {
> 		address guardian = guardianRegistrationContract.resolveGuardianAddress(msg.sender); // this validates registration
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!isVotedOut(guardian), "caller is voted-out");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1266
Source: 
> 
> 		committeeContract.removeMember(guardian);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1556
Source: 
> 		uint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);
> 		committeeContract.addMember(guardian, effectiveStake, certificationContract.isGuardianCertified(guardian));
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1556
Source: 
> 		uint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);
> 		committeeContract.addMember(guardian, effectiveStake, certificationContract.isGuardianCertified(guardian));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1574
Source: 
> 		IDelegations _delegationsContract = delegationsContract;
> 		(,uint256 selfStake) = _delegationsContract.getDelegationInfo(guardian);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 delegatedStake = _delegationsContract.getDelegatedStake(guardian);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1575
Source: 
> 		(,uint256 selfStake) = _delegationsContract.getDelegationInfo(guardian);
> 		uint256 delegatedStake = _delegationsContract.getDelegatedStake(guardian);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return calcEffectiveStake(selfStake, delegatedStake, _settings);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1281
Source: 
> 	function canJoinCommittee(address guardian) external view override returns (bool) {
> 		guardian = guardianRegistrationContract.resolveGuardianAddress(guardian); // this validates registration
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1288
Source: 
> 		uint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);
> 		return committeeContract.checkAddMember(guardian, effectiveStake);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1306
Source: 
> 		IGuardiansRegistration _guardianRegistrationContract = guardianRegistrationContract;
> 		(committee, weights, certification) = committeeContract.getCommittee();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		orbsAddrs = _guardianRegistrationContract.getGuardiansOrbsAddress(committee);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1307
Source: 
> 		(committee, weights, certification) = committeeContract.getCommittee();
> 		orbsAddrs = _guardianRegistrationContract.getGuardiansOrbsAddress(committee);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ips = _guardianRegistrationContract.getGuardianIps(committee);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1308
Source: 
> 		orbsAddrs = _guardianRegistrationContract.getGuardiansOrbsAddress(committee);
> 		ips = _guardianRegistrationContract.getGuardianIps(committee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1321
Source: 
> 
> 		address voter = guardianRegistrationContract.resolveGuardianAddress(msg.sender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteUnreadyVotes[voter][subject] = voteExpiration;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1325
Source: 
> 
> 		(address[] memory generalCommittee, uint256[] memory generalWeights, bool[] memory certification) = committeeContract.getCommittee();
>                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1357
Source: 
> 	function getVoteUnreadyStatus(address subject) external override view returns (address[] memory committee, uint256[] memory weights, bool[] memory certification, bool[] memory votes, bool subjectInCommittee, bool subjectInCertifiedCommittee) {
> 		(committee, weights, certification) = committeeContract.getCommittee();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1387
Source: 
> 
> 		uint256 voterStake = delegationsContract.getDelegatedStake(voter);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1397
Source: 
> 
> 		uint totalStake = delegationsContract.getTotalDelegatedStake();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1681
Source: 
> 			emit GuardianStatusUpdated(subject, false, false);
> 			committeeContract.removeMember(subject);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1425
Source: 
> 		votedStake = accumulatedStakesForVoteOut[subject];
> 		totalDelegatedStake = delegationsContract.getTotalDelegatedStake();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1444
Source: 
> 
> 		committeeContract.memberWeightChange(delegate, effectiveStake);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1455
Source: 
> 		emit GuardianStatusUpdated(guardian, false, false);
> 		committeeContract.removeMember(guardian);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Elections
Line:        1463
Source: 
> 	function guardianCertificationChanged(address guardian, bool isCertified) external override onlyCertificationContract onlyWhenActive {
> 		committeeContract.memberCertificationChange(guardian, isCertified);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Elections
Line:        1550
Source: 
> 	function _readyForCommittee(address guardian) private {
> 		guardian = guardianRegistrationContract.resolveGuardianAddress(guardian); // this validates registration
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!isVotedOut(guardian), "caller is voted-out");

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Elections
Line:        1333
Source: 
> 			emit GuardianStatusUpdated(subject, false, false);
> 			committeeContract.removeMember(subject);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1081
Source: 
>     /// @param newContractRegistry is the new registry contract 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1093
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1081
Source: 
>     /// @param newContractRegistry is the new registry contract 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1093
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1081
Source: 
>     /// @param newContractRegistry is the new registry contract 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1093
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        882
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1081
Source: 
>     /// @param newContractRegistry is the new registry contract 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1093
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Elections
Line:        1280
Source: 
>     /// @return canJoin indicating that the guardian can join the current committee
> 	function canJoinCommittee(address guardian) external view override returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		guardian = guardianRegistrationContract.resolveGuardianAddress(guardian); // this validates registration

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Elections
Line:        1294
Source: 
>     /// @return effectiveStake is the guardian's effective stake
> 	function getEffectiveStake(address guardian) external override view returns (uint effectiveStake) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return getGuardianEffectiveStake(guardian, settings);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Elections
Line:        1318
Source: 
>     /// @param voteExpiration is the expiration time of the vote unready to prevent counting of a vote that is already irrelevant.
> 	function voteUnready(address subject, uint voteExpiration) external override onlyWhenActive {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(voteExpiration >= block.timestamp, "vote expiration time must not be in the past");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Elections
Line:        1356
Source: 
>     /// @return subjectInCertifiedCommittee indicates that the subject is in the certified committee
> 	function getVoteUnreadyStatus(address subject) external override view returns (address[] memory committee, uint256[] memory weights, bool[] memory certification, bool[] memory votes, bool subjectInCommittee, bool subjectInCertifiedCommittee) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		(committee, weights, certification) = committeeContract.getCommittee();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Elections
Line:        1438
Source: 
>     /// @param totalDelegatedStake is the total delegated stake
> 	function delegatedStakeChange(address delegate, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 totalDelegatedStake) external override onlyDelegationsContract onlyWhenActive {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Settings memory _settings = settings;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Elections
Line:        1453
Source: 
>     /// @param guardian is the address of the guardian that unregistered
> 	function guardianUnregistered(address guardian) external override onlyGuardiansRegistrationContract onlyWhenActive {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit GuardianStatusUpdated(guardian, false, false);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Elections
Line:        1462
Source: 
>     /// @param isCertified indicates whether the guardian is certified
> 	function guardianCertificationChanged(address guardian, bool isCertified) external override onlyCertificationContract onlyWhenActive {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		committeeContract.memberCertificationChange(guardian, isCertified);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Elections
Line:        1342
Source: 
>     /// @return expiration returns the votes expiration time
> 	function getVoteUnreadyVote(address voter, address subject) public override view returns (bool valid, uint256 expiration) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		expiration = voteUnreadyVotes[voter][subject];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Elections
Line:        1412
Source: 
>     /// @return subject is the subject the voter has voted out
> 	function getVoteOutVote(address voter) external override view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return voteOutVotes[voter];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Elections
Line:        1422
Source: 
>     /// @return totalDelegatedStake is the total delegated stake
> 	function getVoteOutStatus(address subject) external override view returns (bool votedOut, uint votedStake, uint totalDelegatedStake) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		votedOut = isVotedOut(subject);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1082
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Elections
Line:        1387
Source: 
> 
> 		uint256 voterStake = delegationsContract.getDelegatedStake(voter);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Elections
Line:        1397
Source: 
> 
> 		uint totalStake = delegationsContract.getTotalDelegatedStake();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Elections
Line:        1681
Source: 
> 			emit GuardianStatusUpdated(subject, false, false);
> 			committeeContract.removeMember(subject);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        962
Source: 
>     /// @param _registryAdmin is the registry admin address
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
>         require(address(_contractRegistry) != address(0), "_contractRegistry cannot be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1093
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>                               ^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Lockable
Line:        1141
Source: 
>     /// @param _registryAdmin is the registry admin address
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ManagedContract
Line:        1185
Source: 
>     /// @param _registryAdmin is the registry admin address
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Elections
Line:        1229
Source: 
>     /// @param voteOutPercentMilleThreshold is the minimum vote-out threshold in percent-mille (0-100,000)
> 	constructor(IContractRegistry _contractRegistry, address _registryAdmin, uint32 minSelfStakePercentMille, uint32 voteUnreadyPercentMilleThreshold, uint32 voteOutPercentMilleThreshold) ManagedContract(_contractRegistry, _registryAdmin) public {
>                                                   ^^^^^^^^^^^^^^^^^^^^^^
> 		setMinSelfStakePercentMille(minSelfStakePercentMille);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        994
Source: 
>     function isManager(string memory role) internal view returns (bool) {
>         IContractRegistry _contractRegistry = contractRegistry;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Elections
Line:        1305
Source: 
> 	function getCommittee() external override view returns (address[] memory committee, uint256[] memory weights, address[] memory orbsAddrs, bool[] memory certification, bytes4[] memory ips) {
> 		IGuardiansRegistration _guardianRegistrationContract = guardianRegistrationContract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		(committee, weights, certification) = committeeContract.getCommittee();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Elections
Line:        1379
Source: 
> 	function voteOut(address subject) external override onlyWhenActive {
> 		Settings memory _settings = settings;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Elections
Line:        1439
Source: 
> 	function delegatedStakeChange(address delegate, uint256 selfDelegatedStake, uint256 delegatedStake, uint256 totalDelegatedStake) external override onlyDelegationsContract onlyWhenActive {
> 		Settings memory _settings = settings;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Elections
Line:        1524
Source: 
> 	) {
> 		Settings memory _settings = settings;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		minSelfStakePercentMille = _settings.minSelfStakePercentMille;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Elections
Line:        1573
Source: 
> 	function getGuardianEffectiveStake(address guardian, Settings memory _settings) private view returns (uint256 effectiveStake) {
> 		IDelegations _delegationsContract = delegationsContract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		(,uint256 selfStake) = _delegationsContract.getDelegationInfo(guardian);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Elections
Line:        1574
Source: 
> 		IDelegations _delegationsContract = delegationsContract;
> 		(,uint256 selfStake) = _delegationsContract.getDelegationInfo(guardian);
>     ^^^^^^^^^^^^^^^^^
> 		uint256 delegatedStake = _delegationsContract.getDelegatedStake(guardian);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Elections
Line:        1589
Source: 
> 	function isCommitteeVoteUnreadyThresholdReached(address[] memory committee, uint256[] memory weights, bool[] memory certification, address subject) private returns (bool) {
> 		Settings memory _settings = settings;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1208
Source: 
> 
> 	uint32 constant PERCENT_MILLIE_BASE = 100000;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1210
Source: 
> 
> 	mapping(address => mapping(address => uint256)) voteUnreadyVotes; // by => to => expiration
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint256) public votersStake;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1212
Source: 
> 	mapping(address => uint256) public votersStake;
> 	mapping(address => address) voteOutVotes; // by => to
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint256) accumulatedStakesForVoteOut; // addr => total stake

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1213
Source: 
> 	mapping(address => address) voteOutVotes; // by => to
> 	mapping(address => uint256) accumulatedStakesForVoteOut; // addr => total stake
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => bool) votedOutGuardians;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1214
Source: 
> 	mapping(address => uint256) accumulatedStakesForVoteOut; // addr => total stake
> 	mapping(address => bool) votedOutGuardians;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1221
Source: 
> 	}
> 	Settings settings;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1696
Source: 
> 
> 	ICommittee committeeContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	IDelegations delegationsContract;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1697
Source: 
> 	ICommittee committeeContract;
> 	IDelegations delegationsContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	IGuardiansRegistration guardianRegistrationContract;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1698
Source: 
> 	IDelegations delegationsContract;
> 	IGuardiansRegistration guardianRegistrationContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	ICertification certificationContract;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Elections
Line:        1699
Source: 
> 	IGuardiansRegistration guardianRegistrationContract;
> 	ICertification certificationContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Elections
Line:        1208
Source: 
> 
> 	uint32 constant PERCENT_MILLIE_BASE = 100000;
>                                        ^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1082
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        995
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1082
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        995
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1082
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        995
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1033
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1037
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        1041
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1261
Source: 
> 	function readyToSync() external override onlyWhenActive {
> 		address guardian = guardianRegistrationContract.resolveGuardianAddress(msg.sender); // this validates registration
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!isVotedOut(guardian), "caller is voted-out");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1550
Source: 
> 	function _readyForCommittee(address guardian) private {
> 		guardian = guardianRegistrationContract.resolveGuardianAddress(guardian); // this validates registration
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!isVotedOut(guardian), "caller is voted-out");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1556
Source: 
> 		uint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);
> 		committeeContract.addMember(guardian, effectiveStake, certificationContract.isGuardianCertified(guardian));
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1574
Source: 
> 		IDelegations _delegationsContract = delegationsContract;
> 		(,uint256 selfStake) = _delegationsContract.getDelegationInfo(guardian);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 delegatedStake = _delegationsContract.getDelegatedStake(guardian);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1575
Source: 
> 		(,uint256 selfStake) = _delegationsContract.getDelegationInfo(guardian);
> 		uint256 delegatedStake = _delegationsContract.getDelegatedStake(guardian);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return calcEffectiveStake(selfStake, delegatedStake, _settings);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1281
Source: 
> 	function canJoinCommittee(address guardian) external view override returns (bool) {
> 		guardian = guardianRegistrationContract.resolveGuardianAddress(guardian); // this validates registration
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1306
Source: 
> 		IGuardiansRegistration _guardianRegistrationContract = guardianRegistrationContract;
> 		(committee, weights, certification) = committeeContract.getCommittee();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		orbsAddrs = _guardianRegistrationContract.getGuardiansOrbsAddress(committee);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1325
Source: 
> 
> 		(address[] memory generalCommittee, uint256[] memory generalWeights, bool[] memory certification) = committeeContract.getCommittee();
>                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Elections
Line:        1357
Source: 
> 	function getVoteUnreadyStatus(address subject) external override view returns (address[] memory committee, uint256[] memory weights, bool[] memory certification, bool[] memory votes, bool subjectInCommittee, bool subjectInCertifiedCommittee) {
> 		(committee, weights, certification) = committeeContract.getCommittee();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1025
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1266
Source: 
> 
> 		committeeContract.removeMember(guardian);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1556
Source: 
> 		uint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);
> 		committeeContract.addMember(guardian, effectiveStake, certificationContract.isGuardianCertified(guardian));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1288
Source: 
> 		uint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);
> 		return committeeContract.checkAddMember(guardian, effectiveStake);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1307
Source: 
> 		(committee, weights, certification) = committeeContract.getCommittee();
> 		orbsAddrs = _guardianRegistrationContract.getGuardiansOrbsAddress(committee);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ips = _guardianRegistrationContract.getGuardianIps(committee);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1308
Source: 
> 		orbsAddrs = _guardianRegistrationContract.getGuardiansOrbsAddress(committee);
> 		ips = _guardianRegistrationContract.getGuardianIps(committee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1321
Source: 
> 
> 		address voter = guardianRegistrationContract.resolveGuardianAddress(msg.sender);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteUnreadyVotes[voter][subject] = voteExpiration;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1333
Source: 
> 			emit GuardianStatusUpdated(subject, false, false);
> 			committeeContract.removeMember(subject);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1387
Source: 
> 
> 		uint256 voterStake = delegationsContract.getDelegatedStake(voter);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1397
Source: 
> 
> 		uint totalStake = delegationsContract.getTotalDelegatedStake();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1681
Source: 
> 			emit GuardianStatusUpdated(subject, false, false);
> 			committeeContract.removeMember(subject);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1425
Source: 
> 		votedStake = accumulatedStakesForVoteOut[subject];
> 		totalDelegatedStake = delegationsContract.getTotalDelegatedStake();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1444
Source: 
> 
> 		committeeContract.memberWeightChange(delegate, effectiveStake);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1455
Source: 
> 		emit GuardianStatusUpdated(guardian, false, false);
> 		committeeContract.removeMember(guardian);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Elections
Line:        1463
Source: 
> 	function guardianCertificationChanged(address guardian, bool isCertified) external override onlyCertificationContract onlyWhenActive {
> 		committeeContract.memberCertificationChange(guardian, isCertified);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        815
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        957
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        1136
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        815
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        957
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        1136
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        815
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        957
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        1136
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Elections
Line:        1696
Source: 
> 
> 	ICommittee committeeContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	IDelegations delegationsContract;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Elections
Line:        1697
Source: 
> 	ICommittee committeeContract;
> 	IDelegations delegationsContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	IGuardiansRegistration guardianRegistrationContract;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Elections
Line:        1698
Source: 
> 	IDelegations delegationsContract;
> 	IGuardiansRegistration guardianRegistrationContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	ICertification certificationContract;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Elections
Line:        1699
Source: 
> 	IGuardiansRegistration guardianRegistrationContract;
> 	ICertification certificationContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Elections
Line:        1221
Source: 
> 	}
> 	Settings settings;
>  ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        868
Source: 
>         emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);
>         _registryAdmin = newRegistryAdmin;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Elections
Line:        1322
Source: 
> 		address voter = guardianRegistrationContract.resolveGuardianAddress(msg.sender);
> 		voteUnreadyVotes[voter][subject] = voteExpiration;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit VoteUnreadyCasted(voter, subject, voteExpiration);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Elections
Line:        1639
Source: 
> 		for (uint i = 0; i < committee.length; i++) {
> 			voteUnreadyVotes[committee[i]][subject] = 0; // clear vote-outs
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Elections
Line:        1677
Source: 
> 		if (shouldBeVotedOut) {
> 			votedOutGuardians[subject] = true;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit GuardianVotedOut(subject);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Elections
Line:        1684
Source: 
> 
> 		accumulatedStakesForVoteOut[subject] = accumulated;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Elections
Line:        1704
Source: 
> 	function refreshContracts() external override {
> 		committeeContract = ICommittee(getCommitteeContract());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delegationsContract = IDelegations(getDelegationsContract());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Elections
Line:        1705
Source: 
> 		committeeContract = ICommittee(getCommitteeContract());
> 		delegationsContract = IDelegations(getDelegationsContract());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		guardianRegistrationContract = IGuardiansRegistration(getGuardiansRegistrationContract());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Elections
Line:        1706
Source: 
> 		delegationsContract = IDelegations(getDelegationsContract());
> 		guardianRegistrationContract = IGuardiansRegistration(getGuardiansRegistrationContract());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		certificationContract = ICertification(getCertificationContract());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Elections
Line:        1707
Source: 
> 		guardianRegistrationContract = IGuardiansRegistration(getGuardiansRegistrationContract());
> 		certificationContract = ICertification(getCertificationContract());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        995
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1013
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1017
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1021
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1025
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1029
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1033
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1037
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1041
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1045
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1049
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1053
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1057
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1061
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1065
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1069
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1013
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1017
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1021
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1025
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1029
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1033
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1037
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1041
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1045
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1049
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1053
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1057
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1061
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1065
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1069
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1013
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1017
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1021
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1025
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1029
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1033
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1037
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1041
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1045
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1049
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1053
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1057
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1061
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1065
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1069
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1013
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1017
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1021
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1029
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1045
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1049
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1053
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1057
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1061
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1065
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        1069
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Elections
Line:        1266
Source: 
> 
> 		committeeContract.removeMember(guardian);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Elections
Line:        1556
Source: 
> 		uint256 effectiveStake = getGuardianEffectiveStake(guardian, settings);
> 		committeeContract.addMember(guardian, effectiveStake, certificationContract.isGuardianCertified(guardian));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Elections
Line:        1333
Source: 
> 			emit GuardianStatusUpdated(subject, false, false);
> 			committeeContract.removeMember(subject);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Elections
Line:        1681
Source: 
> 			emit GuardianStatusUpdated(subject, false, false);
> 			committeeContract.removeMember(subject);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Elections
Line:        1455
Source: 
> 		emit GuardianStatusUpdated(guardian, false, false);
> 		committeeContract.removeMember(guardian);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Elections
Line:        1344
Source: 
> 		expiration = voteUnreadyVotes[voter][subject];
> 		valid = expiration != 0 && block.timestamp < expiration;
>                              ^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Elections
Line:        1362
Source: 
> 			address memberAddr = committee[i];
> 			if (block.timestamp < voteUnreadyVotes[memberAddr][subject]) {
>        ^^^^^^^^^^^^^^^
> 				votes[i] = true;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Elections
Line:        1319
Source: 
> 	function voteUnready(address subject, uint voteExpiration) external override onlyWhenActive {
> 		require(voteExpiration >= block.timestamp, "vote expiration time must not be in the past");
>                             ^^^^^^^^^^^^^^^
> 

[0m
