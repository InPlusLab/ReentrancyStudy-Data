[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EtherCity2
Line:        180
Source: 
>         uint32 size;
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(_userId)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EtherCity2
Line:        606
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity2
Line:        18
Source: 
>     
>     EtherCity internal EtherCity_v1 = EtherCity(0xea1CdB66886CC2d0C6c60F8BbD4aEd37E6A88062);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity2
Line:        64
Source: 
>     
>     uint internal MatrixexpiresOn = 100 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        129
Source: 
>     
>     function newSignup(address _sponsor) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!allowSyncing, 'Registration Closed');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        174
Source: 
>     
>     function buyNewProperty(uint _matrixId) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_matrixId > 0 && _matrixId < 13, 'Wrong Matrix');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        334
Source: 
>     
>     function highestStage(address _userId) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint p = 12;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        476
Source: 
> 
>     function aDrawPool() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(admin),  'Permission Denied!');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        482
Source: 
>     
>     function computeSafety(address _userId, uint _level) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // require(_expiresOn <= block.timestamp, 'Wait expiration');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        506
Source: 
>     
>     function syncOldUsers() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowSyncing, 'closed');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        557
Source: 
>     
>     function closeSyncin() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == admin, 'Not Allowed!');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        563
Source: 
>     
>     function withdraw() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].afund > 0 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        595
Source: 
> 
>     function usersMatrix(address _userId, uint _level) public view returns(address, address[] memory, address[] memory, bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_userId].CityMatrix[_level].refBy,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity2
Line:        601
Source: 
>     
>     function stats() public view returns(uint lId, uint aU, uint rT, uint rTl, uint dE, uint lE, uint mI, uint mCI, uint jT, uint sF, uint pB){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (lastUserId, activeUsers, raisedToday, raisedTotal, distEarning, lostEarnings, matrixIncomes, matchIncomes, joinedToday, safety_funds, pool_balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        616
Source: 
> 
>     function getUserData(address _userId) public view returns(address _refBy, uint _refs, uint _myTeam, uint _earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        618
Source: 
> 
>     function isUserExists(address _userAddress) public view returns (bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        620
Source: 
>     
>     function usersActiveCityMatrix(address _userId, uint _level) public view returns(bool){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        622
Source: 
> 
>     function userMatrixExpiration(address _userId, uint _level) public view returns(uint){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        624
Source: 
> 
>     function usersMatrix(address _userId, uint _level) public view returns(address, address[] memory, address[] memory, bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        626
Source: 
>     
>     function highestStage(address _userId) public view returns(uint) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EtherCity2
Line:        493
Source: 
>         users[_userId].CityMatrix[_level].computed = true;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EtherCity2
Line:        511
Source: 
>         if(!isUserExists(_userId)){
>             (bool userXists) = EtherCity_v1.isUserExists(_userId);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(userXists){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EtherCity2
Line:        513
Source: 
>             if(userXists){
>                 (address _refBy, uint refs, uint _myTeam, uint earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning) = EtherCity_v1.getUserData(_userId);
>                                                                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 // Registered

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EtherCity2
Line:        570
Source: 
>         users[msg.sender].withdrawn += _amount;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EtherCity2
Line:        533
Source: 
>         if(isUserExists(_userId) && !users[_userId].isSynched){
>             for(uint i = 1; i <= EtherCity_v1.highestStage(_userId); i++){
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 (address _sponsor, address[] memory level1, address[] memory level2, bool status) = EtherCity_v1.usersMatrix(_userId, i);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EtherCity2
Line:        534
Source: 
>             for(uint i = 1; i <= EtherCity_v1.highestStage(_userId); i++){
>                 (address _sponsor, address[] memory level1, address[] memory level2, bool status) = EtherCity_v1.usersMatrix(_userId, i);
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if(status){

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EtherCity2
Line:        538
Source: 
>                     users[_userId].activeMember[i] = true;
>                     users[_userId].CityMatrix[i].expiresOn = EtherCity_v1.userMatrixExpiration(_userId, i);
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherCity2
Line:        129
Source: 
>     
>     function newSignup(address _sponsor) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!allowSyncing, 'Registration Closed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherCity2
Line:        334
Source: 
>     
>     function highestStage(address _userId) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint p = 12;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity2
Line:        591
Source: 
>     
>     function usersActiveCityMatrix(address _userId, uint _level) external view returns(bool active, uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_userId].activeMember[_level],  users[_userId].CityMatrix[_level].expiresOn);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity2
Line:        595
Source: 
> 
>     function usersMatrix(address _userId, uint _level) public view returns(address, address[] memory, address[] memory, bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_userId].CityMatrix[_level].refBy,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        616
Source: 
> 
>     function getUserData(address _userId) public view returns(address _refBy, uint _refs, uint _myTeam, uint _earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        618
Source: 
> 
>     function isUserExists(address _userAddress) public view returns (bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        620
Source: 
>     
>     function usersActiveCityMatrix(address _userId, uint _level) public view returns(bool){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        622
Source: 
> 
>     function userMatrixExpiration(address _userId, uint _level) public view returns(uint){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        624
Source: 
> 
>     function usersMatrix(address _userId, uint _level) public view returns(address, address[] memory, address[] memory, bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        626
Source: 
>     
>     function highestStage(address _userId) public view returns(uint) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity2
Line:        464
Source: 
>         for(uint i = 0; i < 5; i++){
>            uint _amount = pool_balance * poolPrizes[i + 1] / divider;
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            users[pool_lead[i]].afund += _amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity2
Line:        469
Source: 
>         
>         pool_balance -= pool_balance * poolShare  / divider;
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity2
Line:        427
Source: 
>             
>             uint rpay = _amount * system / divider;
>                         ^^^^^^^^^^^^^^^^
>             pay = rpay  / 4;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity2
Line:        431
Source: 
>             // pool_balance += SafeMath.mul(_amount, SafeMath.div(poolR, divider));
>             safety_funds += _amount * safetyR / divider;
>                             ^^^^^^^^^^^^^^^^^
>             pool_balance += _amount * poolR / divider;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity2
Line:        432
Source: 
>             safety_funds += _amount * safetyR / divider;
>             pool_balance += _amount * poolR / divider;
>                             ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity2
Line:        487
Source: 
>         uint _amount = users[_userId].afund + earningsRatio(_userId, _level);
>         require(address(this).balance > _amount + _amount * 15  / divider, 'Unavailable Funds!');
>                                                   ^^^^^^^^^^^^
>         users[_userId].afund = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EtherCity2
Line:        493
Source: 
>         users[_userId].CityMatrix[_level].computed = true;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EtherCity2
Line:        570
Source: 
>         users[msg.sender].withdrawn += _amount;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        18
Source: 
>     
>     EtherCity internal EtherCity_v1 = EtherCity(0xea1CdB66886CC2d0C6c60F8BbD4aEd37E6A88062);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        56
Source: 
>     mapping(uint => address) public userIds;
>     mapping(uint => address) public pool_lead;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        60
Source: 
>     mapping(uint => uint) internal poolPrizes;
>     mapping(uint => mapping(address => uint)) internal pool_users_balance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal pool_last_draw = uint(block.timestamp);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        61
Source: 
>     mapping(uint => mapping(address => uint)) internal pool_users_balance;
>     uint internal pool_last_draw = uint(block.timestamp);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal nexpool = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        64
Source: 
>     
>     uint internal MatrixexpiresOn = 100 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        75
Source: 
>     uint internal joinedToday;
>     uint internal pool_balance = 0 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal safety_funds = 0 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        76
Source: 
>     uint internal pool_balance = 0 ether;
>     uint internal safety_funds = 0 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal lastUpdate = uint(block.timestamp);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        82
Source: 
> 
>     uint internal constant dre    = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant refs1  = 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        83
Source: 
>     uint internal constant dre    = 10;
>     uint internal constant refs1  = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant refs1b = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        84
Source: 
>     uint internal constant refs1  = 10;
>     uint internal constant refs1b = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant refs2  = 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        85
Source: 
>     uint internal constant refs1b = 5;
>     uint internal constant refs2  = 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant refs2b = 15;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        86
Source: 
>     uint internal constant refs2  = 30;
>     uint internal constant refs2b = 15;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant system = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        87
Source: 
>     uint internal constant refs2b = 15;
>     uint internal constant system = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant safetyR = 20;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        88
Source: 
>     uint internal constant system = 5;
>     uint internal constant safetyR = 20;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant poolR = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        89
Source: 
>     uint internal constant safetyR = 20;
>     uint internal constant poolR = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant poolShare = 15;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        90
Source: 
>     uint internal constant poolR = 5;
>     uint internal constant poolShare = 15;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal constant divider = 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        91
Source: 
>     uint internal constant poolShare = 15;
>     uint internal constant divider = 100;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        131
Source: 
>         require(!allowSyncing, 'Registration Closed');
>         address _userId = msg.sender;
>         ^^^^^^^^^^^^^^^
>         require(msg.value == levelPrice[1], 'To register you Must Buy House 1 which costs 0.025 ether');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        176
Source: 
>         require(_matrixId > 0 && _matrixId < 13, 'Wrong Matrix');
>         address _userId = msg.sender;
>         ^^^^^^^^^^^^^^^
>         require(isUserExists(_userId), 'You Must be a Registered Member');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        198
Source: 
>         
>         uint _level = _matrixId;
>         ^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        214
Source: 
>             // Renewal
>             address _firstUpline = users[_userId].CityMatrix[_level].refBy;
>             ^^^^^^^^^^^^^^^^^^^^
>             address _secondUpline = users[_firstUpline].refBy;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        215
Source: 
>             address _firstUpline = users[_userId].CityMatrix[_level].refBy;
>             address _secondUpline = users[_firstUpline].refBy;
>             ^^^^^^^^^^^^^^^^^^^^^
>             processLevel(_firstUpline, _secondUpline, _level);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        247
Source: 
>         address upline = users[_userId].refBy;
>         uint _amount = levelPrice[_level];
>         ^^^^^^^^^^^^
>         if(upline != address(0)){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        355
Source: 
>         users[_upline].CityMatrix[_level].refs1.push(_userId); // Level 1
>         address _upline2 = users[_upline].CityMatrix[_level].refBy;
>         ^^^^^^^^^^^^^^^^
>         users[_upline2].CityMatrix[_level].refs2.push(_userId); // Level 2

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        438
Source: 
>         for(uint m = 2; m <= 5; m++){
>             address _admin = userIds[m];
>             ^^^^^^^^^^^^^^
>             users[_admin].afund += pay;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        464
Source: 
>         for(uint i = 0; i < 5; i++){
>            uint _amount = pool_balance * poolPrizes[i + 1] / divider;
>            ^^^^^^^^^^^^
>            users[pool_lead[i]].afund += _amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        486
Source: 
>         require(!users[_userId].CityMatrix[_level].computed, 'Already Computed!');
>         uint _amount = users[_userId].afund + earningsRatio(_userId, _level);
>         ^^^^^^^^^^^^
>         require(address(this).balance > _amount + _amount * 15  / divider, 'Unavailable Funds!');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        509
Source: 
>         // GetUserAddress
>         address _userId = msg.sender;
>         ^^^^^^^^^^^^^^^
>         if(!isUserExists(_userId)){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        513
Source: 
>             if(userXists){
>                 (address _refBy, uint refs, uint _myTeam, uint earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning) = EtherCity_v1.getUserData(_userId);
>                  ^^^^^^^^^^^^^^
>                 // Registered

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        513
Source: 
>             if(userXists){
>                 (address _refBy, uint refs, uint _myTeam, uint earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning) = EtherCity_v1.getUserData(_userId);
>                                             ^^^^^^^^^^^^
>                 // Registered

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        513
Source: 
>             if(userXists){
>                 (address _refBy, uint refs, uint _myTeam, uint earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning) = EtherCity_v1.getUserData(_userId);
>                                                                          ^^^^^^^^^^^^^^^
>                 // Registered

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        513
Source: 
>             if(userXists){
>                 (address _refBy, uint refs, uint _myTeam, uint earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning) = EtherCity_v1.getUserData(_userId);
>                                                                                           ^^^^^^^^^^^^^^^
>                 // Registered

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        513
Source: 
>             if(userXists){
>                 (address _refBy, uint refs, uint _myTeam, uint earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning) = EtherCity_v1.getUserData(_userId);
>                                                                                                            ^^^^^^^^^^^^^^^^
>                 // Registered

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        513
Source: 
>             if(userXists){
>                 (address _refBy, uint refs, uint _myTeam, uint earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning) = EtherCity_v1.getUserData(_userId);
>                                                                                                                              ^^^^^^^^^^^^^^^^^^^
>                 // Registered

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        534
Source: 
>             for(uint i = 1; i <= EtherCity_v1.highestStage(_userId); i++){
>                 (address _sponsor, address[] memory level1, address[] memory level2, bool status) = EtherCity_v1.usersMatrix(_userId, i);
>                  ^^^^^^^^^^^^^^^^
>                 if(status){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity2
Line:        567
Source: 
>         'Low Balance');
>         uint _amount = users[msg.sender].afund;
>         ^^^^^^^^^^^^
>         users[msg.sender].afund = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        14
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherCity2
Line:        493
Source: 
>         users[_userId].CityMatrix[_level].computed = true;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherCity2
Line:        570
Source: 
>         users[msg.sender].withdrawn += _amount;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherCity2
Line:        493
Source: 
>         users[_userId].CityMatrix[_level].computed = true;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherCity2
Line:        570
Source: 
>         users[msg.sender].withdrawn += _amount;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EtherCity2
Line:        511
Source: 
>         if(!isUserExists(_userId)){
>             (bool userXists) = EtherCity_v1.isUserExists(_userId);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(userXists){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EtherCity2
Line:        533
Source: 
>         if(isUserExists(_userId) && !users[_userId].isSynched){
>             for(uint i = 1; i <= EtherCity_v1.highestStage(_userId); i++){
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 (address _sponsor, address[] memory level1, address[] memory level2, bool status) = EtherCity_v1.usersMatrix(_userId, i);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EtherCity2
Line:        513
Source: 
>             if(userXists){
>                 (address _refBy, uint refs, uint _myTeam, uint earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning) = EtherCity_v1.getUserData(_userId);
>                                                                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 // Registered

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EtherCity2
Line:        534
Source: 
>             for(uint i = 1; i <= EtherCity_v1.highestStage(_userId); i++){
>                 (address _sponsor, address[] memory level1, address[] memory level2, bool status) = EtherCity_v1.usersMatrix(_userId, i);
>                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if(status){

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EtherCity2
Line:        538
Source: 
>                     users[_userId].activeMember[i] = true;
>                     users[_userId].CityMatrix[i].expiresOn = EtherCity_v1.userMatrixExpiration(_userId, i);
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    EtherCity2
Line:        183
Source: 
>         }
>         require(size == 0, "cannot be a contract");
>                 ^^^^
>         bool canJoin = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    EtherCity2
Line:        74
Source: 
>     uint internal matchIncomes = 0 ether;
>     uint internal joinedToday;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint internal pool_balance = 0 ether;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EtherCity2
Line:        493
Source: 
>         users[_userId].CityMatrix[_level].computed = true;
>         address(uint160(msg.sender)).transfer(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        165
Source: 
>         
>         users[_userId] = user;
>         ^^^^^^^^^^^^^^^^^^^^^
>         idToAddress[lastUserId] = _userId;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        137
Source: 
>         registration(_userId, _sponsor);
>         activeUsers++;
>         ^^^^^^^^^^^^^
>         joinedToday++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        138
Source: 
>         activeUsers++;
>         joinedToday++;
>         ^^^^^^^^^^^^^
>         lastUserId++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        139
Source: 
>         joinedToday++;
>         lastUserId++;
>         ^^^^^^^^^^^^
>         updateTeamData(_userId);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        203
Source: 
>         if(users[_userId].CityMatrix[_level].expiresOn < block.timestamp || users[_userId].CityMatrix[_level].expiresOn == 0){
>             users[_userId].CityMatrix[_level].expiresOn = uint(block.timestamp) + MatrixexpiresOn;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        209
Source: 
>         uint payDre = cost * dre / divider;
>         users[users[_userId].refBy].dreEarnings += payDre;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dividentDistribution(users[_userId].refBy, payDre, _level);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        217
Source: 
>             processLevel(_firstUpline, _secondUpline, _level);
>             users[_userId].CityMatrix[_level].reinvestCount++;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        226
Source: 
>         
>         users[_userId].CityMatrix[_level].computed = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        230
Source: 
>         
>         raisedToday += cost;
>         ^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        233
Source: 
>         if(block.timestamp >= lastUpdate + 1 days){
>             joinedToday = 0;
>             ^^^^^^^^^^^^^^^
>             raisedToday = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        234
Source: 
>             joinedToday = 0;
>             raisedToday = 0;
>             ^^^^^^^^^^^^^^^
>             lastUpdate = uint(block.timestamp);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        235
Source: 
>             raisedToday = 0;
>             lastUpdate = uint(block.timestamp);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        237
Source: 
>         }
>         raisedTotal += cost;
>         ^^^^^^^^^^^^^^^^^^^
>         if(block.timestamp >= pool_last_draw + 7 days){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        461
Source: 
>     function drawPool() internal {
>         pool_last_draw = uint(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nexpool++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        462
Source: 
>         pool_last_draw = uint(block.timestamp);
>         nexpool++;
>         ^^^^^^^^^
>         for(uint i = 0; i < 5; i++){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        465
Source: 
>            uint _amount = pool_balance * poolPrizes[i + 1] / divider;
>            users[pool_lead[i]].afund += _amount;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            users[pool_lead[i]].pool_bonus += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        466
Source: 
>            users[pool_lead[i]].afund += _amount;
>            users[pool_lead[i]].pool_bonus += _amount;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        469
Source: 
>         
>         pool_balance -= pool_balance * poolShare  / divider;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        472
Source: 
>         for(uint8 i = 0; i < 5; i++) {
>             pool_lead[i] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        431
Source: 
>             // pool_balance += SafeMath.mul(_amount, SafeMath.div(poolR, divider));
>             safety_funds += _amount * safetyR / divider;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             pool_balance += _amount * poolR / divider;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        432
Source: 
>             safety_funds += _amount * safetyR / divider;
>             pool_balance += _amount * poolR / divider;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        439
Source: 
>             address _admin = userIds[m];
>             users[_admin].afund += pay;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        403
Source: 
>         uint payMb = _amount * refsb / divider;
>         users[_userId].matchingBonus += payMb;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         matchIncomes += payMb;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        404
Source: 
>         users[_userId].matchingBonus += payMb;
>         matchIncomes += payMb;
>         ^^^^^^^^^^^^^^^^^^^^^
>         dividentDistribution(checkBeneficiary(_userId, _level, 2, payMb), payMb, _level);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        417
Source: 
>         }
>         distEarning += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         // Emit Earnings Received

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        414
Source: 
>             // address(uint160(_userId)).transfer(_amount);
>             users[_userId].afund += _amount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_userId].CityMatrix[_level].earnings += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        415
Source: 
>             users[_userId].afund += _amount;
>             users[_userId].CityMatrix[_level].earnings += _amount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        451
Source: 
>             if(_type == 1){
>                 users[_userId].missedEarnings += _amount;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        455
Source: 
>             }
>             lostEarnings += _amount;
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             _beneficiary = userIds[1];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        453
Source: 
>             }else{
>                 users[_userId].missedBonus += _amount;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        579
Source: 
>         if(!users[_userId].activeMember[_level] || users[_userId].CityMatrix[_level].expiresOn < now){
>             users[_userId].activeMember[_level] = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_userId].CityMatrix[_level].active = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        580
Source: 
>             users[_userId].activeMember[_level] = false;
>             users[_userId].CityMatrix[_level].active = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        381
Source: 
>         uint payLevel = _amount * refsc / divider;
>         users[_userId].matrixEarnings += payLevel;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         matrixIncomes += payLevel;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        382
Source: 
>         users[_userId].matrixEarnings += payLevel;
>         matrixIncomes += payLevel;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address beneficiray;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        219
Source: 
>         }else{
>             users[_userId].activeMember[_level] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_userId].CityMatrix[_level].active = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        220
Source: 
>             users[_userId].activeMember[_level] = true;
>             users[_userId].CityMatrix[_level].active = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_userId].CityMatrix[_level].reinvestCount = 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        221
Source: 
>             users[_userId].CityMatrix[_level].active = true;
>             users[_userId].CityMatrix[_level].reinvestCount = 1;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // update Upline

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        353
Source: 
>     function updateMatrixUpliner(address _userId, address _upline, uint _level) internal {
>         users[_userId].CityMatrix[_level].refBy = _upline;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_upline].CityMatrix[_level].refs1.push(_userId); // Level 1

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        354
Source: 
>         users[_userId].CityMatrix[_level].refBy = _upline;
>         users[_upline].CityMatrix[_level].refs1.push(_userId); // Level 1
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _upline2 = users[_upline].CityMatrix[_level].refBy;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        356
Source: 
>         address _upline2 = users[_upline].CityMatrix[_level].refBy;
>         users[_upline2].CityMatrix[_level].refs2.push(_userId); // Level 2
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         processLevel(_upline, _upline2, _level);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        205
Source: 
>         }else{
>             users[_userId].CityMatrix[_level].expiresOn += MatrixexpiresOn;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        249
Source: 
>         if(upline != address(0)){
>             users[upline].teamvolume += _amount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             pool_users_balance[nexpool][upline] += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        250
Source: 
>             users[upline].teamvolume += _amount;
>             pool_users_balance[nexpool][upline] += _amount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             for(uint i = 0; i < 5; i++){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        256
Source: 
>                 else if(pool_lead[i] == address(0)){
>                     pool_lead[i] = upline;
>                     ^^^^^^^^^^^^^^^^^^^^^
>                     break;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        263
Source: 
>                             for(uint k = p; k <= 5; k++){
>                                 pool_lead[k] = pool_lead[k + 1];
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        270
Source: 
>                     for(uint p = 4; p > i; p--) {
>                         pool_lead[p] = pool_lead[p - 1];
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        273
Source: 
>     
>                     pool_lead[i] = upline;
>                     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        346
Source: 
>         while(users[_userId].refBy != address(0)){
>             users[users[_userId].refBy].teamCount++;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _userId = users[_userId].refBy;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        490
Source: 
>         users[msg.sender].withdrawn += _amount;
>         safety_funds -= earningsRatio(_userId, _level);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_userId].CityMatrix[_level].earnings += earningsRatio(_userId, _level);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        516
Source: 
>                 registration(_userId, _refBy);
>                 users[_userId].isSynched = false;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_userId].withdrawn = earnings;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        517
Source: 
>                 users[_userId].isSynched = false;
>                 users[_userId].withdrawn = earnings;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_userId].dreEarnings = _dearnings;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        518
Source: 
>                 users[_userId].withdrawn = earnings;
>                 users[_userId].dreEarnings = _dearnings;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_userId].matrixEarnings = _mearnings;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        519
Source: 
>                 users[_userId].dreEarnings = _dearnings;
>                 users[_userId].matrixEarnings = _mearnings;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_userId].missedEarnings = _missedEarning * 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        520
Source: 
>                 users[_userId].matrixEarnings = _mearnings;
>                 users[_userId].missedEarnings = _missedEarning * 0;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_userId].matchingBonus = _maearnings;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        521
Source: 
>                 users[_userId].missedEarnings = _missedEarning * 0;
>                 users[_userId].matchingBonus = _maearnings;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_userId].refsCount = refs;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        522
Source: 
>                 users[_userId].matchingBonus = _maearnings;
>                 users[_userId].refsCount = refs;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_userId].teamCount = _myTeam;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        523
Source: 
>                 users[_userId].refsCount = refs;
>                 users[_userId].teamCount = _myTeam;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 lastUserId++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        524
Source: 
>                 users[_userId].teamCount = _myTeam;
>                 lastUserId++;
>                 ^^^^^^^^^^^^
>                 // Restructure Matrix Here

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        536
Source: 
>                 if(status){
>                     users[_userId].CityMatrix[i].active = true;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     users[_userId].activeMember[i] = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        537
Source: 
>                     users[_userId].CityMatrix[i].active = true;
>                     users[_userId].activeMember[i] = true;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     users[_userId].CityMatrix[i].expiresOn = EtherCity_v1.userMatrixExpiration(_userId, i);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        538
Source: 
>                     users[_userId].activeMember[i] = true;
>                     users[_userId].CityMatrix[i].expiresOn = EtherCity_v1.userMatrixExpiration(_userId, i);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        540
Source: 
>                     
>                     users[_userId].CityMatrix[i].refBy = _sponsor;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        543
Source: 
>                     for(uint d = 0; d < level1.length; d++){
>                        users[_userId].CityMatrix[i].refs1.push(level1[d]);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        547
Source: 
>                     for(uint e = 0; e < level2.length; e++){
>                         users[_userId].CityMatrix[i].refs2.push(level2[e]);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        552
Source: 
>             
>             users[_userId].isSynched = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             lastSynched++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity2
Line:        553
Source: 
>             users[_userId].isSynched = true;
>             lastSynched++;
>             ^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        166
Source: 
>         users[_userId] = user;
>         idToAddress[lastUserId] = _userId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userIds[lastUserId] = _userId;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        167
Source: 
>         idToAddress[lastUserId] = _userId;
>         userIds[lastUserId] = _userId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_userId].refBy = _sponsor;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        168
Source: 
>         userIds[lastUserId] = _userId;
>         users[_userId].refBy = _sponsor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        170
Source: 
>         
>         users[_sponsor].refs.push(_userId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_sponsor].refsCount++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        171
Source: 
>         users[_sponsor].refs.push(_userId);
>         users[_sponsor].refsCount++;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        488
Source: 
>         require(address(this).balance > _amount + _amount * 15  / divider, 'Unavailable Funds!');
>         users[_userId].afund = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         users[msg.sender].withdrawn += _amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        489
Source: 
>         users[_userId].afund = 0;
>         users[msg.sender].withdrawn += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         safety_funds -= earningsRatio(_userId, _level);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        491
Source: 
>         safety_funds -= earningsRatio(_userId, _level);
>         users[_userId].CityMatrix[_level].earnings += earningsRatio(_userId, _level);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_userId].CityMatrix[_level].computed = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity2
Line:        492
Source: 
>         users[_userId].CityMatrix[_level].earnings += earningsRatio(_userId, _level);
>         users[_userId].CityMatrix[_level].computed = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(msg.sender)).transfer(_amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EtherCity2
Line:        538
Source: 
>                     users[_userId].activeMember[i] = true;
>                     users[_userId].CityMatrix[i].expiresOn = EtherCity_v1.userMatrixExpiration(_userId, i);
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EtherCity2
Line:        93
Source: 
>     
>     address internal vaultMissed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address internal contractor;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EtherCity2
Line:        461
Source: 
>     function drawPool() internal {
>         pool_last_draw = uint(block.timestamp);
>                               ^^^^^^^^^^^^^^^
>         nexpool++;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EtherCity2
Line:        478
Source: 
>         require(msg.sender == address(admin),  'Permission Denied!');
>         require(block.timestamp >= pool_last_draw + 7 days, 'Weekly Only!');
>                 ^^^^^^^^^^^^^^^
>         drawPool();

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EtherCity2
Line:        484
Source: 
>         // require(_expiresOn <= block.timestamp, 'Wait expiration');
>         require(block.timestamp >= users[_userId].CityMatrix[_level].expiresOn && earningsRatio(_userId, _level) > 0, 'Wait expiration!');
>                 ^^^^^^^^^^^^^^^
>         require(!users[_userId].CityMatrix[_level].computed, 'Already Computed!');

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EtherCity2
Line:        61
Source: 
>     mapping(uint => mapping(address => uint)) internal pool_users_balance;
>     uint internal pool_last_draw = uint(block.timestamp);
>                                         ^^^^^^^^^^^^^^^
>     uint internal nexpool = 1;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    EtherCity2
Line:        202
Source: 
> 
>         if(users[_userId].CityMatrix[_level].expiresOn < block.timestamp || users[_userId].CityMatrix[_level].expiresOn == 0){
>                                                          ^^^^^^^^^^^^^^^
>             users[_userId].CityMatrix[_level].expiresOn = uint(block.timestamp) + MatrixexpiresOn;

[0m
