[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    UniTopia
Line:        75
Source: 
>   event TransferPoolamount(address _from, address _to, uint256 _ether);
>   event Approval(address _from, address _spender, uint256 _tokenAmt);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        40
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        45
Source: 
>     //this flow is to prevent transferring ownership to wrong wallet by mistake
>     function acceptOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        40
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        45
Source: 
>     //this flow is to prevent transferring ownership to wrong wallet by mistake
>     function acceptOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        85
Source: 
>   
>   function buyToken() payable public returns(bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        103
Source: 
>   
>   function withDraw() public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        112
Source: 
>   
>   function tokenSold() public view returns(uint256)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        117
Source: 
>   
>   function totalEther() public view returns(uint256)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        122
Source: 
>   
>   function availableToken() public view returns(uint256)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        127
Source: 
> 
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        131
Source: 
> 
>   function balanceOf(address player) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[player];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        135
Source: 
> 
>   function allowance(address player, address spender) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return allowed[player][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        152
Source: 
> 
>   function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint256 i = 0; i < receivers.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        158
Source: 
> 
>   function approve(address spender, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
> 
>   function transferFrom(address from, address to, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(value <= balances[from]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        186
Source: 
> 
>   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        193
Source: 
> 
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        208
Source: 
>   
>   function changeSafeGuard() public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       safeGuard=true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    owned
Line:        40
Source: 
> 
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         newOwner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniTopia
Line:        152
Source: 
> 
>   function multiTransfer(address[] memory receivers, uint256[] memory amounts) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint256 i = 0; i < receivers.length; i++) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniTopia
Line:        186
Source: 
> 
>   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniTopia
Line:        193
Source: 
> 
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniTopia
Line:        131
Source: 
> 
>   function balanceOf(address player) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[player];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniTopia
Line:        135
Source: 
> 
>   function allowance(address player, address spender) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return allowed[player][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniTopia
Line:        158
Source: 
> 
>   function approve(address spender, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniTopia
Line:        91
Source: 
>       
>       uint256 tknAmount=one*msg.value;
>                         ^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    UniTopia
Line:        106
Source: 
>       require(Pool[owner]!=0,"No Ether Available");
>       owner.transfer(Pool[owner]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    owned
Line:        24
Source: 
> 
> contract owned {
> ^^^^^^^^^^^^^^^^
>     address  payable public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        61
Source: 
>   mapping (address => mapping (address => uint256)) private allowed;
>   string public constant name  = "UniTopia";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public constant symbol = "uTOPIA";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        62
Source: 
>   string public constant name  = "UniTopia";
>   string public constant symbol = "uTOPIA";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        63
Source: 
>   string public constant symbol = "uTOPIA";
>   uint8 public constant decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        67
Source: 
> 
>   uint256 public _totalSupply;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public tokenPrice;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        71
Source: 
>   
>   mapping(address=>uint256) public Pool;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    UniTopia
Line:        106
Source: 
>       require(Pool[owner]!=0,"No Ether Available");
>       owner.transfer(Pool[owner]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UniTopia
Line:        106
Source: 
>       require(Pool[owner]!=0,"No Ether Available");
>       owner.transfer(Pool[owner]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UniTopia
Line:        106
Source: 
>       require(Pool[owner]!=0,"No Ether Available");
>       owner.transfer(Pool[owner]);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    owned
Line:        26
Source: 
>     address  payable public owner;
>     address payable internal newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UniTopia
Line:        69
Source: 
>   uint256 public tokenPrice;
>   uint256 public soldTokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UniTopia
Line:        97
Source: 
>       //_totalSupply-=tknAmount;
>       Pool[owner]+=msg.value;
>       ^^^^^^^^^^^^^^^^^^^^^^
>       soldTokens+=tknAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UniTopia
Line:        98
Source: 
>       Pool[owner]+=msg.value;
>       soldTokens+=tknAmount;
>       ^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniTopia
Line:        160
Source: 
>     require(spender != address(0));
>     allowed[msg.sender][spender] = value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniTopia
Line:        188
Source: 
>     require(spender != address(0));
>     allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, allowed[msg.sender][spender]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniTopia
Line:        195
Source: 
>     require(spender != address(0));
>     allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, allowed[msg.sender][spender]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMath
Line:        246
Source: 
>     uint256 d = sub(c,1);
>     return mul(div(d,m),m);
>                ^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UniTopia
Line:        61
Source: 
>   mapping (address => mapping (address => uint256)) private allowed;
>   string public constant name  = "UniTopia";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public constant symbol = "uTOPIA";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UniTopia
Line:        62
Source: 
>   string public constant name  = "UniTopia";
>   string public constant symbol = "uTOPIA";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UniTopia
Line:        63
Source: 
>   string public constant symbol = "uTOPIA";
>   uint8 public constant decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
