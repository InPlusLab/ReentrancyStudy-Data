Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Proxiable
Line:        16
Source: 
>         );
>         assembly { // solium-disable-line
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SafeTransfer
Line:        170
Source: 
>         _token.transfer(_to, _value);
>         assembly {
>         ^^^^^^^^^^
>         switch returndatasize()

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SafeTransfer
Line:        194
Source: 
>         _token.transferFrom(_from, _to, _value);
>         assembly {
>         ^^^^^^^^^^
>         switch returndatasize()

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    License
Line:        420
Source: 
>     function _abiDecodeBuy(bytes memory _data) internal pure returns(bytes4 sig) {
>         assembly {
>         ^^^^^^^^^^
>             sig := mload(add(_data, add(0x20, 0)))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MessageSigned
Line:        708
Source: 
>         // Compact means, uint8 is not padded to 32 bytes.
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(_signature, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1650
Source: 
>     {
>         assembly {
>         ^^^^^^^^^^
>             memoryAddress := input

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1664
Source: 
>     {
>         assembly {
>         ^^^^^^^^^^
>             memoryAddress := add(input, 32)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1686
Source: 
>             // This correctly handles overlap, zero lengths and source == dest
>             assembly {
>             ^^^^^^^^^^
>                 let mask := sub(exp(256, sub(32, length)), 1)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1714
Source: 
>             if (source > dest) {
>                 assembly {
>                 ^^^^^^^^^^
>                     // We subtract 32 from `sEnd` and `dEnd` because it

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1743
Source: 
>             } else {
>                 assembly {
>                 ^^^^^^^^^^
>                     // We subtract 32 from `sEnd` and `dEnd` because those

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1835
Source: 
>         // Create a new bytes structure around [from, to) in-place.
>         assembly {
>         ^^^^^^^^^^
>             result := add(b, from)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1858
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             // Decrement length of byte array.

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1882
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             // Subtract 20 from byte array length.

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1931
Source: 
>         // Read address from array memory
>         assembly {
>         ^^^^^^^^^^
>             // 1. Add index to address of bytes array

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        1963
Source: 
>         // Store address into array memory
>         assembly {
>         ^^^^^^^^^^
>             // The address occupies 20 bytes and mstore stores 32 bytes.

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        2007
Source: 
>         // Read the bytes32 from array memory
>         assembly {
>         ^^^^^^^^^^
>             result := mload(add(b, index))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        2034
Source: 
>         // Read the bytes32 from array memory
>         assembly {
>         ^^^^^^^^^^
>             mstore(add(b, index), input)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        2091
Source: 
>         // Read the bytes4 from array memory
>         assembly {
>         ^^^^^^^^^^
>             result := mload(add(b, index))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibBytes
Line:        2126
Source: 
>         // Return a pointer to the byte array as it exists inside `b`
>         assembly {
>         ^^^^^^^^^^
>             result := add(b, index)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EscrowRelay
Line:        2422
Source: 
> 
>     assembly {
>     ^^^^^^^^^^
>       fSign := mload(add(abiEncodedFunc, add(0x20, 0)))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Proxiable
Line:        21
Source: 
>     }
>     function proxiableUUID() public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Proxiable
Line:        21
Source: 
>     }
>     function proxiableUUID() public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        332
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        341
Source: 
>      */
>     function isLicenseOwner(address _address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return licenseDetails[_address].price != 0 && licenseDetails[_address].creationTime != 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        403
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Proxiable
Line:        21
Source: 
>     }
>     function proxiableUUID() public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        332
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        403
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        503
Source: 
>      */
>     function changeAcceptAny(bool _acceptAny) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Message sender should have a valid arbitrator license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        515
Source: 
>      */
>     function requestArbitrator(address _arbitrator) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(isLicenseOwner(_arbitrator), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        552
Source: 
>      */
>     function acceptRequest(bytes32 _id) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        570
Source: 
>      */
>     function rejectRequest(bytes32 _id) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        590
Source: 
>      */
>     function cancelRequest(bytes32 _id) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(requests[_id].seller == msg.sender,  "This request id does not belong to the message sender");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        609
Source: 
>      */
>     function blacklistSeller(address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        621
Source: 
>      */
>     function unBlacklistSeller(address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        634
Source: 
>      */
>     function isAllowed(address _seller, address _arbitrator) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (arbitratorlicenseDetails[_arbitrator].acceptAny && !blacklist[_arbitrator][_seller]) || permissions[_arbitrator][_seller];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        645
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SecuredFunctions
Line:        743
Source: 
>      */
>     function setAllowedContract (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _contract,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stakable
Line:        831
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Proxiable
Line:        21
Source: 
>     }
>     function proxiableUUID() public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SecuredFunctions
Line:        743
Source: 
>      */
>     function setAllowedContract (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _contract,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stakable
Line:        831
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetadataStore
Line:        984
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetadataStore
Line:        995
Source: 
>      */
>     function setLicenses(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address _sellingLicenses,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetadataStore
Line:        1151
Source: 
>     */
>     function addOffer(
>     ^^^^^^^^^^^^^^^^^^
>         address _asset,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RelayRecipient
Line:        2238
Source: 
> 
>     function getMessageData() public view returns (bytes memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory origMsgData = msg.data;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EscrowRelay
Line:        2336
Source: 
>    */
>   function createEscrow(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     uint _offerId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EscrowRelay
Line:        2391
Source: 
>    */
>   function openCase(uint _escrowId, uint8 _motive) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address sender = getSender();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Stakable
Line:        848
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Stakable
Line:        888
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    MetadataStore
Line:        1166
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    EscrowRelay
Line:        2346
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrowId = escrow.createEscrow_relayed(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          address(uint160(sender)),

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    EscrowRelay
Line:        2383
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrow.cancel_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        848
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        867
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        888
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        848
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        867
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        888
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        144
Source: 
>      */
>     function transferOwnership(address _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    License
Line:        383
Source: 
>     */
>     function setPrice(uint256 _price) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price = _price;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        144
Source: 
>      */
>     function transferOwnership(address _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    License
Line:        316
Source: 
>      */
>     function init(
>     ^^^^^^^^^^^^^^
>         address _tokenAddress,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    License
Line:        383
Source: 
>     */
>     function setPrice(uint256 _price) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price = _price;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ArbitrationLicense
Line:        645
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        144
Source: 
>      */
>     function transferOwnership(address _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Stakable
Line:        788
Source: 
>      */
>     function setBurnAddress(address payable _burnAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BurnAddressChanged(msg.sender, burnAddress, _burnAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetadataStore
Line:        1230
Source: 
>      */
>     function offer(uint256 _id) external view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address asset,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetadataStore
Line:        1313
Source: 
>      */
>     function slashStake(uint _offerId) external onlyAllowedContracts {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _slash(_offerId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetadataStore
Line:        1321
Source: 
>      */
>     function refundStake(uint _offerId) external onlyAllowedContracts {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _refundStake(_offerId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        144
Source: 
>      */
>     function transferOwnership(address _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EscrowRelay
Line:        2314
Source: 
>    */
>   function setRelayHubAddress(address _relayHub) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     setRelayHub(IRelayHub(_relayHub));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EscrowRelay
Line:        2361
Source: 
>    */
>   function pay(uint _escrowId) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address sender = getSender();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EscrowRelay
Line:        2371
Source: 
>    */
>   function rateTransaction(uint _escrowId, uint _rate) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address sender = getSender();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EscrowRelay
Line:        2380
Source: 
>    */
>   function cancel(uint _escrowId) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address sender = getSender();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EscrowRelay
Line:        2391
Source: 
>    */
>   function openCase(uint _escrowId, uint8 _motive) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address sender = getSender();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        316
Source: 
>      */
>     function init(
>     ^^^^^^^^^^^^^^
>         address _tokenAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        332
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        341
Source: 
>      */
>     function isLicenseOwner(address _address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return licenseDetails[_address].price != 0 && licenseDetails[_address].creationTime != 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        403
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        332
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        341
Source: 
>      */
>     function isLicenseOwner(address _address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return licenseDetails[_address].price != 0 && licenseDetails[_address].creationTime != 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        403
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        484
Source: 
>      */
>     function buy(bool _acceptAny) external returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _buy(msg.sender, _acceptAny);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        544
Source: 
>      */
>     function getId(address _arbitrator, address _account) external pure returns(bytes32){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keccak256(abi.encodePacked(_arbitrator,_account));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        609
Source: 
>      */
>     function blacklistSeller(address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        621
Source: 
>      */
>     function unBlacklistSeller(address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        634
Source: 
>      */
>     function isAllowed(address _seller, address _arbitrator) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (arbitratorlicenseDetails[_arbitrator].acceptAny && !blacklist[_arbitrator][_seller]) || permissions[_arbitrator][_seller];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SecuredFunctions
Line:        743
Source: 
>      */
>     function setAllowedContract (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _contract,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        788
Source: 
>      */
>     function setBurnAddress(address payable _burnAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BurnAddressChanged(msg.sender, burnAddress, _burnAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        797
Source: 
>      */
>     function setBasePrice(uint _basePrice) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BasePriceChanged(msg.sender, basePrice, _basePrice);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        831
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SecuredFunctions
Line:        743
Source: 
>      */
>     function setAllowedContract (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _contract,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        797
Source: 
>      */
>     function setBasePrice(uint _basePrice) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BasePriceChanged(msg.sender, basePrice, _basePrice);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        831
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        967
Source: 
>      */
>     function init(
>     ^^^^^^^^^^^^^^
>         address _sellingLicenses,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        984
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        995
Source: 
>      */
>     function setLicenses(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address _sellingLicenses,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1022
Source: 
>      */
>     function getDataHash(string calldata _username, string calldata _contactData) external view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _dataHash(_username, _contactData, user_nonce[msg.sender]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1052
Source: 
>      */
>     function getMessageSigner(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string calldata _username,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1088
Source: 
>      */
>     function addOrUpdateUser(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes calldata _signature,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1112
Source: 
>      */
>     function addOrUpdateUser(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         string calldata _contactData,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1129
Source: 
>      */
>     function addOrUpdateUser(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1151
Source: 
>     */
>     function addOffer(
>     ^^^^^^^^^^^^^^^^^^
>         address _asset,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1268
Source: 
>      */
>     function getOfferOwner(uint256 _id) external view returns (address payable) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (offers[_id].owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1278
Source: 
>      */
>     function getAsset(uint256 _id) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (offers[_id].asset);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1288
Source: 
>      */
>     function getArbitrator(uint256 _id) external view returns (address payable) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (offers[_id].arbitrator);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1305
Source: 
>      */
>     function getOfferIds(address _address) external view returns (uint256[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return addressToOffers[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RelayRecipient
Line:        2218
Source: 
> 
>     function getSenderFromData(address origSender, bytes memory msgData) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address sender = origSender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EscrowRelay
Line:        2296
Source: 
>    */
>   function setMetadataStore(address _metadataStore) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     metadataStore = MetadataStore(_metadataStore);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EscrowRelay
Line:        2305
Source: 
>    */
>   function setEscrow(address _escrow) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     escrow = IEscrow(_escrow);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EscrowRelay
Line:        2323
Source: 
>    */
>   function canCreateOrCancel(address _account) external view returns(bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return (lastActivity[_account] + 15 minutes) < block.timestamp;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EscrowRelay
Line:        2336
Source: 
>    */
>   function createEscrow(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     uint _offerId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EscrowRelay
Line:        2406
Source: 
>    */
>   function acceptRelayedCall(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address /* relay */,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EscrowRelay
Line:        2478
Source: 
>    */
>   function preRelayedCall(bytes calldata) external returns (bytes32){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // nothing to be done pre-call.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EscrowRelay
Line:        2486
Source: 
>    */
>     function postRelayedCall(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>       bytes calldata /*context*/, 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Stakable
Line:        802
Source: 
> 
>     function _stake(uint _itemId, address payable _owner, address _tokenAddress) internal {
>                                   ^^^^^^^^^^^^^^^^^^^^^^
>         require(stakes[_itemId].owner == address(0), "Already has/had a stake");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Stakable
Line:        831
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>                               ^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MetadataStore
Line:        1237
Source: 
>         uint limitH,
>         address payable owner,
>         ^^^^^^^^^^^^^^^^^^^^^
>         address payable arbitrator,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IEscrow
Line:        229
Source: 
> 
>   function createEscrow_relayed(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable _sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IEscrow
Line:        241
Source: 
> 
>   function pay_relayed(address _sender, uint _escrowId) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IEscrow
Line:        245
Source: 
> 
>   function cancel_relayed(address _sender, uint _escrowId) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IEscrow
Line:        249
Source: 
> 
>   function openCase_relayed(address _sender, uint256 _escrowId, uint8 _motive) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IEscrow
Line:        253
Source: 
> 
>   function rateTransaction_relayed(address _sender, uint _escrowId, uint _rate) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        519
Source: 
> 
>        bytes32 _id = keccak256(abi.encodePacked(_arbitrator, msg.sender));
>        ^^^^^^^^^^^
>        RequestStatus _status = requests[_id].status;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        520
Source: 
>        bytes32 _id = keccak256(abi.encodePacked(_arbitrator, msg.sender));
>        RequestStatus _status = requests[_id].status;
>        ^^^^^^^^^^^^^^^^^^^^^
>        require(_status != RequestStatus.AWAIT && _status != RequestStatus.ACCEPTED, "Invalid request status");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        560
Source: 
> 
>         address _seller = requests[_id].seller;
>         ^^^^^^^^^^^^^^^
>         permissions[msg.sender][_seller] = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        580
Source: 
> 
>         address _seller = requests[_id].seller;
>         ^^^^^^^^^^^^^^^
>         permissions[msg.sender][_seller] = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        599
Source: 
> 
>         address _arbitrator = requests[_id].arbitrator;
>         ^^^^^^^^^^^^^^^^^^^
>         permissions[_arbitrator][msg.sender] = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stakable
Line:        848
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>              ^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stakable
Line:        867
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>              ^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stakable
Line:        888
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                  ^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MetadataStore
Line:        928
Source: 
>     mapping(address => User) public users;
>     mapping(address => uint) public user_nonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5.0 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        84
Source: 
> contract Ownable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SecuredFunctions
Line:        730
Source: 
> 
>     mapping(address => bool) public allowedContracts;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        84
Source: 
> contract Ownable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        760
Source: 
> 
>     uint public basePrice = 0.01 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        762
Source: 
> 
>     address payable public burnAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        770
Source: 
> 
>     mapping(uint => Stake) public stakes;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint) public stakeCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        771
Source: 
>     mapping(uint => Stake) public stakes;
>     mapping(address => uint) public stakeCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        84
Source: 
> contract Ownable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SecuredFunctions
Line:        730
Source: 
> 
>     mapping(address => bool) public allowedContracts;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        760
Source: 
> 
>     uint public basePrice = 0.01 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        762
Source: 
> 
>     address payable public burnAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        770
Source: 
> 
>     mapping(uint => Stake) public stakes;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint) public stakeCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        771
Source: 
>     mapping(uint => Stake) public stakes;
>     mapping(address => uint) public stakeCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        924
Source: 
> 
>     License public sellingLicenses;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ArbitrationLicense public arbitrationLicenses;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        925
Source: 
>     License public sellingLicenses;
>     ArbitrationLicense public arbitrationLicenses;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        927
Source: 
> 
>     mapping(address => User) public users;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint) public user_nonce;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        928
Source: 
>     mapping(address => User) public users;
>     mapping(address => uint) public user_nonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        930
Source: 
> 
>     Offer[] public offers;
>     ^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256[]) public addressToOffers;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        931
Source: 
>     Offer[] public offers;
>     mapping(address => uint256[]) public addressToOffers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping (uint256 => bool)) public offerWhitelist;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        932
Source: 
>     mapping(address => uint256[]) public addressToOffers;
>     mapping(address => mapping (uint256 => bool)) public offerWhitelist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        934
Source: 
> 
>     bool internal _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        84
Source: 
> contract Ownable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    RelayRecipient
Line:        2186
Source: 
> 
>     IRelayHub private relayHub; // The IRelayHub singleton which is allowed to call us
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2260
Source: 
> 
>   MetadataStore public metadataStore;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   IEscrow public escrow;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2261
Source: 
>   MetadataStore public metadataStore;
>   IEscrow public escrow;
>   ^^^^^^^^^^^^^^^^^^^^^
>   address public snt;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2262
Source: 
>   IEscrow public escrow;
>   address public snt;
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2264
Source: 
> 
>   mapping(address => uint) public lastActivity;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2266
Source: 
> 
>   bytes4 constant CREATE_SIGNATURE = bytes4(keccak256("createEscrow(uint256,uint256,uint256,string,string,string)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes4 constant PAY_SIGNATURE = bytes4(keccak256("pay(uint256)"));

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2267
Source: 
>   bytes4 constant CREATE_SIGNATURE = bytes4(keccak256("createEscrow(uint256,uint256,uint256,string,string,string)"));
>   bytes4 constant PAY_SIGNATURE = bytes4(keccak256("pay(uint256)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes4 constant CANCEL_SIGNATURE = bytes4(keccak256("cancel(uint256)"));

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2268
Source: 
>   bytes4 constant PAY_SIGNATURE = bytes4(keccak256("pay(uint256)"));
>   bytes4 constant CANCEL_SIGNATURE = bytes4(keccak256("cancel(uint256)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes4 constant OPEN_CASE_SIGNATURE = bytes4(keccak256("openCase(uint256,uint8)"));

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2269
Source: 
>   bytes4 constant CANCEL_SIGNATURE = bytes4(keccak256("cancel(uint256)"));
>   bytes4 constant OPEN_CASE_SIGNATURE = bytes4(keccak256("openCase(uint256,uint8)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes4 constant RATE_SIGNATURE  = bytes4(keccak256("rateTransaction(uint256,uint256)"));

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2270
Source: 
>   bytes4 constant OPEN_CASE_SIGNATURE = bytes4(keccak256("openCase(uint256,uint8)"));
>   bytes4 constant RATE_SIGNATURE  = bytes4(keccak256("rateTransaction(uint256,uint256)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2272
Source: 
> 
>   uint256 constant OK = 0;
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_ENOUGH_BALANCE = 11;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2273
Source: 
>   uint256 constant OK = 0;
>   uint256 constant ERROR_ENOUGH_BALANCE = 11;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_INVALID_ASSET = 12;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2274
Source: 
>   uint256 constant ERROR_ENOUGH_BALANCE = 11;
>   uint256 constant ERROR_INVALID_ASSET = 12;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_TRX_TOO_SOON = 13;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2275
Source: 
>   uint256 constant ERROR_INVALID_ASSET = 12;
>   uint256 constant ERROR_TRX_TOO_SOON = 13;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_INVALID_BUYER = 14;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2276
Source: 
>   uint256 constant ERROR_TRX_TOO_SOON = 13;
>   uint256 constant ERROR_INVALID_BUYER = 14;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_GAS_PRICE = 15;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2277
Source: 
>   uint256 constant ERROR_INVALID_BUYER = 14;
>   uint256 constant ERROR_GAS_PRICE = 15;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR = 99;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    EscrowRelay
Line:        2278
Source: 
>   uint256 constant ERROR_GAS_PRICE = 15;
>   uint256 constant ERROR = 99;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    License
Line:        284
Source: 
> 
>     ERC20Token token;
>     ^^^^^^^^^^^^^^^^
>     address burnAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    License
Line:        285
Source: 
>     ERC20Token token;
>     address burnAddress;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2266
Source: 
> 
>   bytes4 constant CREATE_SIGNATURE = bytes4(keccak256("createEscrow(uint256,uint256,uint256,string,string,string)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes4 constant PAY_SIGNATURE = bytes4(keccak256("pay(uint256)"));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2267
Source: 
>   bytes4 constant CREATE_SIGNATURE = bytes4(keccak256("createEscrow(uint256,uint256,uint256,string,string,string)"));
>   bytes4 constant PAY_SIGNATURE = bytes4(keccak256("pay(uint256)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes4 constant CANCEL_SIGNATURE = bytes4(keccak256("cancel(uint256)"));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2268
Source: 
>   bytes4 constant PAY_SIGNATURE = bytes4(keccak256("pay(uint256)"));
>   bytes4 constant CANCEL_SIGNATURE = bytes4(keccak256("cancel(uint256)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes4 constant OPEN_CASE_SIGNATURE = bytes4(keccak256("openCase(uint256,uint8)"));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2269
Source: 
>   bytes4 constant CANCEL_SIGNATURE = bytes4(keccak256("cancel(uint256)"));
>   bytes4 constant OPEN_CASE_SIGNATURE = bytes4(keccak256("openCase(uint256,uint8)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes4 constant RATE_SIGNATURE  = bytes4(keccak256("rateTransaction(uint256,uint256)"));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2270
Source: 
>   bytes4 constant OPEN_CASE_SIGNATURE = bytes4(keccak256("openCase(uint256,uint8)"));
>   bytes4 constant RATE_SIGNATURE  = bytes4(keccak256("rateTransaction(uint256,uint256)"));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2272
Source: 
> 
>   uint256 constant OK = 0;
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_ENOUGH_BALANCE = 11;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2273
Source: 
>   uint256 constant OK = 0;
>   uint256 constant ERROR_ENOUGH_BALANCE = 11;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_INVALID_ASSET = 12;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2274
Source: 
>   uint256 constant ERROR_ENOUGH_BALANCE = 11;
>   uint256 constant ERROR_INVALID_ASSET = 12;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_TRX_TOO_SOON = 13;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2275
Source: 
>   uint256 constant ERROR_INVALID_ASSET = 12;
>   uint256 constant ERROR_TRX_TOO_SOON = 13;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_INVALID_BUYER = 14;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2276
Source: 
>   uint256 constant ERROR_TRX_TOO_SOON = 13;
>   uint256 constant ERROR_INVALID_BUYER = 14;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR_GAS_PRICE = 15;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2277
Source: 
>   uint256 constant ERROR_INVALID_BUYER = 14;
>   uint256 constant ERROR_GAS_PRICE = 15;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant ERROR = 99;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EscrowRelay
Line:        2278
Source: 
>   uint256 constant ERROR_GAS_PRICE = 15;
>   uint256 constant ERROR = 99;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EscrowRelay
Line:        2440
Source: 
> 
>     if(functionSignature == RATE_SIGNATURE && gasPrice < 20000000000){
>                                                          ^^^^^^^^^^^
>       return OK;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EscrowRelay
Line:        2444
Source: 
> 
>     if(from.balance > 600000 * gasPrice) return ERROR_ENOUGH_BALANCE;
>                       ^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EscrowRelay
Line:        2446
Source: 
> 
>     if(gasPrice > 20000000000) return ERROR_GAS_PRICE; // 20Gwei
>                   ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        848
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        867
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        888
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Proxiable
Line:        13
Source: 
>         require(
>             bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Not compatible"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        848
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        867
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        888
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MetadataStore
Line:        1166
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MetadataStore
Line:        1245
Source: 
>         address payable offerArbitrator = theOffer.arbitrator;
>         if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             offerArbitrator = address(0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RelayRecipient
Line:        2215
Source: 
>     function getRecipientBalance() public view returns (uint) {
>         return getRelayHub().balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EscrowRelay
Line:        2346
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrowId = escrow.createEscrow_relayed(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          address(uint160(sender)),

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EscrowRelay
Line:        2363
Source: 
>     address sender = getSender();
>     escrow.pay_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EscrowRelay
Line:        2373
Source: 
>     address sender = getSender();
>     escrow.rateTransaction_relayed(sender, _escrowId, _rate);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EscrowRelay
Line:        2383
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrow.cancel_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EscrowRelay
Line:        2393
Source: 
>     address sender = getSender();
>     escrow.openCase_relayed(sender, _escrowId, _motive);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EscrowRelay
Line:        2451
Source: 
>       
>       (buyer, , token, ) = escrow.getBasicTradeData(dataValue);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EscrowRelay
Line:        2462
Source: 
>     } else if(functionSignature == CREATE_SIGNATURE) {
>       token = metadataStore.getAsset(dataValue);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Proxiable
Line:        13
Source: 
>         require(
>             bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Not compatible"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Stakable
Line:        848
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Stakable
Line:        867
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Stakable
Line:        888
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MetadataStore
Line:        1166
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MetadataStore
Line:        1245
Source: 
>         address payable offerArbitrator = theOffer.arbitrator;
>         if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             offerArbitrator = address(0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RelayRecipient
Line:        2215
Source: 
>     function getRecipientBalance() public view returns (uint) {
>         return getRelayHub().balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EscrowRelay
Line:        2346
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrowId = escrow.createEscrow_relayed(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          address(uint160(sender)),

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EscrowRelay
Line:        2363
Source: 
>     address sender = getSender();
>     escrow.pay_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EscrowRelay
Line:        2373
Source: 
>     address sender = getSender();
>     escrow.rateTransaction_relayed(sender, _escrowId, _rate);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EscrowRelay
Line:        2383
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrow.cancel_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EscrowRelay
Line:        2393
Source: 
>     address sender = getSender();
>     escrow.openCase_relayed(sender, _escrowId, _motive);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EscrowRelay
Line:        2451
Source: 
>       
>       (buyer, , token, ) = escrow.getBasicTradeData(dataValue);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EscrowRelay
Line:        2462
Source: 
>     } else if(functionSignature == CREATE_SIGNATURE) {
>       token = metadataStore.getAsset(dataValue);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Proxiable
Line:        13
Source: 
>         require(
>             bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Not compatible"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MetadataStore
Line:        1166
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MetadataStore
Line:        1245
Source: 
>         address payable offerArbitrator = theOffer.arbitrator;
>         if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             offerArbitrator = address(0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EscrowRelay
Line:        2451
Source: 
>       
>       (buyer, , token, ) = escrow.getBasicTradeData(dataValue);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EscrowRelay
Line:        2462
Source: 
>     } else if(functionSignature == CREATE_SIGNATURE) {
>       token = metadataStore.getAsset(dataValue);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RelayRecipient
Line:        2215
Source: 
>     function getRecipientBalance() public view returns (uint) {
>         return getRelayHub().balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EscrowRelay
Line:        2346
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrowId = escrow.createEscrow_relayed(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          address(uint160(sender)),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EscrowRelay
Line:        2363
Source: 
>     address sender = getSender();
>     escrow.pay_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EscrowRelay
Line:        2373
Source: 
>     address sender = getSender();
>     escrow.rateTransaction_relayed(sender, _escrowId, _rate);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EscrowRelay
Line:        2383
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrow.cancel_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EscrowRelay
Line:        2393
Source: 
>     address sender = getSender();
>     escrow.openCase_relayed(sender, _escrowId, _motive);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeTransfer
Line:        183
Source: 
>         }
>         require(result, "Unsuccessful token transfer");
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeTransfer
Line:        207
Source: 
>         }
>         require(result, "Unsuccessful token transfer");
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    MessageSigned
Line:        718
Source: 
>         }
>         if (v < 27) {
>             ^
>             v += 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    EscrowRelay
Line:        2427
Source: 
> 
>     return (_evaluateConditionsToRelay(from, gasPrice, fSign, dataValue), "");
>                                                        ^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MetadataStore
Line:        1166
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MetadataStore
Line:        1245
Source: 
>         address payable offerArbitrator = theOffer.arbitrator;
>         if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             offerArbitrator = address(0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    RelayRecipient
Line:        2215
Source: 
>     function getRecipientBalance() public view returns (uint) {
>         return getRelayHub().balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EscrowRelay
Line:        2346
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrowId = escrow.createEscrow_relayed(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          address(uint160(sender)),

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EscrowRelay
Line:        2363
Source: 
>     address sender = getSender();
>     escrow.pay_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EscrowRelay
Line:        2373
Source: 
>     address sender = getSender();
>     escrow.rateTransaction_relayed(sender, _escrowId, _rate);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EscrowRelay
Line:        2383
Source: 
>     lastActivity[sender] = block.timestamp;
>     escrow.cancel_relayed(sender, _escrowId);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EscrowRelay
Line:        2393
Source: 
>     address sender = getSender();
>     escrow.openCase_relayed(sender, _escrowId, _motive);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EscrowRelay
Line:        2451
Source: 
>       
>       (buyer, , token, ) = escrow.getBasicTradeData(dataValue);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EscrowRelay
Line:        2462
Source: 
>     } else if(functionSignature == CREATE_SIGNATURE) {
>       token = metadataStore.getAsset(dataValue);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        363
Source: 
> 
>         licenseDetails[_licenseOwner] = LicenseDetails({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             price: price,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        368
Source: 
> 
>         uint idx = licenseOwners.push(_licenseOwner);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         idxLicenseOwners[_licenseOwner] = idx;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        369
Source: 
>         uint idx = licenseOwners.push(_licenseOwner);
>         idxLicenseOwners[_licenseOwner] = idx;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        363
Source: 
> 
>         licenseDetails[_licenseOwner] = LicenseDetails({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             price: price,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        368
Source: 
> 
>         uint idx = licenseOwners.push(_licenseOwner);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         idxLicenseOwners[_licenseOwner] = idx;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        369
Source: 
>         uint idx = licenseOwners.push(_licenseOwner);
>         idxLicenseOwners[_licenseOwner] = idx;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ArbitrationLicense
Line:        612
Source: 
> 
>         blacklist[msg.sender][_seller] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ArbitrationLicense
Line:        624
Source: 
> 
>         blacklist[msg.sender][_seller] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EscrowRelay
Line:        2345
Source: 
>     address sender = getSender();
>     lastActivity[sender] = block.timestamp;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     escrowId = escrow.createEscrow_relayed(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EscrowRelay
Line:        2382
Source: 
>     address sender = getSender();
>     lastActivity[sender] = block.timestamp;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     escrow.cancel_relayed(sender, _escrowId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        118
Source: 
>     function _setOwner(address _newOwner) internal {
>         _owner = _newOwner;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        323
Source: 
> 
>         _initialized = true;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        325
Source: 
> 
>         price = _price;
>         ^^^^^^^^^^^^^^
>         token = ERC20Token(_tokenAddress);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        326
Source: 
>         price = _price;
>         token = ERC20Token(_tokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         burnAddress = _burnAddress;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        327
Source: 
>         token = ERC20Token(_tokenAddress);
>         burnAddress = _burnAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        118
Source: 
>     function _setOwner(address _newOwner) internal {
>         _owner = _newOwner;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        323
Source: 
> 
>         _initialized = true;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        325
Source: 
> 
>         price = _price;
>         ^^^^^^^^^^^^^^
>         token = ERC20Token(_tokenAddress);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        326
Source: 
>         price = _price;
>         token = ERC20Token(_tokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         burnAddress = _burnAddress;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        327
Source: 
>         token = ERC20Token(_tokenAddress);
>         burnAddress = _burnAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ArbitrationLicense
Line:        495
Source: 
>         id = _buyFrom(_sender);
>         arbitratorlicenseDetails[_sender].id = id;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         arbitratorlicenseDetails[_sender].acceptAny = _acceptAny;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ArbitrationLicense
Line:        496
Source: 
>         arbitratorlicenseDetails[_sender].id = id;
>         arbitratorlicenseDetails[_sender].acceptAny = _acceptAny;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        118
Source: 
>     function _setOwner(address _newOwner) internal {
>         _owner = _newOwner;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        973
Source: 
> 
>         _initialized = true;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        975
Source: 
> 
>         sellingLicenses = License(_sellingLicenses);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         arbitrationLicenses = ArbitrationLicense(_arbitrationLicenses);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        976
Source: 
>         sellingLicenses = License(_sellingLicenses);
>         arbitrationLicenses = ArbitrationLicense(_arbitrationLicenses);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        978
Source: 
> 
>         basePrice = 0.01 ether;
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        1099
Source: 
> 
>         user_nonce[_user]++;
>         ^^^^^^^^^^^^^^^^^^^
>         _addOrUpdateUser(_user, _contactData, _location, _username);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Proxiable
Line:        13
Source: 
>         require(
>             bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Not compatible"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Stakable
Line:        848
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Stakable
Line:        867
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Stakable
Line:        888
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RelayRecipient
Line:        2215
Source: 
>     function getRecipientBalance() public view returns (uint) {
>         return getRelayHub().balanceOf(address(this));
>                ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1803
Source: 
>         memCopy(
>             result.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             b.contentAddress() + from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        1804
Source: 
>             result.contentAddress(),
>             b.contentAddress() + from,
>             ^^^^^^^^^^^^^^^^^^
>             result.length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2153
Source: 
>         memCopy(
>             b.contentAddress() + index,
>             ^^^^^^^^^^^^^^^^^^
>             input.rawAddress(), // includes length of <input>

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2154
Source: 
>             b.contentAddress() + index,
>             input.rawAddress(), // includes length of <input>
>             ^^^^^^^^^^^^^^^^^^
>             input.length + 32   // +32 bytes to store <input> length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2176
Source: 
>         memCopy(
>             dest.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^
>             source.contentAddress(),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LibBytes
Line:        2177
Source: 
>             dest.contentAddress(),
>             source.contentAddress(),
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             sourceLen

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ArbitrationLicense
Line:        524
Source: 
>        if(_status == RequestStatus.REJECTED || _status == RequestStatus.CLOSED){
>            require(requests[_id].date + 3 days < block.timestamp,
>                                                  ^^^^^^^^^^^^^^^
>             "Must wait 3 days before requesting the arbitrator again");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EscrowRelay
Line:        2324
Source: 
>   function canCreateOrCancel(address _account) external view returns(bool) {
>     return (lastActivity[_account] + 15 minutes) < block.timestamp;
>                                                    ^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EscrowRelay
Line:        2457
Source: 
>       if(functionSignature == CANCEL_SIGNATURE){ // Allow activity after 15min have passed
>         if((lastActivity[from] + 15 minutes) > block.timestamp) return ERROR_TRX_TOO_SOON;
>                                                ^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EscrowRelay
Line:        2467
Source: 
>       // Allow activity after 15 min have passed
>       if((lastActivity[from] + 15 minutes) > block.timestamp) return ERROR_TRX_TOO_SOON;
>                                              ^^^^^^^^^^^^^^^
> 

[0m
