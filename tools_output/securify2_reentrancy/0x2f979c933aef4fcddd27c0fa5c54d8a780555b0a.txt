[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        17
Source: 
>     uint256 _blockAttenuation = 2400000;                 //  Block decay time interval
>     uint256[10] _attenuationAmount;                      //  Mining decay amount
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _afterMiningAmount = 40 ether;               //  Stable period mining amount

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        18
Source: 
>     uint256[10] _attenuationAmount;                      //  Mining decay amount
>     uint256 _afterMiningAmount = 40 ether;               //  Stable period mining amount
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _firstBlockNum;                              //  Starting mining block

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        50
Source: 
>     */
>     function changeMapping(address voteFactory) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        60
Source: 
>     */
>     function oreDrawing() public returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == _offerFactoryAddress, "No authority");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        98
Source: 
>     */
>     function takeOutNest(address target) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nestContract.transfer(address(target),_nestContract.balanceOf(address(this)));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        103
Source: 
>     // Check block decay time interval
>     function checkBlockAttenuation() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _blockAttenuation;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        108
Source: 
>     // Check latest offering block
>     function checkLatestMining() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _latestMining;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        113
Source: 
>     // Check mining amount decay
>     function checkAttenuationAmount(uint256 num) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _attenuationAmount[num];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        118
Source: 
>     // Check NEST balance
>     function checkNestBalance() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _nestContract.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        123
Source: 
>     // Modify block decay time interval
>     function changeBlockAttenuation(uint256 blockNum) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(blockNum > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        129
Source: 
>     // Modify mining amount decay
>     function changeAttenuationAmount(uint256 firstAmount, uint256 top, uint256 bottom) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 blockAmount = firstAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        35
Source: 
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Initiate mining parameters

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        139
Source: 
>     modifier onlyOwner(){
>         require(_voteFactory.checkOwners(msg.sender), "No authority");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        52
Source: 
>         _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        53
Source: 
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        65
Source: 
>         //  Transfer NEST
>         if (_nestContract.balanceOf(address(this)) < miningAmount){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             miningAmount = _nestContract.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        66
Source: 
>         if (_nestContract.balanceOf(address(this)) < miningAmount){
>             miningAmount = _nestContract.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        69
Source: 
>         if (miningAmount > 0) {
>             _nestContract.transfer(address(msg.sender), miningAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OreDrawingLog(block.number,miningAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        139
Source: 
>     modifier onlyOwner(){
>         require(_voteFactory.checkOwners(msg.sender), "No authority");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        99
Source: 
>     function takeOutNest(address target) public onlyOwner {
>         _nestContract.transfer(address(target),_nestContract.balanceOf(address(this)));
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        99
Source: 
>     function takeOutNest(address target) public onlyOwner {
>         _nestContract.transfer(address(target),_nestContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        119
Source: 
>     function checkNestBalance() public view returns(uint256) {
>         return _nestContract.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        139
Source: 
>     modifier onlyOwner(){
>         require(_voteFactory.checkOwners(msg.sender), "No authority");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        98
Source: 
>     */
>     function takeOutNest(address target) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nestContract.transfer(address(target),_nestContract.balanceOf(address(this)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        50
Source: 
>     */
>     function changeMapping(address voteFactory) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        113
Source: 
>     // Check mining amount decay
>     function checkAttenuationAmount(uint256 num) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _attenuationAmount[num];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        129
Source: 
>     // Modify mining amount decay
>     function changeAttenuationAmount(uint256 firstAmount, uint256 top, uint256 bottom) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 blockAmount = firstAmount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        139
Source: 
>     modifier onlyOwner(){
>         require(_voteFactory.checkOwners(msg.sender), "No authority");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        52
Source: 
>         _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        53
Source: 
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        11
Source: 
>  */
> contract Nest_3_MiningContract {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Nest_3_VoteFactory
Line:        145
Source: 
> // Voting contract
> interface Nest_3_VoteFactory {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Check address

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    address_make_payable
Line:        206
Source: 
> 
> library address_make_payable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    function make_payable(address x) internal pure returns (address payable) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    address_make_payable
Line:        207
Source: 
> library address_make_payable {
>    function make_payable(address x) internal pure returns (address payable) {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return address(uint160(x));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        16
Source: 
>     
>     uint256 _blockAttenuation = 2400000;                 //  Block decay time interval
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[10] _attenuationAmount;                      //  Mining decay amount

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        17
Source: 
>     uint256 _blockAttenuation = 2400000;                 //  Block decay time interval
>     uint256[10] _attenuationAmount;                      //  Mining decay amount
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _afterMiningAmount = 40 ether;               //  Stable period mining amount

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        18
Source: 
>     uint256[10] _attenuationAmount;                      //  Mining decay amount
>     uint256 _afterMiningAmount = 40 ether;               //  Stable period mining amount
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _firstBlockNum;                              //  Starting mining block

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        19
Source: 
>     uint256 _afterMiningAmount = 40 ether;               //  Stable period mining amount
>     uint256 _firstBlockNum;                              //  Starting mining block
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _latestMining;                               //  Latest offering block

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        20
Source: 
>     uint256 _firstBlockNum;                              //  Starting mining block
>     uint256 _latestMining;                               //  Latest offering block
>     ^^^^^^^^^^^^^^^^^^^^^
>     Nest_3_VoteFactory _voteFactory;                     //  Voting contract

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        21
Source: 
>     uint256 _latestMining;                               //  Latest offering block
>     Nest_3_VoteFactory _voteFactory;                     //  Voting contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ERC20 _nestContract;                                 //  NEST contract address

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        22
Source: 
>     Nest_3_VoteFactory _voteFactory;                     //  Voting contract
>     ERC20 _nestContract;                                 //  NEST contract address
>     ^^^^^^^^^^^^^^^^^^^
>     address _offerFactoryAddress;                        //  Offering contract address

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        23
Source: 
>     ERC20 _nestContract;                                 //  NEST contract address
>     address _offerFactoryAddress;                        //  Offering contract address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        16
Source: 
>     
>     uint256 _blockAttenuation = 2400000;                 //  Block decay time interval
>                                 ^^^^^^^
>     uint256[10] _attenuationAmount;                      //  Mining decay amount

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        34
Source: 
>         _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        139
Source: 
>     modifier onlyOwner(){
>         require(_voteFactory.checkOwners(msg.sender), "No authority");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        52
Source: 
>         _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        65
Source: 
>         //  Transfer NEST
>         if (_nestContract.balanceOf(address(this)) < miningAmount){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             miningAmount = _nestContract.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        66
Source: 
>         if (_nestContract.balanceOf(address(this)) < miningAmount){
>             miningAmount = _nestContract.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        139
Source: 
>     modifier onlyOwner(){
>         require(_voteFactory.checkOwners(msg.sender), "No authority");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        99
Source: 
>     function takeOutNest(address target) public onlyOwner {
>         _nestContract.transfer(address(target),_nestContract.balanceOf(address(this)));
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        139
Source: 
>     modifier onlyOwner(){
>         require(_voteFactory.checkOwners(msg.sender), "No authority");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        35
Source: 
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Initiate mining parameters

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        53
Source: 
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        69
Source: 
>         if (miningAmount > 0) {
>             _nestContract.transfer(address(msg.sender), miningAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OreDrawingLog(block.number,miningAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        99
Source: 
>     function takeOutNest(address target) public onlyOwner {
>         _nestContract.transfer(address(target),_nestContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        119
Source: 
>     function checkNestBalance() public view returns(uint256) {
>         return _nestContract.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Nest_3_MiningContract
Line:        23
Source: 
>     ERC20 _nestContract;                                 //  NEST contract address
>     address _offerFactoryAddress;                        //  Offering contract address
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        17
Source: 
>     uint256 _blockAttenuation = 2400000;                 //  Block decay time interval
>     uint256[10] _attenuationAmount;                      //  Mining decay amount
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _afterMiningAmount = 40 ether;               //  Stable period mining amount

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        51
Source: 
>     function changeMapping(address voteFactory) public onlyOwner {
>         _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        52
Source: 
>         _voteFactory = Nest_3_VoteFactory(address(voteFactory));                  
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        53
Source: 
>         _offerFactoryAddress = address(_voteFactory.checkAddress("nest.v3.offerMain"));
>         _nestContract = ERC20(address(_voteFactory.checkAddress("nest")));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        125
Source: 
>         require(blockNum > 0);
>         _blockAttenuation = blockNum;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        132
Source: 
>         for (uint256 i = 0; i < 10; i ++) {
>             _attenuationAmount[i] = blockAmount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             blockAmount = blockAmount.mul(top).div(bottom);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        69
Source: 
>         if (miningAmount > 0) {
>             _nestContract.transfer(address(msg.sender), miningAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OreDrawingLog(block.number,miningAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Nest_3_MiningContract
Line:        99
Source: 
>     function takeOutNest(address target) public onlyOwner {
>         _nestContract.transfer(address(target),_nestContract.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
