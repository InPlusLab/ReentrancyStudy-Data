[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FRTRebaser
Line:        229
Source: 
> 
>     uint256 public starttime = 1606266000; // EDIT_ME: 2020-11-25UTC:01:00+00:00
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price0CumulativeLast = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    FRTRebaser
Line:        287
Source: 
> 
>         if ((seed - ((seed / 10) * 10)) == 0 || (seed - ((seed / 10) * 10)) > 9 ) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FRTRebaser
Line:        287
Source: 
> 
>         if ((seed - ((seed / 10) * 10)) == 0 || (seed - ((seed / 10) * 10)) > 9 ) {
>                      ^^^^^^^^^^^^^^^^
>             return 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FRTRebaser
Line:        287
Source: 
> 
>         if ((seed - ((seed / 10) * 10)) == 0 || (seed - ((seed / 10) * 10)) > 9 ) {
>                                                          ^^^^^^^^^^^^^^^^
>             return 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FRTRebaser
Line:        290
Source: 
>         } else {
>             return (seed - ((seed / 10) * 10));
>                             ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        35
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, 'SafeMath: multiplication overflow');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        300
Source: 
>         require(hasFRT(), 'YOU_DO_NOT_HOLD_FRT'); //Only holders can rebase.
>         uint256 price0Cumulative = pair.price0CumulativeLast();
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint112 reserve0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        304
Source: 
>         uint32 blockTimestamp;
>         (reserve0, reserve1, blockTimestamp) = pair.getReserves();
>                                                ^^^^^^^^^^^^^^^^^^
>         require(reserve0 != 0 && reserve1 != 0, 'NO_RESERVES');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        337
Source: 
>                 epoch,
>                 toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))
>                              ^^^^^^^^^^^^^^^^^^^
>             ); // rebase using 10% of price delta

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        335
Source: 
>             uint256 delta = price.sub(100000);
>             token.rebase(
>             ^^^^^^^^^^^^^
>                 epoch,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        339
Source: 
>             ); // rebase using 10% of price delta
>             treasury.sendReward(random, msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        351
Source: 
> 
>         pair.sync();
>         ^^^^^^^^^^^
>         epoch = epoch.add(1);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        354
Source: 
>         lastRebaser = msg.sender;
>         emit LogRebase(epoch, token.totalSupply(), random, msg.sender);
>                               ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        346
Source: 
>                 epoch,
>                 -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))
>                               ^^^^^^^^^^^^^^^^^^^
>             ); // Use 2% of delta

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        344
Source: 
>             delta = delta.sub(price);
>             token.rebase(
>             ^^^^^^^^^^^^^
>                 epoch,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FRTRebaser
Line:        348
Source: 
>             ); // Use 2% of delta
>             treasury.sendReward(random, msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        91
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        93
Source: 
> 
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        124
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FRTRebaser
Line:        332
Source: 
>         uint256 random = rand();
>         if (price > 100000) {
>                     ^^^^^^
>             // positive rebase

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FRTRebaser
Line:        334
Source: 
>             // positive rebase
>             uint256 delta = price.sub(100000);
>                                       ^^^^^^
>             token.rebase(

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FRTRebaser
Line:        337
Source: 
>                 epoch,
>                 toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))
>                                                                 ^^^^^^
>             ); // rebase using 10% of price delta

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FRTRebaser
Line:        342
Source: 
>             // negative rebase
>             uint256 delta = 100000;
>                             ^^^^^^
>             delta = delta.sub(price);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FRTRebaser
Line:        346
Source: 
>                 epoch,
>                 -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))
>                                                                  ^^^^^^
>             ); // Use 2% of delta

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FRTRebaser
Line:        241
Source: 
>         token = FRT(pair.token0());
>         price0CumulativeLast = pair.price0CumulativeLast();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint112 reserve0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FRTRebaser
Line:        244
Source: 
>         uint112 reserve1;
>         (reserve0, reserve1, blockTimestampLast) = pair.getReserves();
>                                                    ^^^^^^^^^^^^^^^^^^
>         require(reserve0 != 0 && reserve1 != 0, 'NO_RESERVES');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FRTRebaser
Line:        263
Source: 
>     function hasFRT() private view returns (bool) {
>         if (token.balanceOf(msg.sender) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FRTRebaser
Line:        300
Source: 
>         require(hasFRT(), 'YOU_DO_NOT_HOLD_FRT'); //Only holders can rebase.
>         uint256 price0Cumulative = pair.price0CumulativeLast();
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint112 reserve0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FRTRebaser
Line:        304
Source: 
>         uint32 blockTimestamp;
>         (reserve0, reserve1, blockTimestamp) = pair.getReserves();
>                                                ^^^^^^^^^^^^^^^^^^
>         require(reserve0 != 0 && reserve1 != 0, 'NO_RESERVES');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FRTRebaser
Line:        337
Source: 
>                 epoch,
>                 toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))
>                              ^^^^^^^^^^^^^^^^^^^
>             ); // rebase using 10% of price delta

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FRTRebaser
Line:        346
Source: 
>                 epoch,
>                 -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))
>                               ^^^^^^^^^^^^^^^^^^^
>             ); // Use 2% of delta

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FRTRebaser
Line:        240
Source: 
>         treasury = FRTTreasury(_treasury);
>         token = FRT(pair.token0());
>                     ^^^^^^^^^^^^^
>         price0CumulativeLast = pair.price0CumulativeLast();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FRTRebaser
Line:        335
Source: 
>             uint256 delta = price.sub(100000);
>             token.rebase(
>             ^^^^^^^^^^^^^
>                 epoch,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FRTRebaser
Line:        339
Source: 
>             ); // rebase using 10% of price delta
>             treasury.sendReward(random, msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FRTRebaser
Line:        351
Source: 
> 
>         pair.sync();
>         ^^^^^^^^^^^
>         epoch = epoch.add(1);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FRTRebaser
Line:        354
Source: 
>         lastRebaser = msg.sender;
>         emit LogRebase(epoch, token.totalSupply(), random, msg.sender);
>                               ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FRTRebaser
Line:        344
Source: 
>             delta = delta.sub(price);
>             token.rebase(
>             ^^^^^^^^^^^^^
>                 epoch,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FRTRebaser
Line:        348
Source: 
>             ); // Use 2% of delta
>             treasury.sendReward(random, msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FRTRebaser
Line:        226
Source: 
>     IUniswapV2Pair public pair;
>     FRT public token;
>     ^^^^^^^^^^^^^^^^
>     FRTTreasury public treasury;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FRTRebaser
Line:        335
Source: 
>             uint256 delta = price.sub(100000);
>             token.rebase(
>             ^^^^^^^^^^^^^
>                 epoch,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FRTRebaser
Line:        354
Source: 
>         lastRebaser = msg.sender;
>         emit LogRebase(epoch, token.totalSupply(), random, msg.sender);
>                               ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FRTRebaser
Line:        344
Source: 
>             delta = delta.sub(price);
>             token.rebase(
>             ^^^^^^^^^^^^^
>                 epoch,

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    FRTRebaser
Line:        253
Source: 
>     function rebaseTime() public view returns (bool) {
>        return block.timestamp % 3600 < 3 * 60;
>               ^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FRTRebaser
Line:        274
Source: 
>                 abi.encodePacked(
>                     block.timestamp +
>                     ^^^^^^^^^^^^^^^
>                         block.difficulty +

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FRTRebaser
Line:        296
Source: 
>        // uint256 timestamp = block.timestamp;
>         require(block.timestamp > starttime, 'REBASE IS NOT ACTIVE YET');
>                 ^^^^^^^^^^^^^^^
>         require(lastRebaser != msg.sender, 'YOU_ALREADY_REBASED');

[0m
