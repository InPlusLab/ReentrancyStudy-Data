Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        8
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        12
Source: 
>         uint256 c = a * b;
>         require(c / a == b);
>                 ^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ethertime
Line:        256
Source: 
>                     uint256 blockNumber = _players[lotteryId][lastIndex].blockNumber;
>                     if (block.number.sub(blockNumber) == 1) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         continue;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        158
Source: 
>     }
>     function transferOwnership(address addr) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = addr;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        162
Source: 
>     }
>     function transferAdminPart(address addr, uint256 part)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        192
Source: 
>     }
>     function createLottery(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        264
Source: 
>     }
>     function payOutLotteryPrizes(uint256 lotteryId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Lottery storage lottery = _lotteries[lotteryId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        303
Source: 
>     }
>     function deleteLottery(uint256 lotteryId) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(lotteryId <= _lastLotteryId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        311
Source: 
>     }
>     function createOrder(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address recipient,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        334
Source: 
>     }
>     function confirmOrder(uint256 orderId) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orderId <= _lastOrderId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        376
Source: 
>     }
>     function getOwner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        379
Source: 
>     }
>     function getTotalFee() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        382
Source: 
>     }
>     function getAdmins() public view returns (address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _admins;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        385
Source: 
>     }
>     function getAdminPartByAddress(address addr) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _adminsParts[addr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        388
Source: 
>     }
>     function getLotteryInfo(uint256 id)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        422
Source: 
>     }
>     function getFinishedLotteryInfo(uint256 id)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        447
Source: 
>     }
>     function getLotteryPlayers(uint256 lotteryId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        468
Source: 
>     }
>     function getWinPlayers(uint256 lotteryId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        508
Source: 
>     }
>     function getOpenedLotteries() public view returns (uint256[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory result = new uint256[](_openLotteries.length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        515
Source: 
>     }
>     function getUnpayedLotteries() public view returns (uint256[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory result = new uint256[](_unpayedLotteries.length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        522
Source: 
>     }
>     function getUniquePlayersCount(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 lotteryId

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ethertime
Line:        531
Source: 
>     }
>     function getOrderInfo(uint256 id)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ethertime
Line:        671
Source: 
>         address payable addr = address(uint160(_players[lottery.id][0].addr));
>         addr.transfer(sum);
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Ethertime
Line:        187
Source: 
>                 _totalFee = _totalFee.sub(sum);
>                 addr.transfer(sum);
>                 ^^^^^^^^^^^^^^^^^^
>                 emit DividendEvent(addr, sum);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Ethertime
Line:        283
Source: 
>                 _players[lottery.id][playerIndex].prize = prize;
>                 addr.transfer(prize);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 emit WinPrizeEvent(addr, prize, lottery.id);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ethertime
Line:        158
Source: 
>     }
>     function transferOwnership(address addr) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = addr;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ethertime
Line:        162
Source: 
>     }
>     function transferAdminPart(address addr, uint256 part)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ethertime
Line:        231
Source: 
>     }
>     function buyTicket(uint256 lotteryId) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(lotteryId <= _lastLotteryId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ethertime
Line:        192
Source: 
>     }
>     function createLottery(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ethertime
Line:        311
Source: 
>     }
>     function createOrder(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address recipient,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ethertime
Line:        385
Source: 
>     }
>     function getAdminPartByAddress(address addr) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _adminsParts[addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ethertime
Line:        388
Source: 
>     }
>     function getLotteryInfo(uint256 id)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ethertime
Line:        447
Source: 
>     }
>     function getLotteryPlayers(uint256 lotteryId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ethertime
Line:        468
Source: 
>     }
>     function getWinPlayers(uint256 lotteryId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ethertime
Line:        522
Source: 
>     }
>     function getUniquePlayersCount(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 lotteryId

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ethertime
Line:        531
Source: 
>     }
>     function getOrderInfo(uint256 id)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        11
Source: 
>         }
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Ethertime
Line:        187
Source: 
>                 _totalFee = _totalFee.sub(sum);
>                 addr.transfer(sum);
>                 ^^^^^^^^^^^^^^^^^^
>                 emit DividendEvent(addr, sum);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Ethertime
Line:        671
Source: 
>         address payable addr = address(uint160(_players[lottery.id][0].addr));
>         addr.transfer(sum);
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Ethertime
Line:        283
Source: 
>                 _players[lottery.id][playerIndex].prize = prize;
>                 addr.transfer(prize);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 emit WinPrizeEvent(addr, prize, lottery.id);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Ethertime
Line:        355
Source: 
>         if (remainder > 0)
>             msg.sender.transfer(remainder);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         order.status = OrderStatus.Closed;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Ethertime
Line:        352
Source: 
>         address payable addr = address(uint160(order.admin));
>         addr.transfer(order.sum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainder = msg.value.sub(order.sum);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ethertime
Line:        37
Source: 
>     using SafeMath for *;
>     uint256 constant None = uint256(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant private MAX_PERCENTS = 10000;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5.0 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> library SafeMath {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ethertime
Line:        37
Source: 
>     using SafeMath for *;
>     uint256 constant None = uint256(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant private MAX_PERCENTS = 10000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ethertime
Line:        41
Source: 
>     uint256 constant private FEE = 1150;
>     uint256 constant MAX_RECENT_BLOCK_NUMBER = 250;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant TRANSACTIONS_PER_PAYOUT = 25;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ethertime
Line:        42
Source: 
>     uint256 constant MAX_RECENT_BLOCK_NUMBER = 250;
>     uint256 constant TRANSACTIONS_PER_PAYOUT = 25;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     enum LotteryStatus {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ethertime
Line:        94
Source: 
>     mapping (uint256 => Lottery) private _lotteries;
>     uint256 _lastLotteryId;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => Player[]) private _players;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ethertime
Line:        97
Source: 
>     mapping (uint256 => uint256) private _uniquePlayersCount;
>     uint256[] _openLotteries;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[] _unpayedLotteries;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ethertime
Line:        98
Source: 
>     uint256[] _openLotteries;
>     uint256[] _unpayedLotteries;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => uint256) private _reservedFee;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ethertime
Line:        101
Source: 
>     mapping (uint256 => Order) private _orders;
>     uint256 _lastOrderId;
>     ^^^^^^^^^^^^^^^^^^^^
>     event BuyTicketEvent(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ethertime
Line:        187
Source: 
>                 _totalFee = _totalFee.sub(sum);
>                 addr.transfer(sum);
>                 ^^^^^^^^^^^^^^^^^^
>                 emit DividendEvent(addr, sum);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ethertime
Line:        246
Source: 
>         if (remainder > 0)
>             msg.sender.transfer(remainder);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BuyTicketEvent(msg.sender, actualLotteryId);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ethertime
Line:        671
Source: 
>         address payable addr = address(uint160(_players[lottery.id][0].addr));
>         addr.transfer(sum);
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ethertime
Line:        283
Source: 
>                 _players[lottery.id][playerIndex].prize = prize;
>                 addr.transfer(prize);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 emit WinPrizeEvent(addr, prize, lottery.id);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ethertime
Line:        355
Source: 
>         if (remainder > 0)
>             msg.sender.transfer(remainder);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         order.status = OrderStatus.Closed;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Ethertime
Line:        352
Source: 
>         address payable addr = address(uint160(order.admin));
>         addr.transfer(order.sum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainder = msg.value.sub(order.sum);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Ethertime
Line:        187
Source: 
>                 _totalFee = _totalFee.sub(sum);
>                 addr.transfer(sum);
>                 ^^^^^^^^^^^^^^^^^^
>                 emit DividendEvent(addr, sum);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Ethertime
Line:        671
Source: 
>         address payable addr = address(uint160(_players[lottery.id][0].addr));
>         addr.transfer(sum);
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Ethertime
Line:        283
Source: 
>                 _players[lottery.id][playerIndex].prize = prize;
>                 addr.transfer(prize);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 emit WinPrizeEvent(addr, prize, lottery.id);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Ethertime
Line:        352
Source: 
>         address payable addr = address(uint160(order.admin));
>         addr.transfer(order.sum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainder = msg.value.sub(order.sum);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Ethertime
Line:        355
Source: 
>         if (remainder > 0)
>             msg.sender.transfer(remainder);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         order.status = OrderStatus.Closed;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ethertime
Line:        187
Source: 
>                 _totalFee = _totalFee.sub(sum);
>                 addr.transfer(sum);
>                 ^^^^^^^^^^^^^^^^^^
>                 emit DividendEvent(addr, sum);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ethertime
Line:        246
Source: 
>         if (remainder > 0)
>             msg.sender.transfer(remainder);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BuyTicketEvent(msg.sender, actualLotteryId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ethertime
Line:        671
Source: 
>         address payable addr = address(uint160(_players[lottery.id][0].addr));
>         addr.transfer(sum);
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ethertime
Line:        283
Source: 
>                 _players[lottery.id][playerIndex].prize = prize;
>                 addr.transfer(prize);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 emit WinPrizeEvent(addr, prize, lottery.id);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ethertime
Line:        352
Source: 
>         address payable addr = address(uint160(order.admin));
>         addr.transfer(order.sum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainder = msg.value.sub(order.sum);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ethertime
Line:        355
Source: 
>         if (remainder > 0)
>             msg.sender.transfer(remainder);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         order.status = OrderStatus.Closed;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ethertime
Line:        90
Source: 
>     address private _owner;
>     uint256 private _totalFee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     address[] private _admins;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ethertime
Line:        94
Source: 
>     mapping (uint256 => Lottery) private _lotteries;
>     uint256 _lastLotteryId;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => Player[]) private _players;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ethertime
Line:        101
Source: 
>     mapping (uint256 => Order) private _orders;
>     uint256 _lastOrderId;
>     ^^^^^^^^^^^^^^^^^^^^
>     event BuyTicketEvent(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Ethertime
Line:        187
Source: 
>                 _totalFee = _totalFee.sub(sum);
>                 addr.transfer(sum);
>                 ^^^^^^^^^^^^^^^^^^
>                 emit DividendEvent(addr, sum);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Ethertime
Line:        246
Source: 
>         if (remainder > 0)
>             msg.sender.transfer(remainder);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BuyTicketEvent(msg.sender, actualLotteryId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Ethertime
Line:        671
Source: 
>         address payable addr = address(uint160(_players[lottery.id][0].addr));
>         addr.transfer(sum);
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Ethertime
Line:        283
Source: 
>                 _players[lottery.id][playerIndex].prize = prize;
>                 addr.transfer(prize);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 emit WinPrizeEvent(addr, prize, lottery.id);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        186
Source: 
>             if (sum > 0) {
>                 _totalFee = _totalFee.sub(sum);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 addr.transfer(sum);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        242
Source: 
>         uint256 feeSum = actualPrice.mul(FEE).div(MAX_PERCENTS);
>         lottery.pot = lottery.pot.add(actualPrice.sub(feeSum));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _reservedFee[lottery.id] = _reservedFee[lottery.id].add(feeSum);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        243
Source: 
>         lottery.pot = lottery.pot.add(actualPrice.sub(feeSum));
>         _reservedFee[lottery.id] = _reservedFee[lottery.id].add(feeSum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainder = msg.value.sub(actualPrice);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        587
Source: 
>         });
>         _players[lottery.id].push(player);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        696
Source: 
>         if (isUniq)
>             _uniquePlayersCount[lotteryId] = _uniquePlayersCount[lotteryId].add(1);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        597
Source: 
>             (begin, end) = getPeriodBorders(begin, end, now);
>         _lastLotteryId = _lastLotteryId.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _lotteries[_lastLotteryId] = Lottery({

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        598
Source: 
>         _lastLotteryId = _lastLotteryId.add(1);
>         _lotteries[_lastLotteryId] = Lottery({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             id: _lastLotteryId,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        294
Source: 
>             if (lottery.remainder > 0) {
>                 _totalFee = _totalFee.add(lottery.remainder);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ethertime
Line:        297
Source: 
>             lottery.remainder = 0;
>             _totalFee = _totalFee.add(_reservedFee[lottery.id]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _reservedFee[lottery.id] = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        621
Source: 
>          });
>         parentLottery.childId = _lastLotteryId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _openLotteries.push(_lastLotteryId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        622
Source: 
>         parentLottery.childId = _lastLotteryId;
>         _openLotteries.push(_lastLotteryId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit NewLotteryEvent(_lastLotteryId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        669
Source: 
>         sum = sum.add(_reservedFee[lottery.id]);
>         _reservedFee[lottery.id] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable addr = address(uint160(_players[lottery.id][0].addr));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        674
Source: 
>     function finalizeNotEmptyLottery(Lottery storage lottery) private {
>         (
>         ^
>             lottery.winNumber,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        680
Source: 
>         if (lottery.prizeType == LotteryPrizeType.Three) {
>             lottery.winningsCount = getWinningsCountForThree(lottery);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        684
Source: 
>         }
>         lottery.remainder = lottery.pot;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _unpayedLotteries.push(lottery.id);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        685
Source: 
>         lottery.remainder = lottery.pot;
>         _unpayedLotteries.push(lottery.id);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        682
Source: 
>         } else {
>             lottery.winningsCount = getWinningsCount(lottery);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        654
Source: 
>     function beforeFinalizeLottery(Lottery storage lottery) private {
>         lottery.status = LotteryStatus.Finished;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         removeLotteryIdFromArray(lottery.id, _openLotteries);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        710
Source: 
>         for (uint256 i = index; i < array.length.sub(1); i++) {
>             array[i] = array[i.add(1)];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        712
Source: 
>         }
>         array.length--;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        280
Source: 
>             if (prize > 0) {
>                 lottery.remainder = lottery.remainder.sub(prize);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address payable addr = address(uint160(_players[lottery.id][playerIndex].addr));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        282
Source: 
>                 address payable addr = address(uint160(_players[lottery.id][playerIndex].addr));
>                 _players[lottery.id][playerIndex].prize = prize;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 addr.transfer(prize);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        287
Source: 
>         }
>         lottery.alreadyPayedCount = lottery.alreadyPayedCount.add(toPayCount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit PayOutEvent(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        296
Source: 
>             }
>             lottery.remainder = 0;
>             ^^^^^^^^^^^^^^^^^^^^^
>             _totalFee = _totalFee.add(_reservedFee[lottery.id]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        298
Source: 
>             _totalFee = _totalFee.add(_reservedFee[lottery.id]);
>             _reservedFee[lottery.id] = 0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             lottery.isPayedOut = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ethertime
Line:        299
Source: 
>             _reservedFee[lottery.id] = 0;
>             lottery.isPayedOut = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             removeLotteryIdFromArray(lottery.id, _unpayedLotteries);

[0m
