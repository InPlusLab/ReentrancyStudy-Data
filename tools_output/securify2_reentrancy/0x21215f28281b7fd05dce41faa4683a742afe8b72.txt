[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigTools
Line:        66
Source: 
> 
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        26
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        192
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        196
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        200
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressList
Line:        84
Source: 
> 
>   function get_all_addresses() public view returns(address[] memory){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return addresses;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressList
Line:        88
Source: 
> 
>   function get_address(uint i) public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(i < addresses.length, "AddressList:get_address, out of range");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressList
Line:        93
Source: 
> 
>   function get_address_num() public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return addresses.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressList
Line:        97
Source: 
> 
>   function is_address_exist(address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address_status[addr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        192
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        196
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        200
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigTools
Line:        66
Source: 
> 
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressList
Line:        84
Source: 
> 
>   function get_all_addresses() public view returns(address[] memory){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return addresses;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustList
Line:        132
Source: 
> 
>   function is_trusted(address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return is_address_exist(addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustList
Line:        136
Source: 
> 
>   function get_trusted(uint i) public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return get_address(i);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustList
Line:        140
Source: 
> 
>   function get_trusted_num() public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return get_address_num();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustList
Line:        144
Source: 
> 
>   function add_trusted(uint64 id, address addr) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "add_trusted"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustList
Line:        149
Source: 
>   }
>   function add_multi_trusted(uint64 id, address[] memory _list) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "add_multi_trusted"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustList
Line:        157
Source: 
> 
>   function remove_trusted(uint64 id, address addr) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "remove_trusted"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustList
Line:        163
Source: 
> 
>   function remove_multi_trusted(uint64 id, address[] memory _list) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   only_signer is_majority_sig(id, "remove_multi_trusted"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        192
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        196
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        200
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrustListFactory
Line:        175
Source: 
> 
>   function createTrustList(address[] memory _list, address _multisig) public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     TrustList tl = new TrustList(_list, _multisig);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        26
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        192
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        196
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        200
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        26
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        192
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        196
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        200
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiSigTools
Line:        66
Source: 
> 
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressList
Line:        84
Source: 
> 
>   function get_all_addresses() public view returns(address[] memory){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return addresses;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressList
Line:        88
Source: 
> 
>   function get_address(uint i) public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(i < addresses.length, "AddressList:get_address, out of range");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressList
Line:        93
Source: 
> 
>   function get_address_num() public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return addresses.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        266
Source: 
> 
>   function add_auction(address _auction) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require (msg.sender == auction_mgr_contract, "only auction mgr can op this");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        271
Source: 
> 
>   function apply_bid(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        284
Source: 
> 
>   function revoke_bid(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        293
Source: 
> 
>   function apply_auction(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        309
Source: 
> 
>   function object_token() public view returns(address, string memory){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return object_erc20_pool.token();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        312
Source: 
>   }
>   function object_total_amount() public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return object_erc20_pool.balance();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        317
Source: 
>   event ChangeObjectERC20Pool(address old_addr, address new_addr);
>   function change_object_erc20_pool(uint64 id, address new_pool) public only_signer is_majority_sig(id, "change_object_erc20_pool"){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_pool != address(0x0), "invalid address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        326
Source: 
>   event ChangeBenifitPool(address old_addr, address new_addr);
>   function change_benifit_pool(uint64 id, address new_pool) public only_signer is_majority_sig(id, "change_benifit_pool"){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_pool != address(0x0), "invalid address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        192
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        196
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20AuctionOpProxyFactory
Line:        336
Source: 
>   event NewERC20AuctionOpProxy(address addr);
>   function createERC20AuctionOpProxy(address _object_erc20_pool,
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               address _exchange_erc20_token,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        26
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        192
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        196
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        200
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        277
Source: 
>     TransferableToken token = TransferableToken(exchange_erc20_token);
>     uint old_balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", addr, address(this), total));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        278
Source: 
>     uint old_balance = token.balanceOf(address(this));
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", addr, address(this), total));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, transferFrom return false. Please make sure you have enough token and approved them for auction.");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        280
Source: 
>     require(ret, "ERC20AuctionOpProxy, transferFrom return false. Please make sure you have enough token and approved them for auction.");
>     uint new_balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_balance == old_balance + total, "ERC20TokenAuctionOpProxy, apply_bid, invalid bid");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        288
Source: 
> 
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", addr, old_total));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, revoke_bid, transfer return false");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        298
Source: 
>     TransferableToken token = TransferableToken(exchange_erc20_token);
>     uint old_balance = token.balanceOf(benifit_pool);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", benifit_pool, total));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        299
Source: 
>     uint old_balance = token.balanceOf(benifit_pool);
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", benifit_pool, total));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, apply_auction, transfer return false");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        301
Source: 
>     require(ret, "ERC20AuctionOpProxy, apply_auction, transfer return false");
>     uint new_balance = token.balanceOf(benifit_pool);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_balance == old_balance + total, "ERC20AuctionOpProxy, apply_auction, invalid transfer");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        306
Source: 
>     //exchange_deposit_pool.unlock(addr, total);
>     object_erc20_pool.issue(addr, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        310
Source: 
>   function object_token() public view returns(address, string memory){
>     return object_erc20_pool.token();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        313
Source: 
>   function object_total_amount() public view returns(uint){
>     return object_erc20_pool.balance();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TokenClaimer
Line:        232
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        278
Source: 
>     uint old_balance = token.balanceOf(address(this));
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", addr, address(this), total));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, transferFrom return false. Please make sure you have enough token and approved them for auction.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        288
Source: 
> 
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", addr, old_total));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, revoke_bid, transfer return false");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        299
Source: 
>     uint old_balance = token.balanceOf(benifit_pool);
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", benifit_pool, total));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, apply_auction, transfer return false");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultiSigTools
Line:        66
Source: 
> 
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressArray
Line:        26
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultiSigTools
Line:        66
Source: 
> 
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrustList
Line:        136
Source: 
> 
>   function get_trusted(uint i) public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return get_address(i);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrustList
Line:        144
Source: 
> 
>   function add_trusted(uint64 id, address addr) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "add_trusted"){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrustList
Line:        149
Source: 
>   }
>   function add_multi_trusted(uint64 id, address[] memory _list) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "add_multi_trusted"){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrustList
Line:        157
Source: 
> 
>   function remove_trusted(uint64 id, address addr) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "remove_trusted"){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrustList
Line:        163
Source: 
> 
>   function remove_multi_trusted(uint64 id, address[] memory _list) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   only_signer is_majority_sig(id, "remove_multi_trusted"){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressArray
Line:        26
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultiSigTools
Line:        66
Source: 
> 
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        266
Source: 
> 
>   function add_auction(address _auction) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require (msg.sender == auction_mgr_contract, "only auction mgr can op this");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        271
Source: 
> 
>   function apply_bid(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        284
Source: 
> 
>   function revoke_bid(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        293
Source: 
> 
>   function apply_auction(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        317
Source: 
>   event ChangeObjectERC20Pool(address old_addr, address new_addr);
>   function change_object_erc20_pool(uint64 id, address new_pool) public only_signer is_majority_sig(id, "change_object_erc20_pool"){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_pool != address(0x0), "invalid address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        326
Source: 
>   event ChangeBenifitPool(address old_addr, address new_addr);
>   function change_benifit_pool(uint64 id, address new_pool) public only_signer is_majority_sig(id, "change_benifit_pool"){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_pool != address(0x0), "invalid address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressArray
Line:        26
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressList
Line:        97
Source: 
> 
>   function is_address_exist(address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address_status[addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressList
Line:        97
Source: 
> 
>   function is_address_exist(address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address_status[addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrustList
Line:        132
Source: 
> 
>   function is_trusted(address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return is_address_exist(addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrustListFactory
Line:        175
Source: 
> 
>   function createTrustList(address[] memory _list, address _multisig) public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     TrustList tl = new TrustList(_list, _multisig);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressList
Line:        97
Source: 
> 
>   function is_address_exist(address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address_status[addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20AuctionOpProxyFactory
Line:        336
Source: 
>   event NewERC20AuctionOpProxy(address addr);
>   function createERC20AuctionOpProxy(address _object_erc20_pool,
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               address _exchange_erc20_token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        8
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        34
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        201
Source: 
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>         c = a * b;
>             ^^^^^
>         require(a == 0 || c / a == b, "mul");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        277
Source: 
>     TransferableToken token = TransferableToken(exchange_erc20_token);
>     uint old_balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", addr, address(this), total));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        280
Source: 
>     require(ret, "ERC20AuctionOpProxy, transferFrom return false. Please make sure you have enough token and approved them for auction.");
>     uint new_balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_balance == old_balance + total, "ERC20TokenAuctionOpProxy, apply_bid, invalid bid");

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        298
Source: 
>     TransferableToken token = TransferableToken(exchange_erc20_token);
>     uint old_balance = token.balanceOf(benifit_pool);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", benifit_pool, total));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        301
Source: 
>     require(ret, "ERC20AuctionOpProxy, apply_auction, transfer return false");
>     uint new_balance = token.balanceOf(benifit_pool);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_balance == old_balance + total, "ERC20AuctionOpProxy, apply_auction, invalid transfer");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressArray
Line:        17
Source: 
> 
>   function index_of(address[] storage self, address addr) public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigInterface
Line:        41
Source: 
> contract MultiSigInterface{
>   function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function is_signer(address addr) public view returns(bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigInterface
Line:        42
Source: 
>   function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool);
>   function is_signer(address addr) public view returns(bool);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigTools
Line:        46
Source: 
> contract MultiSigTools{
>   MultiSigInterface public multisig_contract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   constructor(address _contract) public{

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigTools
Line:        52
Source: 
> 
>   modifier only_signer{
>   ^^^^^^^^^^^^^^^^^^^^^
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigTools
Line:        57
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigTools
Line:        66
Source: 
> 
>   function transfer_multisig(uint64 id, address _contract) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   is_majority_sig(id, "transfer_multisig"){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressList
Line:        79
Source: 
>   using AddressArray for address[];
>   mapping(address => bool) private address_status;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address[] public addresses;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressList
Line:        84
Source: 
> 
>   function get_all_addresses() public view returns(address[] memory){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return addresses;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressList
Line:        88
Source: 
> 
>   function get_address(uint i) public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(i < addresses.length, "AddressList:get_address, out of range");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressList
Line:        93
Source: 
> 
>   function get_address_num() public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return addresses.length;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressList
Line:        97
Source: 
> 
>   function is_address_exist(address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address_status[addr];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressList
Line:        101
Source: 
> 
>   function _add_address(address addr) internal{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if(address_status[addr]) return;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressList
Line:        107
Source: 
> 
>   function _remove_address(address addr) internal{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if(!address_status[addr]) return;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustList
Line:        132
Source: 
> 
>   function is_trusted(address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return is_address_exist(addr);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustList
Line:        136
Source: 
> 
>   function get_trusted(uint i) public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return get_address(i);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustList
Line:        140
Source: 
> 
>   function get_trusted_num() public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return get_address_num();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustList
Line:        144
Source: 
> 
>   function add_trusted(uint64 id, address addr) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "add_trusted"){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustList
Line:        149
Source: 
>   }
>   function add_multi_trusted(uint64 id, address[] memory _list) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "add_multi_trusted"){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustList
Line:        157
Source: 
> 
>   function remove_trusted(uint64 id, address addr) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     only_signer is_majority_sig(id, "remove_trusted"){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrustList
Line:        163
Source: 
> 
>   function remove_multi_trusted(uint64 id, address[] memory _list) public
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   only_signer is_majority_sig(id, "remove_multi_trusted"){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IERC20AuctionOpProxy
Line:        183
Source: 
> contract IERC20AuctionOpProxy {
>   function add_auction(address _auction) public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function apply_bid(address addr, uint amount, uint price, uint price_unit) public;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IERC20AuctionOpProxy
Line:        184
Source: 
>   function add_auction(address _auction) public;
>   function apply_bid(address addr, uint amount, uint price, uint price_unit) public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function revoke_bid(address addr, uint amount, uint price, uint price_unit) public;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IERC20AuctionOpProxy
Line:        185
Source: 
>   function apply_bid(address addr, uint amount, uint price, uint price_unit) public;
>   function revoke_bid(address addr, uint amount, uint price, uint price_unit) public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function apply_auction(address addr, uint amount, uint price, uint price_unit) public;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IERC20AuctionOpProxy
Line:        186
Source: 
>   function revoke_bid(address addr, uint amount, uint price, uint price_unit) public;
>   function apply_auction(address addr, uint amount, uint price, uint price_unit) public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function object_token() public view returns(address, string memory);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IERC20AuctionOpProxy
Line:        187
Source: 
>   function apply_auction(address addr, uint amount, uint price, uint price_unit) public;
>   function object_token() public view returns(address, string memory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function object_total_amount() public view returns(uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IERC20AuctionOpProxy
Line:        188
Source: 
>   function object_token() public view returns(address, string memory);
>   function object_total_amount() public view returns(uint);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenClaimer
Line:        232
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>          ^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        246
Source: 
> 
>   ERC20TokenBankInterface public object_erc20_pool;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public exchange_erc20_token;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        247
Source: 
>   ERC20TokenBankInterface public object_erc20_pool;
>   address public exchange_erc20_token;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public benifit_pool;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        248
Source: 
>   address public exchange_erc20_token;
>   address public benifit_pool;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        250
Source: 
> 
>   address public auction_mgr_contract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        266
Source: 
> 
>   function add_auction(address _auction) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require (msg.sender == auction_mgr_contract, "only auction mgr can op this");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        271
Source: 
> 
>   function apply_bid(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        277
Source: 
>     TransferableToken token = TransferableToken(exchange_erc20_token);
>     uint old_balance = token.balanceOf(address(this));
>     ^^^^^^^^^^^^^^^^
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", addr, address(this), total));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        278
Source: 
>     uint old_balance = token.balanceOf(address(this));
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", addr, address(this), total));
>      ^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, transferFrom return false. Please make sure you have enough token and approved them for auction.");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        280
Source: 
>     require(ret, "ERC20AuctionOpProxy, transferFrom return false. Please make sure you have enough token and approved them for auction.");
>     uint new_balance = token.balanceOf(address(this));
>     ^^^^^^^^^^^^^^^^
>     require(new_balance == old_balance + total, "ERC20TokenAuctionOpProxy, apply_bid, invalid bid");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        284
Source: 
> 
>   function revoke_bid(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        286
Source: 
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");
>     uint old_total = amount.safeMul(price).safeDiv(price_unit);
>     ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        288
Source: 
> 
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", addr, old_total));
>      ^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, revoke_bid, transfer return false");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        293
Source: 
> 
>   function apply_auction(address addr, uint amount, uint price, uint price_unit) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_address_exist(msg.sender), "only trusted auction contract can op this");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        298
Source: 
>     TransferableToken token = TransferableToken(exchange_erc20_token);
>     uint old_balance = token.balanceOf(benifit_pool);
>     ^^^^^^^^^^^^^^^^
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", benifit_pool, total));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        299
Source: 
>     uint old_balance = token.balanceOf(benifit_pool);
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", benifit_pool, total));
>      ^^^^^^^^
>     require(ret, "ERC20AuctionOpProxy, apply_auction, transfer return false");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        301
Source: 
>     require(ret, "ERC20AuctionOpProxy, apply_auction, transfer return false");
>     uint new_balance = token.balanceOf(benifit_pool);
>     ^^^^^^^^^^^^^^^^
>     require(new_balance == old_balance + total, "ERC20AuctionOpProxy, apply_auction, invalid transfer");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        309
Source: 
> 
>   function object_token() public view returns(address, string memory){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return object_erc20_pool.token();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        312
Source: 
>   }
>   function object_total_amount() public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return object_erc20_pool.balance();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        317
Source: 
>   event ChangeObjectERC20Pool(address old_addr, address new_addr);
>   function change_object_erc20_pool(uint64 id, address new_pool) public only_signer is_majority_sig(id, "change_object_erc20_pool"){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_pool != address(0x0), "invalid address");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        319
Source: 
>     require(new_pool != address(0x0), "invalid address");
>     address old_addr = address(object_erc20_pool);
>     ^^^^^^^^^^^^^^^^
>     object_erc20_pool = ERC20TokenBankInterface(new_pool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        326
Source: 
>   event ChangeBenifitPool(address old_addr, address new_addr);
>   function change_benifit_pool(uint64 id, address new_pool) public only_signer is_majority_sig(id, "change_benifit_pool"){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_pool != address(0x0), "invalid address");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigTools
Line:        57
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>                            ^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigTools
Line:        57
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>                                       ^^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigTools
Line:        58
Source: 
>   modifier is_majority_sig(uint64 id, string memory name) {
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     ^^^^^^^^^^^^
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        277
Source: 
>     TransferableToken token = TransferableToken(exchange_erc20_token);
>     uint old_balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transferFrom(address,address,uint256)", addr, address(this), total));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        280
Source: 
>     require(ret, "ERC20AuctionOpProxy, transferFrom return false. Please make sure you have enough token and approved them for auction.");
>     uint new_balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_balance == old_balance + total, "ERC20TokenAuctionOpProxy, apply_bid, invalid bid");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        298
Source: 
>     TransferableToken token = TransferableToken(exchange_erc20_token);
>     uint old_balance = token.balanceOf(benifit_pool);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (bool ret, ) = exchange_erc20_token.call(abi.encodeWithSignature("transfer(address,uint256)", benifit_pool, total));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20AuctionOpProxy
Line:        301
Source: 
>     require(ret, "ERC20AuctionOpProxy, apply_auction, transfer return false");
>     uint new_balance = token.balanceOf(benifit_pool);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(new_balance == old_balance + total, "ERC20AuctionOpProxy, apply_auction, invalid transfer");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        53
Source: 
>   modifier only_signer{
>     require(multisig_contract.is_signer(msg.sender), "only a signer can call in MultiSigTools");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiSigTools
Line:        59
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     if(multisig_contract.update_and_check_reach_majority(id, name, hash, msg.sender)){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        306
Source: 
>     //exchange_deposit_pool.unlock(addr, total);
>     object_erc20_pool.issue(addr, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        310
Source: 
>   function object_token() public view returns(address, string memory){
>     return object_erc20_pool.token();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        313
Source: 
>   function object_total_amount() public view returns(uint){
>     return object_erc20_pool.balance();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiSigTools
Line:        70
Source: 
>     address old = address(multisig_contract);
>     multisig_contract = MultiSigInterface(_contract);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit TransferMultiSig(old, _contract);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        28
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        31
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        36
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        28
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        31
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        36
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiSigTools
Line:        70
Source: 
>     address old = address(multisig_contract);
>     multisig_contract = MultiSigInterface(_contract);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit TransferMultiSig(old, _contract);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressList
Line:        103
Source: 
>     if(address_status[addr]) return;
>     address_status[addr] = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     addresses.push(addr);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressList
Line:        104
Source: 
>     address_status[addr] = true;
>     addresses.push(addr);
>     ^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressList
Line:        109
Source: 
>     if(!address_status[addr]) return;
>     address_status[addr] = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     addresses.remove(addr);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        28
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        31
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        36
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        28
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        31
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        36
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        28
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        31
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        36
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiSigTools
Line:        70
Source: 
>     address old = address(multisig_contract);
>     multisig_contract = MultiSigInterface(_contract);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit TransferMultiSig(old, _contract);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        28
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        31
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        320
Source: 
>     address old_addr = address(object_erc20_pool);
>     object_erc20_pool = ERC20TokenBankInterface(new_pool);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        329
Source: 
>     address old = benifit_pool;
>     benifit_pool = new_pool;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     emit ChangeBenifitPool(old, benifit_pool);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        36
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        28
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        31
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        36
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        230
Source: 
>         TransferableToken token = TransferableToken(_token);
>         uint balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        232
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20AuctionOpProxy
Line:        306
Source: 
>     //exchange_deposit_pool.unlock(addr, total);
>     object_erc20_pool.issue(addr, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
