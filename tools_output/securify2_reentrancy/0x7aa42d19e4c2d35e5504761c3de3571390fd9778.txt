Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CandorFi
Line:        141
Source: 
>     uint public round;
>     uint public random;
>     ^^^^^^^^^^^^^^^^^^
>     uint public ticketPrice = 10 * 1e6; // 10$ ticket price (18 decimals)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CandorFi
Line:        147
Source: 
>     
>     bytes32 internal keyHash = 0xAA77729D3466CA35AE8D28B3BBAC7CC36A5031EFDC430821C02BC31A238AF445;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint internal fee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    CandorFi
Line:        157
Source: 
>     modifier onlyOwner{
>         require(msg.sender == owner,"Only owner allowed");
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    CandorFi
Line:        261
Source: 
> 	        
> 	        if(entryArray[mid] == target){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	            return entryArray[mid];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    CandorFi
Line:        157
Source: 
>     modifier onlyOwner{
>         require(msg.sender == owner,"Only owner allowed");
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CandorFi
Line:        202
Source: 
>     
>     function getRandomNumber() public onlyOwner returns (bytes32 requestId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(LINK.balanceOf(address(this)) > fee, "Not enough LINK - fill contract with faucet");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CandorFi
Line:        283
Source: 
> 	
> 	function winningAmount() public view returns(uint amount,uint winchance){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CandorFi
Line:        293
Source: 
> 	
> 	function transferAnyERC20(address _tokenAddress, address _to, uint _amount) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(_tokenAddress != address(token),"Not USDT");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VRFConsumerBase
Line:        94
Source: 
>   {
>     LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        180
Source: 
>     function withdrawLink(uint value) external onlyOwner {
>     	require(LINK.transfer(msg.sender, value), "Unable to transfer");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        203
Source: 
>     function getRandomNumber() public onlyOwner returns (bytes32 requestId) {
>         require(LINK.balanceOf(address(this)) > fee, "Not enough LINK - fill contract with faucet");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return requestRandomness(keyHash, fee, getSeed());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        210
Source: 
>         require(!userInfo[round][msg.sender].isEntered,"Already entered!");
>         require(token.allowance(msg.sender,address(this)) >= amount,"Set allowance first!");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool success = token.transferFrom(msg.sender,address(this),amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        211
Source: 
>         require(token.allowance(msg.sender,address(this)) >= amount,"Set allowance first!");
>         bool success = token.transferFrom(msg.sender,address(this),amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success,"Transfer failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        213
Source: 
>         require(success,"Transfer failed");
>         require(token.balanceOf(address(this)) <= poolLimit,"Pool already full");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint ticketCount = amount.div(ticketPrice);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        229
Source: 
>         oldRandomResult = randomResult;
>         uint totalBalance = token.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint winner = calculateWinner((randomResult.mod(totalEntry)));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        232
Source: 
>         address wonUser = entryMapping[winner];
>         token.transfer(owner,(totalBalance * adminFee) / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalBalance -= (totalBalance * adminFee) / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        234
Source: 
>         totalBalance -= (totalBalance * adminFee) / 100;
>         token.transfer(wonUser,totalBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit WinnerPicked(wonUser,(randomResult.mod(totalEntry)));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        285
Source: 
> 	    return(
> 	        token.balanceOf(address(this)) * 8 / 10,
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	        (userInfo[round][msg.sender].totalEntries * 100) / totalEntry);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CandorFi
Line:        295
Source: 
> 	    require(_tokenAddress != address(token),"Not USDT");
>         IERC20(_tokenAddress).transfer(_to, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CandorFi
Line:        167
Source: 
>     
>     function setTicketPrice(uint value) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        ticketPrice = value; 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CandorFi
Line:        171
Source: 
>     
>     function setPoolLimit(uint value) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolLimit = value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CandorFi
Line:        175
Source: 
>     
>     function setAdminFee(uint value) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         adminFee = value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CandorFi
Line:        179
Source: 
>     
>     function withdrawLink(uint value) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	require(LINK.transfer(msg.sender, value), "Unable to transfer");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CandorFi
Line:        183
Source: 
>     
>     function transferOwnership(address newOwner) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CandorFi
Line:        293
Source: 
> 	
> 	function transferAnyERC20(address _tokenAddress, address _to, uint _amount) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(_tokenAddress != address(token),"Not USDT");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VRFConsumerBase
Line:        112
Source: 
> 
>   function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vrfCoordinator, "Only VRFCoordinator can fulfill");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    CandorFi
Line:        232
Source: 
>         address wonUser = entryMapping[winner];
>         token.transfer(owner,(totalBalance * adminFee) / 100);
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>         totalBalance -= (totalBalance * adminFee) / 100;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    CandorFi
Line:        233
Source: 
>         token.transfer(owner,(totalBalance * adminFee) / 100);
>         totalBalance -= (totalBalance * adminFee) / 100;
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(wonUser,totalBalance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CandorFi
Line:        210
Source: 
>         require(!userInfo[round][msg.sender].isEntered,"Already entered!");
>         require(token.allowance(msg.sender,address(this)) >= amount,"Set allowance first!");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool success = token.transferFrom(msg.sender,address(this),amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CandorFi
Line:        211
Source: 
>         require(token.allowance(msg.sender,address(this)) >= amount,"Set allowance first!");
>         bool success = token.transferFrom(msg.sender,address(this),amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success,"Transfer failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CandorFi
Line:        213
Source: 
>         require(success,"Transfer failed");
>         require(token.balanceOf(address(this)) <= poolLimit,"Pool already full");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint ticketCount = amount.div(ticketPrice);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CandorFi
Line:        229
Source: 
>         oldRandomResult = randomResult;
>         uint totalBalance = token.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint winner = calculateWinner((randomResult.mod(totalEntry)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CandorFi
Line:        232
Source: 
>         address wonUser = entryMapping[winner];
>         token.transfer(owner,(totalBalance * adminFee) / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalBalance -= (totalBalance * adminFee) / 100;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CandorFi
Line:        234
Source: 
>         totalBalance -= (totalBalance * adminFee) / 100;
>         token.transfer(wonUser,totalBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit WinnerPicked(wonUser,(randomResult.mod(totalEntry)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VRFConsumerBase
Line:        102
Source: 
> 
>   LinkTokenInterface immutable internal LINK;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address immutable private vrfCoordinator;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CandorFi
Line:        192
Source: 
>            ) public {
>         fee = 2000000000000000000; // 2 LINK
>               ^^^^^^^^^^^^^^^^^^^
>         owner = msg.sender;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CandorFi
Line:        180
Source: 
>     function withdrawLink(uint value) external onlyOwner {
>     	require(LINK.transfer(msg.sender, value), "Unable to transfer");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CandorFi
Line:        203
Source: 
>     function getRandomNumber() public onlyOwner returns (bytes32 requestId) {
>         require(LINK.balanceOf(address(this)) > fee, "Not enough LINK - fill contract with faucet");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return requestRandomness(keyHash, fee, getSeed());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CandorFi
Line:        210
Source: 
>         require(!userInfo[round][msg.sender].isEntered,"Already entered!");
>         require(token.allowance(msg.sender,address(this)) >= amount,"Set allowance first!");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool success = token.transferFrom(msg.sender,address(this),amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CandorFi
Line:        211
Source: 
>         require(token.allowance(msg.sender,address(this)) >= amount,"Set allowance first!");
>         bool success = token.transferFrom(msg.sender,address(this),amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success,"Transfer failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CandorFi
Line:        213
Source: 
>         require(success,"Transfer failed");
>         require(token.balanceOf(address(this)) <= poolLimit,"Pool already full");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint ticketCount = amount.div(ticketPrice);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CandorFi
Line:        229
Source: 
>         oldRandomResult = randomResult;
>         uint totalBalance = token.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint winner = calculateWinner((randomResult.mod(totalEntry)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VRFConsumerBase
Line:        94
Source: 
>   {
>     LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CandorFi
Line:        232
Source: 
>         address wonUser = entryMapping[winner];
>         token.transfer(owner,(totalBalance * adminFee) / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalBalance -= (totalBalance * adminFee) / 100;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CandorFi
Line:        234
Source: 
>         totalBalance -= (totalBalance * adminFee) / 100;
>         token.transfer(wonUser,totalBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit WinnerPicked(wonUser,(randomResult.mod(totalEntry)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CandorFi
Line:        285
Source: 
> 	    return(
> 	        token.balanceOf(address(this)) * 8 / 10,
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	        (userInfo[round][msg.sender].totalEntries * 100) / totalEntry);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CandorFi
Line:        295
Source: 
> 	    require(_tokenAddress != address(token),"Not USDT");
>         IERC20(_tokenAddress).transfer(_to, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CandorFi
Line:        139
Source: 
>     address public owner;
>     uint public totalEntry;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint public round;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CandorFi
Line:        140
Source: 
>     uint public totalEntry;
>     uint public round;
>     ^^^^^^^^^^^^^^^^^
>     uint public random;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CandorFi
Line:        149
Source: 
> 	uint internal fee;
> 	uint public randomResult;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public oldRandomResult;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CandorFi
Line:        150
Source: 
> 	uint public randomResult;
> 	uint public oldRandomResult;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CandorFi
Line:        141
Source: 
>     uint public round;
>     uint public random;
>     ^^^^^^^^^^^^^^^^^^
>     uint public ticketPrice = 10 * 1e6; // 10$ ticket price (18 decimals)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VRFConsumerBase
Line:        94
Source: 
>   {
>     LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, _seed));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CandorFi
Line:        232
Source: 
>         address wonUser = entryMapping[winner];
>         token.transfer(owner,(totalBalance * adminFee) / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalBalance -= (totalBalance * adminFee) / 100;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CandorFi
Line:        234
Source: 
>         totalBalance -= (totalBalance * adminFee) / 100;
>         token.transfer(wonUser,totalBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit WinnerPicked(wonUser,(randomResult.mod(totalEntry)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CandorFi
Line:        295
Source: 
> 	    require(_tokenAddress != address(token),"Not USDT");
>         IERC20(_tokenAddress).transfer(_to, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CandorFi
Line:        141
Source: 
>     uint public round;
>     uint public random;
>     ^^^^^^^^^^^^^^^^^^
>     uint public ticketPrice = 10 * 1e6; // 10$ ticket price (18 decimals)

[0m
