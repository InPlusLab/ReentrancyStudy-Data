pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ThirmLP
Line:        313
Source: 
> 
>     function initApproval() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(THIRM).approve(UNISWAP_V2, uint256(~0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ThirmLP
Line:        318
Source: 
>     
>     function kill(address inputcontract) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        uint256 inputcontractbal = ERC20(inputcontract).balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ThirmLP
Line:        323
Source: 
> 
>     function thirmAllowance() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(THIRM).allowance(address(this), UNISWAP_V2);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ThirmLP
Line:        327
Source: 
> 
>     function usdcAllowance() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(USDC).allowance(address(this), UNISWAP_V2);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ThirmLP
Line:        331
Source: 
> 
>     function timeForNextExecution() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return lastTimeExecuted.add(TIME_OFFSET);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ThirmLP
Line:        335
Source: 
> 
>     function start() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ThirmLP
Line:        318
Source: 
>     
>     function kill(address inputcontract) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        uint256 inputcontractbal = ERC20(inputcontract).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ThirmLP
Line:        345
Source: 
>         // Mint Thirm
>         uint256 thirmTotalSupply = ERC20(THIRM).totalSupply();
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 minted = thirmTotalSupply.div(1000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ThirmLP
Line:        347
Source: 
>         uint256 minted = thirmTotalSupply.div(1000);
>         ERC20(THIRM).mint(address(this), minted);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ThirmLP
Line:        350
Source: 
>         // Swap half thirm to USDC
>         uint256 thirmBal = ERC20(THIRM).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 halfBal = thirmBal.div(2);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ThirmLP
Line:        355
Source: 
>         path[1] = USDC;
>         uint256[] memory amountOutMin = uniswap.getAmountsOut(halfBal, path);
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswap.swapExactTokensForTokens(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ThirmLP
Line:        356
Source: 
>         uint256[] memory amountOutMin = uniswap.getAmountsOut(halfBal, path);
>         uniswap.swapExactTokensForTokens(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             halfBal,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ThirmLP
Line:        365
Source: 
>         // Add liquidity (THIRM, DAI)
>         uint256 thirmBalance = ERC20(THIRM).balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 usdcBalance = ERC20(USDC).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ThirmLP
Line:        366
Source: 
>         uint256 thirmBalance = ERC20(THIRM).balanceOf(address(this));
>         uint256 usdcBalance = ERC20(USDC).balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswap.addLiquidity(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ThirmLP
Line:        367
Source: 
>         uint256 usdcBalance = ERC20(USDC).balanceOf(address(this));
>         uniswap.addLiquidity(
>         ^^^^^^^^^^^^^^^^^^^^^
>             THIRM,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Router02
Line:        94
Source: 
> 
>     function WETH() external pure returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        314
Source: 
>     function initApproval() public {
>         ERC20(THIRM).approve(UNISWAP_V2, uint256(~0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(USDC).approve(UNISWAP_V2, uint256(~0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        315
Source: 
>         ERC20(THIRM).approve(UNISWAP_V2, uint256(~0));
>         ERC20(USDC).approve(UNISWAP_V2, uint256(~0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        319
Source: 
>     function kill(address inputcontract) public {
>        uint256 inputcontractbal = ERC20(inputcontract).balanceOf(address(this));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        ERC20(inputcontract).transfer(OWNER, inputcontractbal);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        320
Source: 
>        uint256 inputcontractbal = ERC20(inputcontract).balanceOf(address(this));
>        ERC20(inputcontract).transfer(OWNER, inputcontractbal);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        324
Source: 
>     function thirmAllowance() public view returns (uint256) {
>         return ERC20(THIRM).allowance(address(this), UNISWAP_V2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        328
Source: 
>     function usdcAllowance() public view returns (uint256) {
>         return ERC20(USDC).allowance(address(this), UNISWAP_V2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        345
Source: 
>         // Mint Thirm
>         uint256 thirmTotalSupply = ERC20(THIRM).totalSupply();
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 minted = thirmTotalSupply.div(1000);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        347
Source: 
>         uint256 minted = thirmTotalSupply.div(1000);
>         ERC20(THIRM).mint(address(this), minted);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        350
Source: 
>         // Swap half thirm to USDC
>         uint256 thirmBal = ERC20(THIRM).balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 halfBal = thirmBal.div(2);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        355
Source: 
>         path[1] = USDC;
>         uint256[] memory amountOutMin = uniswap.getAmountsOut(halfBal, path);
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswap.swapExactTokensForTokens(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        356
Source: 
>         uint256[] memory amountOutMin = uniswap.getAmountsOut(halfBal, path);
>         uniswap.swapExactTokensForTokens(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             halfBal,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        365
Source: 
>         // Add liquidity (THIRM, DAI)
>         uint256 thirmBalance = ERC20(THIRM).balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 usdcBalance = ERC20(USDC).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        366
Source: 
>         uint256 thirmBalance = ERC20(THIRM).balanceOf(address(this));
>         uint256 usdcBalance = ERC20(USDC).balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswap.addLiquidity(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ThirmLP
Line:        367
Source: 
>         uint256 usdcBalance = ERC20(USDC).balanceOf(address(this));
>         uniswap.addLiquidity(
>         ^^^^^^^^^^^^^^^^^^^^^
>             THIRM,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ThirmLP
Line:        342
Source: 
>         // update timestamp
>         lastTimeExecuted = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ThirmLP
Line:        314
Source: 
>     function initApproval() public {
>         ERC20(THIRM).approve(UNISWAP_V2, uint256(~0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(USDC).approve(UNISWAP_V2, uint256(~0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ThirmLP
Line:        315
Source: 
>         ERC20(THIRM).approve(UNISWAP_V2, uint256(~0));
>         ERC20(USDC).approve(UNISWAP_V2, uint256(~0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ThirmLP
Line:        320
Source: 
>        uint256 inputcontractbal = ERC20(inputcontract).balanceOf(address(this));
>        ERC20(inputcontract).transfer(OWNER, inputcontractbal);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ThirmLP
Line:        356
Source: 
>         uint256[] memory amountOutMin = uniswap.getAmountsOut(halfBal, path);
>         uniswap.swapExactTokensForTokens(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             halfBal,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ThirmLP
Line:        367
Source: 
>         uint256 usdcBalance = ERC20(USDC).balanceOf(address(this));
>         uniswap.addLiquidity(
>         ^^^^^^^^^^^^^^^^^^^^^
>             THIRM,

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ThirmLP
Line:        310
Source: 
>         uniswap = IUniswapV2Router02(UNISWAP_V2);
>         lastTimeExecuted = block.timestamp - TIME_OFFSET;
>                            ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ThirmLP
Line:        337
Source: 
>         require(
>             lastTimeExecuted.add(TIME_OFFSET) < block.timestamp,
>                                                 ^^^^^^^^^^^^^^^
>             "Cannot execute the start function."

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ThirmLP
Line:        342
Source: 
>         // update timestamp
>         lastTimeExecuted = block.timestamp;
>                            ^^^^^^^^^^^^^^^
> 

[0m
