Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LiquidityVault
Line:        22
Source: 
>     
>     address droppy = msg.sender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public lastTradingFeeDistribution;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidityVault
Line:        33
Source: 
>      */
>     function distributeTradingFees(address recipient, uint256 amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidityVault
Line:        48
Source: 
>      */
>     function startLiquidityMigration(address recipient) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == droppy);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidityVault
Line:        71
Source: 
>      */
>     function distributeAcid(address recipient, uint256 amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == droppy);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidityVault
Line:        34
Source: 
>     function distributeTradingFees(address recipient, uint256 amount) external {
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount < (liquidityBalance / 100)); // Max 1%

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidityVault
Line:        39
Source: 
>         
>         liquidityToken.transfer(recipient, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastTradingFeeDistribution = now;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidityVault
Line:        19
Source: 
>     
>     ERC20 constant acidToken = ERC20(0xc68B73D9509F5343602480656F5dA512a5A20b9e);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ERC20 constant liquidityToken = ERC20(0xA0d06BdC3274564ddda65BFAb6AE61e5f000E49B);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidityVault
Line:        20
Source: 
>     ERC20 constant acidToken = ERC20(0xc68B73D9509F5343602480656F5dA512a5A20b9e);
>     ERC20 constant liquidityToken = ERC20(0xA0d06BdC3274564ddda65BFAb6AE61e5f000E49B);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.13;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidityVault
Line:        19
Source: 
>     
>     ERC20 constant acidToken = ERC20(0xc68B73D9509F5343602480656F5dA512a5A20b9e);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ERC20 constant liquidityToken = ERC20(0xA0d06BdC3274564ddda65BFAb6AE61e5f000E49B);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidityVault
Line:        20
Source: 
>     ERC20 constant acidToken = ERC20(0xc68B73D9509F5343602480656F5dA512a5A20b9e);
>     ERC20 constant liquidityToken = ERC20(0xA0d06BdC3274564ddda65BFAb6AE61e5f000E49B);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidityVault
Line:        22
Source: 
>     
>     address droppy = msg.sender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public lastTradingFeeDistribution;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LiquidityVault
Line:        34
Source: 
>     function distributeTradingFees(address recipient, uint256 amount) external {
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount < (liquidityBalance / 100)); // Max 1%

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LiquidityVault
Line:        63
Source: 
>         
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityToken.transfer(migrationRecipient, liquidityBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidityVault
Line:        39
Source: 
>         
>         liquidityToken.transfer(recipient, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastTradingFeeDistribution = now;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidityVault
Line:        64
Source: 
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>         liquidityToken.transfer(migrationRecipient, liquidityBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidityVault
Line:        73
Source: 
>         require(msg.sender == droppy);
>         acidToken.transfer(recipient, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LiquidityVault
Line:        23
Source: 
>     address droppy = msg.sender;
>     uint256 public lastTradingFeeDistribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LiquidityVault
Line:        25
Source: 
>     
>     uint256 public migrationLock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public migrationRecipient;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LiquidityVault
Line:        26
Source: 
>     uint256 public migrationLock;
>     address public migrationRecipient;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidityVault
Line:        39
Source: 
>         
>         liquidityToken.transfer(recipient, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastTradingFeeDistribution = now;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidityVault
Line:        64
Source: 
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>         liquidityToken.transfer(migrationRecipient, liquidityBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidityVault
Line:        73
Source: 
>         require(msg.sender == droppy);
>         acidToken.transfer(recipient, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
