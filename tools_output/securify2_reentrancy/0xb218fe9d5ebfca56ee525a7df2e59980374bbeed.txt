Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PETH
Line:        151
Source: 
>     using SafeMath for uint256;
>     string public name     = "PairX ETH";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol   = "PETH";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PETH
Line:        152
Source: 
>     string public name     = "PairX ETH";
>     string public symbol   = "PETH";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8  public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PETH
Line:        153
Source: 
>     string public symbol   = "PETH";
>     uint8  public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PETH
Line:        196
Source: 
>     }
>     function withdraw(uint256 wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!reEntrancyMutex);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PETH
Line:        207
Source: 
>     }
>     function invest(uint256 wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usedETH = usedETH.add(wad);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PETH
Line:        212
Source: 
>     }
>     function changeIvAddr(address newAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == investAddr, "Only investAddr can change Invest Address.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PETH
Line:        217
Source: 
>     }
>     function changeMngAddr(address newAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == managerAddr, "Only managerAddr can change Interest Address.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PETH
Line:        222
Source: 
>     }
>     function changeDeposit(bool _canDeposit) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == managerAddr, "Only managerAddr can change Deposit State.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PETH
Line:        228
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return totalPETH;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PETH
Line:        232
Source: 
> 
>     function approve(address guy, uint256 wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PETH
Line:        238
Source: 
> 
>     function transfer(address dst, uint256 wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PETH
Line:        207
Source: 
>     }
>     function invest(uint256 wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usedETH = usedETH.add(wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PETH
Line:        212
Source: 
>     }
>     function changeIvAddr(address newAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == investAddr, "Only investAddr can change Invest Address.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PETH
Line:        217
Source: 
>     }
>     function changeMngAddr(address newAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == managerAddr, "Only managerAddr can change Interest Address.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PETH
Line:        222
Source: 
>     }
>     function changeDeposit(bool _canDeposit) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == managerAddr, "Only managerAddr can change Deposit State.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PETH
Line:        238
Source: 
> 
>     function transfer(address dst, uint256 wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PETH
Line:        242
Source: 
> 
>     function transferFrom(address src, address dst, uint256 wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PETH
Line:        196
Source: 
>     }
>     function withdraw(uint256 wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!reEntrancyMutex);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PETH
Line:        232
Source: 
> 
>     function approve(address guy, uint256 wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    PETH
Line:        202
Source: 
>         reEntrancyMutex = true;
>         msg.sender.transfer(wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(msg.sender, address(0), wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PETH
Line:        209
Source: 
>         usedETH = usedETH.add(wad);
>         address(uint160(investAddr)).transfer(wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Invest(msg.sender, wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PETH
Line:        202
Source: 
>         reEntrancyMutex = true;
>         msg.sender.transfer(wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(msg.sender, address(0), wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    PETH
Line:        202
Source: 
>         reEntrancyMutex = true;
>         msg.sender.transfer(wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(msg.sender, address(0), wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    PETH
Line:        209
Source: 
>         usedETH = usedETH.add(wad);
>         address(uint160(investAddr)).transfer(wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Invest(msg.sender, wad);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PETH
Line:        208
Source: 
>     function invest(uint256 wad) public {
>         usedETH = usedETH.add(wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(investAddr)).transfer(wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PETH
Line:        199
Source: 
>         balanceOf[msg.sender] = balanceOf[msg.sender].sub(wad);
>         totalPETH = totalPETH.sub(wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PETH
Line:        201
Source: 
> 
>         reEntrancyMutex = true;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PETH
Line:        205
Source: 
>         emit Withdrawal(msg.sender, wad);
>         reEntrancyMutex = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PETH
Line:        233
Source: 
>     function approve(address guy, uint256 wad) public returns (bool) {
>         allowance[msg.sender][guy] = wad;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, guy, wad);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PETH
Line:        151
Source: 
>     using SafeMath for uint256;
>     string public name     = "PairX ETH";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol   = "PETH";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PETH
Line:        152
Source: 
>     string public name     = "PairX ETH";
>     string public symbol   = "PETH";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8  public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PETH
Line:        153
Source: 
>     string public symbol   = "PETH";
>     uint8  public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
