Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    multiSend
Line:        13
Source: 
> contract multiSend{
>     address public baseAddr = 0x500Df47E1dF0ef06039218dCF0960253D89D6658;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //address payable owner = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    multiSend
Line:        15
Source: 
>     //address payable owner = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;
>     address payable owner = 0xA5BC03ddc951966B0Df385653fA5b7CAdF1fc3DA;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	TokenERC20 bcontract = TokenERC20(baseAddr);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    multiSend
Line:        16
Source: 
>     address payable owner = 0xA5BC03ddc951966B0Df385653fA5b7CAdF1fc3DA;
> 	TokenERC20 bcontract = TokenERC20(baseAddr);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint256) public holdAmount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    multiSend
Line:        29
Source: 
>     }
>     function setDistributeToken(uint256 amount, address[] memory addrs) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(msg.sender != owner) revert();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    multiSend
Line:        36
Source: 
>     }
>     function setNotUniformToken(uint256[] memory amounts, address[] memory addrs) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(msg.sender != owner) revert();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    multiSend
Line:        43
Source: 
>     }
>     function checkAllowance() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return bcontract.allowance(owner,address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    multiSend
Line:        29
Source: 
>     }
>     function setDistributeToken(uint256 amount, address[] memory addrs) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(msg.sender != owner) revert();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    multiSend
Line:        24
Source: 
>         if(holdAmount[msg.sender] >0){
>             bcontract.transferFrom(owner,msg.sender,holdAmount[msg.sender] * (10 ** uint256(10)));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             distributedAmount += holdAmount[msg.sender] * (10 ** uint256(10));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    multiSend
Line:        22
Source: 
>     function() external payable { 
>         if(address(this).balance >= msg.value) msg.sender.transfer(msg.value);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(holdAmount[msg.sender] >0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    multiSend
Line:        12
Source: 
> }
> contract multiSend{
> ^^^^^^^^^^^^^^^^^^^
>     address public baseAddr = 0x500Df47E1dF0ef06039218dCF0960253D89D6658;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    multiSend
Line:        18
Source: 
> 	mapping(address => uint256) public holdAmount;
>     event cannotAirdrop(address indexed addr, uint balance, uint etherBalance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public distributedAmount = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.3;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    multiSend
Line:        15
Source: 
>     //address payable owner = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;
>     address payable owner = 0xA5BC03ddc951966B0Df385653fA5b7CAdF1fc3DA;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	TokenERC20 bcontract = TokenERC20(baseAddr);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    multiSend
Line:        16
Source: 
>     address payable owner = 0xA5BC03ddc951966B0Df385653fA5b7CAdF1fc3DA;
> 	TokenERC20 bcontract = TokenERC20(baseAddr);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint256) public holdAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    multiSend
Line:        22
Source: 
>     function() external payable { 
>         if(address(this).balance >= msg.value) msg.sender.transfer(msg.value);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(holdAmount[msg.sender] >0){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    multiSend
Line:        22
Source: 
>     function() external payable { 
>         if(address(this).balance >= msg.value) msg.sender.transfer(msg.value);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(holdAmount[msg.sender] >0){

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    multiSend
Line:        24
Source: 
>         if(holdAmount[msg.sender] >0){
>             bcontract.transferFrom(owner,msg.sender,holdAmount[msg.sender] * (10 ** uint256(10)));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             distributedAmount += holdAmount[msg.sender] * (10 ** uint256(10));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    multiSend
Line:        44
Source: 
>     function checkAllowance() public view returns (uint256) {
>         return bcontract.allowance(owner,address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    multiSend
Line:        22
Source: 
>     function() external payable { 
>         if(address(this).balance >= msg.value) msg.sender.transfer(msg.value);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(holdAmount[msg.sender] >0){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    multiSend
Line:        24
Source: 
>         if(holdAmount[msg.sender] >0){
>             bcontract.transferFrom(owner,msg.sender,holdAmount[msg.sender] * (10 ** uint256(10)));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             distributedAmount += holdAmount[msg.sender] * (10 ** uint256(10));

[0m
