[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        65
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        93
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        93
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Holder
Line:        226
Source: 
> 
>   function renounceOwnership() public override onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      revert("NOT ALLOW LEAVE CONTRACT");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Holder
Line:        213
Source: 
> 
>   function setNewPassword(bytes32 _password) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      require(isPassUsed, "OLD PASS MUST BE USED");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Holder
Line:        193
Source: 
> 
>   function withdrawERC20(address _token) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(now >= holdTime, "EARLY");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Holder
Line:        206
Source: 
> 
>   function emergencyWithdrawERC20(string calldata _password, address _token) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      require(keccak256(abi.encodePacked(_password)) == password, "WRONG PASS");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Holder
Line:        208
Source: 
>      require(keccak256(abi.encodePacked(_password)) == password, "WRONG PASS");
>      uint256 amount = IERC20(_token).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      IERC20(_token).transfer(owner(), amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Holder
Line:        209
Source: 
>      uint256 amount = IERC20(_token).balanceOf(address(this));
>      IERC20(_token).transfer(owner(), amount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      isPassUsed = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Holder
Line:        202
Source: 
>      uint256 amount = address(this).balance;
>      payable(owner()).transfer(amount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      isPassUsed = true;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Holder
Line:        178
Source: 
> contract Holder is Ownable {
>   bytes32 password;
>   ^^^^^^^^^^^^^^^^
>   bool public isPassUsed;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Holder
Line:        190
Source: 
>     uint256 amount = address(this).balance;
>     payable(owner()).transfer(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Holder
Line:        202
Source: 
>      uint256 amount = address(this).balance;
>      payable(owner()).transfer(amount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      isPassUsed = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Holder
Line:        190
Source: 
>     uint256 amount = address(this).balance;
>     payable(owner()).transfer(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Holder
Line:        202
Source: 
>      uint256 amount = address(this).balance;
>      payable(owner()).transfer(amount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      isPassUsed = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Holder
Line:        190
Source: 
>     uint256 amount = address(this).balance;
>     payable(owner()).transfer(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Holder
Line:        202
Source: 
>      uint256 amount = address(this).balance;
>      payable(owner()).transfer(amount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      isPassUsed = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Holder
Line:        195
Source: 
>     require(now >= holdTime, "EARLY");
>     uint256 amount = IERC20(_token).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(_token).transfer(owner(), amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Holder
Line:        196
Source: 
>     uint256 amount = IERC20(_token).balanceOf(address(this));
>     IERC20(_token).transfer(owner(), amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Holder
Line:        208
Source: 
>      require(keccak256(abi.encodePacked(_password)) == password, "WRONG PASS");
>      uint256 amount = IERC20(_token).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      IERC20(_token).transfer(owner(), amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Holder
Line:        209
Source: 
>      uint256 amount = IERC20(_token).balanceOf(address(this));
>      IERC20(_token).transfer(owner(), amount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      isPassUsed = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Holder
Line:        179
Source: 
>   bytes32 password;
>   bool public isPassUsed;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public holdTime;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Holder
Line:        190
Source: 
>     uint256 amount = address(this).balance;
>     payable(owner()).transfer(amount);
>             ^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Holder
Line:        196
Source: 
>     uint256 amount = IERC20(_token).balanceOf(address(this));
>     IERC20(_token).transfer(owner(), amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Holder
Line:        202
Source: 
>      uint256 amount = address(this).balance;
>      payable(owner()).transfer(amount);
>              ^^^^^^^
>      isPassUsed = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Holder
Line:        209
Source: 
>      uint256 amount = IERC20(_token).balanceOf(address(this));
>      IERC20(_token).transfer(owner(), amount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      isPassUsed = true;

[0m
