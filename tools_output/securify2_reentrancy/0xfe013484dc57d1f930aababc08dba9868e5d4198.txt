pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { cs := extcodesize(self) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return cs == 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ExecutorOnlyCall
Line:        735
Source: 
>         // solium-disable-next-line security/no-inline-assembly
>         assembly {
>          ^^^^^^^^^
>             success := call(txGas, to, value, add(data, 0x20), mload(data), 0, 0)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        140
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        220
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        239
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        248
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        220
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        239
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        248
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        590
Source: 
>      */
>     function __SingleTokenVestingNonRevocable_init(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IDigg token,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        615
Source: 
>      */
>     function token() public view returns (IDigg) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _digg;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        622
Source: 
>      */
>     function beneficiary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _beneficiary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        629
Source: 
>      */
>     function cliff() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cliff;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        636
Source: 
>      */
>     function start() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _start;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        643
Source: 
>      */
>     function duration() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _duration;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        650
Source: 
>      */
>     function released() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _released;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        657
Source: 
>      */
>     function release() public virtual {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 unreleased = _releasableAmount();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        674
Source: 
> 
>     function releasableAmount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _releasableAmount();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        220
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        239
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        248
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        629
Source: 
>      */
>     function cliff() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cliff;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        636
Source: 
>      */
>     function start() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _start;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        643
Source: 
>      */
>     function duration() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _duration;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        650
Source: 
>      */
>     function released() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _released;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        657
Source: 
>      */
>     function release() public virtual {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 unreleased = _releasableAmount();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        674
Source: 
> 
>     function releasableAmount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _releasableAmount();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SmartVestingDigg
Line:        766
Source: 
> 
>     function initialize(
>      ^^^^^^^^^^^^^^^^^^^
>         IDigg token,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        590
Source: 
>      */
>     function __SingleTokenVestingNonRevocable_init(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IDigg token,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SmartVestingDigg
Line:        766
Source: 
> 
>     function initialize(
>      ^^^^^^^^^^^^^^^^^^^
>         IDigg token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartVestingDigg
Line:        803
Source: 
>      */
>     function call(
>      ^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartVestingDigg
Line:        820
Source: 
> 
>     function approveTransfer(address to) external onlyGovernor() {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferAllowed[to] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SmartVestingDigg
Line:        825
Source: 
> 
>     function revokeTransfer(address to) external onlyGovernor() {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferAllowed[to] = false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        664
Source: 
> 
>         require(_digg.transfer(_beneficiary, _digg.sharesToFragments(unreleased)), "token transfer failed");
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        664
Source: 
> 
>         require(_digg.transfer(_beneficiary, _digg.sharesToFragments(unreleased)), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartVestingDigg
Line:        808
Source: 
>     ) external payable onlyBeneficiary() nonReentrant() returns (bool success) {
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartVestingDigg
Line:        813
Source: 
>         if (!_transferAllowed[to]) {
>             uint256 postAmount = token().balanceOf(address(this));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(postAmount >= preAmount, "smart-vesting/locked-balance-check");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartVestingDigg
Line:        836
Source: 
>         require(address(tokenToClaim) != address(token()), "smart-timelock/no-locked-token-claim");
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartVestingDigg
Line:        838
Source: 
> 
>         uint256 claimableTokenAmount = tokenToClaim.balanceOf(address(this));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(claimableTokenAmount > 0, "smart-timelock/no-token-balance-to-claim");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartVestingDigg
Line:        841
Source: 
> 
>         tokenToClaim.transfer(beneficiary(), claimableTokenAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartVestingDigg
Line:        843
Source: 
> 
>         uint256 postAmount = token().balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(postAmount >= preAmount, "smart-timelock/locked-balance-check");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartVestingDigg
Line:        853
Source: 
>     function claimEther() external onlyBeneficiary() nonReentrant() {
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SmartVestingDigg
Line:        860
Source: 
> 
>         uint256 postAmount = token().balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(postAmount >= preAmount, "smart-timelock/locked-balance-check");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    SmartVestingDigg
Line:        858
Source: 
> 
>         payable(beneficiary()).transfer(etherToTransfer);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        591
Source: 
>     function __SingleTokenVestingNonRevocable_init(
>         IDigg token,
>         ^^^^^^^^^^^
>         address beneficiary,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        592
Source: 
>         IDigg token,
>         address beneficiary,
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 start,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        593
Source: 
>         address beneficiary,
>         uint256 start,
>         ^^^^^^^^^^^^^
>         uint256 cliffDuration,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        595
Source: 
>         uint256 cliffDuration,
>         uint256 duration
>         ^^^^^^^^^^^^^^^^
>     ) public initializer {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SmartVestingDigg
Line:        767
Source: 
>     function initialize(
>         IDigg token,
>          ^^^^^^^^^^^
>         address beneficiary,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SmartVestingDigg
Line:        768
Source: 
>         IDigg token,
>         address beneficiary,
>          ^^^^^^^^^^^^^^^^^^^
>         address governor,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SmartVestingDigg
Line:        769
Source: 
>         address beneficiary,
>         address governor,
>          ^^^^^^^^^^^^^^^^
>         uint256 start,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SmartVestingDigg
Line:        770
Source: 
>         address governor,
>         uint256 start,
>          ^^^^^^^^^^^^^
>         uint256 cliffDuration,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SmartVestingDigg
Line:        772
Source: 
>         uint256 cliffDuration,
>         uint256 duration
>          ^^^^^^^^^^^^^^^
>     ) public initializer {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        112
Source: 
> 
>     function __ReentrancyGuard_init() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __ReentrancyGuard_init_unchained();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        116
Source: 
> 
>     function __ReentrancyGuard_init_unchained() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _status = _NOT_ENTERED;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        140
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContextUpgradeable
Line:        161
Source: 
> abstract contract ContextUpgradeable is Initializable {
>     function __Context_init() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __Context_init_unchained();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContextUpgradeable
Line:        165
Source: 
> 
>     function __Context_init_unchained() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        206
Source: 
>      */
>     function __Ownable_init() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __Context_init_unchained();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        211
Source: 
> 
>     function __Ownable_init_unchained() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address msgSender = _msgSender();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDigg
Line:        465
Source: 
> 
>     function _sharesPerFragment() external view returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IDigg
Line:        467
Source: 
> 
>     function _initialSharesPerFragment() external view returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        590
Source: 
>      */
>     function __SingleTokenVestingNonRevocable_init(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IDigg token,

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        11
Source: 
> 
> pragma solidity >=0.4.24 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        423
Source: 
> 
> pragma solidity >=0.5.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        706
Source: 
> 
> pragma solidity >=0.5.0 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        44
Source: 
> 
>         bool isTopLevelCall = !_initializing;
>         ^^^^^^^^^^^^^^^^^^^
>         if (isTopLevelCall) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartVestingDigg
Line:        858
Source: 
> 
>         payable(beneficiary()).transfer(etherToTransfer);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SmartVestingDigg
Line:        858
Source: 
> 
>         payable(beneficiary()).transfer(etherToTransfer);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SmartVestingDigg
Line:        858
Source: 
> 
>         payable(beneficiary()).transfer(etherToTransfer);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        664
Source: 
> 
>         require(_digg.transfer(_beneficiary, _digg.sharesToFragments(unreleased)), "token transfer failed");
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        664
Source: 
> 
>         require(_digg.transfer(_beneficiary, _digg.sharesToFragments(unreleased)), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        689
Source: 
>     function _vestedAmount() internal view returns (uint256) {
>         uint256 currentBalance = _digg.sharesOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalBalance = currentBalance.add(_released);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        664
Source: 
> 
>         require(_digg.transfer(_beneficiary, _digg.sharesToFragments(unreleased)), "token transfer failed");
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        664
Source: 
> 
>         require(_digg.transfer(_beneficiary, _digg.sharesToFragments(unreleased)), "token transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        689
Source: 
>     function _vestedAmount() internal view returns (uint256) {
>         uint256 currentBalance = _digg.sharesOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalBalance = currentBalance.add(_released);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartVestingDigg
Line:        808
Source: 
>     ) external payable onlyBeneficiary() nonReentrant() returns (bool success) {
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartVestingDigg
Line:        813
Source: 
>         if (!_transferAllowed[to]) {
>             uint256 postAmount = token().balanceOf(address(this));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(postAmount >= preAmount, "smart-vesting/locked-balance-check");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartVestingDigg
Line:        836
Source: 
>         require(address(tokenToClaim) != address(token()), "smart-timelock/no-locked-token-claim");
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartVestingDigg
Line:        838
Source: 
> 
>         uint256 claimableTokenAmount = tokenToClaim.balanceOf(address(this));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(claimableTokenAmount > 0, "smart-timelock/no-token-balance-to-claim");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartVestingDigg
Line:        843
Source: 
> 
>         uint256 postAmount = token().balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(postAmount >= preAmount, "smart-timelock/locked-balance-check");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartVestingDigg
Line:        853
Source: 
>     function claimEther() external onlyBeneficiary() nonReentrant() {
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SmartVestingDigg
Line:        860
Source: 
> 
>         uint256 postAmount = token().balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(postAmount >= preAmount, "smart-timelock/locked-balance-check");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SmartVestingDigg
Line:        841
Source: 
> 
>         tokenToClaim.transfer(beneficiary(), claimableTokenAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        68
Source: 
>         assembly { cs := extcodesize(self) }
>         return cs == 0;
>                ^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OwnableUpgradeable
Line:        199
Source: 
> contract OwnableUpgradeable is Initializable, ContextUpgradeable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OwnableUpgradeable
Line:        199
Source: 
> contract OwnableUpgradeable is Initializable, ContextUpgradeable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        569
Source: 
> 
>     IDigg internal _digg;
>     ^^^^^^^^^^^^^^^^^^^^
>     // beneficiary of tokens after they are released

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        571
Source: 
>     // beneficiary of tokens after they are released
>     address internal _beneficiary;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        574
Source: 
>     // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.
>     uint256 internal _cliff;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _start;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        575
Source: 
>     uint256 internal _cliff;
>     uint256 internal _start;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _duration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        576
Source: 
>     uint256 internal _start;
>     uint256 internal _duration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        578
Source: 
> 
>     uint256 internal _released;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ReentrancyGuardUpgradeable
Line:        110
Source: 
> 
>     uint256 private _status;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OwnableUpgradeable
Line:        199
Source: 
> contract OwnableUpgradeable is Initializable, ContextUpgradeable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        569
Source: 
> 
>     IDigg internal _digg;
>     ^^^^^^^^^^^^^^^^^^^^
>     // beneficiary of tokens after they are released

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        571
Source: 
>     // beneficiary of tokens after they are released
>     address internal _beneficiary;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        574
Source: 
>     // Durations and timestamps are expressed in UNIX time, the same units as block.timestamp.
>     uint256 internal _cliff;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _start;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        575
Source: 
>     uint256 internal _cliff;
>     uint256 internal _start;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal _duration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        576
Source: 
>     uint256 internal _start;
>     uint256 internal _duration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        578
Source: 
> 
>     uint256 internal _released;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SmartVestingDigg
Line:        761
Source: 
> contract SmartVestingDigg is SingleTokenVestingNonRevocableDigg, ExecutorOnlyCall, ReentrancyGuardUpgradeable {
>     address internal _governor;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) internal _transferAllowed;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        110
Source: 
> 
>     uint256 private _status;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        140
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        140
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        46
Source: 
>         if (isTopLevelCall) {
>             _initializing = true;
>             ^^^^^^^^^^^^^^^^^^^^
>             _initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        47
Source: 
>             _initializing = true;
>             _initialized = true;
>             ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuardUpgradeable
Line:        117
Source: 
>     function __ReentrancyGuard_init_unchained() internal initializer {
>         _status = _NOT_ENTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        53
Source: 
>         if (isTopLevelCall) {
>             _initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        46
Source: 
>         if (isTopLevelCall) {
>             _initializing = true;
>             ^^^^^^^^^^^^^^^^^^^^
>             _initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        47
Source: 
>             _initializing = true;
>             _initialized = true;
>             ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        605
Source: 
> 
>         _digg = token;
>         ^^^^^^^^^^^^^
>         _beneficiary = beneficiary;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        606
Source: 
>         _digg = token;
>         _beneficiary = beneficiary;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _duration = duration;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        607
Source: 
>         _beneficiary = beneficiary;
>         _duration = duration;
>         ^^^^^^^^^^^^^^^^^^^^
>         _cliff = start.add(cliffDuration);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        608
Source: 
>         _duration = duration;
>         _cliff = start.add(cliffDuration);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _start = start;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        609
Source: 
>         _cliff = start.add(cliffDuration);
>         _start = start;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        53
Source: 
>         if (isTopLevelCall) {
>             _initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SingleTokenVestingNonRevocableDigg
Line:        671
Source: 
>         require(_released == 26796612042, "already initialized to shares");
>         _released = 903638732631997846815093457587811581689457319978569725740871638998310548320;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        46
Source: 
>         if (isTopLevelCall) {
>             _initializing = true;
>             ^^^^^^^^^^^^^^^^^^^^
>             _initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        47
Source: 
>             _initializing = true;
>             _initialized = true;
>             ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SmartVestingDigg
Line:        776
Source: 
>         __ReentrancyGuard_init_unchained();
>         _governor = governor;
>          ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        53
Source: 
>         if (isTopLevelCall) {
>             _initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        46
Source: 
>         if (isTopLevelCall) {
>             _initializing = true;
>             ^^^^^^^^^^^^^^^^^^^^
>             _initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        47
Source: 
>             _initializing = true;
>             _initialized = true;
>             ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        605
Source: 
> 
>         _digg = token;
>         ^^^^^^^^^^^^^
>         _beneficiary = beneficiary;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        606
Source: 
>         _digg = token;
>         _beneficiary = beneficiary;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _duration = duration;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        607
Source: 
>         _beneficiary = beneficiary;
>         _duration = duration;
>         ^^^^^^^^^^^^^^^^^^^^
>         _cliff = start.add(cliffDuration);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        608
Source: 
>         _duration = duration;
>         _cliff = start.add(cliffDuration);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _start = start;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        609
Source: 
>         _cliff = start.add(cliffDuration);
>         _start = start;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        53
Source: 
>         if (isTopLevelCall) {
>             _initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        662
Source: 
> 
>         _released = _released.add(unreleased);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        671
Source: 
>         require(_released == 26796612042, "already initialized to shares");
>         _released = 903638732631997846815093457587811581689457319978569725740871638998310548320;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        662
Source: 
> 
>         _released = _released.add(unreleased);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Initializable
Line:        42
Source: 
>     modifier initializer() {
>         require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
>                                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OwnableUpgradeable
Line:        212
Source: 
>     function __Ownable_init_unchained() internal initializer {
>         address msgSender = _msgSender();
>                             ^^^^^^^^^^^^
>         _owner = msgSender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Initializable
Line:        42
Source: 
>     modifier initializer() {
>         require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
>                                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OwnableUpgradeable
Line:        212
Source: 
>     function __Ownable_init_unchained() internal initializer {
>         address msgSender = _msgSender();
>                             ^^^^^^^^^^^^
>         _owner = msgSender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Initializable
Line:        42
Source: 
>     modifier initializer() {
>         require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
>                                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OwnableUpgradeable
Line:        212
Source: 
>     function __Ownable_init_unchained() internal initializer {
>         address msgSender = _msgSender();
>                             ^^^^^^^^^^^^
>         _owner = msgSender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartVestingDigg
Line:        808
Source: 
>     ) external payable onlyBeneficiary() nonReentrant() returns (bool success) {
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartVestingDigg
Line:        813
Source: 
>         if (!_transferAllowed[to]) {
>             uint256 postAmount = token().balanceOf(address(this));
>                                   ^^^^^^^
>             require(postAmount >= preAmount, "smart-vesting/locked-balance-check");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartVestingDigg
Line:        836
Source: 
>         require(address(tokenToClaim) != address(token()), "smart-timelock/no-locked-token-claim");
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartVestingDigg
Line:        841
Source: 
> 
>         tokenToClaim.transfer(beneficiary(), claimableTokenAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartVestingDigg
Line:        843
Source: 
> 
>         uint256 postAmount = token().balanceOf(address(this));
>                               ^^^^^^^
>         require(postAmount >= preAmount, "smart-timelock/locked-balance-check");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartVestingDigg
Line:        853
Source: 
>     function claimEther() external onlyBeneficiary() nonReentrant() {
>         uint256 preAmount = token().balanceOf(address(this));
>                              ^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartVestingDigg
Line:        858
Source: 
> 
>         payable(beneficiary()).transfer(etherToTransfer);
>                  ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SmartVestingDigg
Line:        860
Source: 
> 
>         uint256 postAmount = token().balanceOf(address(this));
>                               ^^^^^^^
>         require(postAmount >= preAmount, "smart-timelock/locked-balance-check");

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        107
Source: 
>     // increase the likelihood of the full refund coming into effect.
>     uint256 private constant _NOT_ENTERED = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant _ENTERED = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        108
Source: 
>     uint256 private constant _NOT_ENTERED = 1;
>     uint256 private constant _ENTERED = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        110
Source: 
> 
>     uint256 private _status;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        140
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        31
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        36
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuardUpgradeable
Line:        140
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ContextUpgradeable
Line:        175
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        253
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        603
Source: 
>         // solhint-disable-next-line max-line-length
>         require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time");
>                                       ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        692
Source: 
> 
>         if (block.timestamp < _cliff) {
>             ^^^^^^^^^^^^^^^
>             return 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        694
Source: 
>             return 0;
>         } else if (block.timestamp >= _start.add(_duration)) {
>                    ^^^^^^^^^^^^^^^
>             return totalBalance;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        603
Source: 
>         // solhint-disable-next-line max-line-length
>         require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time");
>                                       ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        692
Source: 
> 
>         if (block.timestamp < _cliff) {
>             ^^^^^^^^^^^^^^^
>             return 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    SingleTokenVestingNonRevocableDigg
Line:        694
Source: 
>             return 0;
>         } else if (block.timestamp >= _start.add(_duration)) {
>                    ^^^^^^^^^^^^^^^
>             return totalBalance;

[0m
