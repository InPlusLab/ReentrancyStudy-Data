[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DSProtestPause
Line:        171
Source: 
>     function both(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := and(x, y)}
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DSProtestPause
Line:        191
Source: 
>     {
>         assembly { codeHash := extcodehash(usr) }
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        46
Source: 
> 
>     function setOwner(address owner_)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         virtual

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        55
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         virtual

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        46
Source: 
> 
>     function setOwner(address owner_)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         virtual

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        55
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         virtual

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSProtestPause
Line:        86
Source: 
> 
>     function setOwner(address owner_) override public isDelayed {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = owner_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSProtestPause
Line:        90
Source: 
>     }
>     function setAuthority(DSAuthority authority_) override public isDelayed {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authority = authority_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSProtestPause
Line:        181
Source: 
>     }
>     function getTransactionDataHash(address usr, bytes32 codeHash, bytes memory parameters)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public pure

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSProtestPause
Line:        239
Source: 
>     }
>     function attachTransactionDescription(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime, string memory description)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public auth

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSProtestPause
Line:        327
Source: 
>     }
>     function getTransactionDelays(bytes32 txHash) public view returns (bool, uint256, uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSPauseProxy
Line:        343
Source: 
> 
>     function executeTransaction(address usr, bytes memory parameters)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public isAuthorized

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    DSPauseProxy
Line:        348
Source: 
>         bool ok;
>         (ok, out) = usr.delegatecall(parameters);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ok, "ds-protest-pause-delegatecall-error");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        46
Source: 
> 
>     function setOwner(address owner_)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         virtual

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        55
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         virtual

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        46
Source: 
> 
>     function setOwner(address owner_)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         virtual

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        55
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         virtual

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        86
Source: 
> 
>     function setOwner(address owner_) override public isDelayed {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = owner_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        90
Source: 
>     }
>     function setAuthority(DSAuthority authority_) override public isDelayed {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authority = authority_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        94
Source: 
>     }
>     function setProtester(address protester_) external isDelayed {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         protester = protester_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        193
Source: 
>     }
>     function protestWindowAvailable(address usr, bytes32 codeHash, bytes calldata parameters) external view returns (bool) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        201
Source: 
>     }
>     function protestWindowAvailable(bytes32 txHash) external view returns (bool) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (bool protested, ,) = getTransactionDelays(txHash);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        208
Source: 
>     }
>     function timeUntilProposalProtestDeadline(address usr, bytes32 codeHash, bytes calldata parameters) external view returns (uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        216
Source: 
>     }
>     function timeUntilProposalProtestDeadline(bytes32 txHash) external view returns (uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (bool protested, ,) = getTransactionDelays(txHash);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        228
Source: 
>     // --- Operations ---
>     function scheduleTransaction(address usr, bytes32 codeHash, bytes calldata parameters, uint earliestExecutionTime)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external auth

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        246
Source: 
>     }
>     function protestAgainstTransaction(address usr, bytes32 codeHash, bytes calldata parameters)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSProtestPause
Line:        282
Source: 
>     }
>     function executeTransaction(address usr, bytes32 codeHash, bytes calldata parameters, uint earliestExecutionTime)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSProtestPause
Line:        103
Source: 
>     }
>     function setDelayMultiplier(uint multiplier_) external isDelayed {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(both(multiplier_ >= 1, multiplier_ <= MAX_DELAY_MULTIPLIER), "ds-protest-pause-multiplier-exceeds-bounds");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSProtestPause
Line:        175
Source: 
>     // --- Util ---
>     function getTransactionDataHash(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public pure

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSProtestPause
Line:        181
Source: 
>     }
>     function getTransactionDataHash(address usr, bytes32 codeHash, bytes memory parameters)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public pure

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSProtestPause
Line:        233
Source: 
>     }
>     function scheduleTransaction(address usr, bytes32 codeHash, bytes calldata parameters, uint earliestExecutionTime, string calldata description)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external auth

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSProtestPause
Line:        239
Source: 
>     }
>     function attachTransactionDescription(address usr, bytes32 codeHash, bytes memory parameters, uint earliestExecutionTime, string memory description)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public auth

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSProtestPause
Line:        271
Source: 
>     }
>     function abandonTransaction(address usr, bytes32 codeHash, bytes calldata parameters, uint earliestExecutionTime)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external auth

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSProtestPause
Line:        319
Source: 
>     // --- Getters ---
>     function getTransactionDelays(address usr, bytes32 codeHash, bytes calldata parameters) external view returns (bool, uint256, uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 hashedTx = getTransactionDataHash(usr, codeHash, parameters);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSProtestPause
Line:        327
Source: 
>     }
>     function getTransactionDelays(bytes32 txHash) public view returns (bool, uint256, uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSPauseProxy
Line:        343
Source: 
> 
>     function executeTransaction(address usr, bytes memory parameters)
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public isAuthorized

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DSProtestPause
Line:        300
Source: 
> 
>         out = proxy.executeTransaction(usr, parameters);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(proxy.owner() == address(this), "ds-protest-pause-illegal-storage-change");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DSProtestPause
Line:        301
Source: 
>         out = proxy.executeTransaction(usr, parameters);
>         require(proxy.owner() == address(this), "ds-protest-pause-illegal-storage-change");
>                  ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSProtestPause
Line:        195
Source: 
>         bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);
>         (bool protested, ,) = getTransactionDelays(partiallyHashedTx);
>           ^^^^^^^^^^^^^^
>         if (protested) return false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSProtestPause
Line:        202
Source: 
>     function protestWindowAvailable(bytes32 txHash) external view returns (bool) {
>         (bool protested, ,) = getTransactionDelays(txHash);
>           ^^^^^^^^^^^^^^
>         if (protested) return false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSProtestPause
Line:        210
Source: 
>         bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);
>         (bool protested, ,) = getTransactionDelays(partiallyHashedTx);
>           ^^^^^^^^^^^^^^
>         if (protested) return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSProtestPause
Line:        212
Source: 
>         if (protested) return 0;
>         uint protestDeadline = protestDeadline(partiallyHashedTx);
>          ^^^^^^^^^^^^^^^^^^^^
>         if (now >= protestDeadline) return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSProtestPause
Line:        217
Source: 
>     function timeUntilProposalProtestDeadline(bytes32 txHash) external view returns (uint256) {
>         (bool protested, ,) = getTransactionDelays(txHash);
>           ^^^^^^^^^^^^^^
>         if (protested) return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DSProtestPause
Line:        219
Source: 
>         if (protested) return 0;
>         uint protestDeadline = protestDeadline(txHash);
>          ^^^^^^^^^^^^^^^^^^^^
>         if (now >= protestDeadline) return 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSProtestPause
Line:        131
Source: 
>     uint256 constant public MAX_DELAY                = 28 days;
>     uint256 constant public maxScheduledTransactions = 10;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant public protestEnd               = 500;                 // a tx can be protested against if max 1/2 of the time until earliest execution has passed

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSProtestPause
Line:        132
Source: 
>     uint256 constant public maxScheduledTransactions = 10;
>     uint256 constant public protestEnd               = 500;                 // a tx can be protested against if max 1/2 of the time until earliest execution has passed
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant public MAX_DELAY_MULTIPLIER     = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSProtestPause
Line:        195
Source: 
>         bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);
>         (bool protested, ,) = getTransactionDelays(partiallyHashedTx);
>           ^^^^^^^^^^^^^^
>         if (protested) return false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSProtestPause
Line:        202
Source: 
>     function protestWindowAvailable(bytes32 txHash) external view returns (bool) {
>         (bool protested, ,) = getTransactionDelays(txHash);
>           ^^^^^^^^^^^^^^
>         if (protested) return false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSProtestPause
Line:        210
Source: 
>         bytes32 partiallyHashedTx = getTransactionDataHash(usr, codeHash, parameters);
>         (bool protested, ,) = getTransactionDelays(partiallyHashedTx);
>           ^^^^^^^^^^^^^^
>         if (protested) return 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSProtestPause
Line:        217
Source: 
>     function timeUntilProposalProtestDeadline(bytes32 txHash) external view returns (uint256) {
>         (bool protested, ,) = getTransactionDelays(txHash);
>           ^^^^^^^^^^^^^^
>         if (protested) return 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        24
Source: 
> 
> pragma solidity >=0.6.7;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DSAuth
Line:        77
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DSProtestPause
Line:        301
Source: 
>         out = proxy.executeTransaction(usr, parameters);
>         require(proxy.owner() == address(this), "ds-protest-pause-illegal-storage-change");
>                  ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSProtestPause
Line:        300
Source: 
> 
>         out = proxy.executeTransaction(usr, parameters);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(proxy.owner() == address(this), "ds-protest-pause-illegal-storage-change");

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSProtestPause
Line:        163
Source: 
>     function subtract(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, "ds-protest-pause-sub-underflow");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSProtestPause
Line:        166
Source: 
>     function multiply(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "ds-protest-pause-mul-invalid");
>                             ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        38
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSProtestPause
Line:        121
Source: 
>     DSPauseProxy     public proxy;
>     address          public protester;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSProtestPause
Line:        125
Source: 
>     uint             public delayMultiplier = 1;
>     uint             public currentlyScheduledTransactions;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint             public deploymentTime;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        51
Source: 
>     {
>         owner = owner_;
>          ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        60
Source: 
>     {
>         authority = authority_;
>          ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        51
Source: 
>     {
>         owner = owner_;
>          ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        60
Source: 
>     {
>         authority = authority_;
>          ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSProtestPause
Line:        312
Source: 
>         require(currentlyScheduledTransactions < maxScheduledTransactions, "ds-protest-pause-too-many-scheduled");
>         currentlyScheduledTransactions = addition(currentlyScheduledTransactions, 1);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         scheduledTransactions[fullyHashedTx] = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSProtestPause
Line:        313
Source: 
>         currentlyScheduledTransactions = addition(currentlyScheduledTransactions, 1);
>         scheduledTransactions[fullyHashedTx] = true;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transactionDelays[partiallyHashedTx] = TransactionDelay(false, now, subtract(earliestExecutionTime, now));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSProtestPause
Line:        314
Source: 
>         scheduledTransactions[fullyHashedTx] = true;
>         transactionDelays[partiallyHashedTx] = TransactionDelay(false, now, subtract(earliestExecutionTime, now));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ScheduleTransaction(msg.sender, usr, codeHash, parameters, earliestExecutionTime);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSProtestPause
Line:        277
Source: 
>         require(transactionDelays[partiallyHashedTx].scheduleTime > 0, "ds-protest-pause-cannot-abandon-null");
>         scheduledTransactions[fullyHashedTx] = false;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete(transactionDelays[partiallyHashedTx]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSProtestPause
Line:        278
Source: 
>         scheduledTransactions[fullyHashedTx] = false;
>         delete(transactionDelays[partiallyHashedTx]);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currentlyScheduledTransactions = subtract(currentlyScheduledTransactions, 1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSProtestPause
Line:        279
Source: 
>         delete(transactionDelays[partiallyHashedTx]);
>         currentlyScheduledTransactions = subtract(currentlyScheduledTransactions, 1);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit AbandonTransaction(msg.sender, usr, codeHash, parameters, earliestExecutionTime);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DSProtestPause
Line:        294
Source: 
> 
>         scheduledTransactions[fullyHashedTx] = false;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete(transactionDelays[partiallyHashedTx]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DSProtestPause
Line:        295
Source: 
>         scheduledTransactions[fullyHashedTx] = false;
>         delete(transactionDelays[partiallyHashedTx]);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currentlyScheduledTransactions = subtract(currentlyScheduledTransactions, 1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DSProtestPause
Line:        296
Source: 
>         delete(transactionDelays[partiallyHashedTx]);
>         currentlyScheduledTransactions = subtract(currentlyScheduledTransactions, 1);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSProtestPause
Line:        134
Source: 
>     uint256 constant public MAX_DELAY_MULTIPLIER     = 3;
>     bytes32 constant public DS_PAUSE_TYPE            = bytes32("PROTEST");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
