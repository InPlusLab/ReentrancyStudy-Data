[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        113
Source: 
> 
>     function insuranceDeposit(uint256 pid) external payable onlyValidControllers(pid) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = msg.value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        119
Source: 
> 
>     function deposit(uint256 pid) external payable onlyValidControllers(pid) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = msg.value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        203
Source: 
> 
>     function withdrawInsuranceFee(uint256 pid, address payable to, uint256 amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        125
Source: 
> 
>     function getProjectFunds(uint256 pid)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        109
Source: 
>     modifier onlyValidControllers(uint256 pid) {
>         require(secondStorage.onlyProjectControllers(msg.sender, pid), "Not a valid controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        116
Source: 
>         projectFunds[pid] = projectFunds[pid].add(amount);
>         eventLogger.emitPoolDeposit(pid, msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        109
Source: 
>     modifier onlyValidControllers(uint256 pid) {
>         require(secondStorage.onlyProjectControllers(msg.sender, pid), "Not a valid controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        122
Source: 
>         projectFunds[pid] = projectFunds[pid].add(amount);
>         eventLogger.emitPoolDeposit(pid, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        109
Source: 
>     modifier onlyValidControllers(uint256 pid) {
>         require(secondStorage.onlyProjectControllers(msg.sender, pid), "Not a valid controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        139
Source: 
>         uint256 payment;
>         address payable modResources = masterStorage.getModerationResources();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tfc = secondStorage.getAmountOfFundsContributed(pid);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        140
Source: 
>         address payable modResources = masterStorage.getModerationResources();
>         uint256 tfc = secondStorage.getAmountOfFundsContributed(pid);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (to == modResources) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        142
Source: 
>         if (to == modResources) {
>             uint8 pjs = secondStorage.getProjectCurrentState(pid);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (pjs == 6) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        147
Source: 
>                     tfc.div(2) >= payment &&
>                     block.number > secondStorage.getPolicyEndDate(pid).add(185142) &&
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     projectFunds[pid] >= amountRepaid[pid].add(payment),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        154
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        159
Source: 
>                 payment = paymentAmount;
>                 if (!secondStorage.getBasePolicyExpired(pid)) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(tfc >= payment, "Not enough project funds available");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        170
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        173
Source: 
> 
>             if (pjs != 5 && pjs != 6 && block.number > secondStorage.getPolicyBase(pid) &&
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 !secondStorage.getBasePolicyExpired(pid)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        174
Source: 
>             if (pjs != 5 && pjs != 6 && block.number > secondStorage.getPolicyBase(pid) &&
>                 !secondStorage.getBasePolicyExpired(pid)) {
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 payment = paymentAmount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        182
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        185
Source: 
>         } else {
>             uint256 refundAmount = masterStorage.getAmountAvailableForWithdraw(to, pid);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (refundAmount == paymentAmount) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        188
Source: 
>                 payment = refundAmount;
>                 masterStorage.setAmountAvailableForWithdraw(to, pid, 0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(payment > 0, "No refund amount is available for this project");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        191
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        198
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        109
Source: 
>     modifier onlyValidControllers(uint256 pid) {
>         require(secondStorage.onlyProjectControllers(msg.sender, pid), "Not a valid controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        207
Source: 
>     {
>         uint256 payment = masterStorage.getAmountAvailableForWithdraw(to, pid);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(payment == amount, "Not enough funds available");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        210
Source: 
>         require(projectFunds[pid] >= amountRepaid[pid].add(payment), "No project funds for repayment");
>         masterStorage.setAmountAvailableForWithdraw(to, pid, 0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         amountRepaid[pid] = amountRepaid[pid].add(payment);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RefundableICORefundPool
Line:        213
Source: 
>         to.transfer(payment);
>         eventLogger.emitPoolWithdraw(to, payment);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        153
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        169
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        181
Source: 
> 
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        190
Source: 
>                 require(payment > 0, "No refund amount is available for this project");
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        197
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        212
Source: 
>         amountRepaid[pid] = amountRepaid[pid].add(payment);
>         to.transfer(payment);
>         ^^^^^^^^^^^^^^^^^^^^
>         eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RefundableICORefundPool
Line:        83
Source: 
> 
>     Storage masterStorage;
>     ^^^^^^^^^^^^^^^^^^^^^
>     SecondaryStorageInterface secondStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RefundableICORefundPool
Line:        84
Source: 
>     Storage masterStorage;
>     SecondaryStorageInterface secondStorage;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Logger eventLogger;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RefundableICORefundPool
Line:        85
Source: 
>     SecondaryStorageInterface secondStorage;
>     Logger eventLogger;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RefundableICORefundPool
Line:        108
Source: 
> 
>     modifier onlyValidControllers(uint256 pid) {
>                                   ^^^^^^^^^^^
>         require(secondStorage.onlyProjectControllers(msg.sender, pid), "Not a valid controller");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        153
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        169
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        181
Source: 
> 
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        190
Source: 
>                 require(payment > 0, "No refund amount is available for this project");
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        197
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        219
Source: 
>             address payable modrRsrc = masterStorage.getModerationResources();
>             modrRsrc.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        153
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        169
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        181
Source: 
> 
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        190
Source: 
>                 require(payment > 0, "No refund amount is available for this project");
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        197
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        212
Source: 
>         amountRepaid[pid] = amountRepaid[pid].add(payment);
>         to.transfer(payment);
>         ^^^^^^^^^^^^^^^^^^^^
>         eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        219
Source: 
>             address payable modrRsrc = masterStorage.getModerationResources();
>             modrRsrc.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        153
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        169
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        181
Source: 
> 
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        190
Source: 
>                 require(payment > 0, "No refund amount is available for this project");
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        197
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        212
Source: 
>         amountRepaid[pid] = amountRepaid[pid].add(payment);
>         to.transfer(payment);
>         ^^^^^^^^^^^^^^^^^^^^
>         eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        219
Source: 
>             address payable modrRsrc = masterStorage.getModerationResources();
>             modrRsrc.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        109
Source: 
>     modifier onlyValidControllers(uint256 pid) {
>         require(secondStorage.onlyProjectControllers(msg.sender, pid), "Not a valid controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        139
Source: 
>         uint256 payment;
>         address payable modResources = masterStorage.getModerationResources();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tfc = secondStorage.getAmountOfFundsContributed(pid);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        140
Source: 
>         address payable modResources = masterStorage.getModerationResources();
>         uint256 tfc = secondStorage.getAmountOfFundsContributed(pid);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (to == modResources) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        142
Source: 
>         if (to == modResources) {
>             uint8 pjs = secondStorage.getProjectCurrentState(pid);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (pjs == 6) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        147
Source: 
>                     tfc.div(2) >= payment &&
>                     block.number > secondStorage.getPolicyEndDate(pid).add(185142) &&
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     projectFunds[pid] >= amountRepaid[pid].add(payment),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        159
Source: 
>                 payment = paymentAmount;
>                 if (!secondStorage.getBasePolicyExpired(pid)) {
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(tfc >= payment, "Not enough project funds available");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        173
Source: 
> 
>             if (pjs != 5 && pjs != 6 && block.number > secondStorage.getPolicyBase(pid) &&
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 !secondStorage.getBasePolicyExpired(pid)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        174
Source: 
>             if (pjs != 5 && pjs != 6 && block.number > secondStorage.getPolicyBase(pid) &&
>                 !secondStorage.getBasePolicyExpired(pid)) {
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 payment = paymentAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        185
Source: 
>         } else {
>             uint256 refundAmount = masterStorage.getAmountAvailableForWithdraw(to, pid);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (refundAmount == paymentAmount) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        109
Source: 
>     modifier onlyValidControllers(uint256 pid) {
>         require(secondStorage.onlyProjectControllers(msg.sender, pid), "Not a valid controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        207
Source: 
>     {
>         uint256 payment = masterStorage.getAmountAvailableForWithdraw(to, pid);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(payment == amount, "Not enough funds available");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RefundableICORefundPool
Line:        217
Source: 
>     function cleanIfNoProjects() external {
>         if (secondStorage.getActiveProjects() == 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address payable modrRsrc = masterStorage.getModerationResources();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        116
Source: 
>         projectFunds[pid] = projectFunds[pid].add(amount);
>         eventLogger.emitPoolDeposit(pid, msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        122
Source: 
>         projectFunds[pid] = projectFunds[pid].add(amount);
>         eventLogger.emitPoolDeposit(pid, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        154
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        170
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        182
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        188
Source: 
>                 payment = refundAmount;
>                 masterStorage.setAmountAvailableForWithdraw(to, pid, 0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(payment > 0, "No refund amount is available for this project");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        191
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        198
Source: 
>                 to.transfer(payment);
>                 eventLogger.emitPoolWithdraw(to, payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        210
Source: 
>         require(projectFunds[pid] >= amountRepaid[pid].add(payment), "No project funds for repayment");
>         masterStorage.setAmountAvailableForWithdraw(to, pid, 0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         amountRepaid[pid] = amountRepaid[pid].add(payment);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        213
Source: 
>         to.transfer(payment);
>         eventLogger.emitPoolWithdraw(to, payment);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        218
Source: 
>         if (secondStorage.getActiveProjects() == 0) {
>             address payable modrRsrc = masterStorage.getModerationResources();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             modrRsrc.transfer(address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        153
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        169
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        181
Source: 
> 
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        190
Source: 
>                 require(payment > 0, "No refund amount is available for this project");
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        197
Source: 
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 to.transfer(payment);
>                 ^^^^^^^^^^^^^^^^^^^^
>                 eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        212
Source: 
>         amountRepaid[pid] = amountRepaid[pid].add(payment);
>         to.transfer(payment);
>         ^^^^^^^^^^^^^^^^^^^^
>         eventLogger.emitPoolWithdraw(to, payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        219
Source: 
>             address payable modrRsrc = masterStorage.getModerationResources();
>             modrRsrc.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        115
Source: 
>         uint256 amount = msg.value;
>         projectFunds[pid] = projectFunds[pid].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         eventLogger.emitPoolDeposit(pid, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        121
Source: 
>         uint256 amount = msg.value;
>         projectFunds[pid] = projectFunds[pid].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         eventLogger.emitPoolDeposit(pid, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        152
Source: 
>                 paymentAmount = 0;
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 to.transfer(payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        168
Source: 
>                 paymentAmount = 0;
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 to.transfer(payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        179
Source: 
>                 paymentAmount = 0;
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        196
Source: 
>                 paymentAmount = 0;
>                 amountRepaid[pid] = amountRepaid[pid].add(payment);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 to.transfer(payment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RefundableICORefundPool
Line:        211
Source: 
>         masterStorage.setAmountAvailableForWithdraw(to, pid, 0);
>         amountRepaid[pid] = amountRepaid[pid].add(payment);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         to.transfer(payment);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RefundableICORefundPool
Line:        188
Source: 
>                 payment = refundAmount;
>                 masterStorage.setAmountAvailableForWithdraw(to, pid, 0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(payment > 0, "No refund amount is available for this project");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RefundableICORefundPool
Line:        210
Source: 
>         require(projectFunds[pid] >= amountRepaid[pid].add(payment), "No project funds for repayment");
>         masterStorage.setAmountAvailableForWithdraw(to, pid, 0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         amountRepaid[pid] = amountRepaid[pid].add(payment);

[0m
