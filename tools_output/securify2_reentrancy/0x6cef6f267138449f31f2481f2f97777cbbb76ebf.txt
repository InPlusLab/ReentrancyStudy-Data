Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DSNote
Line:        115
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             foo := calldataload(4)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibNote
Line:        303
Source: 
>         _;
>         assembly {
>         ^^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        56
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        56
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        56
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSValue
Line:        272
Source: 
>     }
>     function read() public view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 wut; bool haz;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSValue
Line:        278
Source: 
>     }
>     function poke(bytes32 wut) public note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         val = wut;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSValue
Line:        282
Source: 
>     }
>     function void() public note auth {  // unset the value
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         has = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OSM
Line:        403
Source: 
>         require(pass(), "OSM/not-passed");
>         (bytes32 wut, bool ok) = DSValue(src).peek();
>                                  ^^^^^^^^^^^^^^^^^^^
>         if (ok) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        56
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        56
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        56
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSValue
Line:        278
Source: 
>     }
>     function poke(bytes32 wut) public note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         val = wut;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OSM
Line:        325
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OSM
Line:        326
Source: 
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OSM
Line:        374
Source: 
> 
>     function change(address src_) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         src = src_;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OSM
Line:        432
Source: 
> 
>     function diss(address a) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bud[a] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Violation
Contract:    OSM
Line:        403
Source: 
>         require(pass(), "OSM/not-passed");
>         (bytes32 wut, bool ok) = DSValue(src).peek();
>                                  ^^^^^^^^^^^^^^^^^^^
>         if (ok) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DSThing
Line:        238
Source: 
> contract DSThing is DSAuth, DSNote, DSMath {
>     function S(string memory s) internal pure returns (bytes4) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return bytes4(keccak256(abi.encodePacked(s)));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        26
Source: 
> 
> pragma solidity >=0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        111
Source: 
>     modifier note {
>         bytes32 foo;
>         ^^^^^^^^^^^
>         bytes32 bar;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        112
Source: 
>         bytes32 foo;
>         bytes32 bar;
>         ^^^^^^^^^^^
>         uint256 wad;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSNote
Line:        113
Source: 
>         bytes32 bar;
>         uint256 wad;
>         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSMath
Line:        169
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSMath
Line:        170
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSValue
Line:        267
Source: 
> contract DSValue is DSThing {
>     bool    has;
>     ^^^^^^^^^^^
>     bytes32 val;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSValue
Line:        268
Source: 
>     bool    has;
>     bytes32 val;
>     ^^^^^^^^^^^
>     function peek() public view returns (bytes32, bool) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OSM
Line:        343
Source: 
>     address public src;
>     uint16  constant ONE_HOUR = uint16(3600);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint16  public hop = ONE_HOUR;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OSM
Line:        352
Source: 
> 
>     Feed cur;
>     ^^^^^^^^
>     Feed nxt;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OSM
Line:        353
Source: 
>     Feed cur;
>     Feed nxt;
>     ^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DSAuth
Line:        77
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OSM
Line:        403
Source: 
>         require(pass(), "OSM/not-passed");
>         (bytes32 wut, bool ok) = DSValue(src).peek();
>                                  ^^^^^^^^^^^^^^^^^^^
>         if (ok) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        147
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, "ds-math-add-overflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        150
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, "ds-math-sub-underflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        153
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        40
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSValue
Line:        267
Source: 
> contract DSValue is DSThing {
>     bool    has;
>     ^^^^^^^^^^^
>     bytes32 val;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSValue
Line:        268
Source: 
>     bool    has;
>     bytes32 val;
>     ^^^^^^^^^^^
>     function peek() public view returns (bytes32, bool) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OSM
Line:        333
Source: 
>     // --- Stop ---
>     uint256 public stopped;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     modifier stoppable { require(stopped == 0, "OSM/is-stopped"); _; }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OSM
Line:        345
Source: 
>     uint16  public hop = ONE_HOUR;
>     uint64  public zzz;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OSM
Line:        352
Source: 
> 
>     Feed cur;
>     ^^^^^^^^
>     Feed nxt;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OSM
Line:        353
Source: 
>     Feed cur;
>     Feed nxt;
>     ^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        52
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        60
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        52
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        60
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        52
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        60
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSValue
Line:        279
Source: 
>     function poke(bytes32 wut) public note auth {
>         val = wut;
>         ^^^^^^^^^
>         has = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSValue
Line:        280
Source: 
>         val = wut;
>         has = true;
>         ^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSValue
Line:        283
Source: 
>     function void() public note auth {  // unset the value
>         has = false;
>         ^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OSM
Line:        405
Source: 
>         if (ok) {
>             cur = nxt;
>             ^^^^^^^^^
>             nxt = Feed(uint128(uint(wut)), 1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OSM
Line:        406
Source: 
>             cur = nxt;
>             nxt = Feed(uint128(uint(wut)), 1);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             zzz = prev(era());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OSM
Line:        407
Source: 
>             nxt = Feed(uint128(uint(wut)), 1);
>             zzz = prev(era());
>             ^^^^^^^^^^^^^^^^^
>             emit LogValue(bytes32(uint(cur.val)));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        169
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        170
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        169
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        170
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        169
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        170
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    OSM
Line:        379
Source: 
>     function era() internal view returns (uint) {
>         return block.timestamp;
>                ^^^^^^^^^^^^^^^
>     }

[0m
