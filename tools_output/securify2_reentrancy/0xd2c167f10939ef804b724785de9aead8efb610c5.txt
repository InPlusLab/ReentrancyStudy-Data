[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        377
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PPTokenController
Line:        1046
Source: 
>     assembly {
>       tokenId := mload(add(_data, 0x24))
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC721
Line:        94
Source: 
> contract IERC721 is IERC165 {
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC721
Line:        95
Source: 
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>     event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event ApprovalForAll(address indexed owner, address indexed operator, bool approved);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        622
Source: 
>      */
>     event Transfer(address indexed from, address indexed to, uint256 value);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        628
Source: 
>      */
>     event Approval(address indexed owner, address indexed spender, uint256 value);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        305
Source: 
>      */
>     function owner() public view returns (address) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        331
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        340
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        305
Source: 
>      */
>     function owner() public view returns (address) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        331
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        340
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                            ^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        682
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                                   ^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                            ^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        682
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                                   ^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    PPTokenController
Line:        1021
Source: 
> 
>     (bool ok,) = address(tokenContract)
>                                  ^^^^^^
>       .call

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                            ^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        682
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                                   ^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                            ^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        682
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                                   ^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        340
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PPTokenController
Line:        773
Source: 
> 
>   function setGeoDataManager(address _geoDataManager) external onlyOwner {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     geoDataManager = _geoDataManager;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PPTokenController
Line:        779
Source: 
> 
>   function setFeeManager(address _feeManager) external onlyOwner {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     feeManager = _feeManager;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PPTokenController
Line:        785
Source: 
> 
>   function setFeeCollector(address _feeCollector) external onlyOwner {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     feeCollector = _feeCollector;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PPTokenController
Line:        791
Source: 
> 
>   function setMinter(address _minter) external onlyOwner {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     minter = _minter;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PPTokenController
Line:        797
Source: 
> 
>   function setBurner(address _burner) external onlyOwner {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     burner = _burner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PPTokenController
Line:        849
Source: 
>   // MINTER INTERFACE
>   function mint(address _to) external onlyMinter {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _tokenId = tokenContract.mint(_to);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PPTokenController
Line:        899
Source: 
> 
>   function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(tokenContract.ownerOf(_tokenId) == msg.sender, "Only token owner allowed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PPTokenController
Line:        803
Source: 
> 
>   function withdrawErc20(address _tokenAddress, address _to) external {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == feeCollector, "Missing permissions");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PPTokenController
Line:        813
Source: 
> 
>   function withdrawEth(address payable _to) external {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == feeCollector, "Missing permissions");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PPTokenController
Line:        823
Source: 
> 
>   function setFee(bytes32 _key, uint256 _value) external {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == feeManager, "Missing permissions");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PPTokenController
Line:        857
Source: 
> 
>   function setInitialDetails(
>                   ^^^^^^^^^^^
>     uint256 _privatePropertyId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PPTokenController
Line:        880
Source: 
> 
>   function setInitialContour(
>                   ^^^^^^^^^^^
>     uint256 _privatePropertyId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PPTokenController
Line:        919
Source: 
> 
>   function propose(
>                   ^
>     bytes calldata _data,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PPTokenController
Line:        1044
Source: 
>   // @dev Assuming that a tokenId is always the first argument in a method
>   function fetchTokenId(bytes memory _data) public pure returns (uint256 tokenId) {
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PPTokenControllerFactory
Line:        1077
Source: 
> 
>   function build(
>                   
>     IPPGlobalRegistry _globalRegistry,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PPTokenController
Line:        835
Source: 
>     require(burnTimeoutAt[_tokenId] == 0, "Burn already initiated");
>     require(tokenContract.ownerOf(_tokenId) != address(0), "Token doesn't exists");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PPTokenController
Line:        910
Source: 
>     require(burnTimeoutAt[_tokenId] != 0, "Burn not initiated");
>     require(tokenContract.ownerOf(_tokenId) == msg.sender, "Only token owner allowed");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PPTokenController
Line:        850
Source: 
>   function mint(address _to) external onlyMinter {
>     uint256 _tokenId = tokenContract.mint(_to);
>                     ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PPTokenController
Line:        1021
Source: 
> 
>     (bool ok,) = address(tokenContract)
>                      ^^^^^^^
>       .call

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        20
Source: 
> 
> pragma solidity ^0.5.13;
>                 ^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        290
Source: 
> contract Ownable is Context {
>     address private _owner;
>                     ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        713
Source: 
> 
>   uint256 public constant VERSION = 3;
>                   ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        715
Source: 
> 
>   bytes32 public constant PROPOSAL_GALT_FEE_KEY = bytes32("CONTROLLER_PROPOSAL_GALT");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bytes32 public constant PROPOSAL_ETH_FEE_KEY = bytes32("CONTROLLER_PROPOSAL_ETH");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        716
Source: 
>   bytes32 public constant PROPOSAL_GALT_FEE_KEY = bytes32("CONTROLLER_PROPOSAL_GALT");
>   bytes32 public constant PROPOSAL_ETH_FEE_KEY = bytes32("CONTROLLER_PROPOSAL_ETH");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        737
Source: 
>   IPPGlobalRegistry public globalRegistry;
>   IPPToken public tokenContract;
>                   ^^^^^^^^^^^^^^
>   address public geoDataManager;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        738
Source: 
>   IPPToken public tokenContract;
>   address public geoDataManager;
>                   ^^^^^^^^^^^^^^
>   address public feeManager;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        739
Source: 
>   address public geoDataManager;
>   address public feeManager;
>                   ^^^^^^^^^^
>   address public feeCollector;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        740
Source: 
>   address public feeManager;
>   address public feeCollector;
>                   ^^^^^^^^^^^^
>   address public minter;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        741
Source: 
>   address public feeCollector;
>   address public minter;
>                   ^^^^^^
>   address public burner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        742
Source: 
>   address public minter;
>   address public burner;
>                   ^^^^^^
>   uint256 public defaultBurnTimeoutDuration;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        743
Source: 
>   address public burner;
>   uint256 public defaultBurnTimeoutDuration;
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal idCounter;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PPTokenController
Line:        744
Source: 
>   uint256 public defaultBurnTimeoutDuration;
>   uint256 internal idCounter;
>                   ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PPTokenController
Line:        818
Source: 
> 
>     _to.transfer(balance);
>                     ^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    PPTokenController
Line:        818
Source: 
> 
>     _to.transfer(balance);
>                     ^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PPTokenController
Line:        818
Source: 
> 
>     _to.transfer(balance);
>                     ^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        806
Source: 
> 
>     uint256 balance = IERC20(_tokenAddress).balanceOf(address(this));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        835
Source: 
>     require(burnTimeoutAt[_tokenId] == 0, "Burn already initiated");
>     require(tokenContract.ownerOf(_tokenId) != address(0), "Token doesn't exists");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        872
Source: 
> 
>     uint256 setupStage = tokenContract.getSetupStage(_privatePropertyId);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(setupStage == uint256(PropertyInitialSetupStage.PENDING), "Requires PENDING setup stage");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        888
Source: 
>   {
>     uint256 setupStage = tokenContract.getSetupStage(_privatePropertyId);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        900
Source: 
>   function setBurnTimeoutDuration(uint256 _tokenId, uint256 _duration) external {
>     require(tokenContract.ownerOf(_tokenId) == msg.sender, "Only token owner allowed");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_duration > 0, "Invalid timeout duration");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        910
Source: 
>     require(burnTimeoutAt[_tokenId] != 0, "Burn not initiated");
>     require(tokenContract.ownerOf(_tokenId) == msg.sender, "Only token owner allowed");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        934
Source: 
>       p.geoDataManagerApproved = true;
>     } else if (msgSender == tokenContract.ownerOf(tokenId)) {
>                                             ^^^^^^^^^^^^^^^^^
>       _acceptProposalFee();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        956
Source: 
>     if (p.geoDataManagerApproved == true) {
>       require(msg.sender == tokenContract.ownerOf(tokenId), "Missing permissions");
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       p.tokenOwnerApproved = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        979
Source: 
>     if (p.geoDataManagerApproved == true) {
>       require(msg.sender == tokenContract.ownerOf(tokenId), "Missing permissions");
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (p.tokenOwnerApproved == true) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        999
Source: 
>       require(p.geoDataManagerApproved == true, "Only own proposals can be cancelled");
>     } else if (msg.sender == tokenContract.ownerOf(tokenId)) {
>                                              ^^^^^^^^^^^^^^^^^
>       require(p.tokenOwnerApproved == true, "Only own proposals can be cancelled");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PPTokenController
Line:        1036
Source: 
>     require(block.timestamp > burnTimeoutAt[_tokenId], "Timeout has not passed yet");
>     require(tokenContract.ownerOf(_tokenId) != address(0), "Token already burned");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        808
Source: 
> 
>     IERC20(_tokenAddress).transfer(_to, balance);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        850
Source: 
>   function mint(address _to) external onlyMinter {
>     uint256 _tokenId = tokenContract.mint(_to);
>                                        ^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        870
Source: 
>     // Will REVERT if there is no owner assigned to the token
>     tokenContract.ownerOf(_privatePropertyId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        875
Source: 
> 
>     tokenContract.setDetails(_privatePropertyId, _tokenType, _areaSource, _area, _ledgerIdentifier, _humanAddress, _dataLink);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        877
Source: 
> 
>     tokenContract.incrementSetupStage(_privatePropertyId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        892
Source: 
> 
>     tokenContract.setContour(_privatePropertyId, _contour, _highestPoint);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        894
Source: 
> 
>     tokenContract.incrementSetupStage(_privatePropertyId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        1065
Source: 
>     if (msg.value == 0) {
>       _galtToken().transferFrom(msg.sender, address(this), fees[PROPOSAL_GALT_FEE_KEY]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        1060
Source: 
>   function _galtToken() internal view returns (IERC20) {
>     return IERC20(globalRegistry.getGaltTokenAddress());
>                                   ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenController
Line:        1038
Source: 
> 
>     tokenContract.burn(_tokenId);
>                     ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PPTokenControllerFactory
Line:        1091
Source: 
> 
>     ppTokenController.transferOwnership(msg.sender);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        378
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    PPTokenController
Line:        1049
Source: 
> 
>     require(tokenId > 0, "Failed fetching tokenId from encoded data");
>                             ^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PPTokenController
Line:        738
Source: 
>   IPPToken public tokenContract;
>   address public geoDataManager;
>                   ^^^^^^^^^^^^^^
>   address public feeManager;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PPTokenController
Line:        739
Source: 
>   address public geoDataManager;
>   address public feeManager;
>                   ^^^^^^^^^^
>   address public feeCollector;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PPTokenController
Line:        740
Source: 
>   address public feeManager;
>   address public feeCollector;
>                   ^^^^^^^^^^^^
>   address public minter;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PPTokenController
Line:        741
Source: 
>   address public feeCollector;
>   address public minter;
>                   ^^^^^^
>   address public burner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PPTokenController
Line:        742
Source: 
>   address public minter;
>   address public burner;
>                   ^^^^^^
>   uint256 public defaultBurnTimeoutDuration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PPTokenController
Line:        744
Source: 
>   uint256 public defaultBurnTimeoutDuration;
>   uint256 internal idCounter;
>                   ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PPTokenController
Line:        1055
Source: 
>   function _nextId() internal returns (uint256) {
>     idCounter += 1;
>                     
>     return idCounter;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PPTokenController
Line:        1019
Source: 
> 
>     p.status = ProposalStatus.EXECUTED;
>                     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PPTokenController
Line:        1027
Source: 
>       emit ProposalExecutionFailed(_proposalId);
>       p.status = ProposalStatus.APPROVED;
>                       ^^^^^^^^^^^^^^^^^^^
>     } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                            ^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        679
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        682
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                                   ^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        648
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        655
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        660
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                            ^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        679
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        682
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                                   ^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        648
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        655
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        660
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PPTokenController
Line:        808
Source: 
> 
>     IERC20(_tokenAddress).transfer(_to, balance);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PPTokenController
Line:        870
Source: 
>     // Will REVERT if there is no owner assigned to the token
>     tokenContract.ownerOf(_privatePropertyId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PPTokenController
Line:        1065
Source: 
>     if (msg.value == 0) {
>       _galtToken().transferFrom(msg.sender, address(this), fees[PROPOSAL_GALT_FEE_KEY]);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                            ^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        679
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        682
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                                   ^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        648
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        655
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        660
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        413
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                                            ^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        679
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        682
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                                   ^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        648
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        655
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        660
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PPTokenController
Line:        713
Source: 
> 
>   uint256 public constant VERSION = 3;
>                   ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    PPTokenController
Line:        1035
Source: 
>     require(burnTimeoutAt[_tokenId] != 0, "Timeout not set");
>     require(block.timestamp > burnTimeoutAt[_tokenId], "Timeout has not passed yet");
>                             ^^^^^^^^^^^^^^^
>     require(tokenContract.ownerOf(_tokenId) != address(0), "Token already burned");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    PPTokenController
Line:        842
Source: 
> 
>     uint256 timeoutAt = block.timestamp.add(duration);
>                                         ^^^^^^^^^^^^^^
>     burnTimeoutAt[_tokenId] = timeoutAt;

[0m
