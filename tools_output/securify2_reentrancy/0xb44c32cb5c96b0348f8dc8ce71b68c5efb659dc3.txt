pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        72
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        175
Source: 
> 
>     uint256 pickleindex = 19;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        200
Source: 
>     modifier onlyController {
>         require(msg.sender == controller, "!controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        39
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        44
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        200
Source: 
>     modifier onlyController {
>         require(msg.sender == controller, "!controller");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        344
Source: 
>     function setredeliverynum(uint256 value) public {
>         require(msg.sender == governance, "!governance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         redeliverynum = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        349
Source: 
>     function setGovernance(address _governance) public {
>         require(msg.sender == governance, "!governance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         governance = _governance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        354
Source: 
>     function setController(address _controller) external {
>         require(msg.sender == governance, "!governance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         controller = _controller;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        300
Source: 
> 
>     function getPending() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return pERC20(PICKLE).pendingPickle(pickleindex,address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        304
Source: 
> 
> 	function getPickle() public view returns(uint256)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        309
Source: 
> 
>     function harvest() public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        343
Source: 
> 
>     function setredeliverynum(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        348
Source: 
> 
>     function setGovernance(address _governance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        109
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        82
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        237
Source: 
>     // Withdraw partial funds, normally used with a vault withdrawal
> 	function withdraw(uint _amount) external onlyController
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        343
Source: 
> 
>     function setredeliverynum(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        348
Source: 
> 
>     function setGovernance(address _governance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        353
Source: 
> 
>     function setController(address _controller) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        217
Source: 
>     function deposit() public {
> 		uint256 _want = IERC20(want).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (_want > 0)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        222
Source: 
>             IERC20(want).safeApprove(pickleJar, _want);
> 		    yERC20(pickleJar).deposit(_want);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        225
Source: 
> 
> 		uint _pslp = IERC20(pickleJar).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (_pslp > 0)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        230
Source: 
>             IERC20(pickleJar).safeApprove(PICKLE, _pslp);
> 	    	pERC20(PICKLE).deposit(pickleindex, _pslp);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     		pledgePickles = pledgePickles.add(_pslp);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        311
Source: 
>     {
>         pERC20(PICKLE).withdraw(pickleindex,pledgePickles);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pledgePickles = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        82
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CurveDeposit
Line:        128
Source: 
>     function balanceOf(address) external view returns (uint256);
>     function claimable_tokens(address) external view returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    yERC20
Line:        134
Source: 
> 
> interface yERC20 {
> ^^^^^^^^^^^^^^^^^^
>   function deposit(uint256 _amount) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    pERC20
Line:        140
Source: 
> 
> interface pERC20 {
> ^^^^^^^^^^^^^^^^^^
>   function deposit(uint256 ,uint256 ) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ZAPPER
Line:        148
Source: 
> interface ZAPPER {
>     function ZapIn(
>     ^^^^^^^^^^^^^^^
>         address _FromTokenContractAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        177
Source: 
> 
>     address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        178
Source: 
>     address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);
>     address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        179
Source: 
>     address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);
> 	address constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        181
Source: 
> 
>     address constant public want = address(0x06da0fd433C1A5d7a4faa01111c044910A184553); //ETH_USDT SLP
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant public pickleJar = address(0xa7a37aE5Cb163a3147DE83F15e15D8E5f94D6bCE);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        182
Source: 
>     address constant public want = address(0x06da0fd433C1A5d7a4faa01111c044910A184553); //ETH_USDT SLP
>     address constant public pickleJar = address(0xa7a37aE5Cb163a3147DE83F15e15D8E5f94D6bCE);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address constant public PICKLE = address(0xbD17B1ce622d73bD438b9E658acA5996dc394b0d);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        185
Source: 
> 
>     address constant public pickletoken = address(0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        187
Source: 
> 
>     address constant public zapper = address(0xfF350eDc2242Ca4d7252A64746aec4A5487a852B);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant public swap = address(0xDef1C0ded9bec7F1a1670819833240f027b25EfF);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        188
Source: 
>     address constant public zapper = address(0xfF350eDc2242Ca4d7252A64746aec4A5487a852B);
>     address constant public swap = address(0xDef1C0ded9bec7F1a1670819833240f027b25EfF);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        217
Source: 
>     function deposit() public {
> 		uint256 _want = IERC20(want).balanceOf(address(this));
>   ^^^^^^^^^^^^^
> 		if (_want > 0)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        225
Source: 
> 
> 		uint _pslp = IERC20(pickleJar).balanceOf(address(this));
>   ^^^^^^^^^^
> 		if (_pslp > 0)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        240
Source: 
> 		uint amount = _withdraw(_amount);
> 		address _vault = Controller(controller).vaults(address(want));
>   ^^^^^^^^^^^^^^
>         require(_vault != address(0), "!vault");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        261
Source: 
> 
> 		address _vault = Controller(controller).vaults(address(want));
>   ^^^^^^^^^^^^^^
>         require(_vault != address(0), "!vault");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        267
Source: 
>     function _withdrawSome(uint256 _amount) internal {
>         uint256 _pslp = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());
>         ^^^^^^^^^^^^^
>         uint _before = IERC20(pickleJar).balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        268
Source: 
>         uint256 _pslp = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());
>         uint _before = IERC20(pickleJar).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         if (_before < _pslp) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        320
Source: 
>         {
>             uint256 _2weth = reward.mul(80).div(100); //80%
>             ^^^^^^^^^^^^^^
> 		    uint256 _2bt = reward.sub(_2weth);  //20%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        321
Source: 
>             uint256 _2weth = reward.mul(80).div(100); //80%
> 		    uint256 _2bt = reward.sub(_2weth);  //20%
>       ^^^^^^^^^^^^
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2weth, 0, swap2TokenRouting, address(this), now.add(1800));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        325
Source: 
> 
>             uint256 _weth = IERC20(weth).balanceOf(address(this));
>             ^^^^^^^^^^^^^
>             address pair = want;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        175
Source: 
> 
>     uint256 pickleindex = 19;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        217
Source: 
>     function deposit() public {
> 		uint256 _want = IERC20(want).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (_want > 0)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        225
Source: 
> 
> 		uint _pslp = IERC20(pickleJar).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (_pslp > 0)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        100
Source: 
>     function safeApprove(IERC20 token, address spender, uint256 value) internal {
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        240
Source: 
> 		uint amount = _withdraw(_amount);
> 		address _vault = Controller(controller).vaults(address(want));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_vault != address(0), "!vault");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        247
Source: 
>     function _withdraw(uint _amount) internal returns(uint) {
> 		uint amount = IERC20(want).balanceOf(address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (amount < _amount) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        250
Source: 
> 			_withdrawSome(_amount.sub(amount));
> 			amount = IERC20(want).balanceOf(address(this));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (amount < _amount){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        268
Source: 
>         uint256 _pslp = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());
>         uint _before = IERC20(pickleJar).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_before < _pslp) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        277
Source: 
>             pledgePickles = pledgePickles.sub(_pslp);
>             _pslp = IERC20(pickleJar).balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        261
Source: 
> 
> 		address _vault = Controller(controller).vaults(address(want));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_vault != address(0), "!vault");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        292
Source: 
> 	function balanceOfSLP() public view returns (uint256){
> 		return balanceOfpSLP().mul(yERC20(pickleJar).getRatio()).div(1e18);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        287
Source: 
> 	function balanceOfpSLP() public view returns (uint256) {
> 		return pledgePickles.add(IERC20(pickleJar).balanceOf(address(this)));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        317
Source: 
>     function redelivery() internal {
>         uint256 reward = IERC20(pickletoken).balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (reward > redeliverynum)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        325
Source: 
> 
>             uint256 _weth = IERC20(weth).balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address pair = want;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        213
Source: 
> 	function doApprove () internal{
>         IERC20(pickletoken).approve(unirouter, uint(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        222
Source: 
>             IERC20(want).safeApprove(pickleJar, _want);
> 		    yERC20(pickleJar).deposit(_want);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        230
Source: 
>             IERC20(pickleJar).safeApprove(PICKLE, _pslp);
> 	    	pERC20(PICKLE).deposit(pickleindex, _pslp);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     		pledgePickles = pledgePickles.add(_pslp);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        267
Source: 
>     function _withdrawSome(uint256 _amount) internal {
>         uint256 _pslp = _amount.mul(1e18).div(yERC20(pickleJar).getRatio());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _before = IERC20(pickleJar).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        275
Source: 
>             }
>             pERC20(PICKLE).withdraw(pickleindex, _pslp);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             pledgePickles = pledgePickles.sub(_pslp);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        279
Source: 
>         }
>         yERC20(pickleJar).withdraw(_pslp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        283
Source: 
> 	function balanceOfwant() public view returns (uint256) {
> 		return IERC20(want).balanceOf(address(this));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        301
Source: 
>     function getPending() public view returns (uint256) {
>         return pERC20(PICKLE).pendingPickle(pickleindex,address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        306
Source: 
> 	{
> 		return IERC20(pickletoken).balanceOf(address(this));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        311
Source: 
>     {
>         pERC20(PICKLE).withdraw(pickleindex,pledgePickles);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pledgePickles = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        322
Source: 
> 		    uint256 _2bt = reward.sub(_2weth);  //20%
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2weth, 0, swap2TokenRouting, address(this), now.add(1800));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        323
Source: 
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2weth, 0, swap2TokenRouting, address(this), now.add(1800));
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));
>                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        323
Source: 
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2weth, 0, swap2TokenRouting, address(this), now.add(1800));
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        330
Source: 
>                 IERC20(weth).safeApprove(zapper, _weth);
>                 ZAPPER(zapper).ZapIn(
>                 ^^^^^^^^^^^^^^^^^^^^^
>                     weth,

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        73
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        231
Source: 
> 	    	pERC20(PICKLE).deposit(pickleindex, _pslp);
>     		pledgePickles = pledgePickles.add(_pslp);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StrategyUSDTSLPPickle
Line:        276
Source: 
>             pERC20(PICKLE).withdraw(pickleindex, _pslp);
>             pledgePickles = pledgePickles.sub(_pslp);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _pslp = IERC20(pickleJar).balanceOf(address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        312
Source: 
>         pERC20(PICKLE).withdraw(pickleindex,pledgePickles);
>         pledgePickles = 0;
>         ^^^^^^^^^^^^^^^^^
>         redelivery();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        213
Source: 
> 	function doApprove () internal{
>         IERC20(pickletoken).approve(unirouter, uint(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        322
Source: 
> 		    uint256 _2bt = reward.sub(_2weth);  //20%
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2weth, 0, swap2TokenRouting, address(this), now.add(1800));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        323
Source: 
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2weth, 0, swap2TokenRouting, address(this), now.add(1800));
> 		    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrategyUSDTSLPPickle
Line:        330
Source: 
>                 IERC20(weth).safeApprove(zapper, _weth);
>                 ZAPPER(zapper).ZapIn(
>                 ^^^^^^^^^^^^^^^^^^^^^
>                     weth,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        82
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
