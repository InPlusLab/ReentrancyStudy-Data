Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    veCurveVault
Line:        848
Source: 
>         uint256 chainId;
>         assembly {
>         ^^^^^^^^^^
>             chainId := chainid()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    veCurveVault
Line:        521
Source: 
>             nCheckpoints > 0 &&
>             checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    veCurveVault
Line:        380
Source: 
>      */
>     function delegate(address delegatee) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _delegate(msg.sender, delegatee);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    veCurveVault
Line:        393
Source: 
>      */
>     function delegateBySig(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address delegatee,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    veCurveVault
Line:        434
Source: 
>      */
>     function getPriorVotes(address account, uint256 blockNumber)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    veCurveVault
Line:        581
Source: 
>             _claim();
>             uint256 _bal = rewards.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_bal > bal) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    veCurveVault
Line:        597
Source: 
>         if (feeDistribution != address(0x0)) {
>             FeeDistribution(feeDistribution).claim(address(this));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    veCurveVault
Line:        630
Source: 
>         updateFor(recipient);
>         rewards.transfer(recipient, claimable[recipient]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimable[recipient] = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    veCurveVault
Line:        632
Source: 
>         claimable[recipient] = 0;
>         bal = rewards.balanceOf(address(this));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    veCurveVault
Line:        661
Source: 
>     function depositAll() external {
>         _deposit(CRV.balanceOf(msg.sender));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    veCurveVault
Line:        669
Source: 
>     function _deposit(uint256 _amount) internal {
>         CRV.transferFrom(msg.sender, LOCK, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(msg.sender, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    veCurveVault
Line:        671
Source: 
>         _mint(msg.sender, _amount);
>         StrategyProxy(proxy).lock();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    veCurveVault
Line:        380
Source: 
>      */
>     function delegate(address delegatee) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _delegate(msg.sender, delegatee);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    veCurveVault
Line:        624
Source: 
> 
>     function claimFor(address recipient) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _claimFor(recipient);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    veCurveVault
Line:        664
Source: 
> 
>     function deposit(uint256 _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _deposit(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    veCurveVault
Line:        679
Source: 
> 
>     function setFeeDistribution(address _feeDistribution) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "setGovernance: !gov");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    veCurveVault
Line:        688
Source: 
>      */
>     function setGovernance(address _governance) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "setGovernance: !gov");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    veCurveVault
Line:        792
Source: 
>      */
>     function transfer(address dst, uint256 amount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferTokens(msg.sender, dst, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    veCurveVault
Line:        804
Source: 
>      */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address src,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    veCurveVault
Line:        674
Source: 
> 
>     function setProxy(address _proxy) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "setGovernance: !gov");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    veCurveVault
Line:        710
Source: 
>      */
>     function allowance(address account, address spender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    veCurveVault
Line:        726
Source: 
>      */
>     function approve(address spender, uint256 amount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    veCurveVault
Line:        782
Source: 
>      */
>     function balanceOf(address account) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[account];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    veCurveVault
Line:        581
Source: 
>             _claim();
>             uint256 _bal = rewards.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_bal > bal) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    veCurveVault
Line:        630
Source: 
>         updateFor(recipient);
>         rewards.transfer(recipient, claimable[recipient]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimable[recipient] = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    veCurveVault
Line:        632
Source: 
>         claimable[recipient] = 0;
>         bal = rewards.balanceOf(address(this));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        309
Source: 
> 
> contract veCurveVault {
> ^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        313
Source: 
>     /// @notice EIP-20 token name for this token
>     string public constant name = "veCRV Stake DAO";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        316
Source: 
>     /// @notice EIP-20 token symbol for this token
>     string public constant symbol = "sdveCRV-DAO";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        319
Source: 
>     /// @notice EIP-20 token decimals for this token
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        341
Source: 
>         );
>     bytes32 public immutable DOMAINSEPARATOR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        566
Source: 
> 
>     IERC20 public constant rewards =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        581
Source: 
>             _claim();
>             uint256 _bal = rewards.balanceOf(address(this));
>             ^^^^^^^^^^^^
>             if (_bal > bal) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        583
Source: 
>             if (_bal > bal) {
>                 uint256 _diff = _bal.sub(bal, "veCRV::_update: bal _diff");
>                 ^^^^^^^^^^^^^
>                 if (_diff > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        585
Source: 
>                 if (_diff > 0) {
>                     uint256 _ratio = _diff.mul(1e18).div(totalSupply);
>                     ^^^^^^^^^^^^^^
>                     if (_ratio > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        603
Source: 
>         _update();
>         uint256 _supplied = balances[recipient];
>         ^^^^^^^^^^^^^^^^^
>         if (_supplied > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        605
Source: 
>         if (_supplied > 0) {
>             uint256 _supplyIndex = supplyIndex[recipient];
>             ^^^^^^^^^^^^^^^^^^^^
>             supplyIndex[recipient] = index;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        607
Source: 
>             supplyIndex[recipient] = index;
>             uint256 _delta =
>             ^^^^^^^^^^^^^^
>                 index.sub(_supplyIndex, "veCRV::_claimFor: index delta");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    veCurveVault
Line:        610
Source: 
>             if (_delta > 0) {
>                 uint256 _share = _supplied.mul(_delta).div(1e18);
>                 ^^^^^^^^^^^^^^
>                 claimable[recipient] = claimable[recipient].add(_share);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        10
Source: 
> // SPDX-License-Identifier: MIT
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    veCurveVault
Line:        581
Source: 
>             _claim();
>             uint256 _bal = rewards.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_bal > bal) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    veCurveVault
Line:        632
Source: 
>         claimable[recipient] = 0;
>         bal = rewards.balanceOf(address(this));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    veCurveVault
Line:        661
Source: 
>     function depositAll() external {
>         _deposit(CRV.balanceOf(msg.sender));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    veCurveVault
Line:        597
Source: 
>         if (feeDistribution != address(0x0)) {
>             FeeDistribution(feeDistribution).claim(address(this));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    veCurveVault
Line:        630
Source: 
>         updateFor(recipient);
>         rewards.transfer(recipient, claimable[recipient]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimable[recipient] = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    veCurveVault
Line:        669
Source: 
>     function _deposit(uint256 _amount) internal {
>         CRV.transferFrom(msg.sender, LOCK, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(msg.sender, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    veCurveVault
Line:        671
Source: 
>         _mint(msg.sender, _amount);
>         StrategyProxy(proxy).lock();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    veCurveVault
Line:        556
Source: 
>     address public governance;
>     address public pendingGovernance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    veCurveVault
Line:        564
Source: 
>     address public proxy = address(0x7A1848e7847F3f5FfB4d8e63BdB9569db535A4f0);
>     address public feeDistribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    veCurveVault
Line:        587
Source: 
>                     if (_ratio > 0) {
>                         index = index.add(_ratio);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>                         bal = _bal;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    veCurveVault
Line:        588
Source: 
>                         index = index.add(_ratio);
>                         bal = _bal;
>                         ^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    veCurveVault
Line:        611
Source: 
>                 uint256 _share = _supplied.mul(_delta).div(1e18);
>                 claimable[recipient] = claimable[recipient].add(_share);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    veCurveVault
Line:        651
Source: 
>         // mint the amount
>         totalSupply = totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // transfer the amount to the recipient

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    veCurveVault
Line:        653
Source: 
>         // transfer the amount to the recipient
>         balances[dst] = balances[dst].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), dst, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        475
Source: 
>         uint256 delegatorBalance = balances[delegator];
>         delegates[delegator] = delegatee;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        523
Source: 
>         ) {
>             checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        525
Source: 
>         } else {
>             checkpoints[delegatee][nCheckpoints] = Checkpoint(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 blockNumber,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        529
Source: 
>             );
>             numCheckpoints[delegatee] = nCheckpoints + 1;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        411
Source: 
>         require(signatory != address(0), "delegateBySig: sig");
>         require(nonce == nonces[signatory]++, "delegateBySig: nonce");
>                          ^^^^^^^^^^^^^^^^^^^
>         require(now <= expiry, "delegateBySig: expired");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        606
Source: 
>             uint256 _supplyIndex = supplyIndex[recipient];
>             supplyIndex[recipient] = index;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _delta =

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        614
Source: 
>         } else {
>             supplyIndex[recipient] = index;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        631
Source: 
>         rewards.transfer(recipient, claimable[recipient]);
>         claimable[recipient] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         bal = rewards.balanceOf(address(this));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        632
Source: 
>         claimable[recipient] = 0;
>         bal = rewards.balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        727
Source: 
>     function approve(address spender, uint256 amount) external returns (bool) {
>         allowances[msg.sender][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        759
Source: 
>                     amount,
>                     nonces[owner]++,
>                     ^^^^^^^^^^^^^^^
>                     deadline

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        772
Source: 
> 
>         allowances[owner][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        838
Source: 
> 
>         balances[src] = balances[src].sub(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    veCurveVault
Line:        842
Source: 
>         );
>         balances[dst] = balances[dst].add(amount, "_transferTokens: overflows");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(src, dst, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    veCurveVault
Line:        630
Source: 
>         updateFor(recipient);
>         rewards.transfer(recipient, claimable[recipient]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimable[recipient] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    veCurveVault
Line:        669
Source: 
>     function _deposit(uint256 _amount) internal {
>         CRV.transferFrom(msg.sender, LOCK, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(msg.sender, _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    veCurveVault
Line:        316
Source: 
>     /// @notice EIP-20 token symbol for this token
>     string public constant symbol = "sdveCRV-DAO";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    veCurveVault
Line:        319
Source: 
>     /// @notice EIP-20 token decimals for this token
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
