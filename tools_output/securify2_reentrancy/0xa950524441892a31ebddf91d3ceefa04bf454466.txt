Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibNote
Line:        35
Source: 
>         _;
>         assembly {
>         ^^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vow
Line:        145
Source: 
>     // --- Administration ---
>     function file(bytes32 what, uint data) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "wait") wait = data;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Vow
Line:        154
Source: 
> 
>     function file(bytes32 what, address data) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "flapper") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vow
Line:        98
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) external note auth { require(live == 1, "Vow/not-live"); wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vow
Line:        99
Source: 
>     function rely(address usr) external note auth { require(live == 1, "Vow/not-live"); wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vow
Line:        165
Source: 
>     // Push to debt-queue
>     function fess(uint tab) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sin[now] = add(sin[now], tab);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Vow
Line:        170
Source: 
>     // Pop from debt-queue
>     function flog(uint era) external note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(add(era, wait) <= now, "Vow/wait-not-finished");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        156
Source: 
>         if (what == "flapper") {
>             vat.nope(address(flapper));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             flapper = FlapLike(data);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        158
Source: 
>             flapper = FlapLike(data);
>             vat.hope(data);
>             ^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        184
Source: 
>         require(rad <= Ash, "Vow/not-enough-ash");
>         require(rad <= vat.dai(address(this)), "Vow/insufficient-surplus");
>                        ^^^^^^^^^^^^^^^^^^^^^^
>         Ash = sub(Ash, rad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        186
Source: 
>         Ash = sub(Ash, rad);
>         vat.heal(rad);
>         ^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        191
Source: 
>     function flop() external note returns (uint id) {
>         require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), "Vow/insufficient-debt");
>                                 ^^^^^^^^^^^^^^^^^^^^^^
>         require(vat.dai(address(this)) == 0, "Vow/surplus-not-zero");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        192
Source: 
>         require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), "Vow/insufficient-debt");
>         require(vat.dai(address(this)) == 0, "Vow/surplus-not-zero");
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         Ash = add(Ash, sump);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        194
Source: 
>         Ash = add(Ash, sump);
>         id = flopper.kick(address(this), dump, sump);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        208
Source: 
>         Ash = 0;
>         flapper.cage(vat.dai(address(flapper)));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^
>         flopper.cage();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        208
Source: 
>         Ash = 0;
>         flapper.cage(vat.dai(address(flapper)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         flopper.cage();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        209
Source: 
>         flapper.cage(vat.dai(address(flapper)));
>         flopper.cage();
>         ^^^^^^^^^^^^^^
>         vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        210
Source: 
>         flopper.cage();
>         vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));
>                      ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        210
Source: 
>         flopper.cage();
>         vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));
>                                              ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Vow
Line:        210
Source: 
>         flopper.cage();
>         vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Vow
Line:        111
Source: 
>     mapping (uint256 => uint256) public sin; // debt queue
>     uint256 public Sin;   // queued debt          [rad]
>     ^^^^^^^^^^^^^^^^^^
>     uint256 public Ash;   // on-auction debt      [rad]

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Vow
Line:        112
Source: 
>     uint256 public Sin;   // queued debt          [rad]
>     uint256 public Ash;   // on-auction debt      [rad]
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        178
Source: 
>     function heal(uint rad) external note {
>         require(rad <= vat.dai(address(this)), "Vow/insufficient-surplus");
>                        ^^^^^^^^^^^^^^^^^^^^^^
>         require(rad <= sub(sub(vat.sin(address(this)), Sin), Ash), "Vow/insufficient-debt");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        179
Source: 
>         require(rad <= vat.dai(address(this)), "Vow/insufficient-surplus");
>         require(rad <= sub(sub(vat.sin(address(this)), Sin), Ash), "Vow/insufficient-debt");
>                                ^^^^^^^^^^^^^^^^^^^^^^
>         vat.heal(rad);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        184
Source: 
>         require(rad <= Ash, "Vow/not-enough-ash");
>         require(rad <= vat.dai(address(this)), "Vow/insufficient-surplus");
>                        ^^^^^^^^^^^^^^^^^^^^^^
>         Ash = sub(Ash, rad);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        191
Source: 
>     function flop() external note returns (uint id) {
>         require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), "Vow/insufficient-debt");
>                                 ^^^^^^^^^^^^^^^^^^^^^^
>         require(vat.dai(address(this)) == 0, "Vow/surplus-not-zero");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        192
Source: 
>         require(sump <= sub(sub(vat.sin(address(this)), Sin), Ash), "Vow/insufficient-debt");
>         require(vat.dai(address(this)) == 0, "Vow/surplus-not-zero");
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         Ash = add(Ash, sump);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        198
Source: 
>     function flap() external note returns (uint id) {
>         require(vat.dai(address(this)) >= add(add(vat.sin(address(this)), bump), hump), "Vow/insufficient-surplus");
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         require(sub(sub(vat.sin(address(this)), Sin), Ash) == 0, "Vow/debt-not-zero");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        198
Source: 
>     function flap() external note returns (uint id) {
>         require(vat.dai(address(this)) >= add(add(vat.sin(address(this)), bump), hump), "Vow/insufficient-surplus");
>                                                   ^^^^^^^^^^^^^^^^^^^^^^
>         require(sub(sub(vat.sin(address(this)), Sin), Ash) == 0, "Vow/debt-not-zero");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        199
Source: 
>         require(vat.dai(address(this)) >= add(add(vat.sin(address(this)), bump), hump), "Vow/insufficient-surplus");
>         require(sub(sub(vat.sin(address(this)), Sin), Ash) == 0, "Vow/debt-not-zero");
>                         ^^^^^^^^^^^^^^^^^^^^^^
>         id = flapper.kick(bump, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        208
Source: 
>         Ash = 0;
>         flapper.cage(vat.dai(address(flapper)));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^
>         flopper.cage();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        210
Source: 
>         flopper.cage();
>         vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));
>                      ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Vow
Line:        210
Source: 
>         flopper.cage();
>         vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));
>                                              ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        129
Source: 
>         flopper = FlopLike(flopper_);
>         vat.hope(flapper_);
>         ^^^^^^^^^^^^^^^^^^
>         live = 1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        156
Source: 
>         if (what == "flapper") {
>             vat.nope(address(flapper));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             flapper = FlapLike(data);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        158
Source: 
>             flapper = FlapLike(data);
>             vat.hope(data);
>             ^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        180
Source: 
>         require(rad <= sub(sub(vat.sin(address(this)), Sin), Ash), "Vow/insufficient-debt");
>         vat.heal(rad);
>         ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        186
Source: 
>         Ash = sub(Ash, rad);
>         vat.heal(rad);
>         ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        194
Source: 
>         Ash = add(Ash, sump);
>         id = flopper.kick(address(this), dump, sump);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        200
Source: 
>         require(sub(sub(vat.sin(address(this)), Sin), Ash) == 0, "Vow/debt-not-zero");
>         id = flapper.kick(bump, 0);
>              ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        208
Source: 
>         Ash = 0;
>         flapper.cage(vat.dai(address(flapper)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         flopper.cage();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        209
Source: 
>         flapper.cage(vat.dai(address(flapper)));
>         flopper.cage();
>         ^^^^^^^^^^^^^^
>         vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Vow
Line:        210
Source: 
>         flopper.cage();
>         vat.heal(min(vat.dai(address(this)), vat.sin(address(this))));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Vow
Line:        135
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Vow
Line:        138
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vow
Line:        111
Source: 
>     mapping (uint256 => uint256) public sin; // debt queue
>     uint256 public Sin;   // queued debt          [rad]
>     ^^^^^^^^^^^^^^^^^^
>     uint256 public Ash;   // on-auction debt      [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vow
Line:        112
Source: 
>     uint256 public Sin;   // queued debt          [rad]
>     uint256 public Ash;   // on-auction debt      [rad]
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vow
Line:        114
Source: 
> 
>     uint256 public wait;  // flop delay
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public dump;  // flop initial lot size  [wad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vow
Line:        115
Source: 
>     uint256 public wait;  // flop delay
>     uint256 public dump;  // flop initial lot size  [wad]
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public sump;  // flop fixed bid size    [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vow
Line:        116
Source: 
>     uint256 public dump;  // flop initial lot size  [wad]
>     uint256 public sump;  // flop fixed bid size    [rad]
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vow
Line:        118
Source: 
> 
>     uint256 public bump;  // flap fixed lot size    [rad]
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public hump;  // surplus buffer       [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vow
Line:        119
Source: 
>     uint256 public bump;  // flap fixed lot size    [rad]
>     uint256 public hump;  // surplus buffer       [rad]
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Vow
Line:        121
Source: 
> 
>     uint256 public live;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vow
Line:        185
Source: 
>         require(rad <= vat.dai(address(this)), "Vow/insufficient-surplus");
>         Ash = sub(Ash, rad);
>         ^^^^^^^^^^^^^^^^^^^
>         vat.heal(rad);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Vow
Line:        193
Source: 
>         require(vat.dai(address(this)) == 0, "Vow/surplus-not-zero");
>         Ash = add(Ash, sump);
>         ^^^^^^^^^^^^^^^^^^^^
>         id = flopper.kick(address(this), dump, sump);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vow
Line:        172
Source: 
>         require(add(era, wait) <= now, "Vow/wait-not-finished");
>         Sin = sub(Sin, sin[era]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         sin[era] = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Vow
Line:        173
Source: 
>         Sin = sub(Sin, sin[era]);
>         sin[era] = 0;
>         ^^^^^^^^^^^^
>     }

[0m
