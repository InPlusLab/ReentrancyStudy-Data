[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MANAry
Line:        102
Source: 
>     uint public numOfTicketsSold = 0;
>     uint public cap = 100;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        18
Source: 
> 
> function changeOwner(address payable _newOwner) public onlyOwner {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        24
Source: 
> 
> function acceptOwnership() public{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (msg.sender == newOwner) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        18
Source: 
> 
> function changeOwner(address payable _newOwner) public onlyOwner {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        24
Source: 
> 
> function acceptOwnership() public{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (msg.sender == newOwner) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MANAry
Line:        106
Source: 
>     
>     function buyTickets(uint amount) public onlyWhenTimeIsLeft{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount >=1);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MANAry
Line:        140
Source: 
>     
>     function draw() public onlyWhenTimeIsUpOrAllTicketsSold{      
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (numOfTicketsSold > 0){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MANAry
Line:        163
Source: 
>     
>     function terminateContract() public payable onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint k=0; playerAddress.length > k; k++)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MANAry
Line:        174
Source: 
>     
>     function getLastWinner() public view returns (address){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(roundNumber == 0){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MANAry
Line:        183
Source: 
>     
>     function getTicketNum(address ticketHolder) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ownerOfTickets[ticketHolder][roundNumber].numOfTickets;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MANAry
Line:        188
Source: 
>     
>     function timeLeft() public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (unlockTime >= now) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MANAry
Line:        115
Source: 
>         
>         require(token.transferFrom(msg.sender, address(this), amount.mul(100000000000000000000)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         potTotal = token.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MANAry
Line:        116
Source: 
>         require(token.transferFrom(msg.sender, address(this), amount.mul(100000000000000000000)));
>         potTotal = token.balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MANAry
Line:        148
Source: 
>         uint winnerShare = potTotal.sub(ownerShare.add(potShare));
>         require(token.transfer(owner, ownerShare));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transfer(winnerAddress, winnerShare));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MANAry
Line:        149
Source: 
>         require(token.transfer(owner, ownerShare));
>         require(token.transfer(winnerAddress, winnerShare));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         potTotal=potShare;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MANAry
Line:        169
Source: 
>         }
>         potTotal = token.balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transfer(owner, potTotal));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MANAry
Line:        170
Source: 
>         potTotal = token.balanceOf(address(this));
>         require(token.transfer(owner, potTotal));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(owner);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MANAry
Line:        167
Source: 
>         uint refund = ownerOfTickets[playerAddress[k]][roundNumber].numOfTickets;
>         require(token.transfer(playerAddress[k], refund.mul(100000000000000000000)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        18
Source: 
> 
> function changeOwner(address payable _newOwner) public onlyOwner {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MANAry
Line:        183
Source: 
>     
>     function getTicketNum(address ticketHolder) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ownerOfTickets[ticketHolder][roundNumber].numOfTickets;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        44
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MANAry
Line:        115
Source: 
>         
>         require(token.transferFrom(msg.sender, address(this), amount.mul(100000000000000000000)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         potTotal = token.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MANAry
Line:        116
Source: 
>         require(token.transferFrom(msg.sender, address(this), amount.mul(100000000000000000000)));
>         potTotal = token.balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MANAry
Line:        148
Source: 
>         uint winnerShare = potTotal.sub(ownerShare.add(potShare));
>         require(token.transfer(owner, ownerShare));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transfer(winnerAddress, winnerShare));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MANAry
Line:        149
Source: 
>         require(token.transfer(owner, ownerShare));
>         require(token.transfer(winnerAddress, winnerShare));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         potTotal=potShare;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MANAry
Line:        92
Source: 
>     
>     struct tickets {address _owner; uint numOfTickets;}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => mapping (uint => tickets)) ownerOfTickets;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Owned
Line:        9
Source: 
> 
> address payable  owner;
> ^^^^^^^^^^^^^^^^^^^^^^
> address payable newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Owned
Line:        10
Source: 
> address payable  owner;
> address payable newOwner;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MANAry
Line:        86
Source: 
> 
>     MANAToken token;
>     ^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MANAry
Line:        93
Source: 
>     struct tickets {address _owner; uint numOfTickets;}
>     mapping (address => mapping (uint => tickets)) ownerOfTickets;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MANAry
Line:        95
Source: 
>     
>     address [] playerAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     address [] entries;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MANAry
Line:        96
Source: 
>     address [] playerAddress;
>     address [] entries;
>     ^^^^^^^^^^^^^^^^^^
>     address [] winner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MANAry
Line:        97
Source: 
>     address [] entries;
>     address [] winner;
>     ^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MANAry
Line:        104
Source: 
>     
>     uint unlockTime = now + 7 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MANAry
Line:        115
Source: 
>         
>         require(token.transferFrom(msg.sender, address(this), amount.mul(100000000000000000000)));
>                                                                          ^^^^^^^^^^^^^^^^^^^^^
>         potTotal = token.balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MANAry
Line:        167
Source: 
>         uint refund = ownerOfTickets[playerAddress[k]][roundNumber].numOfTickets;
>         require(token.transfer(playerAddress[k], refund.mul(100000000000000000000)));
>                                                             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MANAry
Line:        115
Source: 
>         
>         require(token.transferFrom(msg.sender, address(this), amount.mul(100000000000000000000)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         potTotal = token.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MANAry
Line:        116
Source: 
>         require(token.transferFrom(msg.sender, address(this), amount.mul(100000000000000000000)));
>         potTotal = token.balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MANAry
Line:        148
Source: 
>         uint winnerShare = potTotal.sub(ownerShare.add(potShare));
>         require(token.transfer(owner, ownerShare));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transfer(winnerAddress, winnerShare));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MANAry
Line:        149
Source: 
>         require(token.transfer(owner, ownerShare));
>         require(token.transfer(winnerAddress, winnerShare));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         potTotal=potShare;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MANAry
Line:        167
Source: 
>         uint refund = ownerOfTickets[playerAddress[k]][roundNumber].numOfTickets;
>         require(token.transfer(playerAddress[k], refund.mul(100000000000000000000)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MANAry
Line:        169
Source: 
>         }
>         potTotal = token.balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.transfer(owner, potTotal));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MANAry
Line:        170
Source: 
>         potTotal = token.balanceOf(address(this));
>         require(token.transfer(owner, potTotal));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(owner);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        10
Source: 
> address payable  owner;
> address payable newOwner;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MANAry
Line:        143
Source: 
>         uint randomNumber = uint(keccak256(abi.encodePacked(now, msg.sender))).mod(numOfTicketsSold);
>         winner.push(entries[randomNumber]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address winnerAddress = winner[roundNumber];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MANAry
Line:        150
Source: 
>         require(token.transfer(winnerAddress, winnerShare));
>         potTotal=potShare;
>         ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MANAry
Line:        157
Source: 
> 
> 	    delete entries;
>      ^^^^^^^^^^^^^^
>         roundNumber++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MANAry
Line:        158
Source: 
> 	    delete entries;
>         roundNumber++;
>         ^^^^^^^^^^^^^
>         numOfTicketsSold = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MANAry
Line:        159
Source: 
>         roundNumber++;
>         numOfTicketsSold = 0;
>         ^^^^^^^^^^^^^^^^^^^^
>         unlockTime= now + 7 days;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MANAry
Line:        160
Source: 
>         numOfTicketsSold = 0;
>         unlockTime= now + 7 days;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MANAry
Line:        154
Source: 
>         else{
>         winner.push(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
