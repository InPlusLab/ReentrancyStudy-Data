Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.10. Changing pragma version to 0.5.10....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Position
Line:        316
Source: 
>     uint256 public MPFee;
>     uint256 public positionFee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Wrapper721
Line:        285
Source: 
>     }
>     function ownerOf(address _token, uint256 _tokenId) public view returns (address owner) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (isIssuedToken(_token)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Wrapper721
Line:        268
Source: 
> library Wrapper721 {
>     function safeTransferFrom(address _token, address _from, address _to, uint256 _tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Wrapper721
Line:        278
Source: 
>     }
>     function getApproved(address _token, uint256 _tokenId) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (isIssuedToken(_token)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Wrapper721
Line:        285
Source: 
>     }
>     function ownerOf(address _token, uint256 _tokenId) public view returns (address owner) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (isIssuedToken(_token)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Position
Line:        356
Source: 
> 
>     function init(
>     ^^^^^^^^^^^^^^
>         address payable _seller,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Wrapper721
Line:        268
Source: 
> library Wrapper721 {
>     function safeTransferFrom(address _token, address _from, address _to, uint256 _tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Wrapper721
Line:        278
Source: 
>     }
>     function getApproved(address _token, uint256 _tokenId) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (isIssuedToken(_token)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Wrapper721
Line:        285
Source: 
>     }
>     function ownerOf(address _token, uint256 _tokenId) public view returns (address owner) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (isIssuedToken(_token)) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Position
Line:        401
Source: 
> 
>         seller.transfer(sellerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Position
Line:        403
Source: 
> 
>         marketPlaceAddress.transfer(mktFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Position
Line:        315
Source: 
>     uint256 public price;
>     uint256 public MPFee;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 public positionFee;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuard
Line:        199
Source: 
>         _guardCounter += 1;
>         uint256 localCounter = _guardCounter;
>         ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Position
Line:        323
Source: 
> 
>     uint256 constant ONE_HUNDRED = 100e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Position
Line:        401
Source: 
> 
>         seller.transfer(sellerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Position
Line:        403
Source: 
> 
>         marketPlaceAddress.transfer(mktFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Position
Line:        401
Source: 
> 
>         seller.transfer(sellerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Position
Line:        403
Source: 
> 
>         marketPlaceAddress.transfer(mktFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Wrapper721
Line:        293
Source: 
>     function isIssuedToken(address _token) private view returns (bool) {
>         return (keccak256(abi.encodePacked((I721Meta(_token).symbol()))) ==
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             keccak256(abi.encodePacked(("CK"))));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        272
Source: 
>         if (isIssuedToken(_token)) {
>             I721Kitty(_token).transferFrom(_from, _to, _tokenId);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        274
Source: 
>         } else {
>             I721(_token).safeTransferFrom(_from, _to, _tokenId);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        280
Source: 
>         if (isIssuedToken(_token)) {
>             return I721Kitty(_token).kittyIndexToApproved(_tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        282
Source: 
>         } else {
>             return I721(_token).getApproved(_tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        287
Source: 
>         if (isIssuedToken(_token)) {
>             return I721Kitty(_token).ownerOf(_tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        289
Source: 
>         } else {
>             return I721(_token).ownerOf(_tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        272
Source: 
>         if (isIssuedToken(_token)) {
>             I721Kitty(_token).transferFrom(_from, _to, _tokenId);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        274
Source: 
>         } else {
>             I721(_token).safeTransferFrom(_from, _to, _tokenId);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        280
Source: 
>         if (isIssuedToken(_token)) {
>             return I721Kitty(_token).kittyIndexToApproved(_tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        282
Source: 
>         } else {
>             return I721(_token).getApproved(_tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        287
Source: 
>         if (isIssuedToken(_token)) {
>             return I721Kitty(_token).ownerOf(_tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Wrapper721
Line:        289
Source: 
>         } else {
>             return I721(_token).ownerOf(_tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Position
Line:        310
Source: 
> 
>     address public token721;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     bool private isTemplate;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Position
Line:        313
Source: 
> 
>     uint256 public positionCreated;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Position
Line:        314
Source: 
>     uint256 public positionCreated;
>     uint256 public price;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 public MPFee;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Position
Line:        315
Source: 
>     uint256 public price;
>     uint256 public MPFee;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint256 public positionFee;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Position
Line:        318
Source: 
> 
>     address payable public seller;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable public marketPlaceAddress;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Position
Line:        319
Source: 
>     address payable public seller;
>     address payable public marketPlaceAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public tokenAddress;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Position
Line:        320
Source: 
>     address payable public marketPlaceAddress;
>     address public tokenAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public tokenId;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Position
Line:        321
Source: 
>     address public tokenAddress;
>     uint256 public tokenId;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Position
Line:        316
Source: 
>     uint256 public MPFee;
>     uint256 public positionFee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Position
Line:        401
Source: 
> 
>         seller.transfer(sellerProfit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Position
Line:        403
Source: 
> 
>         marketPlaceAddress.transfer(mktFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Position
Line:        364
Source: 
>     ) external notTemplate returns (bool) {
>         positionCreated = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Position
Line:        366
Source: 
> 
>         seller = _seller;
>         ^^^^^^^^^^^^^^^^
>         MPFee = _MPFee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Position
Line:        367
Source: 
>         seller = _seller;
>         MPFee = _MPFee;
>         ^^^^^^^^^^^^^^
>         price = _price;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Position
Line:        368
Source: 
>         MPFee = _MPFee;
>         price = _price;
>         ^^^^^^^^^^^^^^
>         tokenAddress = _tokenAddress;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Position
Line:        369
Source: 
>         price = _price;
>         tokenAddress = _tokenAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenId = _tokenId;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Position
Line:        370
Source: 
>         tokenAddress = _tokenAddress;
>         tokenId = _tokenId;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Position
Line:        372
Source: 
> 
>         marketPlaceAddress = _marketPlaceAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Position
Line:        374
Source: 
> 
>         token721 = tokenAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        198
Source: 
>     modifier nonReentrant() {
>         _guardCounter += 1;
>         ^^^^^^^^^^^^^^^^^^
>         uint256 localCounter = _guardCounter;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        182
Source: 
>     // counter to allow mutex lock with only one SSTORE operation
>     uint256 private _guardCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Position
Line:        313
Source: 
> 
>     uint256 public positionCreated;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Position
Line:        316
Source: 
>     uint256 public MPFee;
>     uint256 public positionFee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
