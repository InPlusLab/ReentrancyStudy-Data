Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        99
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        124
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        133
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        124
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        133
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FoliaAuction
Line:        315
Source: 
> 
>     function updateNftAddress(address _nftAddress) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FoliaAuction
Line:        323
Source: 
> 
>     function updateMinBid(uint256 _minBid) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minBid = _minBid;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FoliaAuction
Line:        327
Source: 
> 
>     function updateTimeBuffer(uint256 _timeBuffer) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         timeBuffer = _timeBuffer;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FoliaAuction
Line:        331
Source: 
> 
>     function updateAuction(uint256 tokenId, bool paused) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(auctions[tokenId].exists, "Auction doesn't exist");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FoliaAuction
Line:        501
Source: 
> 
>     function updatePaused(bool _globalPaused) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalPaused = _globalPaused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FoliaAuction
Line:        505
Source: 
> 
>     function updateAdmin(address payable _admin) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         admin = _admin;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    FoliaAuction
Line:        435
Source: 
>             // in case the bidder is a contract that doesn't allow receiving
>              (bool success, ) = lastBidder.call.value(lastValue)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    FoliaAuction
Line:        437
Source: 
>             if (!success) {
>                 (success, ) = admin.call.value(lastValue)("");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "admin (in place of lastBidder) failed to receive");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    FoliaAuction
Line:        474
Source: 
>         if (adminReceives > 0) {
>             (success, ) = admin.call.value(adminReceives)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "admin failed to receive");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    FoliaAuction
Line:        478
Source: 
> 
>         (success, ) = proceedsRecipient.call.value(proceedsAmount)("");
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "recipient failed to receive");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    FoliaAuction
Line:        435
Source: 
>             // in case the bidder is a contract that doesn't allow receiving
>              (bool success, ) = lastBidder.call.value(lastValue)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (!success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    FoliaAuction
Line:        437
Source: 
>             if (!success) {
>                 (success, ) = admin.call.value(lastValue)("");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "admin (in place of lastBidder) failed to receive");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    FoliaAuction
Line:        474
Source: 
>         if (adminReceives > 0) {
>             (success, ) = admin.call.value(adminReceives)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "admin failed to receive");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    FoliaAuction
Line:        478
Source: 
> 
>         (success, ) = proceedsRecipient.call.value(proceedsAmount)("");
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "recipient failed to receive");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        133
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FoliaAuction
Line:        323
Source: 
> 
>     function updateMinBid(uint256 _minBid) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minBid = _minBid;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FoliaAuction
Line:        327
Source: 
> 
>     function updateTimeBuffer(uint256 _timeBuffer) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         timeBuffer = _timeBuffer;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FoliaAuction
Line:        501
Source: 
> 
>     function updatePaused(bool _globalPaused) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         globalPaused = _globalPaused;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FoliaAuction
Line:        315
Source: 
> 
>     function updateNftAddress(address _nftAddress) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FoliaAuction
Line:        331
Source: 
> 
>     function updateAuction(uint256 tokenId, bool paused) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(auctions[tokenId].exists, "Auction doesn't exist");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FoliaAuction
Line:        337
Source: 
> 
>     function createAuction(
>        ^^^^^^^^^^^^^^^^^^^^
>         bool paused,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FoliaAuction
Line:        505
Source: 
> 
>     function updateAdmin(address payable _admin) public onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         admin = _admin;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FoliaAuction
Line:        248
Source: 
> 
>     bytes4 constant interfaceId = 0x80ac58cd; // 721 interface id
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public nftAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FoliaAuction
Line:        435
Source: 
>             // in case the bidder is a contract that doesn't allow receiving
>              (bool success, ) = lastBidder.call.value(lastValue)("");
>                  ^^^^^^^^^^^^
>             if (!success) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        75
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        150
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        168
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        197
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        232
Source: 
> 
> pragma solidity ^0.5.0;
>    ^^^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuard
Line:        224
Source: 
>         _guardCounter += 1;
>         uint256 localCounter = _guardCounter;
>            ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FoliaAuction
Line:        248
Source: 
> 
>     bytes4 constant interfaceId = 0x80ac58cd; // 721 interface id
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public nftAddress;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FoliaAuction
Line:        474
Source: 
>         if (adminReceives > 0) {
>             (success, ) = admin.call.value(adminReceives)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "admin failed to receive");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FoliaAuction
Line:        478
Source: 
> 
>         (success, ) = proceedsRecipient.call.value(proceedsAmount)("");
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "recipient failed to receive");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FoliaAuction
Line:        435
Source: 
>             // in case the bidder is a contract that doesn't allow receiving
>              (bool success, ) = lastBidder.call.value(lastValue)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (!success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FoliaAuction
Line:        437
Source: 
>             if (!success) {
>                 (success, ) = admin.call.value(lastValue)("");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "admin (in place of lastBidder) failed to receive");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FoliaAuction
Line:        435
Source: 
>             // in case the bidder is a contract that doesn't allow receiving
>              (bool success, ) = lastBidder.call.value(lastValue)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (!success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FoliaAuction
Line:        437
Source: 
>             if (!success) {
>                 (success, ) = admin.call.value(lastValue)("");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "admin (in place of lastBidder) failed to receive");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FoliaAuction
Line:        474
Source: 
>         if (adminReceives > 0) {
>             (success, ) = admin.call.value(adminReceives)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "admin failed to receive");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FoliaAuction
Line:        478
Source: 
> 
>         (success, ) = proceedsRecipient.call.value(proceedsAmount)("");
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "recipient failed to receive");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FoliaAuction
Line:        435
Source: 
>             // in case the bidder is a contract that doesn't allow receiving
>              (bool success, ) = lastBidder.call.value(lastValue)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (!success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FoliaAuction
Line:        437
Source: 
>             if (!success) {
>                 (success, ) = admin.call.value(lastValue)("");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "admin (in place of lastBidder) failed to receive");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FoliaAuction
Line:        474
Source: 
>         if (adminReceives > 0) {
>             (success, ) = admin.call.value(adminReceives)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "admin failed to receive");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FoliaAuction
Line:        478
Source: 
> 
>         (success, ) = proceedsRecipient.call.value(proceedsAmount)("");
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "recipient failed to receive");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FoliaAuction
Line:        308
Source: 
>         require(
>             IERC165(_nftAddress).supportsInterface(interfaceId),
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Doesn't support NFT interface"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FoliaAuction
Line:        317
Source: 
>         require(
>             IERC165(_nftAddress).supportsInterface(interfaceId),
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Doesn't support NFT interface"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FoliaAuction
Line:        360
Source: 
> 
>         IERC721(nftAddress).transferFrom(msg.sender, address(this), tokenId);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FoliaAuction
Line:        468
Source: 
> 
>         IERC721(nftAddress).transferFrom(address(this), winner, tokenId);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FoliaAuction
Line:        497
Source: 
>         delete auctions[tokenId];
>         IERC721(nftAddress).transferFrom(address(this), creator, tokenId);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit AuctionCanceled(tokenId, nftAddress, creator);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FoliaAuction
Line:        243
Source: 
> 
>     bool public globalPaused;
>        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FoliaAuction
Line:        249
Source: 
>     bytes4 constant interfaceId = 0x80ac58cd; // 721 interface id
>     address public nftAddress;
>        ^^^^^^^^^^^^^^^^^^^^^^^
>     address payable public admin;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FoliaAuction
Line:        250
Source: 
>     address public nftAddress;
>     address payable public admin;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FoliaAuction
Line:        435
Source: 
>             // in case the bidder is a contract that doesn't allow receiving
>              (bool success, ) = lastBidder.call.value(lastValue)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FoliaAuction
Line:        437
Source: 
>             if (!success) {
>                 (success, ) = admin.call.value(lastValue)("");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "admin (in place of lastBidder) failed to receive");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FoliaAuction
Line:        474
Source: 
>         if (adminReceives > 0) {
>             (success, ) = admin.call.value(adminReceives)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "admin failed to receive");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FoliaAuction
Line:        478
Source: 
> 
>         (success, ) = proceedsRecipient.call.value(proceedsAmount)("");
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "recipient failed to receive");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        223
Source: 
>     modifier nonReentrant() {
>         _guardCounter += 1;
>            ^^^^^^^^^^^^^^^^
>         uint256 localCounter = _guardCounter;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FoliaAuction
Line:        409
Source: 
> 
>         auctions[tokenId].amount = msg.value;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         auctions[tokenId].bidder = msg.sender;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FoliaAuction
Line:        410
Source: 
>         auctions[tokenId].amount = msg.value;
>         auctions[tokenId].bidder = msg.sender;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FoliaAuction
Line:        420
Source: 
>             // take the difference between now and starting point, add timeBuffer and set as duration
>             auctions[tokenId].duration = block.timestamp.sub(auctions[tokenId].firstBidTime).add(timeBuffer);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             extended = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FoliaAuction
Line:        405
Source: 
>             if (auction.firstBidTime == 0) {
>                 auctions[tokenId].firstBidTime = block.timestamp;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        223
Source: 
>     modifier nonReentrant() {
>         _guardCounter += 1;
>            ^^^^^^^^^^^^^^^^
>         uint256 localCounter = _guardCounter;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FoliaAuction
Line:        466
Source: 
>         emit AuctionEnded(tokenId, nftAddress, creator, winner, amount);
>         delete auctions[tokenId];
>            ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        223
Source: 
>     modifier nonReentrant() {
>         _guardCounter += 1;
>            ^^^^^^^^^^^^^^^^
>         uint256 localCounter = _guardCounter;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        207
Source: 
>     /// @dev counter to allow mutex lock with only one SSTORE operation
>     uint256 private _guardCounter;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    FoliaAuction
Line:        420
Source: 
>             // take the difference between now and starting point, add timeBuffer and set as duration
>             auctions[tokenId].duration = block.timestamp.sub(auctions[tokenId].firstBidTime).add(timeBuffer);
>                                             ^^^^^^^^^^^^^^^
>             extended = true;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FoliaAuction
Line:        378
Source: 
>             require(
>                 auction.firstBidTime <= block.timestamp,
>                                            ^^^^^^^^^^^^^
>             "Auction hasn't started");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FoliaAuction
Line:        384
Source: 
>             auction.firstBidTime == 0 ||
>                 block.timestamp <
>                    ^^^^^^^^^^^^^^
>                 auction.firstBidTime + auction.duration,

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FoliaAuction
Line:        417
Source: 
>         if (
>             ( auctions[tokenId].firstBidTime.add( auction.duration ) ).sub( block.timestamp ) < timeBuffer
>                                                                                ^^^^^^^^^^^^^^^
>         ) {

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    FoliaAuction
Line:        454
Source: 
>         require(
>             block.timestamp >=
>                ^^^^^^^^^^^^^^^
>                 auction.firstBidTime + auction.duration,

[0m
