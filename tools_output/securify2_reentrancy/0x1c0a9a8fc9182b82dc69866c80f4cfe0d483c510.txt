Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        280
Source: 
>   function isOwner() public view returns(bool) {
>     return msg.sender == _owner;
>            ^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MonetaryPolicy
Line:        508
Source: 
>     {
>         require(rebased == IRebased(0)); 
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         rebased = rebased_;    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        264
Source: 
>    */
>   function owner() public view returns(address) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        289
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(_owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        298
Source: 
>    */
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        264
Source: 
>    */
>   function owner() public view returns(address) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        289
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(_owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        298
Source: 
>    */
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        298
Source: 
>    */
>   function transferOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MonetaryPolicy
Line:        504
Source: 
>      */
>     function setRebased(IRebased rebased_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MonetaryPolicy
Line:        516
Source: 
>      */
>     function setCpiOracle(IOracle cpiOracle_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MonetaryPolicy
Line:        527
Source: 
>      */
>     function setMarketOracle(IOracle marketOracle_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMathInt
Line:        112
Source: 
>     {
>         int256 c = a * b;
>                    ^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        53
Source: 
> 
>     uint256 c = a * b;
>                 ^^^^^
>     require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MonetaryPolicy
Line:        412
Source: 
> 
>         uint256 supplyAfterRebase = rebased.rebase(epoch, supplyDelta);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assert(supplyAfterRebase <= MAX_SUPPLY);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        34
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MonetaryPolicy
Line:        412
Source: 
> 
>         uint256 supplyAfterRebase = rebased.rebase(epoch, supplyDelta);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assert(supplyAfterRebase <= MAX_SUPPLY);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MonetaryPolicy
Line:        430
Source: 
>         bool cpiValid;
>         (cpi, cpiValid) = cpiOracle.getData();
>                           ^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MonetaryPolicy
Line:        439
Source: 
>         
>         (exchangeRate, rateValid) = marketOracle.getData();
>                                     ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MonetaryPolicy
Line:        452
Source: 
> 
>         if (supplyDelta > 0 && rebased.totalSupply().add(uint256(supplyDelta)) > MAX_SUPPLY) {
>                                ^^^^^^^^^^^^^^^^^^^^^
>             supplyDelta = (MAX_SUPPLY.sub(rebased.totalSupply())).toInt256Safe();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MonetaryPolicy
Line:        453
Source: 
>         if (supplyDelta > 0 && rebased.totalSupply().add(uint256(supplyDelta)) > MAX_SUPPLY) {
>             supplyDelta = (MAX_SUPPLY.sub(rebased.totalSupply())).toInt256Safe();
>                                           ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MonetaryPolicy
Line:        475
Source: 
>         int256 targetRateSigned = targetRate.toInt256Safe();
>         return rebased.totalSupply().toInt256Safe()
>                ^^^^^^^^^^^^^^^^^^^^^
>             .mul(rate.toInt256Safe().sub(targetRateSigned))

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MonetaryPolicy
Line:        335
Source: 
> 
>     IRebased public rebased;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MonetaryPolicy
Line:        338
Source: 
>     // Provides the current CPI as a 20 decimal fixed point number.
>     IOracle public cpiOracle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MonetaryPolicy
Line:        341
Source: 
>     // Market oracle provides the token/USD exchange rate as an 18 decimal fixed point number.
>     IOracle public marketOracle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        101
Source: 
> library SafeMathInt {
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        102
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    UInt256Lib
Line:        179
Source: 
> 
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        101
Source: 
> library SafeMathInt {
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt
Line:        102
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    UInt256Lib
Line:        179
Source: 
> 
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt
Line:        101
Source: 
> library SafeMathInt {
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt
Line:        102
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UInt256Lib
Line:        179
Source: 
> 
>     uint256 private constant MAX_INT256 = ~(uint256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt
Line:        102
Source: 
>     int256 private constant MIN_INT256 = int256(1) << 255;
>     int256 private constant MAX_INT256 = ~(int256(1) << 255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
