[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        296
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { cs := extcodesize(self) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return cs == 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ContextUpgradeable
Line:        317
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        376
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        343
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        362
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnableUpgradeable
Line:        371
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YieldFarmLP2
Line:        421
Source: 
>     // constructor
>     function initialize(address wahTokenAddress, address uniLP, address stakeContract, address vault) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _wah = IERC20(wahTokenAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YieldFarmLP2
Line:        427
Source: 
>         _vault = vault;
>         epochDuration = _staking.epochDuration();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         epochStart = _staking.epoch1Start();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YieldFarmLP2
Line:        428
Source: 
>         epochDuration = _staking.epochDuration();
>         epochStart = _staking.epoch1Start();
>                      ^^^^^^^^^^^^^^^^^^^^^^
>         _totalAmountPerEpoch = TOTAL_DISTRIBUTED_AMOUNT.mul(10**18).div(NR_OF_EPOCHS);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YieldFarmLP2
Line:        540
Source: 
>         // retrieve unilp token balance
>         return _staking.getEpochPoolSize(_uniLP, _stakingEpochId(epochId));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YieldFarmLP2
Line:        451
Source: 
>         if (totalDistributedValue > 0) {
>             _wah.transferFrom(_vault, msg.sender, totalDistributedValue);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YieldFarmLP2
Line:        485
Source: 
>         if (userReward > 0) {
>             _wah.transferFrom(_vault, msg.sender, userReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    YieldFarmLP2
Line:        547
Source: 
>         // retrieve unilp token balance per user per epoch
>         return _staking.getEpochUserBalance(userAddress, _uniLP, _stakingEpochId(epochId));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YieldFarmLP2
Line:        493
Source: 
>     // calls to the staking smart contract to retrieve the epoch total pool size
>     function getPoolSize(uint128 epochId) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _getPoolSize(epochId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YieldFarmLP2
Line:        421
Source: 
>     // constructor
>     function initialize(address wahTokenAddress, address uniLP, address stakeContract, address vault) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _wah = IERC20(wahTokenAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YieldFarmLP2
Line:        502
Source: 
>     // calls to the staking smart contract to retrieve user balance for an epoch
>     function getEpochStake(address userAddress, uint128 epochId) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _getUserBalancePerEpoch(userAddress, epochId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    YieldFarmLP2
Line:        427
Source: 
>         _vault = vault;
>         epochDuration = _staking.epochDuration();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         epochStart = _staking.epoch1Start();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    YieldFarmLP2
Line:        428
Source: 
>         epochDuration = _staking.epochDuration();
>         epochStart = _staking.epoch1Start();
>                      ^^^^^^^^^^^^^^^^^^^^^^
>         _totalAmountPerEpoch = TOTAL_DISTRIBUTED_AMOUNT.mul(10**18).div(NR_OF_EPOCHS);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContextUpgradeable
Line:        303
Source: 
> abstract contract ContextUpgradeable is Initializable {
>     function __Context_init() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __Context_init_unchained();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContextUpgradeable
Line:        307
Source: 
> 
>     function __Context_init_unchained() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContextUpgradeable
Line:        317
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        329
Source: 
>      */
>     function __Ownable_init() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __Context_init_unchained();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        334
Source: 
> 
>     function __Ownable_init_unchained() internal initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address msgSender = _msgSender();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        376
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // SPDX-License-Identifier: Apache-2.0
> pragma solidity ^0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    OwnableUpgradeable
Line:        376
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        273
Source: 
> 
>         bool isTopLevelCall = !_initializing;
>         ^^^^^^^^^^^^^^^^^^^
>         if (isTopLevelCall) {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    YieldFarmLP2
Line:        396
Source: 
>     // constants
>     uint public constant TOTAL_DISTRIBUTED_AMOUNT = 2500000;
>                                                     ^^^^^^^
>     uint public constant NR_OF_EPOCHS = 10;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YieldFarmLP2
Line:        427
Source: 
>         _vault = vault;
>         epochDuration = _staking.epochDuration();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^
>         epochStart = _staking.epoch1Start();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YieldFarmLP2
Line:        428
Source: 
>         epochDuration = _staking.epochDuration();
>         epochStart = _staking.epoch1Start();
>                      ^^^^^^^^^^^^^^^^^^^^^^
>         _totalAmountPerEpoch = TOTAL_DISTRIBUTED_AMOUNT.mul(10**18).div(NR_OF_EPOCHS);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YieldFarmLP2
Line:        547
Source: 
>         // retrieve unilp token balance per user per epoch
>         return _staking.getEpochUserBalance(userAddress, _uniLP, _stakingEpochId(epochId));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YieldFarmLP2
Line:        540
Source: 
>         // retrieve unilp token balance
>         return _staking.getEpochPoolSize(_uniLP, _stakingEpochId(epochId));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YieldFarmLP2
Line:        451
Source: 
>         if (totalDistributedValue > 0) {
>             _wah.transferFrom(_vault, msg.sender, totalDistributedValue);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YieldFarmLP2
Line:        485
Source: 
>         if (userReward > 0) {
>             _wah.transferFrom(_vault, msg.sender, userReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        297
Source: 
>         assembly { cs := extcodesize(self) }
>         return cs == 0;
>                ^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OwnableUpgradeable
Line:        322
Source: 
> abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        260
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        265
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    YieldFarmLP2
Line:        402
Source: 
>     // addreses
>     address private _uniLP;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address private _vault;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    YieldFarmLP2
Line:        403
Source: 
>     address private _uniLP;
>     address private _vault;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     // contracts

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    YieldFarmLP2
Line:        405
Source: 
>     // contracts
>     IERC20 private _wah;
>     ^^^^^^^^^^^^^^^^^^^
>     IStaking private _staking;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    YieldFarmLP2
Line:        406
Source: 
>     IERC20 private _wah;
>     IStaking private _staking;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    YieldFarmLP2
Line:        410
Source: 
>     uint[] private epochs;
>     uint private _totalAmountPerEpoch;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint128 public lastInitializedEpoch;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    YieldFarmLP2
Line:        411
Source: 
>     uint private _totalAmountPerEpoch;
>     uint128 public lastInitializedEpoch;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint128) private lastEpochIdHarvested;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    YieldFarmLP2
Line:        413
Source: 
>     mapping(address => uint128) private lastEpochIdHarvested;
>     uint public epochDuration; // init from staking contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public epochStart; // init from staking contract

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        260
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        265
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        260
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        265
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ContextUpgradeable
Line:        317
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        260
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        265
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ContextUpgradeable
Line:        317
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        376
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    YieldFarmLP2
Line:        414
Source: 
>     uint public epochDuration; // init from staking contract
>     uint public epochStart; // init from staking contract
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YieldFarmLP2
Line:        514
Source: 
>         require(lastInitializedEpoch.add(1) == epochId, "Epoch can be init only in order");
>         lastInitializedEpoch = epochId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // call the staking smart contract to init the epoch

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YieldFarmLP2
Line:        516
Source: 
>         // call the staking smart contract to init the epoch
>         epochs[epochId] = _getPoolSize(epochId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        275
Source: 
>         if (isTopLevelCall) {
>             _initializing = true;
>             ^^^^^^^^^^^^^^^^^^^^
>             _initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        276
Source: 
>             _initializing = true;
>             _initialized = true;
>             ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YieldFarmLP2
Line:        422
Source: 
>     function initialize(address wahTokenAddress, address uniLP, address stakeContract, address vault) public initializer {
>         _wah = IERC20(wahTokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _uniLP = uniLP;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YieldFarmLP2
Line:        423
Source: 
>         _wah = IERC20(wahTokenAddress);
>         _uniLP = uniLP;
>         ^^^^^^^^^^^^^^
>         epochs = new uint[](NR_OF_EPOCHS + 1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YieldFarmLP2
Line:        424
Source: 
>         _uniLP = uniLP;
>         epochs = new uint[](NR_OF_EPOCHS + 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _staking = IStaking(stakeContract);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YieldFarmLP2
Line:        425
Source: 
>         epochs = new uint[](NR_OF_EPOCHS + 1);
>         _staking = IStaking(stakeContract);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _vault = vault;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YieldFarmLP2
Line:        426
Source: 
>         _staking = IStaking(stakeContract);
>         _vault = vault;
>         ^^^^^^^^^^^^^^
>         epochDuration = _staking.epochDuration();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YieldFarmLP2
Line:        427
Source: 
>         _vault = vault;
>         epochDuration = _staking.epochDuration();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         epochStart = _staking.epoch1Start();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YieldFarmLP2
Line:        428
Source: 
>         epochDuration = _staking.epochDuration();
>         epochStart = _staking.epoch1Start();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalAmountPerEpoch = TOTAL_DISTRIBUTED_AMOUNT.mul(10**18).div(NR_OF_EPOCHS);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YieldFarmLP2
Line:        429
Source: 
>         epochStart = _staking.epoch1Start();
>         _totalAmountPerEpoch = TOTAL_DISTRIBUTED_AMOUNT.mul(10**18).div(NR_OF_EPOCHS);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        282
Source: 
>         if (isTopLevelCall) {
>             _initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Initializable
Line:        271
Source: 
>     modifier initializer() {
>         require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");
>                                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OwnableUpgradeable
Line:        335
Source: 
>     function __Ownable_init_unchained() internal initializer {
>         address msgSender = _msgSender();
>                             ^^^^^^^^^^^^
>         _owner = msgSender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YieldFarmLP2
Line:        428
Source: 
>         epochDuration = _staking.epochDuration();
>         epochStart = _staking.epoch1Start();
>                      ^^^^^^^^^^^^^^^^^^^^^^
>         _totalAmountPerEpoch = TOTAL_DISTRIBUTED_AMOUNT.mul(10**18).div(NR_OF_EPOCHS);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YieldFarmLP2
Line:        451
Source: 
>         if (totalDistributedValue > 0) {
>             _wah.transferFrom(_vault, msg.sender, totalDistributedValue);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YieldFarmLP2
Line:        485
Source: 
>         if (userReward > 0) {
>             _wah.transferFrom(_vault, msg.sender, userReward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        260
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        265
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        260
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        265
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ContextUpgradeable
Line:        317
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        260
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        265
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ContextUpgradeable
Line:        317
Source: 
>     }
>     uint256[50] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OwnableUpgradeable
Line:        376
Source: 
>     }
>     uint256[49] private __gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    YieldFarmLP2
Line:        552
Source: 
>     function _getEpochId() internal view returns (uint128 epochId) {
>         if (block.timestamp < epochStart) {
>             ^^^^^^^^^^^^^^^
>             return 0;

[0m
