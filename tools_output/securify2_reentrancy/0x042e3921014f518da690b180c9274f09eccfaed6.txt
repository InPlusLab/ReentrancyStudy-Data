Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        154
Source: 
> 		bytes32 _tag;
> 		assembly { _tag := extcodehash(_plan) }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		tag = _tag;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        126
Source: 
> contract McdSfChangeSpell is DSMath {
> 	PauseLike public pause = PauseLike(0xbE286431454714F511008713973d3B053A2d38f3);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public plan = 0x4F5f0933158569c026d617337614d00Ee6589B6E;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        127
Source: 
> 	PauseLike public pause = PauseLike(0xbE286431454714F511008713973d3B053A2d38f3);
> 	address public plan = 0x4F5f0933158569c026d617337614d00Ee6589B6E;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public jug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        128
Source: 
> 	address public plan = 0x4F5f0933158569c026d617337614d00Ee6589B6E;
> 	address public jug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        131
Source: 
> 	// bytes32 what, the `what`
> 	bytes32 public what = "base";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// uint256 data, the new Stability Fee

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        133
Source: 
> 	// uint256 data, the new Stability Fee
> 	uint256 public data = mul(1337, RAY);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    McdSfChangeSpell
Line:        161
Source: 
> 	 */
> 	function schedule() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(eta == 0, "spell-already-scheduled");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    McdSfChangeSpell
Line:        170
Source: 
> 	 */
> 	function cast() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!done, "spell-already-cast");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    McdSfChangeSpell
Line:        163
Source: 
> 		require(eta == 0, "spell-already-scheduled");
> 		eta = add(now, PauseLike(pause).delay());
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		pause.plot(plan, tag, sig, eta);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    McdSfChangeSpell
Line:        164
Source: 
> 		eta = add(now, PauseLike(pause).delay());
> 		pause.plot(plan, tag, sig, eta);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    McdSfChangeSpell
Line:        173
Source: 
> 		done = true;
> 		pause.exec(plan, tag, sig, eta);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        152
Source: 
> 		);
> 		address _plan = plan;
>   ^^^^^^^^^^^^^
> 		bytes32 _tag;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        153
Source: 
> 		address _plan = plan;
> 		bytes32 _tag;
>   ^^^^^^^^^^^^
> 		assembly { _tag := extcodehash(_plan) }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> // hevm: flattened sources of src/McdSfChangeSpell.sol
> pragma solidity >0.4.13 >=0.5.12 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSMath
Line:        52
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSMath
Line:        53
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    McdSfChangeSpell
Line:        163
Source: 
> 		require(eta == 0, "spell-already-scheduled");
> 		eta = add(now, PauseLike(pause).delay());
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		pause.plot(plan, tag, sig, eta);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        164
Source: 
> 		eta = add(now, PauseLike(pause).delay());
> 		pause.plot(plan, tag, sig, eta);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        173
Source: 
> 		done = true;
> 		pause.exec(plan, tag, sig, eta);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        30
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, "ds-math-add-overflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        33
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, "ds-math-sub-underflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DSMath
Line:        36
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");
>                            ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        155
Source: 
> 		assembly { _tag := extcodehash(_plan) }
> 		tag = _tag;
>         ^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    McdSfChangeSpell
Line:        136
Source: 
> 	bytes32 public tag;
> 	uint256 public eta;
>  ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    McdSfChangeSpell
Line:        139
Source: 
> 	bytes public sig;
> 	bool public done;
>  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        163
Source: 
> 		require(eta == 0, "spell-already-scheduled");
> 		eta = add(now, PauseLike(pause).delay());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		pause.plot(plan, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    McdSfChangeSpell
Line:        172
Source: 
> 		require(!done, "spell-already-cast");
> 		done = true;
>   ^^^^^^^^^^^
> 		pause.exec(plan, tag, sig, eta);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        52
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        53
Source: 
>     uint constant WAD = 10 ** 18;
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DSMath
Line:        52
Source: 
> 
>     uint constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant RAY = 10 ** 27;

[0m
