Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        232
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != accountHash && codehash != 0x0);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MinterRole
Line:        1001
Source: 
> 
>     Roles.Role private _minters;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        1167
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Metadata
Line:        34
Source: 
>      */
>     function uri(uint256 _id) public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        716
Source: 
>      */
>     function safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        745
Source: 
>      */
>     function safeBatchTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        918
Source: 
>      */
>     function balanceOf(address _owner, uint256 _id)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        932
Source: 
>      */
>     function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1019
Source: 
> 
>     function addMinter(address account) public onlyMinter {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addMinter(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1023
Source: 
> 
>     function renounceMinter() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeMinter(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1066
Source: 
>      */
>     function owner() public view returns (address) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1092
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1101
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1134
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1138
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1142
Source: 
> 
>     function stake(uint256 amount) public {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.add(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1148
Source: 
> 
>     function withdraw(uint256 amount) public {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        1185
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        1189
Source: 
> 
>     function renounceWhitelistAdmin() public {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        716
Source: 
>      */
>     function safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        745
Source: 
>      */
>     function safeBatchTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        918
Source: 
>      */
>     function balanceOf(address _owner, uint256 _id)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        932
Source: 
>      */
>     function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Metadata
Line:        34
Source: 
>      */
>     function uri(uint256 _id) public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        716
Source: 
>      */
>     function safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        745
Source: 
>      */
>     function safeBatchTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        918
Source: 
>      */
>     function balanceOf(address _owner, uint256 _id)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155
Line:        932
Source: 
>      */
>     function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1019
Source: 
> 
>     function addMinter(address account) public onlyMinter {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addMinter(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        1023
Source: 
> 
>     function renounceMinter() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeMinter(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1066
Source: 
>      */
>     function owner() public view returns (address) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1092
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1101
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        1185
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        1189
Source: 
> 
>     function renounceWhitelistAdmin() public {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Tradable
Line:        1364
Source: 
> 
>     function removeWhitelistAdmin(address account) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Tradable
Line:        1368
Source: 
> 
>     function removeMinter(address account) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeMinter(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Tradable
Line:        1372
Source: 
> 
>     function uri(uint256 _id) public view returns (string memory) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(_id), "ERC721Tradable#uri: NONEXISTENT_TOKEN");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Tradable
Line:        1382
Source: 
>      */
>     function totalSupply(uint256 _id) public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenSupply[_id];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Tradable
Line:        1391
Source: 
>      */
>     function maxSupply(uint256 _id) public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenMaxSupply[_id];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Tradable
Line:        1399
Source: 
>      */
>     function setBaseMetadataURI(string memory _newBaseMetadataURI)
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Tradable
Line:        1445
Source: 
>      */
>     function mint(
>          ^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC1155Tradable
Line:        1463
Source: 
>      */
>     function isApprovedForAll(address _owner, address _operator)
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1066
Source: 
>      */
>     function owner() public view returns (address) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1092
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1101
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1134
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1532
Source: 
> 
>     function setNFT(ERC1155Tradable _nftAddress) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nft = _nftAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1537
Source: 
> 
>     function addCard(uint256 cardId, uint256 amount) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cards[cardId] = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1552
Source: 
>     // stake visibility is public as overriding StakeTokenWrapper's stake() function
>     function stake(uint256 amount) public updateReward(msg.sender) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "Invalid amount");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1559
Source: 
> 
>     function withdraw(uint256 amount) public updateReward(msg.sender) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "Cannot withdraw 0");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1570
Source: 
> 
>     function redeem(uint256 card) public updateReward(msg.sender) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(cards[card] != 0, "Card not found");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        804
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155Received(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        865
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155BatchReceived(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        804
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155Received(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        865
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155BatchReceived(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        804
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155Received(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        865
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155BatchReceived(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1470
Source: 
>         ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
>         if (address(proxyRegistry.proxies(_owner)) == _operator) {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        268
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC1155Metadata
Line:        34
Source: 
>      */
>     function uri(uint256 _id) public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1015
Source: 
> 
>     function isMinter(address account) public view returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _minters.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1019
Source: 
> 
>     function addMinter(address account) public onlyMinter {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addMinter(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        1101
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeTokenWrapper
Line:        1142
Source: 
> 
>     function stake(uint256 amount) public {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.add(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        1181
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        1185
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC1155Metadata
Line:        34
Source: 
>      */
>     function uri(uint256 _id) public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1015
Source: 
> 
>     function isMinter(address account) public view returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _minters.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        1019
Source: 
> 
>     function addMinter(address account) public onlyMinter {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addMinter(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        1101
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        1181
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        1185
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1364
Source: 
> 
>     function removeWhitelistAdmin(address account) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1368
Source: 
> 
>     function removeMinter(address account) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeMinter(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1372
Source: 
> 
>     function uri(uint256 _id) public view returns (string memory) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(_id), "ERC721Tradable#uri: NONEXISTENT_TOKEN");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1399
Source: 
>      */
>     function setBaseMetadataURI(string memory _newBaseMetadataURI)
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1463
Source: 
>      */
>     function isApprovedForAll(address _owner, address _operator)
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        1101
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeTokenWrapper
Line:        1142
Source: 
> 
>     function stake(uint256 amount) public {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.add(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakeDaoNFTPalace
Line:        1542
Source: 
> 
>     function earned(address account) public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 timeDifference = block.timestamp.sub(lastUpdateTime[account]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        716
Source: 
>      */
>     function safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        745
Source: 
>      */
>     function safeBatchTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        888
Source: 
>      */
>     function setApprovalForAll(address _operator, bool _approved) external {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Update operator status

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        900
Source: 
>      */
>     function isApprovedForAll(address _owner, address _operator)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        918
Source: 
>      */
>     function balanceOf(address _owner, uint256 _id)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        932
Source: 
>      */
>     function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        978
Source: 
>      */
>     function supportsInterface(bytes4 _interfaceID)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1138
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1148
Source: 
> 
>     function withdraw(uint256 amount) public {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        716
Source: 
>      */
>     function safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        745
Source: 
>      */
>     function safeBatchTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        888
Source: 
>      */
>     function setApprovalForAll(address _operator, bool _approved) external {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Update operator status

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        900
Source: 
>      */
>     function isApprovedForAll(address _owner, address _operator)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        918
Source: 
>      */
>     function balanceOf(address _owner, uint256 _id)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        932
Source: 
>      */
>     function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        978
Source: 
>      */
>     function supportsInterface(bytes4 _interfaceID)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        716
Source: 
>      */
>     function safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        745
Source: 
>      */
>     function safeBatchTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        888
Source: 
>      */
>     function setApprovalForAll(address _operator, bool _approved) external {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Update operator status

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        900
Source: 
>      */
>     function isApprovedForAll(address _owner, address _operator)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        918
Source: 
>      */
>     function balanceOf(address _owner, uint256 _id)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        932
Source: 
>      */
>     function balanceOfBatch(address[] memory _owners, uint256[] memory _ids)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        978
Source: 
>      */
>     function supportsInterface(bytes4 _interfaceID)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155Tradable
Line:        1382
Source: 
>      */
>     function totalSupply(uint256 _id) public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenSupply[_id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155Tradable
Line:        1391
Source: 
>      */
>     function maxSupply(uint256 _id) public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenMaxSupply[_id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155Tradable
Line:        1414
Source: 
>      */
>     function create(
>          ^^^^^^^^^^^
>         uint256 _maxSupply,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155Tradable
Line:        1445
Source: 
>      */
>     function mint(
>          ^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1138
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1148
Source: 
> 
>     function withdraw(uint256 amount) public {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1532
Source: 
> 
>     function setNFT(ERC1155Tradable _nftAddress) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nft = _nftAddress;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1537
Source: 
> 
>     function addCard(uint256 cardId, uint256 amount) public onlyOwner {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cards[cardId] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1559
Source: 
> 
>     function withdraw(uint256 amount) public updateReward(msg.sender) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "Cannot withdraw 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        458
Source: 
> 
>         uint256 c = a * b;
>                         ^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeDaoNFTPalace
Line:        1577
Source: 
>         require(
>             nft.totalSupply(card) < nft.maxSupply(card),
>                  ^^^^^^^^^^^^^^^^^^^^^
>             "Max cards minted"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeDaoNFTPalace
Line:        1577
Source: 
>         require(
>             nft.totalSupply(card) < nft.maxSupply(card),
>                                          ^^^^^^^^^^^^^^^
>             "Max cards minted"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakeDaoNFTPalace
Line:        1582
Source: 
>         points[msg.sender] = points[msg.sender].sub(cards[card]);
>         nft.mint(msg.sender, card, 1, "");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Redeemed(msg.sender, card);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC1155Tradable
Line:        1463
Source: 
>      */
>     function isApprovedForAll(address _owner, address _operator)
>                                    ^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        268
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>           ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        591
Source: 
>     ) internal pure returns (string memory) {
>         bytes memory _ba = bytes(_a);
>             ^^^^^^^^^^^^^^^^
>         bytes memory _bb = bytes(_b);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        592
Source: 
>         bytes memory _ba = bytes(_a);
>         bytes memory _bb = bytes(_b);
>             ^^^^^^^^^^^^^^^^
>         bytes memory _bc = bytes(_c);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        593
Source: 
>         bytes memory _bb = bytes(_b);
>         bytes memory _bc = bytes(_c);
>             ^^^^^^^^^^^^^^^^
>         bytes memory _bd = bytes(_d);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        594
Source: 
>         bytes memory _bc = bytes(_c);
>         bytes memory _bd = bytes(_d);
>             ^^^^^^^^^^^^^^^^
>         bytes memory _be = bytes(_e);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        595
Source: 
>         bytes memory _bd = bytes(_d);
>         bytes memory _be = bytes(_e);
>             ^^^^^^^^^^^^^^^^
>         string memory abcde =

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC1155Tradable
Line:        1424
Source: 
>         );
>         uint256 _id = _getNextTokenID();
>              ^^^^^^^^^^^
>         _incrementTokenTypeId();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC1155Tradable
Line:        1344
Source: 
> 
>     address proxyRegistryAddress;
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _currentTokenID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1517
Source: 
> 
>     modifier updateReward(address account) {
>                                ^^^^^^^^^^^^^
>         if (account != address(0)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        804
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155Received(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        865
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155BatchReceived(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        804
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155Received(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        865
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155BatchReceived(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        804
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155Received(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        865
Source: 
>             bytes4 retval =
>                 IERC1155TokenReceiver(_to).onERC1155BatchReceived(
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1470
Source: 
>         ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);
>         if (address(proxyRegistry.proxies(_owner)) == _operator) {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeDaoNFTPalace
Line:        1577
Source: 
>         require(
>             nft.totalSupply(card) < nft.maxSupply(card),
>                  ^^^^^^^^^^^^^^^^^^^^^
>             "Max cards minted"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakeDaoNFTPalace
Line:        1577
Source: 
>         require(
>             nft.totalSupply(card) < nft.maxSupply(card),
>                                          ^^^^^^^^^^^^^^^
>             "Max cards minted"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1145
Source: 
>         _balances[msg.sender] = _balances[msg.sender].add(amount);
>         xsdt.transferFrom(msg.sender, address(this), amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1151
Source: 
>         _balances[msg.sender] = _balances[msg.sender].sub(amount);
>         xsdt.transfer(msg.sender, amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1145
Source: 
>         _balances[msg.sender] = _balances[msg.sender].add(amount);
>         xsdt.transferFrom(msg.sender, address(this), amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1151
Source: 
>         _balances[msg.sender] = _balances[msg.sender].sub(amount);
>         xsdt.transfer(msg.sender, amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakeDaoNFTPalace
Line:        1582
Source: 
>         points[msg.sender] = points[msg.sender].sub(cards[card]);
>         nft.mint(msg.sender, card, 1, "");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Redeemed(msg.sender, card);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ERC1155Metadata
Line:        107
Source: 
>         while (j != 0) {
>             len++;
>             ^^^
>             j /= 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        233
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != accountHash && codehash != 0x0);
>                  ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Strings
Line:        646
Source: 
>         while (j != 0) {
>             len++;
>                 ^^
>             j /= 10;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakeTokenWrapper
Line:        1131
Source: 
> 
>     uint256 private _totalSupply;
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) private _balances;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC1155Metadata
Line:        20
Source: 
>     // URI's default URI prefix
>     string internal baseMetadataURI;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event URI(string _uri, uint256 indexed _id);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1344
Source: 
> 
>     address proxyRegistryAddress;
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _currentTokenID = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1350
Source: 
>     // Contract name
>     string public name;
>          ^^^^^^^^^^^^^^
>     // Contract symbol

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1352
Source: 
>     // Contract symbol
>     string public symbol;
>          ^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakeTokenWrapper
Line:        1131
Source: 
> 
>     uint256 private _totalSupply;
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) private _balances;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC1155Metadata
Line:        20
Source: 
>     // URI's default URI prefix
>     string internal baseMetadataURI;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event URI(string _uri, uint256 indexed _id);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinterRole
Line:        1001
Source: 
> 
>     Roles.Role private _minters;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        1167
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinterRole
Line:        1001
Source: 
> 
>     Roles.Role private _minters;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        1167
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        555
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        563
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        555
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        563
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC1155Metadata
Line:        81
Source: 
>     function _setBaseMetadataURI(string memory _newBaseMetadataURI) internal {
>         baseMetadataURI = _newBaseMetadataURI;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        555
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        563
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC1155MintBurn
Line:        1229
Source: 
>         // Add _amount
>         balances[_to][_id] = balances[_to][_id].add(_amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1426
Source: 
>         _incrementTokenTypeId();
>         creators[_id] = msg.sender;
>              ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1433
Source: 
>         if (_initialSupply != 0) _mint(msg.sender, _id, _initialSupply, _data);
>         tokenSupply[_id] = _initialSupply;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenMaxSupply[_id] = _maxSupply;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1434
Source: 
>         tokenSupply[_id] = _initialSupply;
>         tokenMaxSupply[_id] = _maxSupply;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1498
Source: 
>     function _incrementTokenTypeId() private {
>         _currentTokenID++;
>              ^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC1155Tradable
Line:        1457
Source: 
>         _mint(_to, _id, _quantity, _data);
>         tokenSupply[_id] = tokenSupply[_id].add(_quantity);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakeTokenWrapper
Line:        1143
Source: 
>     function stake(uint256 amount) public {
>         _totalSupply = _totalSupply.add(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender] = _balances[msg.sender].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155
Line:        890
Source: 
>         // Update operator status
>         operators[msg.sender][_operator] = _approved;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ApprovalForAll(msg.sender, _operator, _approved);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1143
Source: 
>     function stake(uint256 amount) public {
>         _totalSupply = _totalSupply.add(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender] = _balances[msg.sender].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1149
Source: 
>     function withdraw(uint256 amount) public {
>         _totalSupply = _totalSupply.sub(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender] = _balances[msg.sender].sub(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155
Line:        890
Source: 
>         // Update operator status
>         operators[msg.sender][_operator] = _approved;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ApprovalForAll(msg.sender, _operator, _approved);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1149
Source: 
>     function withdraw(uint256 amount) public {
>         _totalSupply = _totalSupply.sub(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[msg.sender] = _balances[msg.sender].sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        268
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1145
Source: 
>         _balances[msg.sender] = _balances[msg.sender].add(amount);
>         xsdt.transferFrom(msg.sender, address(this), amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1151
Source: 
>         _balances[msg.sender] = _balances[msg.sender].sub(amount);
>         xsdt.transfer(msg.sender, amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        268
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1145
Source: 
>         _balances[msg.sender] = _balances[msg.sender].add(amount);
>         xsdt.transferFrom(msg.sender, address(this), amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StakeTokenWrapper
Line:        1151
Source: 
>         _balances[msg.sender] = _balances[msg.sender].sub(amount);
>         xsdt.transfer(msg.sender, amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        268
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ProxyRegistry
Line:        1118
Source: 
> contract ProxyRegistry {
>     mapping(address => OwnableDelegateProxy) public proxies;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC1155Tradable
Line:        1350
Source: 
>     // Contract name
>     string public name;
>          ^^^^^^^^^^^^^^
>     // Contract symbol

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC1155Tradable
Line:        1352
Source: 
>     // Contract symbol
>     string public symbol;
>          ^^^^^^^^^^^^^^^^
> 

[0m
