Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.1. Changing pragma version to 0.5.1....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Fast2Win
Line:        365
Source: 
> 
>             assembly {codeLength := extcodesize(addr)}
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(codeLength == 0, "sorry humans only");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UtilFast2Win
Line:        9
Source: 
>         using SafeMath for uint;
>         uint ETH = 1 ether;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        251
Source: 
> 
>         Roles.Role private _whitelistAdmins;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Fast2Win
Line:        296
Source: 
> 
>         uint ETH = 1 ether;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        885
Source: 
>             // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
>             if (a == 0) {
>                 ^^^^^^
>                 return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        890
Source: 
>             uint256 c = a * b;
>             require(c / a == b, "mul overflow");
>                     ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        157
Source: 
>          */
>         function owner() public view returns (address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        183
Source: 
>          */
>         function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        192
Source: 
>          */
>         function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        157
Source: 
>          */
>         function owner() public view returns (address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        183
Source: 
>          */
>         function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        192
Source: 
>          */
>         function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        266
Source: 
> 
>         function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        270
Source: 
> 
>         function removeWhitelistAdmin(address account) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _whitelistAdmins.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        275
Source: 
> 
>         function renounceWhitelistAdmin() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        157
Source: 
>          */
>         function owner() public view returns (address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        183
Source: 
>          */
>         function renounceOwnership() public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        192
Source: 
>          */
>         function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        266
Source: 
> 
>         function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        270
Source: 
> 
>         function removeWhitelistAdmin(address account) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _whitelistAdmins.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        275
Source: 
> 
>         function renounceWhitelistAdmin() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        412
Source: 
> 
>         function viewNow() public view onlyWhitelistAdmin returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return now;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        416
Source: 
> 
>         function investIn(uint refId)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        478
Source: 
> 
>         function reInvestIn() public {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(gameStart(), "game not start");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        547
Source: 
> 
>         function withdrawProfit()
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>             public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        628
Source: 
> 
>         function viewScLevel(address userAddr) public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             User memory user = userRoundMapping[rid][userAddr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        634
Source: 
> 
>         function viewStaticProfit(address userAddr) public view returns(uint)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        672
Source: 
> 
>         function registerSelfInfo(uint refId) public isHuman(){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             registerUser(msg.sender, refId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        676
Source: 
> 
>         function registerUserInfo(address usr, uint refId) public onlyWhitelistAdmin {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             registerUser(usr, refId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        712
Source: 
> 
>         function redeem() // withdraw
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        763
Source: 
> 
>         function getGameInfo() public isHuman() view returns(uint, uint, uint, uint, uint, uint, uint, uint, uint, uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        778
Source: 
> 
>         function getUserInfo(address user, uint roundId, uint i) public isHuman() view returns(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint[17] memory ct, uint refId

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        820
Source: 
>         //follower
>         function getSpecialUser(uint _rid, uint i) public view returns(address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return rInfo[_rid].specialUsers[i];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        824
Source: 
> 
>         function getLatestUnlockAmount(address userAddr) public view returns(uint)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        855
Source: 
> 
>         function verifyRefId(address user, uint refId) public view returns (bool){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             UserGlobal storage userGlobal = userMapping[user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fast2Win
Line:        866
Source: 
> 
>         function dailyCheckIn() public isHuman() returns (uint){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             checkInCount++;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        192
Source: 
>          */
>         function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        262
Source: 
> 
>         function isWhitelistAdmin(address account) public view returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        266
Source: 
> 
>         function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        270
Source: 
> 
>         function removeWhitelistAdmin(address account) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _whitelistAdmins.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        192
Source: 
>          */
>         function transferOwnership(address newOwner) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        262
Source: 
> 
>         function isWhitelistAdmin(address account) public view returns (bool) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        266
Source: 
> 
>         function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        270
Source: 
> 
>         function removeWhitelistAdmin(address account) public onlyOwner {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _whitelistAdmins.remove(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fast2Win
Line:        583
Source: 
> 
>         function calStaticProfit(address userAddr) external onlyWhitelistAdmin returns(uint)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fast2Win
Line:        628
Source: 
> 
>         function viewScLevel(address userAddr) public view returns(uint) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             User memory user = userRoundMapping[rid][userAddr];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fast2Win
Line:        672
Source: 
> 
>         function registerSelfInfo(uint refId) public isHuman(){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             registerUser(msg.sender, refId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fast2Win
Line:        676
Source: 
> 
>         function registerUserInfo(address usr, uint refId) public onlyWhitelistAdmin {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             registerUser(usr, refId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fast2Win
Line:        753
Source: 
> 
>         function getUserAddressByCode(uint code) public view returns(address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return indexMapping[code];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fast2Win
Line:        778
Source: 
> 
>         function getUserInfo(address user, uint roundId, uint i) public isHuman() view returns(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint[17] memory ct, uint refId

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fast2Win
Line:        820
Source: 
>         //follower
>         function getSpecialUser(uint _rid, uint i) public view returns(address) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return rInfo[_rid].specialUsers[i];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Fast2Win
Line:        855
Source: 
> 
>         function verifyRefId(address user, uint refId) public view returns (bool){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             UserGlobal storage userGlobal = userMapping[user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        889
Source: 
> 
>             uint256 c = a * b;
>                         ^^^^^
>             require(c / a == b, "mul overflow");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Fast2Win
Line:        560
Source: 
>                 sendMoneyToUser(msg.sender, resultMoney.mul(98).div(100));
>                 savingAddr.transfer(resultMoney.mul(5).div(100));  //savior
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 user.allStaticAmount = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Fast2Win
Line:        373
Source: 
>         event LogWithdrawProfit(address indexed who, uint indexed uid, uint amount, uint time);
>         event LogRedeem(address indexed who, uint indexed uid, uint amount, uint now);
>                                                                             ^^^^^^^^
>         event RegisterUser(address indexed who, uint indexed uid, uint refId, uint now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Fast2Win
Line:        374
Source: 
>         event LogRedeem(address indexed who, uint indexed uid, uint amount, uint now);
>         event RegisterUser(address indexed who, uint indexed uid, uint refId, uint now);
>                                                                               ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Fast2Win
Line:        385
Source: 
>             //register owner
>             address _msgSender = msg.sender;
>             ^^^^^^^^^^^^^^^^^^
>             UserGlobal storage userGlobal = userMapping[_msgSender];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UtilFast2Win
Line:        9
Source: 
>         using SafeMath for uint;
>         uint ETH = 1 ether;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fast2Win
Line:        294
Source: 
> 
>         string constant private name = "fast2win foundation";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fast2Win
Line:        296
Source: 
> 
>         uint ETH = 1 ether;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fast2Win
Line:        350
Source: 
>         uint constant private PERIOD = 1 days;//1 days
>         uint constant private restTime = 2*PERIOD;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint constant private HOURS = 1 hours;//1 hours

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Fast2Win
Line:        385
Source: 
>             //register owner
>             address _msgSender = msg.sender;
>             ^^^^^^^^^^^^^^^^^^
>             UserGlobal storage userGlobal = userMapping[_msgSender];

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    Fast2Win
Line:        296
Source: 
> 
>         uint ETH = 1 ether;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UtilFast2Win
Line:        9
Source: 
>         using SafeMath for uint;
>         uint ETH = 1 ether;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        296
Source: 
> 
>         uint ETH = 1 ether;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        340
Source: 
> 
>         uint coefficient = 10;
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint startTime;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        341
Source: 
>         uint coefficient = 10;
>         uint startTime;
>         ^^^^^^^^^^^^^^
>         uint investCount = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        342
Source: 
>         uint startTime;
>         uint investCount = 0;
>         ^^^^^^^^^^^^^^^^^^^^
>         mapping(uint => uint) rInvestCount;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        343
Source: 
>         uint investCount = 0;
>         mapping(uint => uint) rInvestCount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint investMoney = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        344
Source: 
>         mapping(uint => uint) rInvestCount;
>         uint investMoney = 0;
>         ^^^^^^^^^^^^^^^^^^^^
>         mapping(uint => uint) rInvestMoney;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        345
Source: 
>         uint investMoney = 0;
>         mapping(uint => uint) rInvestMoney;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(uint => GameInfo) rInfo;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        346
Source: 
>         mapping(uint => uint) rInvestMoney;
>         mapping(uint => GameInfo) rInfo;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint uid = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        347
Source: 
>         mapping(uint => GameInfo) rInfo;
>         uint uid = 0;
>         ^^^^^^^^^^^^
>         uint rid = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        348
Source: 
>         uint uid = 0;
>         uint rid = 1;
>         ^^^^^^^^^^^^
>         uint constant private PERIOD = 1 days;//1 days

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        352
Source: 
>         uint constant private HOURS = 1 hours;//1 hours
>         uint checkInCount = 0;
>         ^^^^^^^^^^^^^^^^^^^^^
>         mapping (uint => mapping(address => User)) userRoundMapping;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        353
Source: 
>         uint checkInCount = 0;
>         mapping (uint => mapping(address => User)) userRoundMapping;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(address => UserGlobal) public userMapping;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        362
Source: 
>         modifier isHuman() {
>             address addr = msg.sender;
>             ^^^^^^^^^^^^
>             uint codeLength;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fast2Win
Line:        363
Source: 
>             address addr = msg.sender;
>             uint codeLength;
>             ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast2Win
Line:        758
Source: 
>         function sendFeetoAdmin(uint amount) private {
>             devAddr.transfer(amount.mul(5).div(100)); //admin fee
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             follow.transfer(amount.mul(5).div(1000)); //follower

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast2Win
Line:        759
Source: 
>             devAddr.transfer(amount.mul(5).div(100)); //admin fee
>             follow.transfer(amount.mul(5).div(1000)); //follower
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             follow.transfer(amount.mul(1).div(100)); //FOMO

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast2Win
Line:        760
Source: 
>             follow.transfer(amount.mul(5).div(1000)); //follower
>             follow.transfer(amount.mul(1).div(100)); //FOMO
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast2Win
Line:        580
Source: 
>         function sendMoneyToUser(address payable userAddress, uint money) private {
>             userAddress.transfer(money);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast2Win
Line:        560
Source: 
>                 sendMoneyToUser(msg.sender, resultMoney.mul(98).div(100));
>                 savingAddr.transfer(resultMoney.mul(5).div(100));  //savior
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 user.allStaticAmount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fast2Win
Line:        580
Source: 
>         function sendMoneyToUser(address payable userAddress, uint money) private {
>             userAddress.transfer(money);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fast2Win
Line:        758
Source: 
>         function sendFeetoAdmin(uint amount) private {
>             devAddr.transfer(amount.mul(5).div(100)); //admin fee
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             follow.transfer(amount.mul(5).div(1000)); //follower

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fast2Win
Line:        759
Source: 
>             devAddr.transfer(amount.mul(5).div(100)); //admin fee
>             follow.transfer(amount.mul(5).div(1000)); //follower
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             follow.transfer(amount.mul(1).div(100)); //FOMO

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fast2Win
Line:        760
Source: 
>             follow.transfer(amount.mul(5).div(1000)); //follower
>             follow.transfer(amount.mul(1).div(100)); //FOMO
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Fast2Win
Line:        560
Source: 
>                 sendMoneyToUser(msg.sender, resultMoney.mul(98).div(100));
>                 savingAddr.transfer(resultMoney.mul(5).div(100));  //savior
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 user.allStaticAmount = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fast2Win
Line:        758
Source: 
>         function sendFeetoAdmin(uint amount) private {
>             devAddr.transfer(amount.mul(5).div(100)); //admin fee
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             follow.transfer(amount.mul(5).div(1000)); //follower

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fast2Win
Line:        759
Source: 
>             devAddr.transfer(amount.mul(5).div(100)); //admin fee
>             follow.transfer(amount.mul(5).div(1000)); //follower
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             follow.transfer(amount.mul(1).div(100)); //FOMO

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fast2Win
Line:        760
Source: 
>             follow.transfer(amount.mul(5).div(1000)); //follower
>             follow.transfer(amount.mul(1).div(100)); //FOMO
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fast2Win
Line:        580
Source: 
>         function sendMoneyToUser(address payable userAddress, uint money) private {
>             userAddress.transfer(money);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fast2Win
Line:        560
Source: 
>                 sendMoneyToUser(msg.sender, resultMoney.mul(98).div(100));
>                 savingAddr.transfer(resultMoney.mul(5).div(100));  //savior
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 user.allStaticAmount = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Fast2Win
Line:        788
Source: 
> 
>             ct[0] = userInfo.id;
>             ^^
>             ct[1] = userInfo.staticLevel;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Fast2Win
Line:        341
Source: 
>         uint coefficient = 10;
>         uint startTime;
>         ^^^^^^^^^^^^^^
>         uint investCount = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        251
Source: 
> 
>         Roles.Role private _whitelistAdmins;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        228
Source: 
>             require(has(role, account), "Roles: account does not have role");
>             role.bearer[account] = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UtilFast2Win
Line:        9
Source: 
>         using SafeMath for uint;
>         uint ETH = 1 ether;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Fast2Win
Line:        294
Source: 
> 
>         string constant private name = "fast2win foundation";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
