pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MultisigVault
Line:        50
Source: 
>         bool result;
>         assembly {
>         ^^^^^^^^^^
>             let dataLength := mload(data)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigVault
Line:        33
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _carrier;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigVault
Line:        37
Source: 
> 
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address payable destination,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigVault
Line:        46
Source: 
> 
>     function external_call(address destination, uint value, bytes memory data) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _carrier, "Ownable: caller is not the owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigCarrier
Line:        180
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigCarrier
Line:        196
Source: 
> 
>     function createMultisigVault() public returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         MultisigVault multisigVault = new MultisigVault();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigCarrier
Line:        207
Source: 
> 
>     function setVaultInfo(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address vaultAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigCarrier
Line:        224
Source: 
> 
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address payable vaultAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigCarrier
Line:        233
Source: 
> 
>     function approveFrom(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address caller,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigCarrier
Line:        285
Source: 
> 
>     function getNonce(
>     ^^^^^^^^^^^^^^^^^^
>         address vaultAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigCarrier
Line:        297
Source: 
> 
>     function partyCoincieded(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address vaultAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultisigCarrier
Line:        348
Source: 
> 
>     function serviceAddress() public pure returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(0x0A67A2cdC35D7Db352CfBd84fFF5e5F531dF62d1);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultisigCarrier
Line:        326
Source: 
>         if (currencyAddress == etherAddress()) {
>             multisigVault.external_call(destination, amount, "");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultisigCarrier
Line:        328
Source: 
>         } else {
>             multisigVault.external_call(currencyAddress, 0, abi.encodeWithSelector(IERC20(currencyAddress).transfer.selector, destination, amount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultisigCarrier
Line:        259
Source: 
>         } else {
>             require(IERC20(currencyAddress).balanceOf(address(vaultAddress)) >= amount, "Insufficient balance");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    MultisigVault
Line:        25
Source: 
> 
> contract MultisigVault {
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultisigCarrier
Line:        224
Source: 
> 
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address payable vaultAddress,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultisigCarrier
Line:        233
Source: 
> 
>     function approveFrom(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address caller,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultisigCarrier
Line:        297
Source: 
> 
>     function partyCoincieded(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address vaultAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultisigVault
Line:        37
Source: 
> 
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address payable destination,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultisigVault
Line:        46
Source: 
> 
>     function external_call(address destination, uint value, bytes memory data) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _carrier, "Ownable: caller is not the owner");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultisigCarrier
Line:        207
Source: 
> 
>     function setVaultInfo(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address vaultAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultisigCarrier
Line:        285
Source: 
> 
>     function getNonce(
>     ^^^^^^^^^^^^^^^^^^
>         address vaultAddress,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultisigCarrier
Line:        259
Source: 
>         } else {
>             require(IERC20(currencyAddress).balanceOf(address(vaultAddress)) >= amount, "Insufficient balance");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    MultisigCarrier
Line:        326
Source: 
>         if (currencyAddress == etherAddress()) {
>             multisigVault.external_call(destination, amount, "");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    MultisigCarrier
Line:        328
Source: 
>         } else {
>             multisigVault.external_call(currencyAddress, 0, abi.encodeWithSelector(IERC20(currencyAddress).transfer.selector, destination, amount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultisigVault
Line:        46
Source: 
> 
>     function external_call(address destination, uint value, bytes memory data) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _carrier, "Ownable: caller is not the owner");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultisigCarrier
Line:        150
Source: 
> 
>     mapping(
>     ^^^^^^^^
>         // MutlisigVault

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultisigCarrier
Line:        164
Source: 
> 
>     mapping(uint256 => bool) public _finished;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultisigCarrier
Line:        259
Source: 
>         } else {
>             require(IERC20(currencyAddress).balanceOf(address(vaultAddress)) >= amount, "Insufficient balance");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MultisigVault
Line:        43
Source: 
>         IMultisigCarrier multisigCarrier = IMultisigCarrier(_carrier);
>         return multisigCarrier.approveFrom(msg.sender, destination, currencyAddress, amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MultisigCarrier
Line:        326
Source: 
>         if (currencyAddress == etherAddress()) {
>             multisigVault.external_call(destination, amount, "");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MultisigCarrier
Line:        328
Source: 
>         } else {
>             multisigVault.external_call(currencyAddress, 0, abi.encodeWithSelector(IERC20(currencyAddress).transfer.selector, destination, amount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MultisigCarrier
Line:        143
Source: 
> 
>     uint32 private _nonce;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address private _owner;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MultisigCarrier
Line:        267
Source: 
>         if (approval.coincieded == 0) {
>             _nonce += 1;
>             ^^^^^^^^^^^
>             approval.nonce = _nonce;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MultisigCarrier
Line:        268
Source: 
>             _nonce += 1;
>             approval.nonce = _nonce;
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MultisigCarrier
Line:        271
Source: 
> 
>         approval.parties.push(caller);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         approval.coincieded += 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MultisigCarrier
Line:        272
Source: 
>         approval.parties.push(caller);
>         approval.coincieded += 1;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MultisigCarrier
Line:        275
Source: 
>         if ( approval.coincieded >= vaultInfo.signatureMinThreshold ) {
>             _finished[approval.nonce] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             delete _approvals[vaultAddress][destination][currencyAddress][amount];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MultisigCarrier
Line:        276
Source: 
>             _finished[approval.nonce] = true;
>             delete _approvals[vaultAddress][destination][currencyAddress][amount];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultisigCarrier
Line:        199
Source: 
>         VaultInfo storage vaultInfo = _vaultInfos[address(multisigVault)];
>         vaultInfo.initiated = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MultisigCarrier
Line:        326
Source: 
>         if (currencyAddress == etherAddress()) {
>             multisigVault.external_call(destination, amount, "");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MultisigCarrier
Line:        328
Source: 
>         } else {
>             multisigVault.external_call(currencyAddress, 0, abi.encodeWithSelector(IERC20(currencyAddress).transfer.selector, destination, amount));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
