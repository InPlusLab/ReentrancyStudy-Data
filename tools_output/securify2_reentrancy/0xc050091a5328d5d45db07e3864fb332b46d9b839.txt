Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        233
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        44
Source: 
> 
> 	function invest(address payable referrer) public payable {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(msg.value.mul(10).div(100));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        73
Source: 
> 
> 	function withdraw() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        112
Source: 
> 
> 	function getContractBalance() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        146
Source: 
> 
> 	function getUserReferrer(address userAddress) public view returns(address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].referrer;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        149
Source: 
> 	}
> 	function getUserReferrerals(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].totalRefferer;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        152
Source: 
> 	}
> 	function getUserReferralWithdraw(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].withdrawRef;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        156
Source: 
> 
> 	function getUserAvailableBalanceForWithdrawal(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (getUserDividends(userAddress));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        160
Source: 
> 
> 	function isActive(address userAddress) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        170
Source: 
> 
> 	function getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    User storage user = users[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        176
Source: 
> 
> 	function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].deposits.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        180
Source: 
> 
> 	function getUserTotalDeposits(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    User storage user = users[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        192
Source: 
> 
> 	function getUserTotalWithdrawn(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    User storage user = users[userAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TRONconEth
Line:        204
Source: 
> 
> 	function Updation(uint256 _value)public returns(bool){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner,"access denied");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TRONconEth
Line:        44
Source: 
> 
> 	function invest(address payable referrer) public payable {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(msg.value.mul(10).div(100));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TRONconEth
Line:        156
Source: 
> 
> 	function getUserAvailableBalanceForWithdrawal(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (getUserDividends(userAddress));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TRONconEth
Line:        204
Source: 
> 
> 	function Updation(uint256 _value)public returns(bool){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner,"access denied");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONconEth
Line:        146
Source: 
> 
> 	function getUserReferrer(address userAddress) public view returns(address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].referrer;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONconEth
Line:        149
Source: 
> 	}
> 	function getUserReferrerals(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].totalRefferer;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONconEth
Line:        152
Source: 
> 	}
> 	function getUserReferralWithdraw(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].withdrawRef;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONconEth
Line:        160
Source: 
> 
> 	function isActive(address userAddress) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[userAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONconEth
Line:        170
Source: 
> 
> 	function getUserDepositInfo(address userAddress, uint256 index) public view returns(uint256, uint256, uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    User storage user = users[userAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TRONconEth
Line:        176
Source: 
> 
> 	function getUserAmountOfDeposits(address userAddress) public view returns(uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[userAddress].deposits.length;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        232
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TRONconEth
Line:        45
Source: 
> 	function invest(address payable referrer) public payable {
> 		owner.transfer(msg.value.mul(10).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		other.transfer(msg.value.mul(10).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TRONconEth
Line:        46
Source: 
> 		owner.transfer(msg.value.mul(10).div(100));
> 		other.transfer(msg.value.mul(10).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TRONconEth
Line:        56
Source: 
> 			user.referrer = referrer;
>              user.referrer.transfer(msg.value.mul(5).div(100));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              user.withdrawRef = user.withdrawRef.add(msg.value.mul(5).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TRONconEth
Line:        104
Source: 
> 
> 		msg.sender.transfer(totalAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TRONconEth
Line:        77
Source: 
> 		uint256 dividends;
>          uint256 base_percent=BASE_PERCENT;
>          ^^^^^^^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < user.deposits.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TRONconEth
Line:        119
Source: 
> 		uint256 dividends;
>          uint256 base_percent=BASE_PERCENT;
>          ^^^^^^^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < user.deposits.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TRONconEth
Line:        204
Source: 
> 
> 	function Updation(uint256 _value)public returns(bool){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(msg.sender==owner,"access denied");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TRONconEth
Line:        206
Source: 
> 	    require(msg.sender==owner,"access denied");
> 	    owner.transfer(_value.mul(1e18));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TRONconEth
Line:        104
Source: 
> 
> 		msg.sender.transfer(totalAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TRONconEth
Line:        45
Source: 
> 	function invest(address payable referrer) public payable {
> 		owner.transfer(msg.value.mul(10).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		other.transfer(msg.value.mul(10).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TRONconEth
Line:        46
Source: 
> 		owner.transfer(msg.value.mul(10).div(100));
> 		other.transfer(msg.value.mul(10).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TRONconEth
Line:        56
Source: 
> 			user.referrer = referrer;
>              user.referrer.transfer(msg.value.mul(5).div(100));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              user.withdrawRef = user.withdrawRef.add(msg.value.mul(5).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TRONconEth
Line:        206
Source: 
> 	    require(msg.sender==owner,"access denied");
> 	    owner.transfer(_value.mul(1e18));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TRONconEth
Line:        206
Source: 
> 	    require(msg.sender==owner,"access denied");
> 	    owner.transfer(_value.mul(1e18));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TRONconEth
Line:        12
Source: 
> 	uint256 constant public TIME_STEP = 1 days;
> 	uint256 public totalUsers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public totalInvested;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TRONconEth
Line:        13
Source: 
> 	uint256 public totalUsers;
> 	uint256 public totalInvested;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public totalWithdrawn;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TRONconEth
Line:        14
Source: 
> 	uint256 public totalInvested;
> 	uint256 public totalWithdrawn;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public totalDeposits;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TRONconEth
Line:        15
Source: 
> 	uint256 public totalWithdrawn;
> 	uint256 public totalDeposits;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address payable public owner;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TRONconEth
Line:        104
Source: 
> 
> 		msg.sender.transfer(totalAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    TRONconEth
Line:        45
Source: 
> 	function invest(address payable referrer) public payable {
> 		owner.transfer(msg.value.mul(10).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		other.transfer(msg.value.mul(10).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    TRONconEth
Line:        46
Source: 
> 		owner.transfer(msg.value.mul(10).div(100));
> 		other.transfer(msg.value.mul(10).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    TRONconEth
Line:        56
Source: 
> 			user.referrer = referrer;
>              user.referrer.transfer(msg.value.mul(5).div(100));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              user.withdrawRef = user.withdrawRef.add(msg.value.mul(5).div(100));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TRONconEth
Line:        106
Source: 
> 
> 		totalWithdrawn = totalWithdrawn.add(totalAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONconEth
Line:        55
Source: 
>     }
> 			user.referrer = referrer;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>              user.referrer.transfer(msg.value.mul(5).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONconEth
Line:        57
Source: 
>              user.referrer.transfer(msg.value.mul(5).div(100));
>              user.withdrawRef = user.withdrawRef.add(msg.value.mul(5).div(100));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              user.totalRefferer=user.totalRefferer.add(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONconEth
Line:        58
Source: 
>              user.withdrawRef = user.withdrawRef.add(msg.value.mul(5).div(100));
>              user.totalRefferer=user.totalRefferer.add(1);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (user.deposits.length == 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONconEth
Line:        65
Source: 
> 
> 		user.deposits.push(Deposit(msg.value, 0, block.timestamp));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONconEth
Line:        67
Source: 
>         
> 		totalInvested = totalInvested.add(msg.value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalDeposits = totalDeposits.add(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TRONconEth
Line:        68
Source: 
> 		totalInvested = totalInvested.add(msg.value);
> 		totalDeposits = totalDeposits.add(1);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit NewDeposit(msg.sender, msg.value);

[0m
