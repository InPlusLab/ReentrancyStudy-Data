Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BZRXVestingToken
Line:        458
Source: 
> 
>     Checkpointing.History internal totalSupplyHistory_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Checkpointing
Line:        165
Source: 
>                 _self.history.push(Checkpoint(_time, _value));
>             } else if (_time == currentCheckpointTime) {
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 currentCheckpoint.value = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        79
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        102
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        278
Source: 
>     // override this function if a totalSupply should be tracked
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        286
Source: 
> 
>     function balanceOf(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        305
Source: 
> 
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        315
Source: 
> 
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        326
Source: 
> 
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        79
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        102
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        278
Source: 
>     // override this function if a totalSupply should be tracked
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        286
Source: 
> 
>     function balanceOf(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        305
Source: 
> 
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        315
Source: 
> 
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CheckpointingToken
Line:        326
Source: 
> 
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BZRXVestingToken
Line:        490
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BZRXVestingToken
Line:        510
Source: 
>     // user can claim vested BZRX
>     function claim()
>     ^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BZRXVestingToken
Line:        551
Source: 
> 
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BZRXVestingToken
Line:        585
Source: 
>     // total that has not yet vested
>     function vestingBalanceOf(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _owner)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BZRXVestingToken
Line:        607
Source: 
>     // total that has been claimed by a user
>     function claimedBalanceOf(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _owner)

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BZRXVestingToken
Line:        481
Source: 
> 
>         BZRX.transferFrom(
>         ^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BZRXVestingToken
Line:        646
Source: 
> 
>             BZRX.transfer(
>             ^^^^^^^^^^^^^^
>                 _owner,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BZRXVestingToken
Line:        545
Source: 
> 
>         BZRX.transfer(
>         ^^^^^^^^^^^^^^
>             _receiver,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        102
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CheckpointingToken
Line:        286
Source: 
> 
>     function balanceOf(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CheckpointingToken
Line:        295
Source: 
> 
>     function balanceOfAt(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CheckpointingToken
Line:        326
Source: 
> 
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CheckpointingToken
Line:        339
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        102
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CheckpointingToken
Line:        286
Source: 
> 
>     function balanceOf(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CheckpointingToken
Line:        295
Source: 
> 
>     function balanceOfAt(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CheckpointingToken
Line:        326
Source: 
> 
>     function transfer(
>     ^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CheckpointingToken
Line:        339
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BZRXVestingToken
Line:        490
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BZRXVestingToken
Line:        537
Source: 
>     // funds unclaimed one year after vesting ends (5 years) can be rescued
>     function rescue(
>     ^^^^^^^^^^^^^^^^
>         address _receiver,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BZRXVestingToken
Line:        559
Source: 
> 
>     function totalSupplyAt(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _blockNumber)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BZRXVestingToken
Line:        585
Source: 
>     // total that has not yet vested
>     function vestingBalanceOf(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _owner)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CheckpointingToken
Line:        305
Source: 
> 
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CheckpointingToken
Line:        315
Source: 
> 
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CheckpointingToken
Line:        305
Source: 
> 
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CheckpointingToken
Line:        315
Source: 
> 
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BZRXVestingToken
Line:        607
Source: 
>     // total that has been claimed by a user
>     function claimedBalanceOf(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _owner)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    CheckpointingToken
Line:        417
Source: 
>         }
>         require((c = a * b) / a == b, "multiplication-overflow");
>                      ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BZRXVestingToken
Line:        481
Source: 
> 
>         BZRX.transferFrom(
>         ^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BZRXVestingToken
Line:        646
Source: 
> 
>             BZRX.transfer(
>             ^^^^^^^^^^^^^^
>                 _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BZRXVestingToken
Line:        570
Source: 
>     function vestedBalanceOf(
>         address _owner)
>         ^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BZRXVestingToken
Line:        586
Source: 
>     function vestingBalanceOf(
>         address _owner)
>         ^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BZRXVestingToken
Line:        608
Source: 
>     function claimedBalanceOf(
>         address _owner)
>         ^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BZRXVestingToken
Line:        638
Source: 
>     function _claim(
>         address _owner)
>         ^^^^^^^^^^^^^^
>         internal

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        439
Source: 
> 
>     string public constant name = "bZx Vesting Token";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "vBZRX";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        440
Source: 
>     string public constant name = "bZx Vesting Token";
>     string public constant symbol = "vBZRX";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        441
Source: 
>     string public constant symbol = "vBZRX";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        443
Source: 
> 
>     uint256 public constant cliffDuration =                  15768000; // 86400 * 365 * 0.5
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant vestingDuration =               126144000; // 86400 * 365 * 4

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        444
Source: 
>     uint256 public constant cliffDuration =                  15768000; // 86400 * 365 * 0.5
>     uint256 public constant vestingDuration =               126144000; // 86400 * 365 * 4
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant vestingDurationAfterCliff_ =  110376000; // 86400 * 365 * 3.5

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        445
Source: 
>     uint256 public constant vestingDuration =               126144000; // 86400 * 365 * 4
>     uint256 internal constant vestingDurationAfterCliff_ =  110376000; // 86400 * 365 * 3.5
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        447
Source: 
> 
>     uint256 public constant vestingStartTimestamp =         1594648800; // start_time
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant vestingCliffTimestamp =         vestingStartTimestamp + cliffDuration;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        448
Source: 
>     uint256 public constant vestingStartTimestamp =         1594648800; // start_time
>     uint256 public constant vestingCliffTimestamp =         vestingStartTimestamp + cliffDuration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant vestingEndTimestamp =           vestingStartTimestamp + vestingDuration;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        449
Source: 
>     uint256 public constant vestingCliffTimestamp =         vestingStartTimestamp + cliffDuration;
>     uint256 public constant vestingEndTimestamp =           vestingStartTimestamp + vestingDuration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant vestingLastClaimTimestamp =     vestingEndTimestamp + 86400 * 365;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        450
Source: 
>     uint256 public constant vestingEndTimestamp =           vestingStartTimestamp + vestingDuration;
>     uint256 public constant vestingLastClaimTimestamp =     vestingEndTimestamp + 86400 * 365;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        456
Source: 
> 
>     uint256 internal constant startingBalance_ = 889389933e18; // 889,389,933 BZRX
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BZRXVestingToken
Line:        524
Source: 
> 
>         uint256 _blockNumber = _getBlockNumber();
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 balanceBefore = balanceOfAt(msg.sender, _blockNumber);

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    BZRXVestingToken
Line:        439
Source: 
> 
>     string public constant name = "bZx Vesting Token";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "vBZRX";

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    BZRXVestingToken
Line:        440
Source: 
>     string public constant name = "bZx Vesting Token";
>     string public constant symbol = "vBZRX";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    BZRXVestingToken
Line:        441
Source: 
>     string public constant symbol = "vBZRX";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BZRXVestingToken
Line:        481
Source: 
> 
>         BZRX.transferFrom(
>         ^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BZRXVestingToken
Line:        646
Source: 
> 
>             BZRX.transfer(
>             ^^^^^^^^^^^^^^
>                 _owner,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BZRXVestingToken
Line:        545
Source: 
> 
>         BZRX.transfer(
>         ^^^^^^^^^^^^^^
>             _receiver,

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    CheckpointingToken
Line:        394
Source: 
>     {
>         require((c = x + y) >= x, "addition-overflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    CheckpointingToken
Line:        404
Source: 
>     {
>         require((c = x - y) <= x, "subtraction-overflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    CheckpointingToken
Line:        417
Source: 
>         }
>         require((c = a * b) / a == b, "multiplication-overflow");
>                  ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BZRXVestingToken
Line:        452
Source: 
> 
>     uint256 public totalClaimed; // total claimed since start
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BZRXVestingToken
Line:        463
Source: 
> 
>     bool internal isInitialized_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IERC20
Line:        14
Source: 
> contract IERC20 {
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IERC20
Line:        15
Source: 
>     string public name;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IERC20
Line:        16
Source: 
>     uint8 public decimals;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view returns (uint256);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IERC20
Line:        14
Source: 
> contract IERC20 {
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IERC20
Line:        15
Source: 
>     string public name;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IERC20
Line:        16
Source: 
>     uint8 public decimals;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view returns (uint256);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BZRXVestingToken
Line:        458
Source: 
> 
>     Checkpointing.History internal totalSupplyHistory_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BZRXVestingToken
Line:        643
Source: 
>         if (vested != 0) {
>             userTotalClaimed_[_owner] = add(userTotalClaimed_[_owner], vested);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalClaimed = add(totalClaimed, vested);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BZRXVestingToken
Line:        644
Source: 
>             userTotalClaimed_[_owner] = add(userTotalClaimed_[_owner], vested);
>             totalClaimed = add(totalClaimed, vested);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CheckpointingToken
Line:        321
Source: 
>     {
>         allowances_[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Checkpointing
Line:        158
Source: 
>         if (length == 0) {
>             _self.history.push(Checkpoint(_time, _value));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Checkpointing
Line:        164
Source: 
>             if (_time > currentCheckpointTime) {
>                 _self.history.push(Checkpoint(_time, _value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else if (_time == currentCheckpointTime) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Checkpointing
Line:        166
Source: 
>             } else if (_time == currentCheckpointTime) {
>                 currentCheckpoint.value = _value;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else { // ensure list ordering

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BZRXVestingToken
Line:        487
Source: 
> 
>         isInitialized_ = true;
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BZRXVestingToken
Line:        657
Source: 
> 
>         lastClaimTime_[_owner] = _getTimestamp();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BZRXVestingToken
Line:        481
Source: 
> 
>         BZRX.transferFrom(
>         ^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BZRXVestingToken
Line:        646
Source: 
> 
>             BZRX.transfer(
>             ^^^^^^^^^^^^^^
>                 _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BZRXVestingToken
Line:        657
Source: 
> 
>         lastClaimTime_[_owner] = _getTimestamp();
>                                  ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BZRXVestingToken
Line:        545
Source: 
> 
>         BZRX.transfer(
>         ^^^^^^^^^^^^^^
>             _receiver,

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IERC20
Line:        14
Source: 
> contract IERC20 {
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IERC20
Line:        15
Source: 
>     string public name;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IERC20
Line:        16
Source: 
>     uint8 public decimals;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IERC20
Line:        14
Source: 
> contract IERC20 {
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IERC20
Line:        15
Source: 
>     string public name;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IERC20
Line:        16
Source: 
>     uint8 public decimals;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BZRXVestingToken
Line:        439
Source: 
> 
>     string public constant name = "bZx Vesting Token";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "vBZRX";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BZRXVestingToken
Line:        440
Source: 
>     string public constant name = "bZx Vesting Token";
>     string public constant symbol = "vBZRX";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BZRXVestingToken
Line:        441
Source: 
>     string public constant symbol = "vBZRX";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    CheckpointingToken
Line:        384
Source: 
>     {
>         return block.timestamp;
>                ^^^^^^^^^^^^^^^
>     }

[0m
