Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    IFY_Stake
Line:        246
Source: 
>     
>     StakingOpts[4] public stakingOptions;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    IFY_Stake
Line:        288
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE(uint256 _amount, uint256 optionNumber) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(optionNumber >= 1 && optionNumber <= 4, "Invalid option choice");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IFY_Stake
Line:        279
Source: 
>     // -----------------------------------------------------------------------
>     function setTokenAddress(address _tokenAddress) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IFY = IERC20(_tokenAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IFY_Stake
Line:        363
Source: 
>     // ------------------------------------------------------------------------
>     function pendingReward(address user) public view returns(uint256 _pendingReward){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 reward = (onePercent(stakers[user].stakedAmount)).mul(stakers[user].rewardPercentage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        88
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        164
Source: 
>     function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {
>         return (a + m - 1) / m * m;
>                ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    IFY_Stake
Line:        304
Source: 
>         // transfer the tokens from caller to staking contract
>         require(IFY.transferFrom(msg.sender, address(this), _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    IFY_Stake
Line:        334
Source: 
>         // transfer the reward tokens
>         require(IFY.transfer(msg.sender, reward), "reward transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IFY_Stake
Line:        222
Source: 
> 
> contract IFY_Stake is Owned {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IFY_Stake
Line:        225
Source: 
>     
>     IERC20 public IFY;
>     ^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IFY_Stake
Line:        288
Source: 
>     // ------------------------------------------------------------------------
>     function STAKE(uint256 _amount, uint256 optionNumber) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(optionNumber >= 1 && optionNumber <= 4, "Invalid option choice");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IFY_Stake
Line:        307
Source: 
>     
>     function Exit() external{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(pendingReward(msg.sender) > 0)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IFY_Stake
Line:        319
Source: 
>     // ------------------------------------------------------------------------
>     function ClaimReward() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pendingReward(msg.sender) > 0, "nothing pending to claim");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IFY_Stake
Line:        342
Source: 
>     // ------------------------------------------------------------------------
>     function UnStake() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 stakedAmount = stakers[msg.sender].stakedAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IFY_Stake
Line:        304
Source: 
>         // transfer the tokens from caller to staking contract
>         require(IFY.transferFrom(msg.sender, address(this), _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IFY_Stake
Line:        357
Source: 
>         // transfer staked tokens
>         require(IFY.transfer(msg.sender, stakedAmount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    IFY_Stake
Line:        334
Source: 
>         // transfer the reward tokens
>         require(IFY.transfer(msg.sender, reward), "reward transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    IFY_Stake
Line:        225
Source: 
>     
>     IERC20 public IFY;
>     ^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    IFY_Stake
Line:        227
Source: 
>     
>     uint256 public  totalClaimedRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public  totalStaked;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    IFY_Stake
Line:        228
Source: 
>     uint256 public  totalClaimedRewards;
>     uint256 public  totalStaked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IFY_Stake
Line:        246
Source: 
>     
>     StakingOpts[4] public stakingOptions;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    IFY_Stake
Line:        298
Source: 
>         stakers[msg.sender].stakingOpt = optionNumber;
>         stakers[msg.sender].stakingEndDate = block.timestamp.add(stakingOptions[optionNumber.sub(1)].stakingPeriod);
>                                              ^^^^^^^^^^^^^^^
>         stakers[msg.sender].rewardPercentage = stakingOptions[optionNumber.sub(1)].stakingPercentage;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    IFY_Stake
Line:        345
Source: 
>         require(stakedAmount > 0, "insufficient stake");
>         require(block.timestamp > stakers[msg.sender].stakingEndDate, "staking period has not ended");
>                 ^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    IFY_Stake
Line:        321
Source: 
>         require(pendingReward(msg.sender) > 0, "nothing pending to claim");
>         require(block.timestamp > stakers[msg.sender].stakingEndDate, "claim date has not reached");
>                 ^^^^^^^^^^^^^^^
>         

[0m
