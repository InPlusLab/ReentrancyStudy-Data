[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    HDSplit
Line:        68
Source: 
>     // math
>     uint256 THOUSAND = 10 ** 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function add(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HDSplit
Line:        128
Source: 
> 
>     function take(address _token) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _moar;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HDSplit
Line:        192
Source: 
>             require(
>                 IERC20(dai).transferFrom(msg.sender, _guy, _amt),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "HDSplit/dai-transfer-failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HDSplit
Line:        166
Source: 
>         if (_token == address(0)) {
>             require(msg.sender.send(_amt) == true, "HDSplit/send-failed");
>                     ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HDSplit
Line:        171
Source: 
>             );
>             (bool _success, bytes memory _returndata) = _token.call(_data);
>                                                         ^^^^^^^^^^^^^^^^^^
>             require(_success, "HDSplit/transfer-failed-1");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HDSplit
Line:        135
Source: 
>         } else {
>             _moar = sub(IERC20(_token).balanceOf(address(this)), total[_token]);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    HDSplit
Line:        171
Source: 
>             );
>             (bool _success, bytes memory _returndata) = _token.call(_data);
>                                                         ^^^^^^^^^^^^^^^^^^
>             require(_success, "HDSplit/transfer-failed-1");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HDSplit
Line:        106
Source: 
> 
>     function tell(uint256 _wad) external auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dai != address(0), "HDSplit/no-compensation-plan");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    HDSplit
Line:        166
Source: 
>         if (_token == address(0)) {
>             require(msg.sender.send(_amt) == true, "HDSplit/send-failed");
>                     ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        68
Source: 
>     // math
>     uint256 THOUSAND = 10 ** 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function add(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        87
Source: 
> 
>         uint256 _total;
>         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        109
Source: 
> 
>         address payable[] memory _folks = folks;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        113
Source: 
>             if (msg.sender != _folks[i]) {
>                 uint256 _amt = mul(_wad, bps[i]) / THOUSAND;
>                 ^^^^^^^^^^^^
>                 debt = add(debt, _amt);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        129
Source: 
>     function take(address _token) public auth {
>         uint256 _moar;
>         ^^^^^^^^^^^^^
>         address payable[] memory _folks = folks;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        130
Source: 
>         uint256 _moar;
>         address payable[] memory _folks = folks;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        161
Source: 
>     function send(address _token) internal {
>         uint256 _amt = balance[msg.sender][_token];
>         ^^^^^^^^^^^^
>         balance[msg.sender][_token] = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        168
Source: 
>         } else {
>             bytes memory _data = abi.encodeWithSelector(
>             ^^^^^^^^^^^^^^^^^^
>                 IERC20(_token).transfer.selector, msg.sender, _amt

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        171
Source: 
>             );
>             (bool _success, bytes memory _returndata) = _token.call(_data);
>              ^^^^^^^^^^^^^
>             require(_success, "HDSplit/transfer-failed-1");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        171
Source: 
>             );
>             (bool _success, bytes memory _returndata) = _token.call(_data);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_success, "HDSplit/transfer-failed-1");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HDSplit
Line:        185
Source: 
> 
>         uint256 _amt = owe[_guy][msg.sender];
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        28
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HDSplit
Line:        68
Source: 
>     // math
>     uint256 THOUSAND = 10 ** 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function add(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    HDSplit
Line:        166
Source: 
>         if (_token == address(0)) {
>             require(msg.sender.send(_amt) == true, "HDSplit/send-failed");
>                     ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    HDSplit
Line:        166
Source: 
>         if (_token == address(0)) {
>             require(msg.sender.send(_amt) == true, "HDSplit/send-failed");
>                     ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    HDSplit
Line:        166
Source: 
>         if (_token == address(0)) {
>             require(msg.sender.send(_amt) == true, "HDSplit/send-failed");
>                     ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HDSplit
Line:        192
Source: 
>             require(
>                 IERC20(dai).transferFrom(msg.sender, _guy, _amt),
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "HDSplit/dai-transfer-failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HDSplit
Line:        135
Source: 
>         } else {
>             _moar = sub(IERC20(_token).balanceOf(address(this)), total[_token]);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    HDSplit
Line:        70
Source: 
>     function add(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {
>         require((_z = _x + _y) >= _x);
>                  ^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    HDSplit
Line:        73
Source: 
>     function sub(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {
>         require((_z = _x - _y) <= _x);
>                  ^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    HDSplit
Line:        76
Source: 
>     function mul(uint256 _x, uint256 _y) internal pure returns (uint256 _z) {
>         require(_y == 0 || (_z = _x * _y) / _y == _x);
>                             ^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    HDSplit
Line:        38
Source: 
>     address immutable public dai;
>     uint256 public debt;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public limit;

[0m
