[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        57
Source: 
> 
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        60
Source: 
>   }
>   function acceptOwnership() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        57
Source: 
> 
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        60
Source: 
>   }
>   function acceptOwnership() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SALESGAMER
Line:        100
Source: 
> 
>  function _setStage(uint _value) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SALESGAMER
Line:        105
Source: 
>  
>  function _setSalesPool(address _setPool, uint _OTC) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SALESGAMER
Line:        154
Source: 
>   
>    function tokenSale(address _refer) public payable returns (bool success){
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SALESGAMER
Line:        195
Source: 
>   
>   function clearTokens() public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address  _owner = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SALESGAMER
Line:        200
Source: 
>   
>   function clearETH() public onlyOwner() {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable _owner = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        57
Source: 
> 
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SALESGAMER
Line:        100
Source: 
> 
>  function _setStage(uint _value) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SALESGAMER
Line:        105
Source: 
>  
>  function _setSalesPool(address _setPool, uint _OTC) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SALESGAMER
Line:        154
Source: 
>   
>    function tokenSale(address _refer) public payable returns (bool success){
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SALESGAMER
Line:        119
Source: 
>     uint _eth = msg.value;
>     _tkns = (_eth / Stage[currentStage])*10**18;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SALESGAMER
Line:        161
Source: 
>     uint _eth = msg.value;
>     _tkns = (_eth / Stage[currentStage])*10**18;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        120
Source: 
>     _tkns = (_eth / Stage[currentStage])*10**18;
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        121
Source: 
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(tSales <= otc, "Maximum Sales Cap is reached");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        140
Source: 
>     
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>                               ^^^^^^^^^^^^^^^^^^^^^^
>       token.transferFrom(tokensalepool, refer, _tkns/10);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        141
Source: 
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>       token.transferFrom(tokensalepool, refer, _tkns/10);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       tSales += _tkns/10;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        145
Source: 
>     
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     purchased[msg.sender] = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        162
Source: 
>     _tkns = (_eth / Stage[currentStage])*10**18;
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        163
Source: 
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(tSales <= otc, "Maximum Sales Cap is reached");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        182
Source: 
>     
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>                               ^^^^^^^^^^^^^^^^^^^^^^
>       token.transferFrom(tokensalepool, refer, _tkns/10);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        183
Source: 
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>       token.transferFrom(tokensalepool, refer, _tkns/10);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       tSales += _tkns/10;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SALESGAMER
Line:        187
Source: 
>     
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     purchased[msg.sender] = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        74
Source: 
> 
>   mapping(uint => uint) public Stage;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => uint) public HoldersID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        75
Source: 
>   mapping(uint => uint) public Stage;
>   mapping(address => uint) public HoldersID;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(uint => address) public Holders;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        76
Source: 
>   mapping(address => uint) public HoldersID;
>   mapping(uint => address) public Holders;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => address) public HoldersRef;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        77
Source: 
>   mapping(uint => address) public Holders;
>   mapping(address => address) public HoldersRef;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => bool) public purchased;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        81
Source: 
>   uint public currentStage = 1;
>   uint256 public _tkns;
>   ^^^^^^^^^^^^^^^^^^^^
>   uint256 public currID; 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        100
Source: 
> 
>  function _setStage(uint _value) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        105
Source: 
>  
>  function _setSalesPool(address _setPool, uint _OTC) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        118
Source: 
>     
>     uint _eth = msg.value;
>     ^^^^^^^^^
>     _tkns = (_eth / Stage[currentStage])*10**18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        160
Source: 
>     
>     uint _eth = msg.value;
>     ^^^^^^^^^
>     _tkns = (_eth / Stage[currentStage])*10**18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        196
Source: 
>   function clearTokens() public onlyOwner() {
>     address  _owner = msg.sender;
>     ^^^^^^^^^^^^^^^
>     token.transfer(_owner, token.balanceOf(address(this)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SALESGAMER
Line:        201
Source: 
>   function clearETH() public onlyOwner() {
>     address payable _owner = msg.sender;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     _owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SALESGAMER
Line:        83
Source: 
>   uint256 public currID; 
>   address refer;
>   ^^^^^^^^^^^^^
>   address tokensalepool;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SALESGAMER
Line:        84
Source: 
>   address refer;
>   address tokensalepool;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint256 public tSales;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SALESGAMER
Line:        202
Source: 
>     address payable _owner = msg.sender;
>     _owner.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SALESGAMER
Line:        202
Source: 
>     address payable _owner = msg.sender;
>     _owner.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SALESGAMER
Line:        120
Source: 
>     _tkns = (_eth / Stage[currentStage])*10**18;
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SALESGAMER
Line:        121
Source: 
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(tSales <= otc, "Maximum Sales Cap is reached");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SALESGAMER
Line:        140
Source: 
>     
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>                               ^^^^^^^^^^^^^^^^^^^^^^
>       token.transferFrom(tokensalepool, refer, _tkns/10);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SALESGAMER
Line:        162
Source: 
>     _tkns = (_eth / Stage[currentStage])*10**18;
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SALESGAMER
Line:        163
Source: 
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");
>    require(token.balanceOf(tokensalepool) >= _tkns, "Insufficient tokens in the pool");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(tSales <= otc, "Maximum Sales Cap is reached");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SALESGAMER
Line:        182
Source: 
>     
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>                               ^^^^^^^^^^^^^^^^^^^^^^
>       token.transferFrom(tokensalepool, refer, _tkns/10);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SALESGAMER
Line:        197
Source: 
>     address  _owner = msg.sender;
>     token.transfer(_owner, token.balanceOf(address(this)));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SALESGAMER
Line:        141
Source: 
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>       token.transferFrom(tokensalepool, refer, _tkns/10);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       tSales += _tkns/10;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SALESGAMER
Line:        145
Source: 
>     
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     purchased[msg.sender] = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SALESGAMER
Line:        183
Source: 
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>       token.transferFrom(tokensalepool, refer, _tkns/10);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       tSales += _tkns/10;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SALESGAMER
Line:        187
Source: 
>     
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     purchased[msg.sender] = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SALESGAMER
Line:        197
Source: 
>     address  _owner = msg.sender;
>     token.transfer(_owner, token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        43
Source: 
>   address public owner;
>   address public newOwner;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SALESGAMER
Line:        81
Source: 
>   uint public currentStage = 1;
>   uint256 public _tkns;
>   ^^^^^^^^^^^^^^^^^^^^
>   uint256 public currID; 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SALESGAMER
Line:        82
Source: 
>   uint256 public _tkns;
>   uint256 public currID; 
>   ^^^^^^^^^^^^^^^^^^^^^
>   address refer;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SALESGAMER
Line:        83
Source: 
>   uint256 public currID; 
>   address refer;
>   ^^^^^^^^^^^^^
>   address tokensalepool;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SALESGAMER
Line:        84
Source: 
>   address refer;
>   address tokensalepool;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint256 public tSales;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SALESGAMER
Line:        85
Source: 
>   address tokensalepool;
>   uint256 public tSales;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint public otc;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SALESGAMER
Line:        86
Source: 
>   uint256 public tSales;
>   uint public otc;
>   ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SALESGAMER
Line:        119
Source: 
>     uint _eth = msg.value;
>     _tkns = (_eth / Stage[currentStage])*10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SALESGAMER
Line:        147
Source: 
>     purchased[msg.sender] = true;
>     tSales += _tkns;
>     ^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SALESGAMER
Line:        161
Source: 
>     uint _eth = msg.value;
>     _tkns = (_eth / Stage[currentStage])*10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    require(token.allowance(tokensalepool, address(this)) >= _tkns, "Insufficient tokens allowed from pool");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SALESGAMER
Line:        189
Source: 
>     purchased[msg.sender] = true;
>     tSales += _tkns;
>     ^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SALESGAMER
Line:        141
Source: 
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>       token.transferFrom(tokensalepool, refer, _tkns/10);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       tSales += _tkns/10;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SALESGAMER
Line:        145
Source: 
>     
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     purchased[msg.sender] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SALESGAMER
Line:        183
Source: 
>     if(msg.sender != refer && token.balanceOf(refer) != 0 && refer != 0x0000000000000000000000000000000000000000 && purchased[refer] == true){
>       token.transferFrom(tokensalepool, refer, _tkns/10);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       tSales += _tkns/10;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SALESGAMER
Line:        187
Source: 
>     
>     token.transferFrom(tokensalepool, msg.sender, _tkns);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     purchased[msg.sender] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SALESGAMER
Line:        197
Source: 
>     address  _owner = msg.sender;
>     token.transfer(_owner, token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
