Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        697
Source: 
>   */
>   function setCollateralConfig(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _collateralType,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        747
Source: 
>   */
>   function removeCollateral(address _collateralType) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        766
Source: 
>   */
>   function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].debtLimit = _debtLimit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        777
Source: 
>   */
>   function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        792
Source: 
>   */
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     a.core().refreshCollateral(_collateralType);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        804
Source: 
>   */
>   function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].originationFee = _originationFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        814
Source: 
>   */
>   function collateralDebtLimit(address _collateralType) public override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].debtLimit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        823
Source: 
>   */
>   function collateralMinCollateralRatio(address _collateralType) public override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].minCollateralRatio;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        832
Source: 
>   */
>   function collateralBorrowRate(address _collateralType) public override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].borrowRate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        841
Source: 
>   */
>   function collateralOriginationFee(address _collateralType) public override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].originationFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        850
Source: 
>   */
>   function setLiquidationBonus(uint256 _bonus) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     liquidationBonus = _bonus;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        858
Source: 
>   */
>   function collateralConfigs(uint256 _id) public override view returns (CollateralConfig memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_id <= numCollateralConfigs, "Invalid config id");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        697
Source: 
>   */
>   function setCollateralConfig(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _collateralType,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        766
Source: 
>   */
>   function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].debtLimit = _debtLimit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        777
Source: 
>   */
>   function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        792
Source: 
>   */
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     a.core().refreshCollateral(_collateralType);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        804
Source: 
>   */
>   function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].originationFee = _originationFee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        814
Source: 
>   */
>   function collateralDebtLimit(address _collateralType) public override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].debtLimit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        823
Source: 
>   */
>   function collateralMinCollateralRatio(address _collateralType) public override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].minCollateralRatio;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        832
Source: 
>   */
>   function collateralBorrowRate(address _collateralType) public override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].borrowRate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        841
Source: 
>   */
>   function collateralOriginationFee(address _collateralType) public override view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].originationFee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        850
Source: 
>   */
>   function setLiquidationBonus(uint256 _bonus) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     liquidationBonus = _bonus;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        707
Source: 
>       //new collateral
>       a.core().initializeRates(_collateralType);
>       ^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        707
Source: 
>       //new collateral
>       a.core().initializeRates(_collateralType);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        721
Source: 
>       // Update collateral config
>       a.core().refreshCollateral(_collateralType);
>       ^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        721
Source: 
>       // Update collateral config
>       a.core().refreshCollateral(_collateralType);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant WAD = 1e18;
>   uint256 internal constant halfWAD = WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WadRayMath
Line:        181
Source: 
>   uint256 internal constant RAY = 1e27;
>   uint256 internal constant halfRAY = RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        314
Source: 
> 
>   function MANAGER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        316
Source: 
> 
>   function MINTER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        707
Source: 
>       //new collateral
>       a.core().initializeRates(_collateralType);
>       ^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        707
Source: 
>       //new collateral
>       a.core().initializeRates(_collateralType);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        721
Source: 
>       // Update collateral config
>       a.core().refreshCollateral(_collateralType);
>       ^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        721
Source: 
>       // Update collateral config
>       a.core().refreshCollateral(_collateralType);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        793
Source: 
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>     a.core().refreshCollateral(_collateralType);
>     ^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        793
Source: 
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>     a.core().refreshCollateral(_collateralType);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ConfigProvider
Line:        677
Source: 
> 
>   uint256 public override numCollateralConfigs;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public override liquidationBonus = 5e16; // 5%

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        177
Source: 
> 
>   uint256 internal constant WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant halfWAD = WAD / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant WAD = 1e18;
>   uint256 internal constant halfWAD = WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        180
Source: 
> 
>   uint256 internal constant RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant halfRAY = RAY / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        181
Source: 
>   uint256 internal constant RAY = 1e27;
>   uint256 internal constant halfRAY = RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        183
Source: 
> 
>   uint256 internal constant WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        716
Source: 
> 
>       numCollateralConfigs++;
>       ^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[numCollateralConfigs] = config;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        717
Source: 
>       numCollateralConfigs++;
>       _collateralConfigs[numCollateralConfigs] = config;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       collateralIds[_collateralType] = numCollateralConfigs;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        718
Source: 
>       _collateralConfigs[numCollateralConfigs] = config;
>       collateralIds[_collateralType] = numCollateralConfigs;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        724
Source: 
> 
>       _collateralConfigs[id].collateralType = _collateralType;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].debtLimit = _debtLimit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        725
Source: 
>       _collateralConfigs[id].collateralType = _collateralType;
>       _collateralConfigs[id].debtLimit = _debtLimit;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].minCollateralRatio = _minCollateralRatio;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        726
Source: 
>       _collateralConfigs[id].debtLimit = _debtLimit;
>       _collateralConfigs[id].minCollateralRatio = _minCollateralRatio;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        727
Source: 
>       _collateralConfigs[id].minCollateralRatio = _minCollateralRatio;
>       _collateralConfigs[id].borrowRate = _borrowRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].originationFee = _originationFee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        728
Source: 
>       _collateralConfigs[id].borrowRate = _borrowRate;
>       _collateralConfigs[id].originationFee = _originationFee;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        751
Source: 
> 
>     collateralIds[_collateralType] = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        753
Source: 
> 
>     _collateralConfigs[id] = _collateralConfigs[numCollateralConfigs]; //move last entry forward
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     collateralIds[_collateralConfigs[id].collateralType] = id; //update id for last entry

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        754
Source: 
>     _collateralConfigs[id] = _collateralConfigs[numCollateralConfigs]; //move last entry forward
>     collateralIds[_collateralConfigs[id].collateralType] = id; //update id for last entry
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     delete _collateralConfigs[numCollateralConfigs];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        755
Source: 
>     collateralIds[_collateralConfigs[id].collateralType] = id; //update id for last entry
>     delete _collateralConfigs[numCollateralConfigs];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     numCollateralConfigs--;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        756
Source: 
>     delete _collateralConfigs[numCollateralConfigs];
>     numCollateralConfigs--;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        767
Source: 
>   function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) public override onlyManager {
>     _collateralConfigs[collateralIds[_collateralType]].debtLimit = _debtLimit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        782
Source: 
>   {
>     _collateralConfigs[collateralIds[_collateralType]].minCollateralRatio = _minCollateralRatio;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        794
Source: 
>     a.core().refreshCollateral(_collateralType);
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        805
Source: 
>   function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) public override onlyManager {
>     _collateralConfigs[collateralIds[_collateralType]].originationFee = _originationFee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        851
Source: 
>   function setLiquidationBonus(uint256 _bonus) public override onlyManager {
>     liquidationBonus = _bonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        707
Source: 
>       //new collateral
>       a.core().initializeRates(_collateralType);
>       ^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        721
Source: 
>       // Update collateral config
>       a.core().refreshCollateral(_collateralType);
>       ^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        793
Source: 
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>     a.core().refreshCollateral(_collateralType);
>     ^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        685
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ConfigProvider
Line:        678
Source: 
>   uint256 public override numCollateralConfigs;
>   uint256 public override liquidationBonus = 5e16; // 5%
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        177
Source: 
> 
>   uint256 internal constant WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant halfWAD = WAD / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant WAD = 1e18;
>   uint256 internal constant halfWAD = WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        180
Source: 
> 
>   uint256 internal constant RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant halfRAY = RAY / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        181
Source: 
>   uint256 internal constant RAY = 1e27;
>   uint256 internal constant halfRAY = RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        183
Source: 
> 
>   uint256 internal constant WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
