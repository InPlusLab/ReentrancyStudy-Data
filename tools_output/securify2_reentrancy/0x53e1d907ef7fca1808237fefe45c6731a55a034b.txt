[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        10
Source: 
>     //uint256 EGGS_PER_MINERS_PER_SECOND=1;
>     uint256 public EGGS_TO_HATCH_1MINERS=2592000;//for final version should be seconds in a day
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 PSN=10000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        11
Source: 
>     uint256 public EGGS_TO_HATCH_1MINERS=2592000;//for final version should be seconds in a day
>     uint256 PSN=10000;
>     ^^^^^^^^^^^^^^^^^
>     uint256 PSNH=5000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        12
Source: 
>     uint256 PSN=10000;
>     uint256 PSNH=5000;
>     ^^^^^^^^^^^^^^^^^
>     bool public initialized=false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        153
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     if (a == 0) {
>         ^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        157
Source: 
>     uint256 c = a * b;
>     assert(c / a == b);
>            ^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        113
Source: 
> 	ocApp.transferFrom(msg.sender, address(this), amount);
>         require(marketEggs==0);
>                 ^^^^^^^^^^^^^
>         initialized=true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        53
Source: 
>     }
>     function sellEggs() public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(initialized);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        67
Source: 
>     }
>     function buyEggs(address ref, uint256 _amount) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(initialized);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        111
Source: 
> 
>     function seedMarket(uint256 amount) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	ocApp.transferFrom(msg.sender, address(this), amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        131
Source: 
> 	
> 	function getData(address adr) public view returns(uint256, uint256, uint256,uint256,uint256,uint256 ) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ( getBalance(), getMyMiners(), lastHatch[adr], getMyEggs(), calculateEggSellNew(),devFeeNew());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        134
Source: 
> 	}	
> 	function updateBuyPrice(uint256 eth) public view returns(uint256, uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 calculateEggBuySimpleVal = calculateEggBuySimple(eth);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        138
Source: 
> 	}
> 	function getBalances(address adr) public view returns(uint256, uint256, uint256,uint256,uint256,uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ( 0, ocApp.balanceOf(address(adr)), 0, 0, 0, ocApp.allowance(address(adr), address(this)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        8
Source: 
> 
> contract ETH_HEX_HEX{
> ^^^^^^^^^^^^^^^^^^^^^
>     //uint256 EGGS_PER_MINERS_PER_SECOND=1;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        67
Source: 
>     }
>     function buyEggs(address ref, uint256 _amount) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(initialized);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        83
Source: 
>     //magic trade balancing algorithm
>     function calculateTrade(uint256 rt,uint256 rs, uint256 bs) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //(PSN*bs)/(PSNH+((PSN*rs+PSNH*rt)/rt));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        87
Source: 
>     }
>     function calculateEggSell(uint256 eggs) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateTrade(eggs,marketEggs,ocApp.balanceOf(address(this)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        96
Source: 
> 
>     function calculateEggBuy(uint256 eth,uint256 contractBalance) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateTrade(eth,contractBalance,marketEggs);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        99
Source: 
>     }
>     function calculateEggBuySimple(uint256 eth) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return calculateEggBuy(eth,ocApp.balanceOf(address(this)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        102
Source: 
>     }
>     function devFee(uint256 amount) public pure returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return SafeMath.div(SafeMath.mul(amount,5),100);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        111
Source: 
> 
>     function seedMarket(uint256 amount) public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	ocApp.transferFrom(msg.sender, address(this), amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        126
Source: 
>     }
>     function getEggsSinceLastHatch(address adr) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 secondsPassed=min(EGGS_TO_HATCH_1MINERS,SafeMath.sub(now,lastHatch[adr]));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        134
Source: 
> 	}	
> 	function updateBuyPrice(uint256 eth) public view returns(uint256, uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 calculateEggBuySimpleVal = calculateEggBuySimple(eth);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        138
Source: 
> 	}
> 	function getBalances(address adr) public view returns(uint256, uint256, uint256,uint256,uint256,uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ( 0, ocApp.balanceOf(address(adr)), 0, 0, 0, ocApp.allowance(address(adr), address(this)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        131
Source: 
> 	
> 	function getData(address adr) public view returns(uint256, uint256, uint256,uint256,uint256,uint256 ) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ( getBalance(), getMyMiners(), lastHatch[adr], getMyEggs(), calculateEggSellNew(),devFeeNew());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        156
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     assert(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        62
Source: 
>         marketEggs=SafeMath.add(marketEggs,hasEggs);
>         ocApp.transfer(ceoAddress, fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(ceoAddress2, fee-fee2);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        63
Source: 
>         ocApp.transfer(ceoAddress, fee2);
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(msg.sender, SafeMath.sub(eggValue,fee));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        64
Source: 
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ocApp.transfer(msg.sender, SafeMath.sub(eggValue,fee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        70
Source: 
> 		
> 		ocApp.transferFrom(msg.sender, address(this), _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = ocApp.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        71
Source: 
> 		ocApp.transferFrom(msg.sender, address(this), _amount);
>         uint256 balance = ocApp.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 eggsBought=calculateEggBuy(_amount,SafeMath.sub(balance,_amount));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        76
Source: 
>         uint256 fee2=fee/2;
>         ocApp.transfer(ceoAddress, fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(ceoAddress2, fee-fee2);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        77
Source: 
>         ocApp.transfer(ceoAddress, fee2);
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        112
Source: 
>     function seedMarket(uint256 amount) public payable{
> 	ocApp.transferFrom(msg.sender, address(this), amount);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(marketEggs==0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        8
Source: 
> 
> contract ETH_HEX_HEX{
> ^^^^^^^^^^^^^^^^^^^^^
>     //uint256 EGGS_PER_MINERS_PER_SECOND=1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        10
Source: 
>     //uint256 EGGS_PER_MINERS_PER_SECOND=1;
>     uint256 public EGGS_TO_HATCH_1MINERS=2592000;//for final version should be seconds in a day
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 PSN=10000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        11
Source: 
>     uint256 public EGGS_TO_HATCH_1MINERS=2592000;//for final version should be seconds in a day
>     uint256 PSN=10000;
>     ^^^^^^^^^^^^^^^^^
>     uint256 PSNH=5000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        12
Source: 
>     uint256 PSN=10000;
>     uint256 PSNH=5000;
>     ^^^^^^^^^^^^^^^^^
>     bool public initialized=false;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> // SPDX-License-Identifier: Unlicensed

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        11
Source: 
>     uint256 public EGGS_TO_HATCH_1MINERS=2592000;//for final version should be seconds in a day
>     uint256 PSN=10000;
>     ^^^^^^^^^^^^^^^^^
>     uint256 PSNH=5000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        12
Source: 
>     uint256 PSN=10000;
>     uint256 PSNH=5000;
>     ^^^^^^^^^^^^^^^^^
>     bool public initialized=false;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        22
Source: 
> 	
> 	IOC ocApp;
>  ^^^^^^^^^
> 	

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        115
Source: 
>         initialized=true;
>         marketEggs=259200000000; // TBA
>                    ^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        88
Source: 
>     function calculateEggSell(uint256 eggs) public view returns(uint256){
>         return calculateTrade(eggs,marketEggs,ocApp.balanceOf(address(this)));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        71
Source: 
> 		ocApp.transferFrom(msg.sender, address(this), _amount);
>         uint256 balance = ocApp.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 eggsBought=calculateEggBuy(_amount,SafeMath.sub(balance,_amount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        92
Source: 
> 		uint256 eggs = SafeMath.add(claimedEggs[msg.sender],getEggsSinceLastHatch(msg.sender));
> 		return calculateTrade(eggs,marketEggs,ocApp.balanceOf(address(this)));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        100
Source: 
>     function calculateEggBuySimple(uint256 eth) public view returns(uint256){
>         return calculateEggBuy(eth,ocApp.balanceOf(address(this)));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        62
Source: 
>         marketEggs=SafeMath.add(marketEggs,hasEggs);
>         ocApp.transfer(ceoAddress, fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(ceoAddress2, fee-fee2);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        63
Source: 
>         ocApp.transfer(ceoAddress, fee2);
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(msg.sender, SafeMath.sub(eggValue,fee));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        64
Source: 
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ocApp.transfer(msg.sender, SafeMath.sub(eggValue,fee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        70
Source: 
> 		
> 		ocApp.transferFrom(msg.sender, address(this), _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = ocApp.balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        76
Source: 
>         uint256 fee2=fee/2;
>         ocApp.transfer(ceoAddress, fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(ceoAddress2, fee-fee2);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        77
Source: 
>         ocApp.transfer(ceoAddress, fee2);
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        112
Source: 
>     function seedMarket(uint256 amount) public payable{
> 	ocApp.transferFrom(msg.sender, address(this), amount);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(marketEggs==0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        118
Source: 
>     function getBalance() public view returns(uint256){
>         return ocApp.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        139
Source: 
> 	function getBalances(address adr) public view returns(uint256, uint256, uint256,uint256,uint256,uint256) {
> 		return ( 0, ocApp.balanceOf(address(adr)), 0, 0, 0, ocApp.allowance(address(adr), address(this)));
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        139
Source: 
> 	function getBalances(address adr) public view returns(uint256, uint256, uint256,uint256,uint256,uint256) {
> 		return ( 0, ocApp.balanceOf(address(adr)), 0, 0, 0, ocApp.allowance(address(adr), address(this)));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        20
Source: 
>     mapping (address => address) public referrals;
>     uint256 public marketEggs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        51
Source: 
>         //boost market to nerf miners hoarding
>         marketEggs=SafeMath.add(marketEggs,SafeMath.div(eggsUsed,5));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        61
Source: 
>         lastHatch[msg.sender]=now;
>         marketEggs=SafeMath.add(marketEggs,hasEggs);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(ceoAddress, fee2);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        114
Source: 
>         require(marketEggs==0);
>         initialized=true;
>         ^^^^^^^^^^^^^^^^
>         marketEggs=259200000000; // TBA

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_HEX_HEX
Line:        115
Source: 
>         initialized=true;
>         marketEggs=259200000000; // TBA
>         ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        62
Source: 
>         marketEggs=SafeMath.add(marketEggs,hasEggs);
>         ocApp.transfer(ceoAddress, fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(ceoAddress2, fee-fee2);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        63
Source: 
>         ocApp.transfer(ceoAddress, fee2);
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(msg.sender, SafeMath.sub(eggValue,fee));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        64
Source: 
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ocApp.transfer(msg.sender, SafeMath.sub(eggValue,fee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        70
Source: 
> 		
> 		ocApp.transferFrom(msg.sender, address(this), _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = ocApp.balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        76
Source: 
>         uint256 fee2=fee/2;
>         ocApp.transfer(ceoAddress, fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ocApp.transfer(ceoAddress2, fee-fee2);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        77
Source: 
>         ocApp.transfer(ceoAddress, fee2);
>         ocApp.transfer(ceoAddress2, fee-fee2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimedEggs[msg.sender]=SafeMath.add(claimedEggs[msg.sender],eggsBought);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETH_HEX_HEX
Line:        112
Source: 
>     function seedMarket(uint256 amount) public payable{
> 	ocApp.transferFrom(msg.sender, address(this), amount);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(marketEggs==0);

[0m
