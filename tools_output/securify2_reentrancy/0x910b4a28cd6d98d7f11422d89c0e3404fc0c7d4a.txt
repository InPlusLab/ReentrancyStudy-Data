Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        33
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>            ^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        33
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>                      ^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        158
Source: 
>     //invest function
>     function regUser()public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _id=userList.length+1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        184
Source: 
>     
>     function ReInvest()public  payable reinvest returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             invest();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        190
Source: 
>     //recommend function
>     function recommend(uint256 _refference)public payable  onlyAmount  onlyFirst(_refference) firstExist
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     returns(bool){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        210
Source: 
>     // Add_daily_Income function
>     function Add_daily_Income()public firstExist  returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 d;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        280
Source: 
>     //withDrawl function
>     function withDrawl(uint256 _value)public payable firstExist returns(string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable r=msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        332
Source: 
>     //Owner functions
>        function changeOwnership(address payable newOwner)public onlyOwner returns(bool){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner=newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        336
Source: 
>     }    
>     function deleteParticipent()public onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        340
Source: 
>     }
>     function tree(address wallet)public view returns(address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user memory obj=users[wallet];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Generation
Line:        344
Source: 
>     }
>     function chnagePart(address payable _newAddress,address _oldAddress)public onlyOwner returns(string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(creator1==_oldAddress){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Generation
Line:        332
Source: 
>     //Owner functions
>        function changeOwnership(address payable newOwner)public onlyOwner returns(bool){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner=newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Generation
Line:        344
Source: 
>     }
>     function chnagePart(address payable _newAddress,address _oldAddress)public onlyOwner returns(string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(creator1==_oldAddress){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Generation
Line:        340
Source: 
>     }
>     function tree(address wallet)public view returns(address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user memory obj=users[wallet];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        32
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     uint256 c = a * b;
>                 ^^^^^
>     assert(a == 0 || c / a == b);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Generation
Line:        294
Source: 
>                      h=h.sub(a);
>                       r.transfer(h);
>                       ^^^^^^^^^^^^^
>                   users[msg.sender].earning=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Generation
Line:        72
Source: 
>         //struct for user    
>         struct user
>         ^^^^^^^^^^^
>         {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Generation
Line:        159
Source: 
>     function regUser()public returns(bool){
>         uint256 _id=userList.length+1;
>         ^^^^^^^^^^^
>         require(users[msg.sender].isExist==false);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Generation
Line:        184
Source: 
>     
>     function ReInvest()public  payable reinvest returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             invest();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Generation
Line:        210
Source: 
>     // Add_daily_Income function
>     function Add_daily_Income()public firstExist  returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 d;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        62
Source: 
>         // for partners to share commission
>         address payable creator1;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable creator2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        63
Source: 
>         address payable creator1;
>         address payable creator2;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable creator3;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        64
Source: 
>         address payable creator2;
>         address payable creator3;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable creator4;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        65
Source: 
>         address payable creator3;
>         address payable creator4;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        69
Source: 
>             using SafeMath for uint256;
>                 uint256 commission;
>                 ^^^^^^^^^^^^^^^^^^
>                 string public session;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        90
Source: 
>     }
>     user[] userList;          //List of all users
>     ^^^^^^^^^^^^^^^
>     //mappings

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        124
Source: 
>     modifier onlyAmount(){
>             bool u=false;
>             ^^^^^^
>             if(users[msg.sender].visit==0){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        137
Source: 
>     }
>     modifier onlyFirst(uint256 _refference){ //for Recommend functions
>                        ^^^^^^^^^^^^^^^^^^^
>     address a=userAddress[_refference];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        138
Source: 
>     modifier onlyFirst(uint256 _refference){ //for Recommend functions
>     address a=userAddress[_refference];
>     ^^^^^^^^^
>         require(users[a].isExist==true); //to check reference should exist before 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Generation
Line:        151
Source: 
>     modifier reinvest(){
>             user memory obj=users[msg.sender];
>             ^^^^^^^^^^^^^^^
>         require(obj.visit>0,"visit should be above 0");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Generation
Line:        325
Source: 
>         uint256 p=_value.div(4);
>         creator1.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator2.transfer(p);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Generation
Line:        326
Source: 
>         creator1.transfer(p);
>         creator2.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator3.transfer(p);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Generation
Line:        327
Source: 
>         creator2.transfer(p);
>         creator3.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator4.transfer(p);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Generation
Line:        328
Source: 
>         creator3.transfer(p);
>         creator4.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Generation
Line:        294
Source: 
>                      h=h.sub(a);
>                       r.transfer(h);
>                       ^^^^^^^^^^^^^
>                   users[msg.sender].earning=0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Generation
Line:        304
Source: 
>                         users[msg.sender].earning=obj.earning.sub(_value);
>                         r.transfer(_value);   
>                         ^^^^^^^^^^^^^^^^^^
>                         return "you have succesfully WithDrawl your money";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Generation
Line:        337
Source: 
>     function deleteParticipent()public onlyOwner returns (bool){
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Generation
Line:        325
Source: 
>         uint256 p=_value.div(4);
>         creator1.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator2.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Generation
Line:        326
Source: 
>         creator1.transfer(p);
>         creator2.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator3.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Generation
Line:        327
Source: 
>         creator2.transfer(p);
>         creator3.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator4.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Generation
Line:        328
Source: 
>         creator3.transfer(p);
>         creator4.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Generation
Line:        337
Source: 
>     function deleteParticipent()public onlyOwner returns (bool){
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Generation
Line:        325
Source: 
>         uint256 p=_value.div(4);
>         creator1.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator2.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Generation
Line:        326
Source: 
>         creator1.transfer(p);
>         creator2.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator3.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Generation
Line:        327
Source: 
>         creator2.transfer(p);
>         creator3.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator4.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Generation
Line:        328
Source: 
>         creator3.transfer(p);
>         creator4.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Generation
Line:        294
Source: 
>                      h=h.sub(a);
>                       r.transfer(h);
>                       ^^^^^^^^^^^^^
>                   users[msg.sender].earning=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Generation
Line:        304
Source: 
>                         users[msg.sender].earning=obj.earning.sub(_value);
>                         r.transfer(_value);   
>                         ^^^^^^^^^^^^^^^^^^
>                         return "you have succesfully WithDrawl your money";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Generation
Line:        337
Source: 
>     function deleteParticipent()public onlyOwner returns (bool){
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Generation
Line:        69
Source: 
>             using SafeMath for uint256;
>                 uint256 commission;
>                 ^^^^^^^^^^^^^^^^^^
>                 string public session;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Generation
Line:        70
Source: 
>                 uint256 commission;
>                 string public session;
>                 ^^^^^^^^^^^^^^^^^^^^^
>         //struct for user    

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Generation
Line:        266
Source: 
>                  if(obj2.expirePeriod==false){
>                  users[add1].earning+=_f;
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>                  users[add1].total_Amount+=_f;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Generation
Line:        267
Source: 
>                  users[add1].earning+=_f;
>                  users[add1].total_Amount+=_f;
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  users[add1].ref_Income+=_f;}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Generation
Line:        268
Source: 
>                  users[add1].total_Amount+=_f;
>                  users[add1].ref_Income+=_f;}
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                  if(obj2.level<_depth){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Generation
Line:        270
Source: 
>                  if(obj2.level<_depth){
>                  users[add1].level=_depth;
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
>                  }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Generation
Line:        70
Source: 
>                 uint256 commission;
>                 string public session;
>                 ^^^^^^^^^^^^^^^^^^^^^
>         //struct for user    

[0m
