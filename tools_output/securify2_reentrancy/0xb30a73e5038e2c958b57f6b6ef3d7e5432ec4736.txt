Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        92
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        97
Source: 
>         uint c = a * b;
>         require(c / a == b, "mul: *");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        233
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        233
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        252
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        261
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        322
Source: 
> 
>     function stake(uint256 _amount, uint256 _days) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_days > minDays, "less than minimum staking period");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        347
Source: 
> 
>     function claim() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(owedBalance(msg.sender) > 0, "nothing to claim");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        390
Source: 
>     // owner functions:
>     function setLimits(uint256 _minDays, uint256 _maxDays) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minDays = _minDays;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        395
Source: 
> 
>     function setEarlyExit(uint256 _earlyExit) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_earlyExit < 1604334278, "too big");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        405
Source: 
> 
>     function ownerReclaim(uint256 _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount < ethys.balanceOf(address(this)).sub(totalOwedValue()), "cannot withdraw owed funds");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        410
Source: 
> 
>     function flushETH() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 bal = address(this).balance.sub(1);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        416
Source: 
>     // curve setter functions 
>     function transferCurveSetterRole(address _new) public onlyCurveSetter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingCurveSetter = _new;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        420
Source: 
> 
>     function acceptCurveSetterRole() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _pendingCurveSetter, "only new curve setter can accept this role");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        425
Source: 
> 
>     function renounceCurveSetterRole() public onlyCurveSetter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         curveSetter = address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingV2ETHYS
Line:        430
Source: 
> 
>     function setCurve(uint256 _A, uint256 _B, uint256 _C) public onlyCurveSetter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         A = _A;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        373
Source: 
>     // a + b*x + c*x^2
>     function _quadraticRewardCurveY(uint256 _x) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _bx = _x.mul(B);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        385
Source: 
> 
>     function owedBalance(address acc) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stakes[acc].initial.add(stakes[acc].reward);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        390
Source: 
>     // owner functions:
>     function setLimits(uint256 _minDays, uint256 _maxDays) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minDays = _minDays;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        401
Source: 
> 
>     function close(bool closed) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isClosed = closed;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        416
Source: 
>     // curve setter functions 
>     function transferCurveSetterRole(address _new) public onlyCurveSetter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingCurveSetter = _new;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        430
Source: 
> 
>     function setCurve(uint256 _A, uint256 _B, uint256 _C) public onlyCurveSetter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         A = _A;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        365
Source: 
> 
>     function calculateReward(uint256 _amount, uint256 _days) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _multiplier = _quadraticRewardCurveY(_days);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakingV2ETHYS
Line:        333
Source: 
>         // contract must have funds to keep this commitment
>         require(ethys.balanceOf(address(this)) > totalOwedValue().add(_reward).add(_amount), "insufficient contract bal");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakingV2ETHYS
Line:        335
Source: 
> 
>         require(ethys.transferFrom(msg.sender, address(this), _amount), "transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        285
Source: 
>     // a + b*x + c*x^2
>     uint256 public A = 187255; // 1.87255
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public B = 29854;  // 0.2985466*x

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        286
Source: 
>     uint256 public A = 187255; // 1.87255
>     uint256 public B = 29854;  // 0.2985466*x
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public C = 141;    // 0.001419838*x^2

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        287
Source: 
>     uint256 public B = 29854;  // 0.2985466*x
>     uint256 public C = 141;    // 0.001419838*x^2
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        307
Source: 
>     address public curveSetter;
>     address public _pendingCurveSetter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        330
Source: 
>         // calculate reward
>         uint256 _reward = calculateReward(_amount, _days);
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        366
Source: 
>     function calculateReward(uint256 _amount, uint256 _days) public view returns (uint256) {
>         uint256 _multiplier = _quadraticRewardCurveY(_days);
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 _AY = _amount.mul(_multiplier);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        367
Source: 
>         uint256 _multiplier = _quadraticRewardCurveY(_days);
>         uint256 _AY = _amount.mul(_multiplier);
>         ^^^^^^^^^^^
>         return _AY.div(10000000);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        373
Source: 
>     // a + b*x + c*x^2
>     function _quadraticRewardCurveY(uint256 _x) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _bx = _x.mul(B);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        374
Source: 
>     function _quadraticRewardCurveY(uint256 _x) public view returns (uint256) {
>         uint256 _bx = _x.mul(B);
>         ^^^^^^^^^^^
>         uint256 _x2 = _x.mul(_x);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        375
Source: 
>         uint256 _bx = _x.mul(B);
>         uint256 _x2 = _x.mul(_x);
>         ^^^^^^^^^^^
>         uint256 _cx2 = C.mul(_x2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        376
Source: 
>         uint256 _x2 = _x.mul(_x);
>         uint256 _cx2 = C.mul(_x2);
>         ^^^^^^^^^^^^
>         return A.add(_bx).add(_cx2);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        193
Source: 
> 
> pragma solidity ^0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StakingV2ETHYS
Line:        281
Source: 
> 
>     bool isClosed = false;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        368
Source: 
>         uint256 _AY = _amount.mul(_multiplier);
>         return _AY.div(10000000);
>                        ^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        412
Source: 
>         uint256 bal = address(this).balance.sub(1);
>         msg.sender.transfer(bal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        412
Source: 
>         uint256 bal = address(this).balance.sub(1);
>         msg.sender.transfer(bal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        333
Source: 
>         // contract must have funds to keep this commitment
>         require(ethys.balanceOf(address(this)) > totalOwedValue().add(_reward).add(_amount), "insufficient contract bal");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        335
Source: 
> 
>         require(ethys.transferFrom(msg.sender, address(this), _amount), "transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        362
Source: 
> 
>         require(ethys.transfer(msg.sender, owed), "transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        406
Source: 
>     function ownerReclaim(uint256 _amount) public onlyOwner {
>         require(_amount < ethys.balanceOf(address(this)).sub(totalOwedValue()), "cannot withdraw owed funds");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ethys.transfer(msg.sender, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        407
Source: 
>         require(_amount < ethys.balanceOf(address(this)).sub(totalOwedValue()), "cannot withdraw owed funds");
>         ethys.transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        307
Source: 
>     address public curveSetter;
>     address public _pendingCurveSetter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        354
Source: 
>         // update stats
>         totalStaked = totalStaked.sub(stakes[msg.sender].initial);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalRewards = totalRewards.sub(stakes[msg.sender].reward);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        355
Source: 
>         totalStaked = totalStaked.sub(stakes[msg.sender].initial);
>         totalRewards = totalRewards.sub(stakes[msg.sender].reward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        357
Source: 
> 
>         stakes[msg.sender].initial = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakes[msg.sender].reward = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        358
Source: 
>         stakes[msg.sender].initial = 0;
>         stakes[msg.sender].reward = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakes[msg.sender].payday = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        359
Source: 
>         stakes[msg.sender].reward = 0;
>         stakes[msg.sender].payday = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakes[msg.sender].startday = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingV2ETHYS
Line:        360
Source: 
>         stakes[msg.sender].payday = 0;
>         stakes[msg.sender].startday = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StakingV2ETHYS
Line:        407
Source: 
>         require(_amount < ethys.balanceOf(address(this)).sub(totalOwedValue()), "cannot withdraw owed funds");
>         ethys.transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    StakingV2ETHYS
Line:        337
Source: 
> 
>         stakes[msg.sender].payday = block.timestamp.add(_days * (1 days));
>                                     ^^^^^^^^^^^^^^^
>         stakes[msg.sender].reward = _reward;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    StakingV2ETHYS
Line:        349
Source: 
>         require(owedBalance(msg.sender) > 0, "nothing to claim");
>         require(block.timestamp > stakes[msg.sender].payday.sub(earlyExit), "too early");
>                 ^^^^^^^^^^^^^^^
> 

[0m
