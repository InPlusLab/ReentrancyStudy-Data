Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CurveOracle
Line:        318
Source: 
>     require(pool == address(0), 'lp is already registered');
>     pool = registry.get_pool_from_lp_token(lp);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(pool != address(0), 'no corresponding pool for lp token');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CurveOracle
Line:        321
Source: 
>     poolOf[lp] = pool;
>     (uint n, ) = registry.get_n_coins(pool);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address[8] memory tokens = registry.get_coins(pool);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CurveOracle
Line:        322
Source: 
>     (uint n, ) = registry.get_n_coins(pool);
>     address[8] memory tokens = registry.get_coins(pool);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i < n; i++) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CurveOracle
Line:        347
Source: 
>     // use min underlying token prices
>     return minPx.mul(ICurvePool(pool).get_virtual_price()).div(1e18);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CurveOracle
Line:        325
Source: 
>       ulTokens[lp].push(
>         UnderlyingToken({token: tokens[i], decimals: IERC20Decimal(tokens[i]).decimals()})
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       );

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CurveOracle
Line:        340
Source: 
>       UnderlyingToken memory ulToken = tokens[idx];
>       uint tokenPx = base.getETHPx(ulToken.token);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if (ulToken.decimals < 18) tokenPx = tokenPx.div(10**(18 - uint(ulToken.decimals)));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        186
Source: 
>         if (a == 0) return 0;
>         uint256 c = a * b;
>                      ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CurveOracle
Line:        318
Source: 
>     require(pool == address(0), 'lp is already registered');
>     pool = registry.get_pool_from_lp_token(lp);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(pool != address(0), 'no corresponding pool for lp token');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CurveOracle
Line:        321
Source: 
>     poolOf[lp] = pool;
>     (uint n, ) = registry.get_n_coins(pool);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address[8] memory tokens = registry.get_coins(pool);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CurveOracle
Line:        322
Source: 
>     (uint n, ) = registry.get_n_coins(pool);
>     address[8] memory tokens = registry.get_coins(pool);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i < n; i++) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CurveOracle
Line:        325
Source: 
>       ulTokens[lp].push(
>         UnderlyingToken({token: tokens[i], decimals: IERC20Decimal(tokens[i]).decimals()})
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        22
Source: 
> interface ICurvePool {
>   function add_liquidity(uint[2] calldata, uint) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        24
Source: 
> 
>   function add_liquidity(uint[3] calldata, uint) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        26
Source: 
> 
>   function add_liquidity(uint[4] calldata, uint) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        28
Source: 
> 
>   function remove_liquidity(uint, uint[2] calldata) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        30
Source: 
> 
>   function remove_liquidity(uint, uint[3] calldata) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        32
Source: 
> 
>   function remove_liquidity(uint, uint[4] calldata) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        34
Source: 
> 
>   function remove_liquidity_imbalance(uint[2] calldata, uint) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        36
Source: 
> 
>   function remove_liquidity_imbalance(uint[3] calldata, uint) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        38
Source: 
> 
>   function remove_liquidity_imbalance(uint[4] calldata, uint) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        40
Source: 
> 
>   function remove_liquidity_one_coin(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        46
Source: 
> 
>   function get_virtual_price() external view returns (uint);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurveRegistry
Line:        52
Source: 
> interface ICurveRegistry {
>   function get_n_coins(address lp) external view returns (uint, uint);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurveRegistry
Line:        54
Source: 
> 
>   function pool_list(uint id) external view returns (address);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurveRegistry
Line:        56
Source: 
> 
>   function get_coins(address pool) external view returns (address[8] memory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurveRegistry
Line:        58
Source: 
> 
>   function get_gauges(address pool) external view returns (address[10] memory, uint128[10] memory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurveRegistry
Line:        60
Source: 
> 
>   function get_lp_token(address pool) external view returns (address);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurveRegistry
Line:        62
Source: 
> 
>   function get_pool_from_lp_token(address lp) external view returns (address);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CurveOracle
Line:        321
Source: 
>     poolOf[lp] = pool;
>     (uint n, ) = registry.get_n_coins(pool);
>       ^^^^^^
>     address[8] memory tokens = registry.get_coins(pool);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CurveOracle
Line:        318
Source: 
>     require(pool == address(0), 'lp is already registered');
>     pool = registry.get_pool_from_lp_token(lp);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(pool != address(0), 'no corresponding pool for lp token');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CurveOracle
Line:        321
Source: 
>     poolOf[lp] = pool;
>     (uint n, ) = registry.get_n_coins(pool);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address[8] memory tokens = registry.get_coins(pool);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CurveOracle
Line:        340
Source: 
>       UnderlyingToken memory ulToken = tokens[idx];
>       uint tokenPx = base.getETHPx(ulToken.token);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if (ulToken.decimals < 18) tokenPx = tokenPx.div(10**(18 - uint(ulToken.decimals)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CurveOracle
Line:        347
Source: 
>     // use min underlying token prices
>     return minPx.mul(ICurvePool(pool).get_virtual_price()).div(1e18);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CurveOracle
Line:        322
Source: 
>     (uint n, ) = registry.get_n_coins(pool);
>     address[8] memory tokens = registry.get_coins(pool);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i < n; i++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CurveOracle
Line:        325
Source: 
>       ulTokens[lp].push(
>         UnderlyingToken({token: tokens[i], decimals: IERC20Decimal(tokens[i]).decimals()})
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       );

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CurveOracle
Line:        320
Source: 
>     require(pool != address(0), 'no corresponding pool for lp token');
>     poolOf[lp] = pool;
>      ^^^^^^^^^^^^^^^^^
>     (uint n, ) = registry.get_n_coins(pool);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CurveOracle
Line:        324
Source: 
>     for (uint i = 0; i < n; i++) {
>       ulTokens[lp].push(
>        ^^^^^^^^^^^^^^^^^
>         UnderlyingToken({token: tokens[i], decimals: IERC20Decimal(tokens[i]).decimals()})

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CurveOracle
Line:        325
Source: 
>       ulTokens[lp].push(
>         UnderlyingToken({token: tokens[i], decimals: IERC20Decimal(tokens[i]).decimals()})
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       );

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UsingBaseOracle
Line:        287
Source: 
> contract UsingBaseOracle {
>   IBaseOracle public immutable base; // Base oracle source
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
