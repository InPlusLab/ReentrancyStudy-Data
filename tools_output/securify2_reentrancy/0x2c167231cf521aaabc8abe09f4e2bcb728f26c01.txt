Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        77
Source: 
> 
>     function getInitialized() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return initialized;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ProfitLoss
Line:        779
Source: 
> 
>     function initialize(IAugur _augur, IAugurTrading _augurTrading) public beforeInitialized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ProfitLoss
Line:        861
Source: 
> 
>     function recordClaim(IMarket _market, address _account, uint256[] memory _outcomeFees) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(augurTrading));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        781
Source: 
>         endInitialization();
>         shareToken = _augur.lookup("ShareToken");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        786
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        787
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        788
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         orders = IOrders(_augurTrading.lookup("Orders"));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        789
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         orders = IOrders(_augurTrading.lookup("Orders"));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        800
Source: 
>         _outcomeData.frozenFunds += _frozenFundDelta.mul(10**18);
>         augurTrading.logProfitLossChanged(_market, _account, _outcome, _outcomeData.netPosition, uint256(_outcomeData.avgPrice), _outcomeData.realizedProfit, _outcomeData.frozenFunds,  _outcomeData.realizedCost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        812
Source: 
>         require(msg.sender == fillOrder);
>         int256 _numTicks = int256(_market.getNumTicks()).mul(10**18);
>                                   ^^^^^^^^^^^^^^^^^^^^^
>         _price = _price.mul(10**18);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        857
Source: 
>         _outcomeData.netPosition = _newNetPosition;
>         augurTrading.logProfitLossChanged(_market, _address, _outcome, _outcomeData.netPosition, uint256(_tmpOutcomeData.avgPrice), _tmpOutcomeData.realizedProfit, _tmpOutcomeData.frozenFunds,  _tmpOutcomeData.realizedCost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        863
Source: 
>         require(msg.sender == address(augurTrading));
>         uint256 _numOutcomes = _market.getNumberOfOutcomes();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IUniverse _universe = _market.getUniverse();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitLoss
Line:        864
Source: 
>         uint256 _numOutcomes = _market.getNumberOfOutcomes();
>         IUniverse _universe = _market.getUniverse();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 _outcome = 0; _outcome < _numOutcomes; _outcome++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ProfitLoss
Line:        870
Source: 
>             }
>             int256 _salePrice = int256(_market.getWinningPayoutNumerator(_outcome).mul(10**18));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             int256 _amount = _outcomeData.netPosition.abs();

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ProfitLoss
Line:        874
Source: 
>             _outcomeData.realizedProfit -= int256(_outcomeFees[_outcome]);
>             _outcomeData.realizedCost += (_outcomeData.netPosition < 0 ? int256(_market.getNumTicks()).sub(_outcomeData.avgPrice) : _outcomeData.avgPrice).mul(_amount);
>                                                                                 ^^^^^^^^^^^^^^^^^^^^^
>             _outcomeData.avgPrice = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ProfitLoss
Line:        878
Source: 
>             _outcomeData.netPosition = 0;
>             augurTrading.logProfitLossChanged(_market, _account, _outcome, 0, 0, _outcomeData.realizedProfit, 0, _outcomeData.realizedCost);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        779
Source: 
> 
>     function initialize(IAugur _augur, IAugurTrading _augurTrading) public beforeInitialized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        796
Source: 
> 
>     function recordFrozenFundChange(IUniverse _universe, IMarket _market, address _account, uint256 _outcome, int256 _frozenFundDelta) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == createOrder || msg.sender == cancelOrder || msg.sender == address(orders) || msg.sender == fillOrder);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        804
Source: 
> 
>     function adjustTraderProfitForFees(IMarket _market, address _trader, uint256 _outcome, uint256 _fees) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == fillOrder);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        810
Source: 
> 
>     function recordTrade(IUniverse _universe, IMarket _market, address _longAddress, address _shortAddress, uint256 _outcome, int256 _amount, int256 _price, uint256 _numLongTokens, uint256 _numShortTokens, uint256 _numLongShares, uint256 _numShortShares) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == fillOrder);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        861
Source: 
> 
>     function recordClaim(IMarket _market, address _account, uint256[] memory _outcomeFees) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(augurTrading));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        883
Source: 
> 
>     function getNetPosition(address _market, address _account, uint256 _outcome) external view returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return profitLossData[_account][_market][_outcome].netPosition;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        887
Source: 
> 
>     function getAvgPrice(address _market, address _account, uint256 _outcome) external view returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return profitLossData[_account][_market][_outcome].avgPrice;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        891
Source: 
> 
>     function getRealizedProfit(address _market, address _account, uint256 _outcome) external view returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return profitLossData[_account][_market][_outcome].realizedProfit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        895
Source: 
> 
>     function getFrozenFunds(address _market, address _account, uint256 _outcome) external view returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return profitLossData[_account][_market][_outcome].frozenFunds;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitLoss
Line:        899
Source: 
> 
>     function getRealizedCost(address _market, address _account, uint256 _outcome) external view returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return profitLossData[_account][_market][_outcome].realizedCost;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ProfitLoss
Line:        781
Source: 
>         endInitialization();
>         shareToken = _augur.lookup("ShareToken");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ProfitLoss
Line:        786
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ProfitLoss
Line:        787
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ProfitLoss
Line:        788
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         orders = IOrders(_augurTrading.lookup("Orders"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ProfitLoss
Line:        789
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         orders = IOrders(_augurTrading.lookup("Orders"));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ProfitLoss
Line:        786
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ProfitLoss
Line:        787
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ProfitLoss
Line:        788
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         orders = IOrders(_augurTrading.lookup("Orders"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    ProfitLoss
Line:        789
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         orders = IOrders(_augurTrading.lookup("Orders"));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        642
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        669
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             ^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        690
Source: 
>         getOrderId(_orderData, _orders);
>         uint256[] memory _uints = new uint256[](5);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         _uints[0] = _orderData.amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        696
Source: 
>         _uints[4] = _orderData.sharesEscrowed;
>         bytes32[] memory _bytes32s = new bytes32[](4);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bytes32s[0] = _orderData.betterOrderId;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        720
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        721
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        738
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        798
Source: 
>         require(msg.sender == createOrder || msg.sender == cancelOrder || msg.sender == address(orders) || msg.sender == fillOrder);
>         OutcomeData storage _outcomeData = profitLossData[_account][address(_market)][_outcome];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _outcomeData.frozenFunds += _frozenFundDelta.mul(10**18);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        812
Source: 
>         require(msg.sender == fillOrder);
>         int256 _numTicks = int256(_market.getNumTicks()).mul(10**18);
>         ^^^^^^^^^^^^^^^^
>         _price = _price.mul(10**18);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        815
Source: 
>         {
>             int256  _shortFrozenTokenDelta = int256(_numShortTokens * 10**18).sub(int256(_numShortShares).mul(_price));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             adjustForTrader(_universe, _market, _numTicks, _shortAddress, _outcome, -_amount, _price, _shortFrozenTokenDelta);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        818
Source: 
>         }
>         int256  _longFrozenTokenDelta = int256(_numLongTokens * 10**18).sub(int256(_numLongShares).mul(_numTicks.sub(_price)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         adjustForTrader(_universe, _market, _numTicks, _longAddress, _outcome, _amount, _price, _longFrozenTokenDelta);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        824
Source: 
>     function adjustForTrader(IUniverse _universe, IMarket _market, int256 _adjustedNumTicks, address _address, uint256 _outcome, int256 _amount, int256 _price, int256 _frozenTokenDelta) internal returns (bool) {
>         OutcomeData storage _outcomeData = profitLossData[_address][address(_market)][_outcome];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         OutcomeData memory _tmpOutcomeData = profitLossData[_address][address(_market)][_outcome];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        825
Source: 
>         OutcomeData storage _outcomeData = profitLossData[_address][address(_market)][_outcome];
>         OutcomeData memory _tmpOutcomeData = profitLossData[_address][address(_market)][_outcome];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        827
Source: 
> 
>         bool _sold = _tmpOutcomeData.netPosition < 0 &&  _amount > 0 || _tmpOutcomeData.netPosition > 0 &&  _amount < 0;
>         ^^^^^^^^^^
>         if (_tmpOutcomeData.netPosition != 0 && _sold) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        829
Source: 
>         if (_tmpOutcomeData.netPosition != 0 && _sold) {
>             int256 _amountSold = _tmpOutcomeData.netPosition.abs().min(_amount.abs());
>             ^^^^^^^^^^^^^^^^^^
>             int256 _profit = (_tmpOutcomeData.netPosition < 0 ? _tmpOutcomeData.avgPrice.sub(_price) : _price.sub(_tmpOutcomeData.avgPrice)).mul(_amountSold);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        830
Source: 
>             int256 _amountSold = _tmpOutcomeData.netPosition.abs().min(_amount.abs());
>             int256 _profit = (_tmpOutcomeData.netPosition < 0 ? _tmpOutcomeData.avgPrice.sub(_price) : _price.sub(_tmpOutcomeData.avgPrice)).mul(_amountSold);
>             ^^^^^^^^^^^^^^
>             _tmpOutcomeData.realizedProfit += _profit;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        843
Source: 
> 
>         int256 _newNetPosition = _tmpOutcomeData.netPosition.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         bool _reversed = _tmpOutcomeData.netPosition < 0 && _newNetPosition > 0 || _tmpOutcomeData.netPosition > 0 && _newNetPosition < 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        844
Source: 
>         int256 _newNetPosition = _tmpOutcomeData.netPosition.add(_amount);
>         bool _reversed = _tmpOutcomeData.netPosition < 0 && _newNetPosition > 0 || _tmpOutcomeData.netPosition > 0 && _newNetPosition < 0;
>         ^^^^^^^^^^^^^^
>         if (_newNetPosition == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        863
Source: 
>         require(msg.sender == address(augurTrading));
>         uint256 _numOutcomes = _market.getNumberOfOutcomes();
>         ^^^^^^^^^^^^^^^^^^^^
>         IUniverse _universe = _market.getUniverse();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        864
Source: 
>         uint256 _numOutcomes = _market.getNumberOfOutcomes();
>         IUniverse _universe = _market.getUniverse();
>         ^^^^^^^^^^^^^^^^^^^
>         for (uint256 _outcome = 0; _outcome < _numOutcomes; _outcome++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        865
Source: 
>         IUniverse _universe = _market.getUniverse();
>         for (uint256 _outcome = 0; _outcome < _numOutcomes; _outcome++) {
>              ^^^^^^^^^^^^^^^^
>             OutcomeData storage _outcomeData = profitLossData[_account][address(_market)][_outcome];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        866
Source: 
>         for (uint256 _outcome = 0; _outcome < _numOutcomes; _outcome++) {
>             OutcomeData storage _outcomeData = profitLossData[_account][address(_market)][_outcome];
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_outcomeData.netPosition == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        870
Source: 
>             }
>             int256 _salePrice = int256(_market.getWinningPayoutNumerator(_outcome).mul(10**18));
>             ^^^^^^^^^^^^^^^^^
>             int256 _amount = _outcomeData.netPosition.abs();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProfitLoss
Line:        871
Source: 
>             int256 _salePrice = int256(_market.getWinningPayoutNumerator(_outcome).mul(10**18));
>             int256 _amount = _outcomeData.netPosition.abs();
>             ^^^^^^^^^^^^^^
>             _outcomeData.realizedProfit += (_outcomeData.netPosition < 0 ? _outcomeData.avgPrice.sub(_salePrice) : _salePrice.sub(_outcomeData.avgPrice)).mul(_amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        781
Source: 
>         endInitialization();
>         shareToken = _augur.lookup("ShareToken");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        786
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        787
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        788
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         orders = IOrders(_augurTrading.lookup("Orders"));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        789
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         orders = IOrders(_augurTrading.lookup("Orders"));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        812
Source: 
>         require(msg.sender == fillOrder);
>         int256 _numTicks = int256(_market.getNumTicks()).mul(10**18);
>                                   ^^^^^^^^^^^^^^^^^^^^^
>         _price = _price.mul(10**18);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        863
Source: 
>         require(msg.sender == address(augurTrading));
>         uint256 _numOutcomes = _market.getNumberOfOutcomes();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IUniverse _universe = _market.getUniverse();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        870
Source: 
>             }
>             int256 _salePrice = int256(_market.getWinningPayoutNumerator(_outcome).mul(10**18));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             int256 _amount = _outcomeData.netPosition.abs();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ProfitLoss
Line:        874
Source: 
>             _outcomeData.realizedProfit -= int256(_outcomeFees[_outcome]);
>             _outcomeData.realizedCost += (_outcomeData.netPosition < 0 ? int256(_market.getNumTicks()).sub(_outcomeData.avgPrice) : _outcomeData.avgPrice).mul(_amount);
>                                                                                 ^^^^^^^^^^^^^^^^^^^^^
>             _outcomeData.avgPrice = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ProfitLoss
Line:        800
Source: 
>         _outcomeData.frozenFunds += _frozenFundDelta.mul(10**18);
>         augurTrading.logProfitLossChanged(_market, _account, _outcome, _outcomeData.netPosition, uint256(_outcomeData.avgPrice), _outcomeData.realizedProfit, _outcomeData.frozenFunds,  _outcomeData.realizedCost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ProfitLoss
Line:        857
Source: 
>         _outcomeData.netPosition = _newNetPosition;
>         augurTrading.logProfitLossChanged(_market, _address, _outcome, _outcomeData.netPosition, uint256(_tmpOutcomeData.avgPrice), _tmpOutcomeData.realizedProfit, _tmpOutcomeData.frozenFunds,  _tmpOutcomeData.realizedCost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ProfitLoss
Line:        864
Source: 
>         uint256 _numOutcomes = _market.getNumberOfOutcomes();
>         IUniverse _universe = _market.getUniverse();
>                               ^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 _outcome = 0; _outcome < _numOutcomes; _outcome++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ProfitLoss
Line:        878
Source: 
>             _outcomeData.netPosition = 0;
>             augurTrading.logProfitLossChanged(_market, _account, _outcome, 0, 0, _outcomeData.realizedProfit, 0, _outcomeData.realizedCost);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitLoss
Line:        760
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     IAugurTrading public augurTrading;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitLoss
Line:        761
Source: 
>     IAugur public augur;
>     IAugurTrading public augurTrading;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IOrders public orders;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitLoss
Line:        762
Source: 
>     IAugurTrading public augurTrading;
>     IOrders public orders;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address public shareToken;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitLoss
Line:        763
Source: 
>     IOrders public orders;
>     address public shareToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public createOrder;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitLoss
Line:        764
Source: 
>     address public shareToken;
>     address public createOrder;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public cancelOrder;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitLoss
Line:        765
Source: 
>     address public createOrder;
>     address public cancelOrder;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public fillOrder;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitLoss
Line:        766
Source: 
>     address public cancelOrder;
>     address public fillOrder;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt256
Line:        84
Source: 
>     // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)
>     int256 private constant INT256_MIN = -2**(255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant INT256_MAX = (2**(255) - 1);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt256
Line:        85
Source: 
>     int256 private constant INT256_MIN = -2**(255);
>     int256 private constant INT256_MAX = (2**(255) - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt256
Line:        84
Source: 
>     // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)
>     int256 private constant INT256_MIN = -2**(255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant INT256_MAX = (2**(255) - 1);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMathInt256
Line:        85
Source: 
>     int256 private constant INT256_MIN = -2**(255);
>     int256 private constant INT256_MAX = (2**(255) - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitLoss
Line:        835
Source: 
> 
>             _outcomeData.realizedProfit = _tmpOutcomeData.realizedProfit;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _outcomeData.realizedCost = _tmpOutcomeData.realizedCost;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitLoss
Line:        836
Source: 
>             _outcomeData.realizedProfit = _tmpOutcomeData.realizedProfit;
>             _outcomeData.realizedCost = _tmpOutcomeData.realizedCost;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _outcomeData.frozenFunds = _tmpOutcomeData.frozenFunds;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitLoss
Line:        837
Source: 
>             _outcomeData.realizedCost = _tmpOutcomeData.realizedCost;
>             _outcomeData.frozenFunds = _tmpOutcomeData.frozenFunds;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitLoss
Line:        847
Source: 
>             _tmpOutcomeData.avgPrice = 0;
>             _outcomeData.avgPrice = _tmpOutcomeData.avgPrice;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (_reversed) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitLoss
Line:        856
Source: 
> 
>         _outcomeData.netPosition = _newNetPosition;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         augurTrading.logProfitLossChanged(_market, _address, _outcome, _outcomeData.netPosition, uint256(_tmpOutcomeData.avgPrice), _tmpOutcomeData.realizedProfit, _tmpOutcomeData.frozenFunds,  _tmpOutcomeData.realizedCost);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitLoss
Line:        850
Source: 
>             _tmpOutcomeData.avgPrice = _price;
>             _outcomeData.avgPrice = _tmpOutcomeData.avgPrice;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if (!_sold) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitLoss
Line:        853
Source: 
>             _tmpOutcomeData.avgPrice = _tmpOutcomeData.netPosition.abs().mul(_tmpOutcomeData.avgPrice).add(_amount.abs().mul(_price)).div(_newNetPosition.abs());
>             _outcomeData.avgPrice = _tmpOutcomeData.avgPrice;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitLoss
Line:        840
Source: 
>             _tmpOutcomeData.frozenFunds += _frozenTokenDelta;
>             _outcomeData.frozenFunds = _tmpOutcomeData.frozenFunds;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        74
Source: 
>     function endInitialization() internal beforeInitialized {
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitLoss
Line:        781
Source: 
>         endInitialization();
>         shareToken = _augur.lookup("ShareToken");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != address(0));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitLoss
Line:        784
Source: 
> 
>         augur = _augur;
>         ^^^^^^^^^^^^^^
>         augurTrading = _augurTrading;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitLoss
Line:        785
Source: 
>         augur = _augur;
>         augurTrading = _augurTrading;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         createOrder = _augurTrading.lookup("CreateOrder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitLoss
Line:        786
Source: 
>         augurTrading = _augurTrading;
>         createOrder = _augurTrading.lookup("CreateOrder");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cancelOrder = _augurTrading.lookup("CancelOrder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitLoss
Line:        787
Source: 
>         createOrder = _augurTrading.lookup("CreateOrder");
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fillOrder = _augurTrading.lookup("FillOrder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitLoss
Line:        788
Source: 
>         cancelOrder = _augurTrading.lookup("CancelOrder");
>         fillOrder = _augurTrading.lookup("FillOrder");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         orders = IOrders(_augurTrading.lookup("Orders"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitLoss
Line:        789
Source: 
>         fillOrder = _augurTrading.lookup("FillOrder");
>         orders = IOrders(_augurTrading.lookup("Orders"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(createOrder != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathInt256
Line:        142
Source: 
>     function fxpMul(int256 a, int256 b, int256 base) internal pure returns (int256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathInt256
Line:        146
Source: 
>     function fxpDiv(int256 a, int256 b, int256 base) internal pure returns (int256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        227
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        231
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        636
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        638
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        642
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        649
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        669
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        670
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        701
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ProfitLoss
Line:        800
Source: 
>         _outcomeData.frozenFunds += _frozenFundDelta.mul(10**18);
>         augurTrading.logProfitLossChanged(_market, _account, _outcome, _outcomeData.netPosition, uint256(_outcomeData.avgPrice), _outcomeData.realizedProfit, _outcomeData.frozenFunds,  _outcomeData.realizedCost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ProfitLoss
Line:        857
Source: 
>         _outcomeData.netPosition = _newNetPosition;
>         augurTrading.logProfitLossChanged(_market, _address, _outcome, _outcomeData.netPosition, uint256(_tmpOutcomeData.avgPrice), _tmpOutcomeData.realizedProfit, _tmpOutcomeData.frozenFunds,  _tmpOutcomeData.realizedCost);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ProfitLoss
Line:        852
Source: 
>         } else if (!_sold) {
>             _tmpOutcomeData.avgPrice = _tmpOutcomeData.netPosition.abs().mul(_tmpOutcomeData.avgPrice).add(_amount.abs().mul(_price)).div(_newNetPosition.abs());
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _outcomeData.avgPrice = _tmpOutcomeData.avgPrice;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ProfitLoss
Line:        878
Source: 
>             _outcomeData.netPosition = 0;
>             augurTrading.logProfitLossChanged(_market, _account, _outcome, 0, 0, _outcomeData.realizedProfit, 0, _outcomeData.realizedCost);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathInt256
Line:        142
Source: 
>     function fxpMul(int256 a, int256 b, int256 base) internal pure returns (int256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathInt256
Line:        146
Source: 
>     function fxpDiv(int256 a, int256 b, int256 base) internal pure returns (int256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        227
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        231
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        636
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        638
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        642
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        649
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        669
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        670
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        701
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt256
Line:        84
Source: 
>     // Signed ints with n bits can range from -2**(n-1) to (2**(n-1) - 1)
>     int256 private constant INT256_MIN = -2**(255);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int256 private constant INT256_MAX = (2**(255) - 1);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMathInt256
Line:        85
Source: 
>     int256 private constant INT256_MIN = -2**(255);
>     int256 private constant INT256_MAX = (2**(255) - 1);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ProfitLoss
Line:        760
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     IAugurTrading public augurTrading;

[0m
