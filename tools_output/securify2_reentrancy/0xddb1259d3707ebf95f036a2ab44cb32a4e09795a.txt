Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        266
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != accountHash && codehash != 0x0);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DPRLock
Line:        383
Source: 
>     IERC20 public dpr; 
>     uint256 public release_period = 30 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_lock_time = 180 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DPRLock
Line:        384
Source: 
>     uint256 public release_period = 30 days;
>     uint256 public total_lock_time = 180 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        367
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        302
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DPRLock
Line:        461
Source: 
> 
>     function withdrawTokens(address _token, uint256 _amount) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(_token).safeTransfer(owner, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DPRLock
Line:        421
Source: 
>     }
>     function lock(address _user, uint256 _amount) external onlyClaimContract{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dpr.safeTransferFrom(msg.sender, address(this), _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DPRLock
Line:        434
Source: 
> 
>     function lock_manually(address _user, uint256 _amount) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 new_lock_amount = get_total_lock_amount(_amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DPRLock
Line:        457
Source: 
> 
>     function PauseClaim(address _user, bool is_pause) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause_address[_user] = is_pause;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DPRLock
Line:        465
Source: 
> 
>     function pullTokens(uint256 _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dpr.transferFrom(msg.sender, address(this), _amount), "MerkleClaim: TransferFrom failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DPRLock
Line:        452
Source: 
>         uint256 release_this_time = total_released_amount.sub(user_released[msg.sender]);
>         require(dpr.balanceOf(address(this))>=release_this_time, "Lock: Not enough");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user_released[msg.sender] = total_released_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        302
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        381
Source: 
>     using SafeERC20 for IERC20;
>     address public claim_contract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public dpr; 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        383
Source: 
>     IERC20 public dpr; 
>     uint256 public release_period = 30 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_lock_time = 180 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        384
Source: 
>     uint256 public release_period = 30 days;
>     uint256 public total_lock_time = 180 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        386
Source: 
>     address public owner;
>     mapping(address => bool) public pause_address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public user_released;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        387
Source: 
>     mapping(address => bool) public pause_address;
>     mapping(address => uint256) public user_released;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public user_released_time;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        388
Source: 
>     mapping(address => uint256) public user_released;
>     mapping(address => uint256) public user_released_time;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public total_user_lock;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        389
Source: 
>     mapping(address => uint256) public user_released_time;
>     mapping(address => uint256) public total_user_lock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public user_release_per_period;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        390
Source: 
>     mapping(address => uint256) public total_user_lock;
>     mapping(address => uint256) public user_release_per_period;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        408
Source: 
> 
>     modifier NotPauseAddress(address _user){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pause_address[_user] == false, "Lock: Pause");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        423
Source: 
>         dpr.safeTransferFrom(msg.sender, address(this), _amount);
>         uint256 new_lock_amount = get_total_lock_amount(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         total_user_lock[_user] = new_lock_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        430
Source: 
> 
>     function get_total_lock_amount(uint256 amount) private returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return amount.add(amount.mul(5).div(100));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        434
Source: 
> 
>     function lock_manually(address _user, uint256 _amount) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 new_lock_amount = get_total_lock_amount(_amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        435
Source: 
>     function lock_manually(address _user, uint256 _amount) external onlyOwner{
>         uint256 new_lock_amount = get_total_lock_amount(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         user_released_time[_user] = block.timestamp.add(total_lock_time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        445
Source: 
>         require(user_released[msg.sender] < total_user_lock[msg.sender], "Lock: claim over");
>         uint256 time_passed = block.timestamp.sub(user_released_time[msg.sender]);
>         ^^^^^^^^^^^^^^^^^^^
>         uint256 period_passed = time_passed.div(release_period);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        446
Source: 
>         uint256 time_passed = block.timestamp.sub(user_released_time[msg.sender]);
>         uint256 period_passed = time_passed.div(release_period);
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 total_released_amount = period_passed * user_release_per_period[msg.sender];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        447
Source: 
>         uint256 period_passed = time_passed.div(release_period);
>         uint256 total_released_amount = period_passed * user_release_per_period[msg.sender];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(total_released_amount >= total_user_lock[msg.sender]){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        451
Source: 
>         }
>         uint256 release_this_time = total_released_amount.sub(user_released[msg.sender]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dpr.balanceOf(address(this))>=release_this_time, "Lock: Not enough");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRLock
Line:        457
Source: 
> 
>     function PauseClaim(address _user, bool is_pause) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause_address[_user] = is_pause;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRLock
Line:        408
Source: 
> 
>     modifier NotPauseAddress(address _user){
>                              ^^^^^^^^^^^^^
>         require(pause_address[_user] == false, "Lock: Pause");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DPRLock
Line:        452
Source: 
>         uint256 release_this_time = total_released_amount.sub(user_released[msg.sender]);
>         require(dpr.balanceOf(address(this))>=release_this_time, "Lock: Not enough");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user_released[msg.sender] = total_released_amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DPRLock
Line:        466
Source: 
>     function pullTokens(uint256 _amount) external {
>         require(dpr.transferFrom(msg.sender, address(this), _amount), "MerkleClaim: TransferFrom failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        267
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != accountHash && codehash != 0x0);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        302
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        333
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        340
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        345
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DPRLock
Line:        425
Source: 
>         total_user_lock[_user] = new_lock_amount;
>         user_released_time[_user] = block.timestamp.add(total_lock_time);
>                                     ^^^^^^^^^^^^^^^
>         user_release_per_period[_user] = new_lock_amount.div(3); // in 3 months

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DPRLock
Line:        436
Source: 
>         uint256 new_lock_amount = get_total_lock_amount(_amount);
>         user_released_time[_user] = block.timestamp.add(total_lock_time);
>                                     ^^^^^^^^^^^^^^^
>         user_release_per_period[_user] = new_lock_amount.div(3); // in 3 months

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    DPRLock
Line:        443
Source: 
>         require(total_user_lock[msg.sender] > 0, "Lock: No balance");
>         require(block.timestamp >= user_released_time[msg.sender], "Lock: Too early");
>                 ^^^^^^^^^^^^^^^
>         require(user_released[msg.sender] < total_user_lock[msg.sender], "Lock: claim over");

[0m
