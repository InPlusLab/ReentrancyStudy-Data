Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MerkleAirdrop
Line:        257
Source: 
>         for (uint256 j = 0; j < proofLength; j++) {
>             assembly {
>             ^^^^^^^^^^
>                 el := mload(add(_proofs, _marker))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleAirdrop
Line:        126
Source: 
> 
>     function setToken(address _token) public onlyCore {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token = IERC20(_token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleAirdrop
Line:        135
Source: 
>      */
>     function start(bytes32 _root, string memory _dataURI) public onlyCore {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.balanceOf(address(this)) > 0, ERROR_INVALID_BAL);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleAirdrop
Line:        148
Source: 
>      */
>     function setPause(uint256 _id, bool _paused) public onlyCore {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_id <= airdropsCount, ERROR_INVALID);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleAirdrop
Line:        157
Source: 
>      */
>     function removeToken() public onlyCore {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = token.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleAirdrop
Line:        171
Source: 
>      */
>     function award(
>     ^^^^^^^^^^^^^^^
>         uint256 _id,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleAirdrop
Line:        207
Source: 
>      */
>     function awardFromMany(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _ids,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleAirdrop
Line:        286
Source: 
>      */
>     function awarded(uint256 _id, address _recipient)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleAirdrop
Line:        136
Source: 
>     function start(bytes32 _root, string memory _dataURI) public onlyCore {
>         require(token.balanceOf(address(this)) > 0, ERROR_INVALID_BAL);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleAirdrop
Line:        158
Source: 
>     function removeToken() public onlyCore {
>         uint256 balance = token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (balance > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleAirdrop
Line:        160
Source: 
>         if (balance > 0) {
>             token.transfer(core, balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleAirdrop
Line:        189
Source: 
> 
>         uint256 bal = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (bal >= _amount) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleAirdrop
Line:        191
Source: 
>         if (bal >= _amount) {
>             token.transfer(_recipient, _amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleAirdrop
Line:        239
Source: 
> 
>         uint256 bal = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (bal >= totalAmount) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleAirdrop
Line:        241
Source: 
>         if (bal >= totalAmount) {
>             token.transfer(_recipient, totalAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MerkleAirdrop
Line:        171
Source: 
>      */
>     function award(
>     ^^^^^^^^^^^^^^^
>         uint256 _id,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MerkleAirdrop
Line:        126
Source: 
> 
>     function setToken(address _token) public onlyCore {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token = IERC20(_token);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MerkleAirdrop
Line:        135
Source: 
>      */
>     function start(bytes32 _root, string memory _dataURI) public onlyCore {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.balanceOf(address(this)) > 0, ERROR_INVALID_BAL);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MerkleAirdrop
Line:        148
Source: 
>      */
>     function setPause(uint256 _id, bool _paused) public onlyCore {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_id <= airdropsCount, ERROR_INVALID);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MerkleAirdrop
Line:        207
Source: 
>      */
>     function awardFromMany(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _ids,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MerkleAirdrop
Line:        247
Source: 
> 
>     function extractProof(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory _proofs,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MerkleAirdrop
Line:        265
Source: 
> 
>     function validate(
>     ^^^^^^^^^^^^^^^^^^
>         bytes32 root,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MerkleAirdrop
Line:        286
Source: 
>      */
>     function awarded(uint256 _id, address _recipient)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MerkleAirdrop
Line:        136
Source: 
>     function start(bytes32 _root, string memory _dataURI) public onlyCore {
>         require(token.balanceOf(address(this)) > 0, ERROR_INVALID_BAL);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MerkleAirdrop
Line:        136
Source: 
>     function start(bytes32 _root, string memory _dataURI) public onlyCore {
>         require(token.balanceOf(address(this)) > 0, ERROR_INVALID_BAL);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MerkleAirdrop
Line:        158
Source: 
>     function removeToken() public onlyCore {
>         uint256 balance = token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (balance > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MerkleAirdrop
Line:        189
Source: 
> 
>         uint256 bal = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (bal >= _amount) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MerkleAirdrop
Line:        239
Source: 
> 
>         uint256 bal = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (bal >= totalAmount) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MerkleAirdrop
Line:        160
Source: 
>         if (balance > 0) {
>             token.transfer(core, balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MerkleAirdrop
Line:        191
Source: 
>         if (bal >= _amount) {
>             token.transfer(_recipient, _amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MerkleAirdrop
Line:        241
Source: 
>         if (bal >= totalAmount) {
>             token.transfer(_recipient, totalAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MerkleAirdrop
Line:        106
Source: 
>     mapping(uint256 => Airdrop) public airdrops;
>     IERC20 public token;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public airdropsCount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MerkleAirdrop
Line:        107
Source: 
>     IERC20 public token;
>     uint256 public airdropsCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MerkleAirdrop
Line:        187
Source: 
> 
>         airdrops[_id].awarded[_recipient] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MerkleAirdrop
Line:        232
Source: 
> 
>             airdrops[id].awarded[_recipient] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MerkleAirdrop
Line:        160
Source: 
>         if (balance > 0) {
>             token.transfer(core, balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MerkleAirdrop
Line:        191
Source: 
>         if (bal >= _amount) {
>             token.transfer(_recipient, _amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MerkleAirdrop
Line:        241
Source: 
>         if (bal >= totalAmount) {
>             token.transfer(_recipient, totalAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
