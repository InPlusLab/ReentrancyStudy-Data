Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        77
Source: 
> 
>     function getInitialized() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return initialized;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        331
Source: 
>      */
>     function balanceOf(address _account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        343
Source: 
>      */
>     function transfer(address _recipient, uint256 _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _recipient, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        351
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        362
Source: 
>      */
>     function approve(address _spender, uint256 _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, _spender, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        379
Source: 
>      */
>     function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_sender, _recipient, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        397
Source: 
>      */
>     function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, _spender, allowances[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        416
Source: 
>      */
>     function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, _spender, allowances[msg.sender][_spender].sub(_subtractedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        343
Source: 
>      */
>     function transfer(address _recipient, uint256 _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _recipient, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        379
Source: 
>      */
>     function transferFrom(address _sender, address _recipient, uint256 _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(_sender, _recipient, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        397
Source: 
>      */
>     function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, _spender, allowances[msg.sender][_spender].add(_addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        416
Source: 
>      */
>     function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, _spender, allowances[msg.sender][_spender].sub(_subtractedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OICash
Line:        938
Source: 
> 
>     function deposit(uint256 _amount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         universe.deposit(msg.sender, _amount, address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OICash
Line:        968
Source: 
> 
>     function payFees(uint256 _feeAmount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         burn(msg.sender, _feeAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OICash
Line:        975
Source: 
> 
>     function buyCompleteSets(IMarket _market, uint256 _amount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(universe.isContainerForMarket(_market), "Market does not belong to universe");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        331
Source: 
>      */
>     function balanceOf(address _account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        351
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        362
Source: 
>      */
>     function approve(address _spender, uint256 _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, _spender, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OICash
Line:        927
Source: 
> 
>     function initialize(IAugur _augur, IUniverse _universe) external beforeInitialized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         endInitialization();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMathUint256
Line:        91
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        930
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        931
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        935
Source: 
> 
>         cash.approve(address(_augur), MAX_APPROVAL_AMOUNT);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        948
Source: 
>         // Withdraw cash to this contract
>         universe.withdraw(address(this), _amount, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        951
Source: 
>         uint256 _payout = _amount;
>         uint256 _reportingFeeDivisor = universe.getOrCacheReportingFeeDivisor();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _feesOwed = _amount / _reportingFeeDivisor;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        963
Source: 
> 
>         require(cash.transfer(msg.sender, _payout));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        960
Source: 
>             _payout = _payout.sub(_feesOwed);
>             require(cash.transfer(address(universe.getOrCreateNextDisputeWindow(false)), _feesOwed));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        960
Source: 
>             _payout = _payout.sub(_feesOwed);
>             require(cash.transfer(address(universe.getOrCreateNextDisputeWindow(false)), _feesOwed));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        970
Source: 
>         burn(msg.sender, _feeAmount);
>         universe.withdraw(address(universe.getOrCreateNextDisputeWindow(false)), _feeAmount, address(0));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feesPaid = feesPaid.add(_feeAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OICash
Line:        970
Source: 
>         burn(msg.sender, _feeAmount);
>         universe.withdraw(address(universe.getOrCreateNextDisputeWindow(false)), _feeAmount, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feesPaid = feesPaid.add(_feeAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    OICash
Line:        930
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    OICash
Line:        931
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20
Line:        320
Source: 
> 
>     uint8 constant public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        802
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        829
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             ^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        850
Source: 
>         getOrderId(_orderData, _orders);
>         uint256[] memory _uints = new uint256[](5);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         _uints[0] = _orderData.amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Order
Line:        856
Source: 
>         _uints[4] = _orderData.sharesEscrowed;
>         bytes32[] memory _bytes32s = new bytes32[](4);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bytes32s[0] = _orderData.betterOrderId;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        880
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        881
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        898
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OICash
Line:        950
Source: 
> 
>         uint256 _payout = _amount;
>         ^^^^^^^^^^^^^^^
>         uint256 _reportingFeeDivisor = universe.getOrCacheReportingFeeDivisor();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OICash
Line:        951
Source: 
>         uint256 _payout = _amount;
>         uint256 _reportingFeeDivisor = universe.getOrCacheReportingFeeDivisor();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _feesOwed = _amount / _reportingFeeDivisor;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OICash
Line:        952
Source: 
>         uint256 _reportingFeeDivisor = universe.getOrCacheReportingFeeDivisor();
>         uint256 _feesOwed = _amount / _reportingFeeDivisor;
>         ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OICash
Line:        977
Source: 
>         require(universe.isContainerForMarket(_market), "Market does not belong to universe");
>         uint256 _cost = _amount.mul(_market.getNumTicks());
>         ^^^^^^^^^^^^^
>         burn(msg.sender, _cost);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OICash
Line:        931
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OICash
Line:        951
Source: 
>         uint256 _payout = _amount;
>         uint256 _reportingFeeDivisor = universe.getOrCacheReportingFeeDivisor();
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _feesOwed = _amount / _reportingFeeDivisor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OICash
Line:        963
Source: 
> 
>         require(cash.transfer(msg.sender, _payout));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OICash
Line:        960
Source: 
>             _payout = _payout.sub(_feesOwed);
>             require(cash.transfer(address(universe.getOrCreateNextDisputeWindow(false)), _feesOwed));
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OICash
Line:        960
Source: 
>             _payout = _payout.sub(_feesOwed);
>             require(cash.transfer(address(universe.getOrCreateNextDisputeWindow(false)), _feesOwed));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OICash
Line:        970
Source: 
>         burn(msg.sender, _feeAmount);
>         universe.withdraw(address(universe.getOrCreateNextDisputeWindow(false)), _feeAmount, address(0));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feesPaid = feesPaid.add(_feeAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OICash
Line:        976
Source: 
>     function buyCompleteSets(IMarket _market, uint256 _amount) external returns (bool) {
>         require(universe.isContainerForMarket(_market), "Market does not belong to universe");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _cost = _amount.mul(_market.getNumTicks());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OICash
Line:        977
Source: 
>         require(universe.isContainerForMarket(_market), "Market does not belong to universe");
>         uint256 _cost = _amount.mul(_market.getNumTicks());
>                                     ^^^^^^^^^^^^^^^^^^^^^
>         burn(msg.sender, _cost);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OICash
Line:        930
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>                      ^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OICash
Line:        935
Source: 
> 
>         cash.approve(address(_augur), MAX_APPROVAL_AMOUNT);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OICash
Line:        939
Source: 
>     function deposit(uint256 _amount) external returns (bool) {
>         universe.deposit(msg.sender, _amount, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mint(msg.sender, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OICash
Line:        948
Source: 
>         // Withdraw cash to this contract
>         universe.withdraw(address(this), _amount, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OICash
Line:        970
Source: 
>         burn(msg.sender, _feeAmount);
>         universe.withdraw(address(universe.getOrCreateNextDisputeWindow(false)), _feeAmount, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feesPaid = feesPaid.add(_feeAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OICash
Line:        979
Source: 
>         burn(msg.sender, _cost);
>         universe.withdraw(address(this), _cost, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         shareToken.buyCompleteSets(_market, msg.sender, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OICash
Line:        980
Source: 
>         universe.withdraw(address(this), _cost, address(0));
>         shareToken.buyCompleteSets(_market, msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        322
Source: 
> 
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OICash
Line:        919
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     IERC20 public cash;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OICash
Line:        920
Source: 
>     IAugur public augur;
>     IERC20 public cash;
>     ^^^^^^^^^^^^^^^^^^
>     IUniverse public universe;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OICash
Line:        921
Source: 
>     IERC20 public cash;
>     IUniverse public universe;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     IShareToken public shareToken;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OICash
Line:        922
Source: 
>     IUniverse public universe;
>     IShareToken public shareToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public feesPaid;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    OICash
Line:        923
Source: 
>     IShareToken public shareToken;
>     uint256 public feesPaid;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        498
Source: 
> 
>         allowances[_owner][_spender] = _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(_owner, _spender, _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        457
Source: 
> 
>         totalSupply = totalSupply.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_account] = balances[_account].add(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        458
Source: 
>         totalSupply = totalSupply.add(_amount);
>         balances[_account] = balances[_account].add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), _account, _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        476
Source: 
> 
>         balances[_account] = balances[_account].sub(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalSupply = totalSupply.sub(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        477
Source: 
>         balances[_account] = balances[_account].sub(_amount);
>         totalSupply = totalSupply.sub(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_account, address(0), _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OICash
Line:        955
Source: 
>         if (feesPaid > _feesOwed) {
>             feesPaid = feesPaid.sub(_feesOwed);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OICash
Line:        958
Source: 
>             _feesOwed = _feesOwed.sub(feesPaid);
>             feesPaid = 0;
>             ^^^^^^^^^^^^
>             _payout = _payout.sub(_feesOwed);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OICash
Line:        971
Source: 
>         universe.withdraw(address(universe.getOrCreateNextDisputeWindow(false)), _feeAmount, address(0));
>         feesPaid = feesPaid.add(_feeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        74
Source: 
>     function endInitialization() internal beforeInitialized {
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        439
Source: 
> 
>         balances[_sender] = balances[_sender].sub(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_recipient] = balances[_recipient].add(_amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        440
Source: 
>         balances[_sender] = balances[_sender].sub(_amount);
>         balances[_recipient] = balances[_recipient].add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_sender, _recipient, _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OICash
Line:        929
Source: 
>         endInitialization();
>         augur = _augur;
>         ^^^^^^^^^^^^^^
>         cash = ICash(_augur.lookup("Cash"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OICash
Line:        930
Source: 
>         augur = _augur;
>         cash = ICash(_augur.lookup("Cash"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         shareToken = IShareToken(_augur.lookup("ShareToken"));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OICash
Line:        931
Source: 
>         cash = ICash(_augur.lookup("Cash"));
>         shareToken = IShareToken(_augur.lookup("ShareToken"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(shareToken != IShareToken(0));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OICash
Line:        933
Source: 
>         require(shareToken != IShareToken(0));
>         universe = _universe;
>         ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        159
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        163
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        796
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        798
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        802
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        809
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        829
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        830
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        861
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OICash
Line:        935
Source: 
> 
>         cash.approve(address(_augur), MAX_APPROVAL_AMOUNT);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OICash
Line:        939
Source: 
>     function deposit(uint256 _amount) external returns (bool) {
>         universe.deposit(msg.sender, _amount, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mint(msg.sender, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OICash
Line:        948
Source: 
>         // Withdraw cash to this contract
>         universe.withdraw(address(this), _amount, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OICash
Line:        970
Source: 
>         burn(msg.sender, _feeAmount);
>         universe.withdraw(address(universe.getOrCreateNextDisputeWindow(false)), _feeAmount, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feesPaid = feesPaid.add(_feeAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OICash
Line:        979
Source: 
>         burn(msg.sender, _cost);
>         universe.withdraw(address(this), _cost, address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         shareToken.buyCompleteSets(_market, msg.sender, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OICash
Line:        980
Source: 
>         universe.withdraw(address(this), _cost, address(0));
>         shareToken.buyCompleteSets(_market, msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        159
Source: 
>     function fxpMul(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, b), base);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMathUint256
Line:        163
Source: 
>     function fxpDiv(uint256 a, uint256 b, uint256 base) internal pure returns (uint256) {
>         return div(mul(a, base), b);
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        796
Source: 
>     function create(IAugur _augur, IAugurTrading _augurTrading, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data memory) {
>         require(_outcome < _market.getNumberOfOutcomes(), "Order.create: Outcome is not within market range");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_price != 0, "Order.create: Price may not be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        798
Source: 
>         require(_price != 0, "Order.create: Price may not be 0");
>         require(_price < _market.getNumTicks(), "Order.create: Price is outside of market range");
>                          ^^^^^^^^^^^^^^^^^^^^^
>         require(_attoshares > 0, "Order.create: Cannot use amount of 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        802
Source: 
> 
>         IShareToken _shareToken = IShareToken(_augur.lookup("ShareToken"));
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        809
Source: 
>             shareToken: _shareToken,
>             cash: ICash(_augur.lookup("Cash")),
>                         ^^^^^^^^^^^^^^^^^^^^^
>             id: 0,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        829
Source: 
>         if (_orderData.id == bytes32(0)) {
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        830
Source: 
>             bytes32 _orderId = calculateOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed);
>             require(_orders.getAmount(_orderId) == 0, "Order.getOrderId: New order had amount. This should not be possible");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _orderData.id = _orderId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Order
Line:        861
Source: 
>         _bytes32s[3] = _orderData.id;
>         return _orders.saveOrder(_uints, _bytes32s, _orderData.orderType, _orderData.market, _orderData.creator);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20
Line:        320
Source: 
> 
>     uint8 constant public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OICash
Line:        919
Source: 
> 
>     IAugur public augur;
>     ^^^^^^^^^^^^^^^^^^^
>     IERC20 public cash;

[0m
