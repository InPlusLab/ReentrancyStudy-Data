[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SSTReseller
Line:        83
Source: 
>      uint8[] public REFERRAL_PERCENTS = [20, 10, 5, 5, 5];
>      uint8 public FEE_PERCENT = 5;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      uint8 public PERCENTS_DIVIDER = 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SSTReseller
Line:        84
Source: 
>      uint8 public FEE_PERCENT = 5;
>      uint8 public PERCENTS_DIVIDER = 100;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        24
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        37
Source: 
> 
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "New owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        37
Source: 
> 
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "New owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        128
Source: 
> 
>      function buy(uint256 value, address _ref1, address _ref2, address _ref3, address _ref4, address _ref5) public onlyActive {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(value >= minimum, "Less than minimum");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        179
Source: 
> 
>      function withdraw(uint256 value) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(value <= interestBalance[msg.sender], "Not enough balance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        188
Source: 
> 
>      function setRate(uint128 newRate) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender == owner() || msg.sender == boss1 || msg.sender == boss2 || msg.sender == boss3, "No access");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        197
Source: 
> 
>      function setMinimum(uint64 newMinimum) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender == owner() || msg.sender == boss1 || msg.sender == boss2, "No access");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        206
Source: 
> 
>      function setPeriod(uint32 newPeriod) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender == boss1 || msg.sender == boss2 || msg.sender == boss3, "No access");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        223
Source: 
> 
>      function switchState() public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender == owner() || msg.sender == boss1 || msg.sender == boss2, "No access");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        230
Source: 
> 
>      function deposeBoss1(address newBoss1) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender == boss1 || msg.sender == boss2, "No access");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        239
Source: 
> 
>      function deposeBoss2(address newBoss2) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender == boss1 || msg.sender == boss2, "No access");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        248
Source: 
> 
>      function deposeBoss3(address newBoss3) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender == owner() || msg.sender == boss1, "No access");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        263
Source: 
> 
>      function allowanceUSDT(address account) public view returns(uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return USDT.allowance(account, address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        267
Source: 
> 
>      function allowanceSST(address account) public view returns(uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return SST.allowance(account, address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        271
Source: 
> 
>      function balanceUSDT(address account) public view returns(uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return USDT.balanceOf(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SSTReseller
Line:        275
Source: 
> 
>      function balanceSST(address account) public view returns(uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return SST.balanceOf(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SSTReseller
Line:        263
Source: 
> 
>      function allowanceUSDT(address account) public view returns(uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return USDT.allowance(account, address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SSTReseller
Line:        267
Source: 
> 
>      function allowanceSST(address account) public view returns(uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return SST.allowance(account, address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SSTReseller
Line:        271
Source: 
> 
>      function balanceUSDT(address account) public view returns(uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return USDT.balanceOf(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SSTReseller
Line:        275
Source: 
> 
>      function balanceSST(address account) public view returns(uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return SST.balanceOf(account);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SSTReseller
Line:        215
Source: 
> 
>      function withdrawERC20(address ERC20Token, address recipient, uint256 value) external {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(msg.sender == boss1 || msg.sender == boss2, "No access");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SSTReseller
Line:        130
Source: 
>          require(value >= minimum, "Less than minimum");
>          USDT.transferFrom(msg.sender, address(this), value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SSTReseller
Line:        174
Source: 
> 
>          SST.freezeAndTransfer(msg.sender, amount, period);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SSTReseller
Line:        183
Source: 
>          interestBalance[msg.sender] -= uint64(value);
>          USDT.transfer(msg.sender, value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SSTReseller
Line:        79
Source: 
> 
>      IUSDT public USDT;
>      ^^^^^^^^^^^^^^^^^
>      IERC20 public SST;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SSTReseller
Line:        80
Source: 
>      IUSDT public USDT;
>      IERC20 public SST;
>      ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SSTReseller
Line:        82
Source: 
> 
>      uint8[] public REFERRAL_PERCENTS = [20, 10, 5, 5, 5];
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      uint8 public FEE_PERCENT = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SSTReseller
Line:        83
Source: 
>      uint8[] public REFERRAL_PERCENTS = [20, 10, 5, 5, 5];
>      uint8 public FEE_PERCENT = 5;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      uint8 public PERCENTS_DIVIDER = 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SSTReseller
Line:        84
Source: 
>      uint8 public FEE_PERCENT = 5;
>      uint8 public PERCENTS_DIVIDER = 100;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SSTReseller
Line:        130
Source: 
>          require(value >= minimum, "Less than minimum");
>          USDT.transferFrom(msg.sender, address(this), value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SSTReseller
Line:        174
Source: 
> 
>          SST.freezeAndTransfer(msg.sender, amount, period);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SSTReseller
Line:        183
Source: 
>          interestBalance[msg.sender] -= uint64(value);
>          USDT.transfer(msg.sender, value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SSTReseller
Line:        218
Source: 
> 
>          IERC20(ERC20Token).transfer(recipient, value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SSTReseller
Line:        264
Source: 
>      function allowanceUSDT(address account) public view returns(uint256) {
>          return USDT.allowance(account, address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SSTReseller
Line:        268
Source: 
>      function allowanceSST(address account) public view returns(uint256) {
>          return SST.allowance(account, address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SSTReseller
Line:        272
Source: 
>      function balanceUSDT(address account) public view returns(uint256) {
>          return USDT.balanceOf(account);
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>      }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SSTReseller
Line:        276
Source: 
>      function balanceSST(address account) public view returns(uint256) {
>          return SST.balanceOf(account);
>                 ^^^^^^^^^^^^^^^^^^^^^^
>      }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SSTReseller
Line:        88
Source: 
>      uint32 public period;
>      uint64 public minimum;
>      ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SSTReseller
Line:        169
Source: 
>          uint256 fee = value * FEE_PERCENT / PERCENTS_DIVIDER;
>          interestBalance[boss2] += uint64(fee);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          interestBalance[boss1] += uint64(value - fee - total);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SSTReseller
Line:        170
Source: 
>          interestBalance[boss2] += uint64(fee);
>          interestBalance[boss1] += uint64(value - fee - total);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SSTReseller
Line:        218
Source: 
> 
>          IERC20(ERC20Token).transfer(recipient, value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
