[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ImpermaxERC20
Line:        224
Source: 
> 		uint chainId;
> 		assembly {
>   ^^^^^^^^^^
> 			chainId := chainid

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ImpermaxERC20
Line:        207
Source: 
> 	string public symbol;
> 	uint8 public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    PoolToken
Line:        449
Source: 
> 	function _safeTransfer(address to, uint amount) internal {
> 		(bool success, bytes memory data) = underlying.call(abi.encodeWithSelector(SELECTOR, to, amount));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(success && (data.length == 0 || abi.decode(data, (bool))), "Impermax: TRANSFER_FAILED");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ImpermaxERC20
Line:        266
Source: 
> 
> 	function transfer(address to, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ImpermaxERC20
Line:        271
Source: 
> 
> 	function transferFrom(address from, address to, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (allowance[from][msg.sender] != uint(-1)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ImpermaxERC20
Line:        266
Source: 
> 
> 	function transfer(address to, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ImpermaxERC20
Line:        271
Source: 
> 
> 	function transferFrom(address from, address to, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (allowance[from][msg.sender] != uint(-1)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoolToken
Line:        409
Source: 
> 	// this low-level function should be called from another contract
> 	function mint(address minter) external nonReentrant update returns (uint mintTokens) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint balance = IERC20(underlying).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoolToken
Line:        425
Source: 
> 	// this low-level function should be called from another contract
> 	function redeem(address redeemer) external nonReentrant update returns (uint redeemAmount) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint redeemTokens = balanceOf[address(this)];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoolToken
Line:        437
Source: 
> 	// force real balance to match totalBalance
> 	function skim(address to) external nonReentrant {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_safeTransfer(to, IERC20(underlying).balanceOf(address(this)).sub(totalBalance));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ImpermaxERC20
Line:        266
Source: 
> 
> 	function transfer(address to, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ImpermaxERC20
Line:        271
Source: 
> 
> 	function transferFrom(address from, address to, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (allowance[from][msg.sender] != uint(-1)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoolToken
Line:        409
Source: 
> 	// this low-level function should be called from another contract
> 	function mint(address minter) external nonReentrant update returns (uint mintTokens) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint balance = IERC20(underlying).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoolToken
Line:        425
Source: 
> 	// this low-level function should be called from another contract
> 	function redeem(address redeemer) external nonReentrant update returns (uint redeemAmount) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint redeemTokens = balanceOf[address(this)];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoolToken
Line:        437
Source: 
> 	// force real balance to match totalBalance
> 	function skim(address to) external nonReentrant {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_safeTransfer(to, IERC20(underlying).balanceOf(address(this)).sub(totalBalance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ImpermaxERC20
Line:        261
Source: 
> 
> 	function approve(address spender, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ImpermaxERC20
Line:        294
Source: 
> 	bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
> 	function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_checkSignature(owner, spender, value, deadline, v, r, s, PERMIT_TYPEHASH);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ImpermaxERC20
Line:        261
Source: 
> 
> 	function approve(address spender, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ImpermaxERC20
Line:        294
Source: 
> 	bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
> 	function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_checkSignature(owner, spender, value, deadline, v, r, s, PERMIT_TYPEHASH);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ImpermaxERC20
Line:        261
Source: 
> 
> 	function approve(address spender, uint value) external returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ImpermaxERC20
Line:        294
Source: 
> 	bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;
> 	function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_checkSignature(owner, spender, value, deadline, v, r, s, PERMIT_TYPEHASH);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PoolToken
Line:        396
Source: 
> 	function _update() internal {
> 		totalBalance = IERC20(underlying).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Sync(totalBalance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PoolToken
Line:        410
Source: 
> 	function mint(address minter) external nonReentrant update returns (uint mintTokens) {
> 		uint balance = IERC20(underlying).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint mintAmount = balance.sub(totalBalance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PoolToken
Line:        438
Source: 
> 	function skim(address to) external nonReentrant {
> 		_safeTransfer(to, IERC20(underlying).balanceOf(address(this)).sub(totalBalance));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PoolToken
Line:        396
Source: 
> 	function _update() internal {
> 		totalBalance = IERC20(underlying).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Sync(totalBalance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PoolToken
Line:        410
Source: 
> 	function mint(address minter) external nonReentrant update returns (uint mintTokens) {
> 		uint balance = IERC20(underlying).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint mintAmount = balance.sub(totalBalance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PoolToken
Line:        438
Source: 
> 	function skim(address to) external nonReentrant {
> 		_safeTransfer(to, IERC20(underlying).balanceOf(address(this)).sub(totalBalance));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ImpermaxERC20
Line:        212
Source: 
> 	
> 	bytes32 public DOMAIN_SEPARATOR;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) public nonces;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IPoolToken
Line:        341
Source: 
> 	
> 	function DOMAIN_SEPARATOR() external view returns (bytes32);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IPoolToken
Line:        342
Source: 
> 	function DOMAIN_SEPARATOR() external view returns (bytes32);
> 	function PERMIT_TYPEHASH() external pure returns (bytes32);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IPoolToken
Line:        355
Source: 
> 	function totalBalance() external view returns (uint);
> 	function MINIMUM_LIQUIDITY() external pure returns (uint);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IPoolToken
Line:        363
Source: 
> 	
> 	function _setFactory() external;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoolToken
Line:        375
Source: 
> contract PoolToken is IPoolToken, ImpermaxERC20 {
>    	uint internal constant initialExchangeRate = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public underlying;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoolToken
Line:        388
Source: 
> 	// called once by the factory
> 	function _setFactory() external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(factory == address(0), "Impermax: FACTORY_ALREADY_SET");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoolToken
Line:        402
Source: 
> 	{
> 		uint _totalSupply = totalSupply; // gas savings
>   ^^^^^^^^^^^^^^^^^
> 		uint _totalBalance = totalBalance; // gas savings

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoolToken
Line:        403
Source: 
> 		uint _totalSupply = totalSupply; // gas savings
> 		uint _totalBalance = totalBalance; // gas savings
>   ^^^^^^^^^^^^^^^^^^
> 		if (_totalSupply == 0 || _totalBalance == 0) return initialExchangeRate;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    xIMX
Line:        474
Source: 
> 
> contract xIMX is PoolToken {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        302
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        322
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PoolToken
Line:        396
Source: 
> 	function _update() internal {
> 		totalBalance = IERC20(underlying).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Sync(totalBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoolToken
Line:        410
Source: 
> 	function mint(address minter) external nonReentrant update returns (uint mintTokens) {
> 		uint balance = IERC20(underlying).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint mintAmount = balance.sub(totalBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoolToken
Line:        438
Source: 
> 	function skim(address to) external nonReentrant {
> 		_safeTransfer(to, IERC20(underlying).balanceOf(address(this)).sub(totalBalance));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoolToken
Line:        410
Source: 
> 	function mint(address minter) external nonReentrant update returns (uint mintTokens) {
> 		uint balance = IERC20(underlying).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint mintAmount = balance.sub(totalBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoolToken
Line:        438
Source: 
> 	function skim(address to) external nonReentrant {
> 		_safeTransfer(to, IERC20(underlying).balanceOf(address(this)).sub(totalBalance));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ImpermaxERC20
Line:        232
Source: 
> 				keccak256(bytes("1")),
> 				chainId,
>     ^^^^^^^
> 				address(this)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ImpermaxERC20
Line:        208
Source: 
> 	uint8 public decimals = 18;
> 	uint public totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) public balanceOf;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PoolToken
Line:        377
Source: 
> 	address public underlying;
> 	address public factory;
>  ^^^^^^^^^^^^^^^^^^^^^^
> 	uint public totalBalance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PoolToken
Line:        378
Source: 
> 	address public factory;
> 	uint public totalBalance;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public constant MINIMUM_LIQUIDITY = 1000;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ImpermaxERC20
Line:        208
Source: 
> 	uint8 public decimals = 18;
> 	uint public totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) public balanceOf;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PoolToken
Line:        378
Source: 
> 	address public factory;
> 	uint public totalBalance;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public constant MINIMUM_LIQUIDITY = 1000;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ImpermaxERC20
Line:        205
Source: 
> 	
> 	string public name;
>  ^^^^^^^^^^^^^^^^^^
> 	string public symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ImpermaxERC20
Line:        206
Source: 
> 	string public name;
> 	string public symbol;
>  ^^^^^^^^^^^^^^^^^^^^
> 	uint8 public decimals = 18;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ImpermaxERC20
Line:        208
Source: 
> 	uint8 public decimals = 18;
> 	uint public totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) public balanceOf;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ImpermaxERC20
Line:        212
Source: 
> 	
> 	bytes32 public DOMAIN_SEPARATOR;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) public nonces;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ImpermaxERC20
Line:        205
Source: 
> 	
> 	string public name;
>  ^^^^^^^^^^^^^^^^^^
> 	string public symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ImpermaxERC20
Line:        206
Source: 
> 	string public name;
> 	string public symbol;
>  ^^^^^^^^^^^^^^^^^^^^
> 	uint8 public decimals = 18;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ImpermaxERC20
Line:        212
Source: 
> 	
> 	bytes32 public DOMAIN_SEPARATOR;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) public nonces;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PoolToken
Line:        376
Source: 
>    	uint internal constant initialExchangeRate = 1e18;
> 	address public underlying;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public factory;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PoolToken
Line:        390
Source: 
> 		require(factory == address(0), "Impermax: FACTORY_ALREADY_SET");
> 		factory = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        251
Source: 
> 	function _approve(address owner, address spender, uint value) private {
> 		allowance[owner][spender] = value;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        256
Source: 
> 	function _transfer(address from, address to, uint value) internal {
> 		balanceOf[from] = balanceOf[from].sub(value, "Impermax: TRANSFER_TOO_HIGH");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		balanceOf[to] = balanceOf[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        257
Source: 
> 		balanceOf[from] = balanceOf[from].sub(value, "Impermax: TRANSFER_TOO_HIGH");
> 		balanceOf[to] = balanceOf[to].add(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(from, to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        285
Source: 
> 				DOMAIN_SEPARATOR,
> 				keccak256(abi.encode(typehash, owner, spender, value, nonces[owner]++, deadline))
>                                                           ^^^^^^^^^^^^^^^
> 			)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        239
Source: 
> 	function _mint(address to, uint value) internal {
> 		totalSupply = totalSupply.add(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		balanceOf[to] = balanceOf[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        240
Source: 
> 		totalSupply = totalSupply.add(value);
> 		balanceOf[to] = balanceOf[to].add(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0), to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        245
Source: 
> 	function _burn(address from, uint value) internal {
> 		balanceOf[from] = balanceOf[from].sub(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalSupply = totalSupply.sub(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        246
Source: 
> 		balanceOf[from] = balanceOf[from].sub(value);
> 		totalSupply = totalSupply.sub(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(from, address(0), value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        251
Source: 
> 	function _approve(address owner, address spender, uint value) private {
> 		allowance[owner][spender] = value;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        256
Source: 
> 	function _transfer(address from, address to, uint value) internal {
> 		balanceOf[from] = balanceOf[from].sub(value, "Impermax: TRANSFER_TOO_HIGH");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		balanceOf[to] = balanceOf[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        257
Source: 
> 		balanceOf[from] = balanceOf[from].sub(value, "Impermax: TRANSFER_TOO_HIGH");
> 		balanceOf[to] = balanceOf[to].add(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(from, to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        285
Source: 
> 				DOMAIN_SEPARATOR,
> 				keccak256(abi.encode(typehash, owner, spender, value, nonces[owner]++, deadline))
>                                                           ^^^^^^^^^^^^^^^
> 			)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        396
Source: 
> 	function _update() internal {
> 		totalBalance = IERC20(underlying).balanceOf(address(this));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Sync(totalBalance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        457
Source: 
> 		require(_notEntered, "Impermax: REENTERED");
> 		_notEntered = false;
>   ^^^^^^^^^^^^^^^^^^^
> 		_;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        459
Source: 
> 		_;
> 		_notEntered = true;
>   ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        457
Source: 
> 		require(_notEntered, "Impermax: REENTERED");
> 		_notEntered = false;
>   ^^^^^^^^^^^^^^^^^^^
> 		_;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        459
Source: 
> 		_;
> 		_notEntered = true;
>   ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        457
Source: 
> 		require(_notEntered, "Impermax: REENTERED");
> 		_notEntered = false;
>   ^^^^^^^^^^^^^^^^^^^
> 		_;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        459
Source: 
> 		_;
> 		_notEntered = true;
>   ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        457
Source: 
> 		require(_notEntered, "Impermax: REENTERED");
> 		_notEntered = false;
>   ^^^^^^^^^^^^^^^^^^^
> 		_;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        459
Source: 
> 		_;
> 		_notEntered = true;
>   ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        239
Source: 
> 	function _mint(address to, uint value) internal {
> 		totalSupply = totalSupply.add(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		balanceOf[to] = balanceOf[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        240
Source: 
> 		totalSupply = totalSupply.add(value);
> 		balanceOf[to] = balanceOf[to].add(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0), to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        245
Source: 
> 	function _burn(address from, uint value) internal {
> 		balanceOf[from] = balanceOf[from].sub(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalSupply = totalSupply.sub(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        246
Source: 
> 		balanceOf[from] = balanceOf[from].sub(value);
> 		totalSupply = totalSupply.sub(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(from, address(0), value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        251
Source: 
> 	function _approve(address owner, address spender, uint value) private {
> 		allowance[owner][spender] = value;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        256
Source: 
> 	function _transfer(address from, address to, uint value) internal {
> 		balanceOf[from] = balanceOf[from].sub(value, "Impermax: TRANSFER_TOO_HIGH");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		balanceOf[to] = balanceOf[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        257
Source: 
> 		balanceOf[from] = balanceOf[from].sub(value, "Impermax: TRANSFER_TOO_HIGH");
> 		balanceOf[to] = balanceOf[to].add(value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(from, to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ImpermaxERC20
Line:        285
Source: 
> 				DOMAIN_SEPARATOR,
> 				keccak256(abi.encode(typehash, owner, spender, value, nonces[owner]++, deadline))
>                                                           ^^^^^^^^^^^^^^^
> 			)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        396
Source: 
> 	function _update() internal {
> 		totalBalance = IERC20(underlying).balanceOf(address(this));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Sync(totalBalance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        457
Source: 
> 		require(_notEntered, "Impermax: REENTERED");
> 		_notEntered = false;
>   ^^^^^^^^^^^^^^^^^^^
> 		_;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        459
Source: 
> 		_;
> 		_notEntered = true;
>   ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        457
Source: 
> 		require(_notEntered, "Impermax: REENTERED");
> 		_notEntered = false;
>   ^^^^^^^^^^^^^^^^^^^
> 		_;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        459
Source: 
> 		_;
> 		_notEntered = true;
>   ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        457
Source: 
> 		require(_notEntered, "Impermax: REENTERED");
> 		_notEntered = false;
>   ^^^^^^^^^^^^^^^^^^^
> 		_;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        459
Source: 
> 		_;
> 		_notEntered = true;
>   ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        457
Source: 
> 		require(_notEntered, "Impermax: REENTERED");
> 		_notEntered = false;
>   ^^^^^^^^^^^^^^^^^^^
> 		_;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoolToken
Line:        459
Source: 
> 		_;
> 		_notEntered = true;
>   ^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        205
Source: 
> 	
> 	string public name;
>  ^^^^^^^^^^^^^^^^^^
> 	string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        206
Source: 
> 	string public name;
> 	string public symbol;
>  ^^^^^^^^^^^^^^^^^^^^
> 	uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        207
Source: 
> 	string public symbol;
> 	uint8 public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        208
Source: 
> 	uint8 public decimals = 18;
> 	uint public totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) public balanceOf;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        205
Source: 
> 	
> 	string public name;
>  ^^^^^^^^^^^^^^^^^^
> 	string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        206
Source: 
> 	string public name;
> 	string public symbol;
>  ^^^^^^^^^^^^^^^^^^^^
> 	uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        207
Source: 
> 	string public symbol;
> 	uint8 public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        205
Source: 
> 	
> 	string public name;
>  ^^^^^^^^^^^^^^^^^^
> 	string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        206
Source: 
> 	string public name;
> 	string public symbol;
>  ^^^^^^^^^^^^^^^^^^^^
> 	uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ImpermaxERC20
Line:        207
Source: 
> 	string public symbol;
> 	uint8 public decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ImpermaxERC20
Line:        280
Source: 
> 	function _checkSignature(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s, bytes32 typehash) internal {
> 		require(deadline >= block.timestamp, "Impermax: EXPIRED");
>                       ^^^^^^^^^^^^^^^
> 		bytes32 digest = keccak256(

[0m
