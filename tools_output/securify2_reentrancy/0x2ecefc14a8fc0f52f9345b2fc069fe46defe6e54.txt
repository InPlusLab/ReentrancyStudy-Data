Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Violation
Contract:    AddressConfig
Line:        1058
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MinterRole
Line:        613
Source: 
> 
> 	Roles.Role private _minters;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        680
Source: 
> 
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        326
Source: 
> 	 */
> 	function totalSupply() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        333
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        345
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        353
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        368
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        385
Source: 
> 	 */
> 	function transferFrom(
>  ^^^^^^^^^^^^^^^^^^^^^^
> 		address sender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        414
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        440
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        631
Source: 
> 
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        635
Source: 
> 
> 	function renounceMinter() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removeMinter(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        326
Source: 
> 	 */
> 	function totalSupply() public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        333
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        345
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        353
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        368
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        385
Source: 
> 	 */
> 	function transferFrom(
>  ^^^^^^^^^^^^^^^^^^^^^^
> 		address sender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        414
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        440
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        631
Source: 
> 
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinterRole
Line:        635
Source: 
> 
> 	function renounceMinter() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removeMinter(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Mintable
Line:        664
Source: 
> 	 */
> 	function mint(address account, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        702
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        702
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        750
Source: 
> 	 */
> 	function paused() public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        773
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        781
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        818
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        853
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        879
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        888
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        818
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        853
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        879
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        888
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        702
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        773
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        781
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        853
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        879
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        888
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        702
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        773
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        781
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        853
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        879
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        888
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        702
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        773
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        781
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        345
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        385
Source: 
> 	 */
> 	function transferFrom(
>  ^^^^^^^^^^^^^^^^^^^^^^
> 		address sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        414
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        440
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        627
Source: 
> 
> 	function isMinter(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _minters.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        631
Source: 
> 
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        345
Source: 
> 	 */
> 	function transfer(address recipient, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transfer(_msgSender(), recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        385
Source: 
> 	 */
> 	function transferFrom(
>  ^^^^^^^^^^^^^^^^^^^^^^
> 		address sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        414
Source: 
> 	 */
> 	function increaseAllowance(address spender, uint256 addedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        440
Source: 
> 	 */
> 	function decreaseAllowance(address spender, uint256 subtractedValue)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        627
Source: 
> 
> 	function isMinter(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _minters.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinterRole
Line:        631
Source: 
> 
> 	function addMinter(address account) public onlyMinter {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addMinter(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Mintable
Line:        664
Source: 
> 	 */
> 	function mint(address account, uint256 amount)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        694
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        694
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        888
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EternalStorage
Line:        1122
Source: 
> 
> 	function changeOwner(address _newOwner) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == currentOwner, "not current owner");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        694
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        888
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        1237
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        1241
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        694
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        888
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        1237
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        1241
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1251
Source: 
> 	// RewardsAmount
> 	function setRewardsAmount(address _property, uint256 _value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().withdraw());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1257
Source: 
> 
> 	function getRewardsAmount(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1274
Source: 
> 	// CumulativePrice
> 	function setCumulativePrice(address _property, uint256 _value) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// The previously used function

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1282
Source: 
> 
> 	function getCumulativePrice(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1299
Source: 
> 	// WithdrawalLimitTotal
> 	function setWithdrawalLimitTotal(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1312
Source: 
> 
> 	function getWithdrawalLimitTotal(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1335
Source: 
> 	// WithdrawalLimitBalance
> 	function setWithdrawalLimitBalance(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1348
Source: 
> 
> 	function getWithdrawalLimitBalance(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1371
Source: 
> 	//LastWithdrawalPrice
> 	function setLastWithdrawalPrice(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1384
Source: 
> 
> 	function getLastWithdrawalPrice(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1407
Source: 
> 	//PendingWithdrawal
> 	function setPendingWithdrawal(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1420
Source: 
> 
> 	function getPendingWithdrawal(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1439
Source: 
> 	//LastCumulativeGlobalHoldersPrice
> 	function setLastCumulativeGlobalHoldersPrice(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithdrawStorage
Line:        1452
Source: 
> 
> 	function getLastCumulativeGlobalHoldersPrice(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        694
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        698
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1571
Source: 
> 
> 	function withdraw(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(_property, config().propertyGroup());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1597
Source: 
> 
> 	function beforeBalanceChange(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _property,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1650
Source: 
> 
> 	function getRewardsAmount(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1722
Source: 
> 
> 	function calculateWithdrawableAmount(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Withdraw
Line:        1731
Source: 
> 
> 	function calculateTotalWithdrawableAmount(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        333
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        353
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        368
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        333
Source: 
> 	 */
> 	function balanceOf(address account) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        353
Source: 
> 	 */
> 	function allowance(address owner, address spender)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        368
Source: 
> 	 */
> 	function approve(address spender, uint256 amount) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_approve(_msgSender(), spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        920
Source: 
> 
> 	function validateIllegalAddress(address _addr) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr != address(0), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        924
Source: 
> 
> 	function validateGroup(address _addr, address _groupAddr) external view {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        928
Source: 
> 
> 	function validateGroups(
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        939
Source: 
> 
> 	function validateAddress(address _addr, address _target) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr == _target, errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        943
Source: 
> 
> 	function validateAddresses(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        954
Source: 
> 
> 	function validate3Addresses(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1005
Source: 
> 
> 	function setAllocator(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocator = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1009
Source: 
> 
> 	function setAllocatorStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocatorStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1013
Source: 
> 
> 	function setWithdraw(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdraw = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1017
Source: 
> 
> 	function setWithdrawStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdrawStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1021
Source: 
> 
> 	function setMarketFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1025
Source: 
> 
> 	function setMarketGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1029
Source: 
> 
> 	function setPropertyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1033
Source: 
> 
> 	function setPropertyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1037
Source: 
> 
> 	function setMetricsFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1041
Source: 
> 
> 	function setMetricsGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1045
Source: 
> 
> 	function setPolicyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1049
Source: 
> 
> 	function setPolicyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1053
Source: 
> 
> 	function setPolicySet(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policySet = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1057
Source: 
> 
> 	function setPolicy(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, policyFactory);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1062
Source: 
> 
> 	function setToken(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		token = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1066
Source: 
> 
> 	function setLockup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1070
Source: 
> 
> 	function setLockupStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockupStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1074
Source: 
> 
> 	function setVoteTimes(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimes = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1078
Source: 
> 
> 	function setVoteTimesStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimesStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1082
Source: 
> 
> 	function setVoteCounter(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        1086
Source: 
> 
> 	function setVoteCounterStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounterStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1128
Source: 
> 	// *** Getter Methods ***
> 	function getUint(bytes32 _key) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return uIntStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1132
Source: 
> 
> 	function getString(bytes32 _key) external view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return stringStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1136
Source: 
> 
> 	function getAddress(bytes32 _key) external view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return addressStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1140
Source: 
> 
> 	function getBytes(bytes32 _key) external view returns (bytes32) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return bytesStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1144
Source: 
> 
> 	function getBool(bytes32 _key) external view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return boolStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1148
Source: 
> 
> 	function getInt(bytes32 _key) external view returns (int256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return intStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1153
Source: 
> 	// *** Setter Methods ***
> 	function setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uIntStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1157
Source: 
> 
> 	function setString(bytes32 _key, string calldata _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1164
Source: 
> 
> 	function setAddress(bytes32 _key, address _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1171
Source: 
> 
> 	function setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytesStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1175
Source: 
> 
> 	function setBool(bytes32 _key, bool _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		boolStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1179
Source: 
> 
> 	function setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		intStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1184
Source: 
> 	// *** Delete Methods ***
> 	function deleteUint(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete uIntStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1188
Source: 
> 
> 	function deleteString(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete stringStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1192
Source: 
> 
> 	function deleteAddress(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete addressStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1196
Source: 
> 
> 	function deleteBytes(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete bytesStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1200
Source: 
> 
> 	function deleteBool(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete boolStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        1204
Source: 
> 
> 	function deleteInt(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete intStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    WithdrawStorage
Line:        1248
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Withdraw
Line:        1569
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Withdraw
Line:        1639
Source: 
> 		);
> 		(, uint256 total, , , ) = difference(withdrawStorage, _property, _to);
>      ^^^^^^^^^^^^^
> 		if (totalLimit != total) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Withdraw
Line:        1695
Source: 
> 		(
> 			uint256 reward,
>    ^^^^^^^^^^^^^^
> 			uint256 _holders,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Withdraw
Line:        1736
Source: 
> 	{
> 		(, uint256 _amount, , , ) = ILockup(config().lockup()).difference(
>      ^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Decimals
Line:        789
Source: 
> 	using SafeMath for uint256;
> 	uint120 private constant basisValue = 1000000000000000000;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Killable
Line:        812
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressValidator
Line:        918
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1639
Source: 
> 		);
> 		(, uint256 total, , , ) = difference(withdrawStorage, _property, _to);
>      ^^^^^^^^^^^^^
> 		if (totalLimit != total) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1673
Source: 
> 	{
> 		uint256 _last = withdrawStorage.getLastCumulativeGlobalHoldersPrice(
>   ^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1696
Source: 
> 			uint256 reward,
> 			uint256 _holders,
>    ^^^^^^^^^^^^^^^^
> 			uint256 _holdersPrice,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1697
Source: 
> 			uint256 _holders,
> 			uint256 _holdersPrice,
>    ^^^^^^^^^^^^^^^^^^^^^
> 			,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1695
Source: 
> 		(
> 			uint256 reward,
>    ^^^^^^^^^^^^^^
> 			uint256 _holders,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1714
Source: 
> 	{
> 		(uint256 _value, uint256 price) = _calculateAmount(_property, _user);
>    ^^^^^^^^^^^^^^
> 		uint256 legacy = __legacyWithdrawableAmount(_property, _user);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1727
Source: 
> 	{
> 		(uint256 value, ) = _calculateWithdrawableAmount(_property, _user);
>    ^^^^^^^^^^^^^
> 		return value;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1736
Source: 
> 	{
> 		(, uint256 _amount, , , ) = ILockup(config().lockup()).difference(
>      ^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1743
Source: 
> 
> 	function __legacyWithdrawableAmount(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		private

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1749
Source: 
> 		WithdrawStorage withdrawStorage = getStorage();
> 		uint256 _last = withdrawStorage.getLastWithdrawalPrice(
>   ^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Withdraw
Line:        1760
Source: 
> 
> 	function __updateLegacyWithdrawableAmount(address _property, address _user)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		private

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AddressValidator
Line:        918
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Decimals
Line:        789
Source: 
> 	using SafeMath for uint256;
> 	uint120 private constant basisValue = 1000000000000000000;
>                                        ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        925
Source: 
> 	function validateGroup(address _addr, address _groupAddr) external view {
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        933
Source: 
> 	) external view {
> 		if (IGroup(_groupAddr1).isGroup(_addr)) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        936
Source: 
> 		}
> 		require(IGroup(_groupAddr2).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1252
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1277
Source: 
> 		// This function is only used in testing
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1304
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1340
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1376
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1412
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WithdrawStorage
Line:        1444
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1572
Source: 
> 	function withdraw(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1589
Source: 
> 		ILockup lockup = ILockup(config().lockup());
> 		require(erc20.mint(msg.sender, value), "dev mint failed");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockup.update();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1593
Source: 
> 			_property,
> 			withdrawStorage.getRewardsAmount(_property).add(value)
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1764
Source: 
> 		WithdrawStorage withdrawStorage = getStorage();
> 		uint256 price = withdrawStorage.getCumulativePrice(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdrawStorage.setLastWithdrawalPrice(_property, _user, price);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1717
Source: 
> 		uint256 value = _value
> 			.add(getStorage().getPendingWithdrawal(_property, _user))
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			.add(legacy);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1755
Source: 
> 		uint256 priceGap = price.sub(_last);
> 		uint256 balance = ERC20Mintable(_property).balanceOf(_user);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 value = priceGap.mul(balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1686
Source: 
> 		WithdrawStorage withdrawStorage = getStorage();
> 		uint256 totalLimit = withdrawStorage.getWithdrawalLimitTotal(
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1690
Source: 
> 		);
> 		uint256 balanceLimit = withdrawStorage.getWithdrawalLimitBalance(
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1701
Source: 
> 		) = difference(withdrawStorage, _property, _user);
> 		uint256 balance = ERC20Mintable(_property).balanceOf(_user);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (totalLimit == _holders) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1673
Source: 
> 	{
> 		uint256 _last = withdrawStorage.getLastCumulativeGlobalHoldersPrice(
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1602
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 		WithdrawStorage withdrawStorage = getStorage();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1620
Source: 
> 		);
> 		uint256 pendFrom = withdrawStorage.getPendingWithdrawal(
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1624
Source: 
> 		);
> 		uint256 pendTo = withdrawStorage.getPendingWithdrawal(_property, _to);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdrawStorage.setPendingWithdrawal(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1635
Source: 
> 		);
> 		uint256 totalLimit = withdrawStorage.getWithdrawalLimitTotal(
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Withdraw
Line:        1645
Source: 
> 				_to,
> 				ERC20Mintable(_property).balanceOf(_to)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressConfig
Line:        1058
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        1242
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1252
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1254
Source: 
> 
> 		eternalStorage().setUint(getRewardsAmountKey(_property), _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1262
Source: 
> 	{
> 		return eternalStorage().getUint(getRewardsAmountKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1277
Source: 
> 		// This function is only used in testing
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1279
Source: 
> 
> 		eternalStorage().setUint(getCumulativePriceKey(_property), _value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1287
Source: 
> 	{
> 		return eternalStorage().getUint(getCumulativePriceKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1304
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1306
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getWithdrawalLimitTotalKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1318
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getWithdrawalLimitTotalKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1340
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1342
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getWithdrawalLimitBalanceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1354
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getWithdrawalLimitBalanceKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1376
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1378
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastWithdrawalPriceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1390
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getLastWithdrawalPriceKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1412
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1414
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getPendingWithdrawalKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1426
Source: 
> 		return
> 			eternalStorage().getUint(getPendingWithdrawalKey(_property, _user));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1444
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1446
Source: 
> 
> 		eternalStorage().setUint(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			getLastCumulativeGlobalHoldersPriceKey(_property, _user),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WithdrawStorage
Line:        1457
Source: 
> 		return
> 			eternalStorage().getUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getLastCumulativeGlobalHoldersPriceKey(_property, _user)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1572
Source: 
> 	function withdraw(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1580
Source: 
> 		WithdrawStorage withdrawStorage = getStorage();
> 		withdrawStorage.setLastCumulativeGlobalHoldersPrice(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1585
Source: 
> 		);
> 		withdrawStorage.setPendingWithdrawal(_property, msg.sender, 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		__updateLegacyWithdrawableAmount(_property, msg.sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1587
Source: 
> 		__updateLegacyWithdrawableAmount(_property, msg.sender);
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
>                                       ^^^^^^^^^^^^^^^^
> 		ILockup lockup = ILockup(config().lockup());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1588
Source: 
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
> 		ILockup lockup = ILockup(config().lockup());
>                            ^^^^^^^^^^^^^^^^^
> 		require(erc20.mint(msg.sender, value), "dev mint failed");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1590
Source: 
> 		require(erc20.mint(msg.sender, value), "dev mint failed");
> 		lockup.update();
>   ^^^^^^^^^^^^^^^
> 		withdrawStorage.setRewardsAmount(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1591
Source: 
> 		lockup.update();
> 		withdrawStorage.setRewardsAmount(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1765
Source: 
> 		uint256 price = withdrawStorage.getCumulativePrice(_property);
> 		withdrawStorage.setLastWithdrawalPrice(_property, _user, price);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1770
Source: 
> 		require(paused() == false, "You cannot use that");
> 		return WithdrawStorage(config().withdrawStorage());
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1749
Source: 
> 		WithdrawStorage withdrawStorage = getStorage();
> 		uint256 _last = withdrawStorage.getLastWithdrawalPrice(
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1753
Source: 
> 		);
> 		uint256 price = withdrawStorage.getCumulativePrice(_property);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 priceGap = price.sub(_last);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1677
Source: 
> 		);
> 		return ILockup(config().lockup()).difference(_property, _last);
>                  ^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1677
Source: 
> 		);
> 		return ILockup(config().lockup()).difference(_property, _last);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1602
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		WithdrawStorage withdrawStorage = getStorage();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1610
Source: 
> 		(uint256 amountTo, uint256 priceTo) = _calculateAmount(_property, _to);
> 		withdrawStorage.setLastCumulativeGlobalHoldersPrice(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1615
Source: 
> 		);
> 		withdrawStorage.setLastCumulativeGlobalHoldersPrice(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1625
Source: 
> 		uint256 pendTo = withdrawStorage.getPendingWithdrawal(_property, _to);
> 		withdrawStorage.setPendingWithdrawal(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1630
Source: 
> 		);
> 		withdrawStorage.setPendingWithdrawal(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1641
Source: 
> 		if (totalLimit != total) {
> 			withdrawStorage.setWithdrawalLimitTotal(_property, _to, total);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			withdrawStorage.setWithdrawalLimitBalance(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1642
Source: 
> 			withdrawStorage.setWithdrawalLimitTotal(_property, _to, total);
> 			withdrawStorage.setWithdrawalLimitBalance(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1655
Source: 
> 	{
> 		return getStorage().getRewardsAmount(_property);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1736
Source: 
> 	{
> 		(, uint256 _amount, , , ) = ILockup(config().lockup()).difference(
>                                       ^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Withdraw
Line:        1736
Source: 
> 	{
> 		(, uint256 _amount, , , ) = ILockup(config().lockup()).difference(
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        321
Source: 
> 
> 	uint256 private _totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        984
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        985
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        986
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        987
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        988
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        989
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        990
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        991
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        992
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        993
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        994
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        995
Source: 
> 	address public policy;
> 	address public policyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policySet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        996
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        997
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        998
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        999
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        1000
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        1001
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        1002
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        1003
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        737
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        1210
Source: 
> contract UsingStorage is Ownable, Pausable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        737
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        971
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        1092
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        1210
Source: 
> contract UsingStorage is Ownable, Pausable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        737
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        971
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        1092
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        321
Source: 
> 
> 	uint256 private _totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinterRole
Line:        613
Source: 
> 
> 	Roles.Role private _minters;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        680
Source: 
> 
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    Decimals
Line:        789
Source: 
> 	using SafeMath for uint256;
> 	uint120 private constant basisValue = 1000000000000000000;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        545
Source: 
> 
> 		_allowances[owner][spender] = amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        582
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        590
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        545
Source: 
> 
> 		_allowances[owner][spender] = amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        497
Source: 
> 
> 		_totalSupply = _totalSupply.add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_balances[account] = _balances[account].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        498
Source: 
> 		_totalSupply = _totalSupply.add(amount);
> 		_balances[account] = _balances[account].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(address(0), account, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        582
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        590
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        582
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        590
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        582
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        590
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        774
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        782
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        582
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        590
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        774
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        782
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        582
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        590
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        774
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        782
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        582
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        590
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        774
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        782
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        477
Source: 
> 
> 		_balances[sender] = _balances[sender].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        481
Source: 
> 		);
> 		_balances[recipient] = _balances[recipient].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        477
Source: 
> 
> 		_balances[sender] = _balances[sender].sub(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amount,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        481
Source: 
> 		);
> 		_balances[recipient] = _balances[recipient].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressConfig
Line:        1059
Source: 
> 		addressValidator().validateAddress(msg.sender, policyFactory);
> 		policy = _addr;
>   ^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        559
Source: 
> 			account,
> 			_msgSender(),
>    ^^^^^^^^^^^^
> 			_allowances[account][_msgSender()].sub(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        560
Source: 
> 			_msgSender(),
> 			_allowances[account][_msgSender()].sub(
>                         ^^^^^^^^^^^^
> 				amount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        559
Source: 
> 			account,
> 			_msgSender(),
>    ^^^^^^^^^^^^
> 			_allowances[account][_msgSender()].sub(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC20
Line:        560
Source: 
> 			_msgSender(),
> 			_allowances[account][_msgSender()].sub(
>                         ^^^^^^^^^^^^
> 				amount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        775
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        783
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AddressConfig
Line:        1058
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        775
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        783
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UsingStorage
Line:        1223
Source: 
> 	{
> 		require(paused() == false, "You cannot use that");
>           ^^^^^^^^
> 		return EternalStorage(_storage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        775
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        783
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1252
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1252
Source: 
> 	function setRewardsAmount(address _property, uint256 _value) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1277
Source: 
> 		// This function is only used in testing
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1277
Source: 
> 		// This function is only used in testing
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1304
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1304
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1340
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1340
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1376
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1376
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1412
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1412
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1444
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WithdrawStorage
Line:        1444
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().withdraw());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        775
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        783
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1572
Source: 
> 	function withdraw(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>                                               ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1572
Source: 
> 	function withdraw(address _property) external {
> 		addressValidator().validateGroup(_property, config().propertyGroup());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1587
Source: 
> 		__updateLegacyWithdrawableAmount(_property, msg.sender);
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
>                                       ^^^^^^^^
> 		ILockup lockup = ILockup(config().lockup());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1588
Source: 
> 		ERC20Mintable erc20 = ERC20Mintable(config().token());
> 		ILockup lockup = ILockup(config().lockup());
>                            ^^^^^^^^
> 		require(erc20.mint(msg.sender, value), "dev mint failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1770
Source: 
> 		require(paused() == false, "You cannot use that");
> 		return WithdrawStorage(config().withdrawStorage());
>                          ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1677
Source: 
> 		);
> 		return ILockup(config().lockup()).difference(_property, _last);
>                  ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1677
Source: 
> 		);
> 		return ILockup(config().lockup()).difference(_property, _last);
>                  ^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1602
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>                                                  ^^^^^^^^
> 		WithdrawStorage withdrawStorage = getStorage();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1602
Source: 
> 	) external {
> 		addressValidator().validateAddress(msg.sender, config().allocator());
>   ^^^^^^^^^^^^^^^^^^
> 		WithdrawStorage withdrawStorage = getStorage();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1736
Source: 
> 	{
> 		(, uint256 _amount, , , ) = ILockup(config().lockup()).difference(
>                                       ^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Withdraw
Line:        1736
Source: 
> 	{
> 		(, uint256 _amount, , , ) = ILockup(config().lockup()).difference(
>                                       ^^^^^^^^^^^^^^^^^
> 			_property,

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UsingValidator
Line:        971
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        983
Source: 
> contract AddressConfig is Ownable, UsingValidator, Killable {
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocator;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        984
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        985
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        986
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        987
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        988
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        989
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        990
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        991
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        992
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        993
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        994
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        996
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        997
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        998
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        999
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        1000
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        1001
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        1002
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        1003
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
