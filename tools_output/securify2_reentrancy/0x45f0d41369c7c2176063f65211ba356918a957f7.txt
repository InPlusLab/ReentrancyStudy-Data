[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CityContract
Line:        10
Source: 
>     address payable gameMaster;
>     Tile[70] public tiles;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CityContract
Line:        16
Source: 
> 
>     function buyTile(uint tileLocator) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Tile memory tile = tiles[tileLocator];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CityContract
Line:        34
Source: 
>         require(msg.value > price - 1, "you must pay at least double the price to get the tile");
>         tile.owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tiles[tileLocator].owner = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CityContract
Line:        9
Source: 
>     struct Tile { uint locator; uint currentPrice; address payable owner; }
>     address payable gameMaster;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Tile[70] public tiles;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CityContract
Line:        34
Source: 
>         require(msg.value > price - 1, "you must pay at least double the price to get the tile");
>         tile.owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tiles[tileLocator].owner = msg.sender;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CityContract
Line:        34
Source: 
>         require(msg.value > price - 1, "you must pay at least double the price to get the tile");
>         tile.owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tiles[tileLocator].owner = msg.sender;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CityContract
Line:        10
Source: 
>     address payable gameMaster;
>     Tile[70] public tiles;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CityContract
Line:        28
Source: 
>         if (tile.locator < 1 && tileLocator > 0) {
>             tiles[tileLocator].locator = tileLocator;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
