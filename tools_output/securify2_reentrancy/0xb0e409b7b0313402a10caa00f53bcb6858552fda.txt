pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        393
Source: 
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>      * imposed by `transfer`, making them unable to receive funds via
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * `transfer`. {sendValue} removes this limitation.

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ERC721
Line:        876
Source: 
> 
> // File: openzeppelin-solidity/contracts/token/ERC721/IERC721Enumerable.sol
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }


[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC721
Line:        130
Source: 
>      * - `from`, `to` cannot be zero.
>      * - `tokenId` must be owned by `from`.
>                        ^^^^^^^^^^^^^^^^^^^^
>      * - If the caller is not `from`, it must be have been allowed to move this

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC721
Line:        131
Source: 
>      * - `tokenId` must be owned by `from`.
>      * - If the caller is not `from`, it must be have been allowed to move this
>                                                                   ^^^^^^^^^^^^^
>      * NFT by either {approve} or {setApprovalForAll}.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        591
Source: 
>      * The zero address indicates there is no approved address.
>      * There can only be one approved address per token at a given time.
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * Can only be called by the token owner or an approved operator.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Enumerable
Line:        957
Source: 
>      * @param index uint256 representing the index to be accessed of the tokens list
>      * @return uint256 token ID at the given index of the tokens list
>                                                             ^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Enumerable
Line:        976
Source: 
> 
>         _addTokenToOwnerEnumeration(to, tokenId);
>                                      ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        591
Source: 
>      * The zero address indicates there is no approved address.
>      * There can only be one approved address per token at a given time.
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * Can only be called by the token owner or an approved operator.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Enumerable
Line:        957
Source: 
>      * @param index uint256 representing the index to be accessed of the tokens list
>      * @return uint256 token ID at the given index of the tokens list
>                                                             ^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Enumerable
Line:        976
Source: 
> 
>         _addTokenToOwnerEnumeration(to, tokenId);
>                                      ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1316
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1343
Source: 
> 
> library String {
>              ^^^
>     function concat(string memory _a, string memory _b)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1351
Source: 
>         bytes memory _bBytes = bytes(_b);
>         bytes memory _result = new bytes(_aBytes.length + _bBytes.length);
>                                                                           
>         uint256 _k = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Enumerable
Line:        957
Source: 
>      * @param index uint256 representing the index to be accessed of the tokens list
>      * @return uint256 token ID at the given index of the tokens list
>                                                             ^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Enumerable
Line:        976
Source: 
> 
>         _addTokenToOwnerEnumeration(to, tokenId);
>                                      ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1316
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1343
Source: 
> 
> library String {
>              ^^^
>     function concat(string memory _a, string memory _b)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1351
Source: 
>         bytes memory _bBytes = bytes(_b);
>         bytes memory _result = new bytes(_aBytes.length + _bBytes.length);
>                                                                           
>         uint256 _k = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Tradable
Line:        1446
Source: 
>  * ███████║███████║███████╗███████║██████╔╝██║   ██║██╔██╗ ██║█████╗  ███████╗
>  * ██╔══██║██╔══██║╚════██║██╔══██║██╔══██╗██║   ██║██║╚██╗██║██╔══╝  ╚════██║
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * ██║  ██║██║  ██║███████║██║  ██║██║  ██║╚██████╔╝██║ ╚████║███████╗███████║

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenesisHashrunes
Line:        1514
Source: 
>             supply < maxSupply,
>             "Tokens at max supply; cannot mint any more."
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GenesisHashrunes
Line:        1516
Source: 
>         );
>         uint256 genesisTokenId = genesisHashrunes.getTokenId(_name);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _currentPrice;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Enumerable
Line:        957
Source: 
>      * @param index uint256 representing the index to be accessed of the tokens list
>      * @return uint256 token ID at the given index of the tokens list
>                                                             ^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Enumerable
Line:        976
Source: 
> 
>         _addTokenToOwnerEnumeration(to, tokenId);
>                                      ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1343
Source: 
> 
> library String {
>              ^^^
>     function concat(string memory _a, string memory _b)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        1351
Source: 
>         bytes memory _bBytes = bytes(_b);
>         bytes memory _result = new bytes(_aBytes.length + _bBytes.length);
>                                                                           
>         uint256 _k = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721Tradable
Line:        1446
Source: 
>  * ███████║███████║███████╗███████║██████╔╝██║   ██║██╔██╗ ██║█████╗  ███████╗
>  * ██╔══██║██╔══██║╚════██║██╔══██║██╔══██╗██║   ██║██║╚██╗██║██╔══╝  ╚════██║
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * ██║  ██║██║  ██║███████║██║  ██║██║  ██║╚██████╔╝██║ ╚████║███████╗███████║

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1553
Source: 
>         internal
>         pure
>   ^^^^^^^^^^
>         returns (string memory)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1593
Source: 
>             _result[_i++] = _colorSeed & 0xffffff;
>             _colorSeed >>= COLOR_SIZE;
>                        ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1598
Source: 
> 
>     function getRune(string memory _name) public pure returns (string memory) {
>                                                            ^^^^^^^^^^^^^^^^^^^^
>         uint256 _seed = String.hash(_name);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1610
Source: 
>             uint256 _b =
>                 _y < HALF_SIDE_LENGTH ? 2 * (SIDE_LENGTH - _y) - 1 : 2 * _y + 1;
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             for (uint256 _x = 0; _x < SIDE_LENGTH; ++_x) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1613
Source: 
>                 uint256 _a =
>                     _x < HALF_SIDE_LENGTH
>                                  ^^^^^^^^
>                         ? 2 * (SIDE_LENGTH - _x) - 1

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1634
Source: 
>         assembly {
>             mstore(_result, _index)
>                                    
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }


[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }


[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }


[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }


[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC721
Line:        866
Source: 
>     /**
>      * @dev Private function to clear current approval of a given token ID.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC721Tradable
Line:        1451
Source: 
>  *
>  * personalized generative art on the blockchain                  by Joshua Wu
>                                                                     ^^^^^^^^^^
>  *

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC721
Line:        866
Source: 
>     /**
>      * @dev Private function to clear current approval of a given token ID.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC721Tradable
Line:        1451
Source: 
>  *
>  * personalized generative art on the blockchain                  by Joshua Wu
>                                                                     ^^^^^^^^^^
>  *

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1564
Source: 
> 
>     function getCharacters(string memory _name)
>                             ^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1572
Source: 
> 
>     function getColors(string memory _name)
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1592
Source: 
>         while (_i < _result.length) {
>             _result[_i++] = _colorSeed & 0xffffff;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _colorSeed >>= COLOR_SIZE;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1586
Source: 
>             while (_i < 8) {
>                 _result[_i++] = _colorSeed & 0xffffff;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _colorSeed >>= COLOR_SIZE;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>     /**
>      * @dev Private function to clear current approval of a given token ID.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>     /**
>      * @dev Private function to clear current approval of a given token ID.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>     /**
>      * @dev Private function to clear current approval of a given token ID.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>     /**
>      * @dev Private function to clear current approval of a given token ID.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>     /**
>      * @dev Private function to clear current approval of a given token ID.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>     /**
>      * @dev Private function to clear current approval of a given token ID.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        634
Source: 
>     /**
>      * @dev Tells whether an operator is approved by a given owner.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param owner owner address which you want to query the approval of

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        634
Source: 
>     /**
>      * @dev Tells whether an operator is approved by a given owner.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param owner owner address which you want to query the approval of

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Enumerable
Line:        957
Source: 
>      * @param index uint256 representing the index to be accessed of the tokens list
>      * @return uint256 token ID at the given index of the tokens list
>                                                             ^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        634
Source: 
>     /**
>      * @dev Tells whether an operator is approved by a given owner.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param owner owner address which you want to query the approval of

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        634
Source: 
>     /**
>      * @dev Tells whether an operator is approved by a given owner.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param owner owner address which you want to query the approval of

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Enumerable
Line:        957
Source: 
>      * @param index uint256 representing the index to be accessed of the tokens list
>      * @return uint256 token ID at the given index of the tokens list
>                                                             ^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        1351
Source: 
>         bytes memory _bBytes = bytes(_b);
>         bytes memory _result = new bytes(_aBytes.length + _bBytes.length);
>                                                                           
>         uint256 _k = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        634
Source: 
>     /**
>      * @dev Tells whether an operator is approved by a given owner.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param owner owner address which you want to query the approval of

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Enumerable
Line:        957
Source: 
>      * @param index uint256 representing the index to be accessed of the tokens list
>      * @return uint256 token ID at the given index of the tokens list
>                                                             ^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        1351
Source: 
>         bytes memory _bBytes = bytes(_b);
>         bytes memory _result = new bytes(_aBytes.length + _bBytes.length);
>                                                                           
>         uint256 _k = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Tradable
Line:        1446
Source: 
>  * ███████║███████║███████╗███████║██████╔╝██║   ██║██╔██╗ ██║█████╗  ███████╗
>  * ██╔══██║██╔══██║╚════██║██╔══██║██╔══██╗██║   ██║██║╚██╗██║██╔══╝  ╚════██║
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * ██║  ██║██║  ██║███████║██║  ██║██║  ██║╚██████╔╝██║ ╚████║███████╗███████║

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        615
Source: 
>     function getApproved(uint256 tokenId) public view returns (address) {
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        634
Source: 
>     /**
>      * @dev Tells whether an operator is approved by a given owner.
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param owner owner address which you want to query the approval of

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        698
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Enumerable
Line:        957
Source: 
>      * @param index uint256 representing the index to be accessed of the tokens list
>      * @return uint256 token ID at the given index of the tokens list
>                                                             ^^^^^^^^^
>      */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        1351
Source: 
>         bytes memory _bBytes = bytes(_b);
>         bytes memory _result = new bytes(_aBytes.length + _bBytes.length);
>                                                                           
>         uint256 _k = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Tradable
Line:        1446
Source: 
>  * ███████║███████║███████╗███████║██████╔╝██║   ██║██╔██╗ ██║█████╗  ███████╗
>  * ██╔══██║██╔══██║╚════██║██╔══██║██╔══██╗██║   ██║██║╚██╗██║██╔══╝  ╚════██║
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * ██║  ██║██║  ██║███████║██║  ██║██║  ██║╚██████╔╝██║ ╚████║███████╗███████║

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1610
Source: 
>             uint256 _b =
>                 _y < HALF_SIDE_LENGTH ? 2 * (SIDE_LENGTH - _y) - 1 : 2 * _y + 1;
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             for (uint256 _x = 0; _x < SIDE_LENGTH; ++_x) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        510
Source: 
> 
> pragma solidity 0.5.17;
>      ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        653
Source: 
>         //solhint-disable-next-line max-line-length
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        683
Source: 
>      * @param tokenId uint256 ID of the token to be transferred
>      * @param _data bytes data to send along with a safe transfer check
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        510
Source: 
> 
> pragma solidity 0.5.17;
>      ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        653
Source: 
>         //solhint-disable-next-line max-line-length
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        683
Source: 
>      * @param tokenId uint256 ID of the token to be transferred
>      * @param _data bytes data to send along with a safe transfer check
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        510
Source: 
> 
> pragma solidity 0.5.17;
>      ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        653
Source: 
>         //solhint-disable-next-line max-line-length
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        683
Source: 
>      * @param tokenId uint256 ID of the token to be transferred
>      * @param _data bytes data to send along with a safe transfer check
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        510
Source: 
> 
> pragma solidity 0.5.17;
>      ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        653
Source: 
>         //solhint-disable-next-line max-line-length
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        683
Source: 
>      * @param tokenId uint256 ID of the token to be transferred
>      * @param _data bytes data to send along with a safe transfer check
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        510
Source: 
> 
> pragma solidity 0.5.17;
>      ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        653
Source: 
>         //solhint-disable-next-line max-line-length
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        683
Source: 
>      * @param tokenId uint256 ID of the token to be transferred
>      * @param _data bytes data to send along with a safe transfer check
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721Tradable
Line:        1443
Source: 
>  *
>  * ██╗  ██╗ █████╗ ███████╗██╗  ██╗██████╗ ██╗   ██╗███╗   ██╗███████╗███████╗
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * ██║  ██║██╔══██╗██╔════╝██║  ██║██╔══██╗██║   ██║████╗  ██║██╔════╝██╔════╝

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GenesisHashrunes
Line:        1514
Source: 
>             supply < maxSupply,
>             "Tokens at max supply; cannot mint any more."
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GenesisHashrunes
Line:        1516
Source: 
>         );
>         uint256 genesisTokenId = genesisHashrunes.getTokenId(_name);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _currentPrice;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        510
Source: 
> 
> pragma solidity 0.5.17;
>      ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        644
Source: 
>     /**
>      * @dev Transfers the ownership of a given token ID to another address.
>                                                                   ^^^^^^^^^
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        653
Source: 
>         //solhint-disable-next-line max-line-length
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        666
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        683
Source: 
>      * @param tokenId uint256 ID of the token to be transferred
>      * @param _data bytes data to send along with a safe transfer check
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721Tradable
Line:        1443
Source: 
>  *
>  * ██╗  ██╗ █████╗ ███████╗██╗  ██╗██████╗ ██╗   ██╗███╗   ██╗███████╗███████╗
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * ██║  ██║██╔══██╗██╔════╝██║  ██║██╔══██╗██║   ██║████╗  ██║██╔════╝██╔════╝

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1593
Source: 
>             _result[_i++] = _colorSeed & 0xffffff;
>             _colorSeed >>= COLOR_SIZE;
>                        ^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1598
Source: 
> 
>     function getRune(string memory _name) public pure returns (string memory) {
>                                                            ^^^^^^^^^^^^^^^^^^^^
>         uint256 _seed = String.hash(_name);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1613
Source: 
>                 uint256 _a =
>                     _x < HALF_SIDE_LENGTH
>                                  ^^^^^^^^
>                         ? 2 * (SIDE_LENGTH - _x) - 1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1634
Source: 
>         assembly {
>             mstore(_result, _index)
>                                    
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1648
Source: 
>     function decreaseMaxSupply(uint256 _amount) public onlyOwner() {
>         uint256 _newMaxSupply = maxSupply - _amount;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newMaxSupply < maxSupply);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                           

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1564
Source: 
> 
>     function getCharacters(string memory _name)
>                             ^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1572
Source: 
> 
>     function getColors(string memory _name)
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1592
Source: 
>         while (_i < _result.length) {
>             _result[_i++] = _colorSeed & 0xffffff;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _colorSeed >>= COLOR_SIZE;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1586
Source: 
>             while (_i < 8) {
>                 _result[_i++] = _colorSeed & 0xffffff;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _colorSeed >>= COLOR_SIZE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Metadata
Line:        1170
Source: 
>      * If the token's URI is non-empty and a base URI was set (via
>      * {_setBaseURI}), it will be added to the token ID's URI as a prefix.
>      ^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Metadata
Line:        1170
Source: 
>      * If the token's URI is non-empty and a base URI was set (via
>      * {_setBaseURI}), it will be added to the token ID's URI as a prefix.
>                          ^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Metadata
Line:        1233
Source: 
> 
>         // Clear metadata (if any)
>                ^^^^^^^^^^^^^^^^^^^
>         if (bytes(_tokenURIs[tokenId]).length != 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Full
Line:        1279
Source: 
>     /**
>      * @dev Initializes the contract setting the deployer as the initial owner.
>                                        ^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Full
Line:        1279
Source: 
>     /**
>      * @dev Initializes the contract setting the deployer as the initial owner.
>                                                            ^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Tradable
Line:        1427
Source: 
>         // Whitelist OpenSea proxy contract for easy trading.
>         ProxyRegistry _proxyRegistry = ProxyRegistry(proxyRegistryAddress);
>                                           ^^^^^^^^^^^^^^^^^^^
>         if (address(_proxyRegistry.proxies(_owner)) == _operator) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Tradable
Line:        1427
Source: 
>         // Whitelist OpenSea proxy contract for easy trading.
>         ProxyRegistry _proxyRegistry = ProxyRegistry(proxyRegistryAddress);
>                                                                        ^^^^
>         if (address(_proxyRegistry.proxies(_owner)) == _operator) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Tradable
Line:        1446
Source: 
>  * ███████║███████║███████╗███████║██████╔╝██║   ██║██╔██╗ ██║█████╗  ███████╗
>  * ██╔══██║██╔══██║╚════██║██╔══██║██╔══██╗██║   ██║██║╚██╗██║██╔══╝  ╚════██║
>                                                                            ^^^
>  * ██║  ██║██║  ██║███████║██║  ██║██║  ██║╚██████╔╝██║ ╚████║███████╗███████║

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1554
Source: 
>         pure
>         returns (string memory)
>    ^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1598
Source: 
> 
>     function getRune(string memory _name) public pure returns (string memory) {
>                                                                                
>         uint256 _seed = String.hash(_name);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1610
Source: 
>             uint256 _b =
>                 _y < HALF_SIDE_LENGTH ? 2 * (SIDE_LENGTH - _y) - 1 : 2 * _y + 1;
>                                                      ^^^^^^^^^^^^^^^^^^^
>             for (uint256 _x = 0; _x < SIDE_LENGTH; ++_x) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1614
Source: 
>                     _x < HALF_SIDE_LENGTH
>                         ? 2 * (SIDE_LENGTH - _x) - 1
>           ^^^^^^^^^^^^^^^^^^^
>                         : 2 * _x + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1636
Source: 
>         }
>         return string(_result);
>       ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        428
Source: 
>  * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never
>  * directly accessed.
>          ^^^^^^^^^^^^
>  */

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC721Metadata
Line:        1198
Source: 
>     function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal {
>         require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
>                   ^^^^^^^^^^^^^^^^^^^^^^^
>         _tokenURIs[tokenId] = _tokenURI;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1370
Source: 
>             _result[_k--] = bytes1(uint8(48 + (_n % 10)));
>             _n /= 10;
>           ^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1372
Source: 
>         }
>         return string(_result);
>                     ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1375
Source: 
> 
>     function hash(string memory str) internal pure returns (uint256) {
>                        ^^^^^^^^^^^^^^^^^^^^
>         return uint256(keccak256(bytes(str)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1376
Source: 
>     function hash(string memory str) internal pure returns (uint256) {
>         return uint256(keccak256(bytes(str)));
>                            ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1380
Source: 
> 
> // File: contracts/ERC721Tradable.sol
> ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1387
Source: 
> 
> contract OwnableDelegateProxy {}
>                               ^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1397
Source: 
>  */
> contract ERC721Tradable is ERC721Full, Ownable {
>                                   ^^^^^^^^^^^^
>     using String for string;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1398
Source: 
> contract ERC721Tradable is ERC721Full, Ownable {
>     using String for string;
>             ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1400
Source: 
> 
>     address private proxyRegistryAddress;
>                                   ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        1403
Source: 
>     constructor(
>         string memory _name,
>                       ^^^^^^
>         string memory _symbol,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC721Tradable
Line:        1449
Source: 
>  * ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚══════╝
>  * First Edition
> ^^^^^^^^^^^^^^^^
>  *

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1566
Source: 
>         public
>         pure
>          ^^^
>         returns (string memory)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1584
Source: 
>         uint256 _colorSeed = (_oddSeed * ENTROPY_A) >> 1;
>         if (_resultSize > 8) {
>               ^^^^^^^^^^^^^^^^
>             while (_i < 8) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1602
Source: 
>         uint256 _charactersLength = _characters.length / 3;
>         bytes memory _result = new bytes(RUNE_SIZE);
>                                          ^^^^^^^^^^^
>         uint256 _oddSeed = 2 * _seed + 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1616
Source: 
>                         : 2 * _x + 1;
>                 uint256 _residue =
>                  ^^^^^^^^^^^^^
>                     _a + _b > CORNER_THRESHOLD

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1617
Source: 
>                 uint256 _residue =
>                     _a + _b > CORNER_THRESHOLD
>                           ^^^^^^^^^^^^^^^^^^^^
>                         ? _seed % _charactersLength

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1618
Source: 
>                     _a + _b > CORNER_THRESHOLD
>                         ? _seed % _charactersLength
>                                             ^^^^^^^
>                         : ((_a * _b * (_a + _b + 1) * _oddSeed * ENTROPY_A) >>

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1619
Source: 
>                         ? _seed % _charactersLength
>                         : ((_a * _b * (_a + _b + 1) * _oddSeed * ENTROPY_A) >>
>                                   ^^^^^^^^^^^^^^^^^^^
>                             VALUE_SHIFT) % _modulus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1620
Source: 
>                         : ((_a * _b * (_a + _b + 1) * _oddSeed * ENTROPY_A) >>
>                             VALUE_SHIFT) % _modulus;
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (_residue < _charactersLength) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1621
Source: 
>                             VALUE_SHIFT) % _modulus;
>                 if (_residue < _charactersLength) {
>                        ^^^^^^^^^^
>                     _residue *= 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1621
Source: 
>                             VALUE_SHIFT) % _modulus;
>                 if (_residue < _charactersLength) {
>                                                ^^^^
>                     _residue *= 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1639
Source: 
> 
>     function contractURI() public pure returns (string memory) {
>                                   ^^^^^^^^^^^^^
>         return "https://api.hashrunes.com/v1/contract/1";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1640
Source: 
>     function contractURI() public pure returns (string memory) {
>         return "https://api.hashrunes.com/v1/contract/1";
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1643
Source: 
> 
>     function baseTokenURI() public pure returns (string memory) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return "https://api.hashrunes.com/v1/runes/1/";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1644
Source: 
>     function baseTokenURI() public pure returns (string memory) {
>         return "https://api.hashrunes.com/v1/runes/1/";
>        ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1645
Source: 
>         return "https://api.hashrunes.com/v1/runes/1/";
>     }
>     ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1647
Source: 
> 
>     function decreaseMaxSupply(uint256 _amount) public onlyOwner() {
>                                        ^^^^^^^^^^^^^^^^
>         uint256 _newMaxSupply = maxSupply - _amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1649
Source: 
>         uint256 _newMaxSupply = maxSupply - _amount;
>         require(_newMaxSupply < maxSupply);
>                                            
>         if (_newMaxSupply > supply) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1650
Source: 
>         require(_newMaxSupply < maxSupply);
>         if (_newMaxSupply > supply) {
>                                 ^^^^^
>             maxSupply = _newMaxSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1652
Source: 
>             maxSupply = _newMaxSupply;
>         } else if (maxSupply > supply) {
>          ^^^^^^^^^^
>             maxSupply = supply;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1657
Source: 
> 
>     function increasePriceIncrement(uint256 _amount) public onlyOwner() {
>                               ^^^^^^^^^^
>         uint256 _newPriceIncrement = priceIncrement + _amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1658
Source: 
>     function increasePriceIncrement(uint256 _amount) public onlyOwner() {
>         uint256 _newPriceIncrement = priceIncrement + _amount;
>               ^^^^^^^^^^
>         require(_newPriceIncrement > priceIncrement);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1662
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        539
Source: 
>     // Mapping from owner to number of owned token
>     mapping (address => Counters.Counter) private _ownedTokensCount;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        492
Source: 
>     /**
>      * @dev Registers the contract as an implementer of the interface defined by
>                                                                         ^^^^^^^^
>      * `interfaceId`. Support of the actual ERC165 interface is automatic and

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC165
Line:        496
Source: 
>      *
>      * See {IERC165-supportsInterface}.
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721
Line:        549
Source: 
>      *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc
>      *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721
Line:        550
Source: 
>      *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465
>      *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721
Line:        551
Source: 
>      *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5
>      *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd
>                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721
Line:        552
Source: 
>      *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd
>      *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e
>                                                                                    ^^^^
>      *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721
Line:        555
Source: 
>      *
>      *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721
Line:        579
Source: 
>      * @param tokenId uint256 ID of the token to query the owner of
>      * @return address currently marked as the owner of the given token ID
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Enumerable
Line:        927
Source: 
>     /**
>      * @dev Constructor function.
>                         ^^^^^^^^^
>      */

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Enumerable
Line:        930
Source: 
>     constructor () public {
>         // register the supported interface to conform to ERC721Enumerable via ERC165
>                                                                           ^^^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Enumerable
Line:        935
Source: 
>     /**
>      * @dev Gets the token ID at a given index of the tokens list of the requested owner.
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param owner address owning the tokens list to be accessed

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Enumerable
Line:        936
Source: 
>      * @dev Gets the token ID at a given index of the tokens list of the requested owner.
>      * @param owner address owning the tokens list to be accessed
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param index uint256 representing the index to be accessed of the requested tokens list

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Enumerable
Line:        941
Source: 
>     function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
>         require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _ownedTokens[owner][index];

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Metadata
Line:        1147
Source: 
>         // register the supported interfaces to conform to ERC721 via ERC165
>         _registerInterface(_INTERFACE_ID_ERC721_METADATA);
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Metadata
Line:        1147
Source: 
>         // register the supported interfaces to conform to ERC721 via ERC165
>         _registerInterface(_INTERFACE_ID_ERC721_METADATA);
>                                                        ^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Metadata
Line:        1151
Source: 
>     /**
>      * @dev Gets the token name.
>                           ^^^^^^
>      * @return string representing the token name

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Metadata
Line:        1154
Source: 
>      */
>     function name() external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Metadata
Line:        1167
Source: 
>     /**
>      * @dev Returns the URI for a given token ID. May return an empty string.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        1304
Source: 
>      * @dev Returns true if the caller is the current owner.
>      */
>    ^^^^
>     function isOwner() public view returns (bool) {

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC721Tradable
Line:        1426
Source: 
>     {
>         // Whitelist OpenSea proxy contract for easy trading.
>                                         ^^^^^^^^^^^^^^^^^^^^^
>         ProxyRegistry _proxyRegistry = ProxyRegistry(proxyRegistryAddress);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1519
Source: 
>         if (genesisTokenId > 0) {
>             require(
>              ^^^^^^^
>                 _msgSender() == genesisHashrunes.ownerOf(genesisTokenId),

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1520
Source: 
>             require(
>                 _msgSender() == genesisHashrunes.ownerOf(genesisTokenId),
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "The Genesis Hashrune exists for this name. Only its owner can mint this First Edition."

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1521
Source: 
>                 _msgSender() == genesisHashrunes.ownerOf(genesisTokenId),
>                 "The Genesis Hashrune exists for this name. Only its owner can mint this First Edition."
>                                                                                    ^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1525
Source: 
>         } else {
>             _currentPrice = price;
>                                  ^
>             price += priceIncrement;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1527
Source: 
>             price += priceIncrement;
>             require(price > _currentPrice);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1529
Source: 
>             require(
>                 msg.value >= _currentPrice,
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Price is greater than amount sent."

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1530
Source: 
>                 msg.value >= _currentPrice,
>                 "Price is greater than amount sent."
>                                              ^^^^^^^
>             );

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1532
Source: 
>             );
>             address payable _wallet = address(uint160(owner()));
>                                                 ^^^^^^^^^^^^^^^^
>             _wallet.transfer(_currentPrice);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1533
Source: 
>             address payable _wallet = address(uint160(owner()));
>             _wallet.transfer(_currentPrice);
>                                 ^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1535
Source: 
>         }
>         _mint(_msgSender(), ++supply);
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         tokenIds[_name] = supply;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1536
Source: 
>         _mint(_msgSender(), ++supply);
>         tokenIds[_name] = supply;
>                            ^^^^^^
>         names[supply] = _name;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1538
Source: 
>         names[supply] = _name;
>         if (msg.value > _currentPrice) {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender.transfer(msg.value - _currentPrice);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1538
Source: 
>         names[supply] = _name;
>         if (msg.value > _currentPrice) {
>                                        ^
>             msg.sender.transfer(msg.value - _currentPrice);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1539
Source: 
>         if (msg.value > _currentPrice) {
>             msg.sender.transfer(msg.value - _currentPrice);
>                                                ^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1543
Source: 
> 
>     function getName(uint256 _tokenId) public view returns (string memory) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return names[_tokenId];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC165
Line:        492
Source: 
>     /**
>      * @dev Registers the contract as an implementer of the interface defined by
>                                                                         ^^^^^^^^
>      * `interfaceId`. Support of the actual ERC165 interface is automatic and

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC165
Line:        496
Source: 
>      *
>      * See {IERC165-supportsInterface}.
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721
Line:        549
Source: 
>      *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc
>      *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721
Line:        550
Source: 
>      *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465
>      *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721
Line:        551
Source: 
>      *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5
>      *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd
>                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721
Line:        552
Source: 
>      *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd
>      *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e
>                                                                                    ^^^^
>      *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721
Line:        555
Source: 
>      *
>      *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721
Line:        579
Source: 
>      * @param tokenId uint256 ID of the token to query the owner of
>      * @return address currently marked as the owner of the given token ID
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Enumerable
Line:        930
Source: 
>     constructor () public {
>         // register the supported interface to conform to ERC721Enumerable via ERC165
>                                                                           ^^^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Enumerable
Line:        935
Source: 
>     /**
>      * @dev Gets the token ID at a given index of the tokens list of the requested owner.
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param owner address owning the tokens list to be accessed

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Enumerable
Line:        936
Source: 
>      * @dev Gets the token ID at a given index of the tokens list of the requested owner.
>      * @param owner address owning the tokens list to be accessed
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param index uint256 representing the index to be accessed of the requested tokens list

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Enumerable
Line:        941
Source: 
>     function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256) {
>         require(index < balanceOf(owner), "ERC721Enumerable: owner index out of bounds");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _ownedTokens[owner][index];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Metadata
Line:        1147
Source: 
>         // register the supported interfaces to conform to ERC721 via ERC165
>         _registerInterface(_INTERFACE_ID_ERC721_METADATA);
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Metadata
Line:        1147
Source: 
>         // register the supported interfaces to conform to ERC721 via ERC165
>         _registerInterface(_INTERFACE_ID_ERC721_METADATA);
>                                                        ^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Metadata
Line:        1151
Source: 
>     /**
>      * @dev Gets the token name.
>                           ^^^^^^
>      * @return string representing the token name

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Metadata
Line:        1154
Source: 
>      */
>     function name() external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Metadata
Line:        1167
Source: 
>     /**
>      * @dev Returns the URI for a given token ID. May return an empty string.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        1304
Source: 
>      * @dev Returns true if the caller is the current owner.
>      */
>    ^^^^
>     function isOwner() public view returns (bool) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ProxyRegistry
Line:        1418
Source: 
> 
>     /**
>      ^^
>      * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC721Tradable
Line:        1426
Source: 
>     {
>         // Whitelist OpenSea proxy contract for easy trading.
>                                         ^^^^^^^^^^^^^^^^^^^^^
>         ProxyRegistry _proxyRegistry = ProxyRegistry(proxyRegistryAddress);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1519
Source: 
>         if (genesisTokenId > 0) {
>             require(
>              ^^^^^^^
>                 _msgSender() == genesisHashrunes.ownerOf(genesisTokenId),

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1520
Source: 
>             require(
>                 _msgSender() == genesisHashrunes.ownerOf(genesisTokenId),
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "The Genesis Hashrune exists for this name. Only its owner can mint this First Edition."

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1521
Source: 
>                 _msgSender() == genesisHashrunes.ownerOf(genesisTokenId),
>                 "The Genesis Hashrune exists for this name. Only its owner can mint this First Edition."
>                                                                                    ^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1525
Source: 
>         } else {
>             _currentPrice = price;
>                                  ^
>             price += priceIncrement;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1527
Source: 
>             price += priceIncrement;
>             require(price > _currentPrice);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1529
Source: 
>             require(
>                 msg.value >= _currentPrice,
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Price is greater than amount sent."

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1530
Source: 
>                 msg.value >= _currentPrice,
>                 "Price is greater than amount sent."
>                                              ^^^^^^^
>             );

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1532
Source: 
>             );
>             address payable _wallet = address(uint160(owner()));
>                                                 ^^^^^^^^^^^^^^^^
>             _wallet.transfer(_currentPrice);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1533
Source: 
>             address payable _wallet = address(uint160(owner()));
>             _wallet.transfer(_currentPrice);
>                                 ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1535
Source: 
>         }
>         _mint(_msgSender(), ++supply);
>                 ^^^^^^^^^^^^^^^^^^^^^^
>         tokenIds[_name] = supply;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1536
Source: 
>         _mint(_msgSender(), ++supply);
>         tokenIds[_name] = supply;
>                            ^^^^^^
>         names[supply] = _name;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1538
Source: 
>         names[supply] = _name;
>         if (msg.value > _currentPrice) {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender.transfer(msg.value - _currentPrice);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1538
Source: 
>         names[supply] = _name;
>         if (msg.value > _currentPrice) {
>                                        ^
>             msg.sender.transfer(msg.value - _currentPrice);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1539
Source: 
>         if (msg.value > _currentPrice) {
>             msg.sender.transfer(msg.value - _currentPrice);
>                                                ^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1543
Source: 
> 
>     function getName(uint256 _tokenId) public view returns (string memory) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return names[_tokenId];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1592
Source: 
>         while (_i < _result.length) {
>             _result[_i++] = _colorSeed & 0xffffff;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _colorSeed >>= COLOR_SIZE;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1586
Source: 
>             while (_i < 8) {
>                 _result[_i++] = _colorSeed & 0xffffff;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _colorSeed >>= COLOR_SIZE;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1592
Source: 
>         while (_i < _result.length) {
>             _result[_i++] = _colorSeed & 0xffffff;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _colorSeed >>= COLOR_SIZE;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1586
Source: 
>             while (_i < 8) {
>                 _result[_i++] = _colorSeed & 0xffffff;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _colorSeed >>= COLOR_SIZE;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1592
Source: 
>         while (_i < _result.length) {
>             _result[_i++] = _colorSeed & 0xffffff;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _colorSeed >>= COLOR_SIZE;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FirstEditionHashrunes
Line:        1586
Source: 
>             while (_i < 8) {
>                 _result[_i++] = _colorSeed & 0xffffff;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _colorSeed >>= COLOR_SIZE;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC721Tradable
Line:        1451
Source: 
>  *
>  * personalized generative art on the blockchain                  by Joshua Wu
>                                                                     ^^^^^^^^^^
>  *

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1564
Source: 
> 
>     function getCharacters(string memory _name)
>                             ^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1572
Source: 
> 
>     function getColors(string memory _name)
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        394
Source: 
>      * imposed by `transfer`, making them unable to receive funds via
>      * `transfer`. {sendValue} removes this limitation.
>                ^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    String
Line:        1400
Source: 
> 
>     address private proxyRegistryAddress;
>                   ^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC721Metadata
Line:        1151
Source: 
>     /**
>      * @dev Gets the token name.
>                           ^^^^^^
>      * @return string representing the token name

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1586
Source: 
>             while (_i < 8) {
>                 _result[_i++] = _colorSeed & 0xffffff;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _colorSeed >>= COLOR_SIZE;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        835
Source: 
>      */
>     function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
>                                                                                   ^^^^^^^^^^^^^^^^
>         internal returns (bool)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        477
Source: 
>     constructor () internal {
>         // Derived contracts need only register support for their own interfaces,
>                                ^^^^^^^^^^^^^^^^^^^
>         // we register support for ERC165 itself here

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        478
Source: 
>         // Derived contracts need only register support for their own interfaces,
>         // we register support for ERC165 itself here
>                                             ^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC165);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        902
Source: 
>  * @title ERC-721 Non-Fungible Token with optional enumeration extension logic
>  * @dev See https://eips.ethereum.org/EIPS/eip-721
>                               ^^^^^^^^^^^^^^^^^^^^
>  */

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        835
Source: 
>      */
>     function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
>                                                                                   ^^^^^^^^^^^^^^^^
>         internal returns (bool)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        477
Source: 
>     constructor () internal {
>         // Derived contracts need only register support for their own interfaces,
>                                ^^^^^^^^^^^^^^^^^^^
>         // we register support for ERC165 itself here

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        478
Source: 
>         // Derived contracts need only register support for their own interfaces,
>         // we register support for ERC165 itself here
>                                             ^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC165);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        902
Source: 
>  * @title ERC-721 Non-Fungible Token with optional enumeration extension logic
>  * @dev See https://eips.ethereum.org/EIPS/eip-721
>                               ^^^^^^^^^^^^^^^^^^^^
>  */

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        835
Source: 
>      */
>     function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
>                                                                                   ^^^^^^^^^^^^^^^^
>         internal returns (bool)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        477
Source: 
>     constructor () internal {
>         // Derived contracts need only register support for their own interfaces,
>                                ^^^^^^^^^^^^^^^^^^^
>         // we register support for ERC165 itself here

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        478
Source: 
>         // Derived contracts need only register support for their own interfaces,
>         // we register support for ERC165 itself here
>                                             ^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC165);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        902
Source: 
>  * @title ERC-721 Non-Fungible Token with optional enumeration extension logic
>  * @dev See https://eips.ethereum.org/EIPS/eip-721
>                               ^^^^^^^^^^^^^^^^^^^^
>  */

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        835
Source: 
>      */
>     function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
>                                                                                   ^^^^^^^^^^^^^^^^
>         internal returns (bool)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        477
Source: 
>     constructor () internal {
>         // Derived contracts need only register support for their own interfaces,
>                                ^^^^^^^^^^^^^^^^^^^
>         // we register support for ERC165 itself here

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        478
Source: 
>         // Derived contracts need only register support for their own interfaces,
>         // we register support for ERC165 itself here
>                                             ^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC165);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        902
Source: 
>  * @title ERC-721 Non-Fungible Token with optional enumeration extension logic
>  * @dev See https://eips.ethereum.org/EIPS/eip-721
>                               ^^^^^^^^^^^^^^^^^^^^
>  */

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        835
Source: 
>      */
>     function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
>                                                                                   ^^^^^^^^^^^^^^^^
>         internal returns (bool)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        477
Source: 
>     constructor () internal {
>         // Derived contracts need only register support for their own interfaces,
>                                ^^^^^^^^^^^^^^^^^^^
>         // we register support for ERC165 itself here

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        478
Source: 
>         // Derived contracts need only register support for their own interfaces,
>         // we register support for ERC165 itself here
>                                             ^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC165);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        902
Source: 
>  * @title ERC-721 Non-Fungible Token with optional enumeration extension logic
>  * @dev See https://eips.ethereum.org/EIPS/eip-721
>                               ^^^^^^^^^^^^^^^^^^^^
>  */

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        835
Source: 
>      */
>     function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)
>                                                                                   ^^^^^^^^^^^^^^^^
>         internal returns (bool)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        477
Source: 
>     constructor () internal {
>         // Derived contracts need only register support for their own interfaces,
>                                ^^^^^^^^^^^^^^^^^^^
>         // we register support for ERC165 itself here

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        478
Source: 
>         // Derived contracts need only register support for their own interfaces,
>         // we register support for ERC165 itself here
>                                             ^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC165);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        902
Source: 
>  * @title ERC-721 Non-Fungible Token with optional enumeration extension logic
>  * @dev See https://eips.ethereum.org/EIPS/eip-721
>                               ^^^^^^^^^^^^^^^^^^^^
>  */

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FirstEditionHashrunes
Line:        1580
Source: 
>         uint256 _oddSeed = 2 * _seed + 1;
>         uint256 _resultSize = _characters.length / 3 + 1;
>    ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _result = new uint256[](_resultSize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        646
Source: 
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
>      * Requires the msg.sender to be the owner, approved, or operator.
>                                                              ^^^^^^^^^
>      * @param from current owner of the token

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        648
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>   ^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        646
Source: 
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
>      * Requires the msg.sender to be the owner, approved, or operator.
>                                                              ^^^^^^^^^
>      * @param from current owner of the token

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        648
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>   ^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        795
Source: 
>     /**
>      * @dev Internal function to burn a specific token.
>       ^^^^^^^^^^^^^^^^
>      * Reverts if the token does not exist.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        646
Source: 
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
>      * Requires the msg.sender to be the owner, approved, or operator.
>                                                              ^^^^^^^^^
>      * @param from current owner of the token

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        648
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>   ^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        795
Source: 
>     /**
>      * @dev Internal function to burn a specific token.
>       ^^^^^^^^^^^^^^^^
>      * Reverts if the token does not exist.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1224
Source: 
>     /**
>      * @dev Internal function to burn a specific token.
>                                                ^^^^^^^^
>      * Reverts if the token does not exist.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        646
Source: 
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
>      * Requires the msg.sender to be the owner, approved, or operator.
>                                                              ^^^^^^^^^
>      * @param from current owner of the token

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        648
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>   ^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        795
Source: 
>     /**
>      * @dev Internal function to burn a specific token.
>       ^^^^^^^^^^^^^^^^
>      * Reverts if the token does not exist.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1224
Source: 
>     /**
>      * @dev Internal function to burn a specific token.
>                                                ^^^^^^^^
>      * Reverts if the token does not exist.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        646
Source: 
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
>      * Requires the msg.sender to be the owner, approved, or operator.
>                                                              ^^^^^^^^^
>      * @param from current owner of the token

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        648
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>   ^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        795
Source: 
>     /**
>      * @dev Internal function to burn a specific token.
>       ^^^^^^^^^^^^^^^^
>      * Reverts if the token does not exist.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1224
Source: 
>     /**
>      * @dev Internal function to burn a specific token.
>                                                ^^^^^^^^
>      * Reverts if the token does not exist.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        646
Source: 
>      * Usage of this method is discouraged, use {safeTransferFrom} whenever possible.
>      * Requires the msg.sender to be the owner, approved, or operator.
>                                                              ^^^^^^^^^
>      * @param from current owner of the token

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        648
Source: 
>      * @param from current owner of the token
>      * @param to address to receive the ownership of the given token ID
>   ^^^^^^^^^^^^
>      * @param tokenId uint256 ID of the token to be transferred

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1224
Source: 
>     /**
>      * @dev Internal function to burn a specific token.
>                                                ^^^^^^^^
>      * Reverts if the token does not exist.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        430
Source: 
>  */
> library Counters {
>  ^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC721Enumerable
Line:        930
Source: 
>     constructor () public {
>         // register the supported interface to conform to ERC721Enumerable via ERC165
>                                                                           ^^^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC721Enumerable
Line:        936
Source: 
>      * @dev Gets the token ID at a given index of the tokens list of the requested owner.
>      * @param owner address owning the tokens list to be accessed
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param index uint256 representing the index to be accessed of the requested tokens list

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC721Enumerable
Line:        930
Source: 
>     constructor () public {
>         // register the supported interface to conform to ERC721Enumerable via ERC165
>                                                                           ^^^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC721Enumerable
Line:        936
Source: 
>      * @dev Gets the token ID at a given index of the tokens list of the requested owner.
>      * @param owner address owning the tokens list to be accessed
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param index uint256 representing the index to be accessed of the requested tokens list

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ProxyRegistry
Line:        1418
Source: 
> 
>     /**
>      ^^
>      * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-less listings.

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC721Enumerable
Line:        930
Source: 
>     constructor () public {
>         // register the supported interface to conform to ERC721Enumerable via ERC165
>                                                                           ^^^^^^^^^^^
>         _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC721Enumerable
Line:        936
Source: 
>      * @dev Gets the token ID at a given index of the tokens list of the requested owner.
>      * @param owner address owning the tokens list to be accessed
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param index uint256 representing the index to be accessed of the requested tokens list

[0m
