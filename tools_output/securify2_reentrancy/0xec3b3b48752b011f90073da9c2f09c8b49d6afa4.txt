pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    wonderful_3day
Line:        47
Source: 
>     address public manager;
>     uint256 public day = 3 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public rechargeTime;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    wonderful_3day
Line:        49
Source: 
>     uint256 public rechargeTime;
>     uint256 public minAmount = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public percentage = 900;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    wonderful_3day
Line:        50
Source: 
>     uint256 public minAmount = 1 ether;
>     uint256 public percentage = 900;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalUsers;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        26
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        31
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        73
Source: 
> 
>     function deposit(address referrer) payable public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value > 0 && isTime() == false && msg.value >= minAmount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        92
Source: 
>     
>     function withdraw(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        104
Source: 
>     
>     function getRecTotal() view public returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return rechargeAddress.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        108
Source: 
>     
>     function getRec10() view public returns(RechargeInfo[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 l = rechargeAddress.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        124
Source: 
>     
>     function distribution72() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (isTime() == false){return;}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        152
Source: 
>     
>     function getMaxIncome(address addr) view public isAddress(addr) returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getDirectTotal(addr).sub(user[addr].amountWithdrawn);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        164
Source: 
>     
>     function numberWithdrawn(address addr) view public isAddress(addr) returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return user[addr].amountWithdrawn;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        168
Source: 
> 
>     function additionalThrow(address addr) view public isAddress(addr) returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 multiple = directPushMultiple(addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        186
Source: 
>     
>     function getDirectLength(address addr) view public isAddress(addr) returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return user[addr].directPush.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        190
Source: 
>     
>     function ownerWitETH(uint256 value) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(getPoolETH() >= value && ISEND == true);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    wonderful_3day
Line:        195
Source: 
>     
>     function ownerTransfer(address newOwner) public onlyOwner isAddress(newOwner) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         manager = newOwner;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    wonderful_3day
Line:        132
Source: 
>         for (;a < rechargeAddress.length; a++){
>             payable(rechargeAddress[a].rec_addr).transfer(total.div(50));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    wonderful_3day
Line:        132
Source: 
>         for (;a < rechargeAddress.length; a++){
>             payable(rechargeAddress[a].rec_addr).transfer(total.div(50));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    wonderful_3day
Line:        96
Source: 
>         require(count >= value,"Not enough quota");
>         msg.sender.transfer(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user[msg.sender].amountWithdrawn = user[msg.sender].amountWithdrawn.add(value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    wonderful_3day
Line:        44
Source: 
> 
> contract wonderful_3day {
> ^^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    wonderful_3day
Line:        52
Source: 
>     uint256 public totalUsers;
>     bool public ISEND;
>     ^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    wonderful_3day
Line:        109
Source: 
>     function getRec10() view public returns(RechargeInfo[] memory){
>         uint256 l = rechargeAddress.length;
>         ^^^^^^^^^
>         uint256 a = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    wonderful_3day
Line:        199
Source: 
>     
>     modifier isAddress(address addr) {
>                        ^^^^^^^^^^^^
>         require(addr != address(0));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    wonderful_3day
Line:        132
Source: 
>         for (;a < rechargeAddress.length; a++){
>             payable(rechargeAddress[a].rec_addr).transfer(total.div(50));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    wonderful_3day
Line:        192
Source: 
>         require(getPoolETH() >= value && ISEND == true);
>         msg.sender.transfer(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    wonderful_3day
Line:        132
Source: 
>         for (;a < rechargeAddress.length; a++){
>             payable(rechargeAddress[a].rec_addr).transfer(total.div(50));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    wonderful_3day
Line:        96
Source: 
>         require(count >= value,"Not enough quota");
>         msg.sender.transfer(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user[msg.sender].amountWithdrawn = user[msg.sender].amountWithdrawn.add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    wonderful_3day
Line:        132
Source: 
>         for (;a < rechargeAddress.length; a++){
>             payable(rechargeAddress[a].rec_addr).transfer(total.div(50));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    wonderful_3day
Line:        192
Source: 
>         require(getPoolETH() >= value && ISEND == true);
>         msg.sender.transfer(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    wonderful_3day
Line:        48
Source: 
>     uint256 public day = 3 days;
>     uint256 public rechargeTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public minAmount = 1 ether;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    wonderful_3day
Line:        51
Source: 
>     uint256 public percentage = 900;
>     uint256 public totalUsers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public ISEND;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    wonderful_3day
Line:        52
Source: 
>     uint256 public totalUsers;
>     bool public ISEND;
>     ^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    wonderful_3day
Line:        96
Source: 
>         require(count >= value,"Not enough quota");
>         msg.sender.transfer(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user[msg.sender].amountWithdrawn = user[msg.sender].amountWithdrawn.add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    wonderful_3day
Line:        132
Source: 
>         for (;a < rechargeAddress.length; a++){
>             payable(rechargeAddress[a].rec_addr).transfer(total.div(50));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    wonderful_3day
Line:        97
Source: 
>         msg.sender.transfer(value);
>         user[msg.sender].amountWithdrawn = user[msg.sender].amountWithdrawn.add(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    wonderful_3day
Line:        88
Source: 
> 		balance[msg.sender] = balance[msg.sender].add(msg.value);
> 		rechargeAddress.push(RechargeInfo({rec_addr:msg.sender,rec_value:msg.value,rec_time:block.timestamp}));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		rechargeTime = block.timestamp;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    wonderful_3day
Line:        89
Source: 
> 		rechargeAddress.push(RechargeInfo({rec_addr:msg.sender,rec_value:msg.value,rec_time:block.timestamp}));
> 		rechargeTime = block.timestamp;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    wonderful_3day
Line:        134
Source: 
>         }
>         ISEND = true;
>         ^^^^^^^^^^^^
>         return;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    wonderful_3day
Line:        89
Source: 
> 		rechargeAddress.push(RechargeInfo({rec_addr:msg.sender,rec_value:msg.value,rec_time:block.timestamp}));
> 		rechargeTime = block.timestamp;
>                  ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    wonderful_3day
Line:        139
Source: 
>     function isTime()view public returns(bool) {
>         if ((block.timestamp.sub(rechargeTime)) >= day && rechargeTime != 0){
>              ^^^^^^^^^^^^^^^
>             return true;

[0m
