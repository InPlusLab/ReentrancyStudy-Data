Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        44
Source: 
> 
> 	function transferOwnership(address _newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(address(0) != _newOwner, "address(0) != _newOwner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        49
Source: 
> 
> 	function acceptOwnership() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == newOwner, "msg.sender == newOwner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        44
Source: 
> 
> 	function transferOwnership(address _newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(address(0) != _newOwner, "address(0) != _newOwner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        49
Source: 
> 
> 	function acceptOwnership() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == newOwner, "msg.sender == newOwner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    STO
Line:        83
Source: 
>     bool internal initialized = true;
>     function init(address _tokenContract, address payable _wallet, string memory _name, string memory _symbol, uint8 _decimals, uint256 _timeStart, uint256 _timeEnd, uint256 _ethMin, address _priceFeedContract) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!initialized, "!initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    STO
Line:        123
Source: 
> 	
>     function totalSupply() view public returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tknLocked;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    STO
Line:        128
Source: 
>     event Transfer(address indexed from, address indexed to, uint256 value);
>     function transfer(address , uint256 ) public pure returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(false, "false");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    STO
Line:        132
Source: 
> 
>     function balanceOf(address _tknHolder) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tknUserPending[_tknHolder];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    STO
Line:        144
Source: 
>     
>     function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenContract.transfer(to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    STO
Line:        148
Source: 
>     
>     function changeSettings(address _tokenContract, address payable _wallet, string memory _name, string memory _symbol, uint8 _decimals, uint256 _timeStart, uint256 _timeEnd, uint256 _ethMin, address _priceFeedContract) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_tokenContract != address(0)) tokenContract = tokenInterface(_tokenContract);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    STO
Line:        160
Source: 
>     
>     function authorizeUsers(address[] memory  _users) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for( uint256 i = 0; i < _users.length; i += 1 ) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    STO
Line:        166
Source: 
>     
>     function refundBuyer(address _buyer) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_buyer, address(0), tknUserPending[_buyer]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    STO
Line:        103
Source: 
>     function priceUsd() public view returns(uint256) {
>         return uint256(priceFeedContract.read());
>                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    STO
Line:        145
Source: 
>     function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {
>         return tokenContract.transfer(to, value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    STO
Line:        229
Source: 
> 
> 		tokenContract.transfer(_buyer, tknUserPending[_buyer]);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_buyer, address(0), tknUserPending[_buyer]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    STO
Line:        195
Source: 
>         require( msg.value >= ethMin, "msg.value >= ethMin"); 
>         uint256 remainingTokens = tokenContract.balanceOf(address(this));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( remainingTokens > 0, "remainingTokens > 0" );

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    STO
Line:        200
Source: 
>         
>         uint256 oneToken = 10 ** uint256(tokenContract.decimals());
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenAmount = msg.value.mul( oneToken ).div( priceTknEth );

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    STO
Line:        208
Source: 
> 			remainingTokens = 0; // set remaining token to 0
>             _buyer.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    STO
Line:        214
Source: 
>         uint256 funds = msg.value.sub(refund);
>         wallet.transfer(funds);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    STO
Line:        106
Source: 
>     
>     function changeUsdToEth(uint256 _usd) public view returns(uint256 eth) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         eth =  _usd.mul(1e18).div(priceUsd());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    STO
Line:        110
Source: 
> 
>     function changeEthToUsd(uint256 _eth) public view returns(uint256 usd) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         usd =  _eth.mul(priceUsd()).div(1e18);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    STO
Line:        144
Source: 
>     
>     function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenContract.transfer(to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    STO
Line:        166
Source: 
>     
>     function refundBuyer(address _buyer) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_buyer, address(0), tknUserPending[_buyer]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    STO
Line:        180
Source: 
>     
>     function priceLevel(uint256 _eth) public view returns (uint256 priceTknEth) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 usd = changeEthToUsd(_eth);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    STO
Line:        83
Source: 
>     bool internal initialized = true;
>     function init(address _tokenContract, address payable _wallet, string memory _name, string memory _symbol, uint8 _decimals, uint256 _timeStart, uint256 _timeEnd, uint256 _ethMin, address _priceFeedContract) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!initialized, "!initialized");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    STO
Line:        128
Source: 
>     event Transfer(address indexed from, address indexed to, uint256 value);
>     function transfer(address , uint256 ) public pure returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(false, "false");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    STO
Line:        132
Source: 
> 
>     function balanceOf(address _tknHolder) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tknUserPending[_tknHolder];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        12
Source: 
> 		}
> 		c = a * b;
>       ^^^^^
> 		assert(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    STO
Line:        229
Source: 
> 
> 		tokenContract.transfer(_buyer, tknUserPending[_buyer]);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_buyer, address(0), tknUserPending[_buyer]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    STO
Line:        195
Source: 
>         require( msg.value >= ethMin, "msg.value >= ethMin"); 
>         uint256 remainingTokens = tokenContract.balanceOf(address(this));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( remainingTokens > 0, "remainingTokens > 0" );

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    STO
Line:        200
Source: 
>         
>         uint256 oneToken = 10 ** uint256(tokenContract.decimals());
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenAmount = msg.value.mul( oneToken ).div( priceTknEth );

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    STO
Line:        208
Source: 
> 			remainingTokens = 0; // set remaining token to 0
>             _buyer.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    STO
Line:        214
Source: 
>         uint256 funds = msg.value.sub(refund);
>         wallet.transfer(funds);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    tokenInterface
Line:        57
Source: 
> 
> contract tokenInterface {
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function balanceOf(address _owner) public view returns (uint256 balance);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    medianizerInterface
Line:        63
Source: 
> 
> contract medianizerInterface {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function read() public view returns(bytes32);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    STO
Line:        208
Source: 
> 			remainingTokens = 0; // set remaining token to 0
>             _buyer.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    STO
Line:        214
Source: 
>         uint256 funds = msg.value.sub(refund);
>         wallet.transfer(funds);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    STO
Line:        208
Source: 
> 			remainingTokens = 0; // set remaining token to 0
>             _buyer.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    STO
Line:        214
Source: 
>         uint256 funds = msg.value.sub(refund);
>         wallet.transfer(funds);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    STO
Line:        208
Source: 
> 			remainingTokens = 0; // set remaining token to 0
>             _buyer.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    STO
Line:        214
Source: 
>         uint256 funds = msg.value.sub(refund);
>         wallet.transfer(funds);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    STO
Line:        195
Source: 
>         require( msg.value >= ethMin, "msg.value >= ethMin"); 
>         uint256 remainingTokens = tokenContract.balanceOf(address(this));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( remainingTokens > 0, "remainingTokens > 0" );

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    STO
Line:        200
Source: 
>         
>         uint256 oneToken = 10 ** uint256(tokenContract.decimals());
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenAmount = msg.value.mul( oneToken ).div( priceTknEth );

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    STO
Line:        103
Source: 
>     function priceUsd() public view returns(uint256) {
>         return uint256(priceFeedContract.read());
>                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    STO
Line:        145
Source: 
>     function withdrawTokens(address to, uint256 value) public onlyOwner returns (bool) {
>         return tokenContract.transfer(to, value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    STO
Line:        229
Source: 
> 
> 		tokenContract.transfer(_buyer, tknUserPending[_buyer]);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_buyer, address(0), tknUserPending[_buyer]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        34
Source: 
> contract Ownable {
> 	address public owner;
>  ^^^^^^^^^^^^^^^^^^^^
> 	address public newOwner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        35
Source: 
> 	address public owner;
> 	address public newOwner;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        34
Source: 
> contract Ownable {
> 	address public owner;
>  ^^^^^^^^^^^^^^^^^^^^
> 	address public newOwner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        35
Source: 
> 	address public owner;
> 	address public newOwner;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        70
Source: 
> 	
> 	tokenInterface public tokenContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public timeStart;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        71
Source: 
> 	tokenInterface public tokenContract;
>     uint256 public timeStart;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public timeEnd;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        72
Source: 
>     uint256 public timeStart;
>     uint256 public timeEnd;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        74
Source: 
>     
>     address payable public wallet;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        76
Source: 
>     
>     uint256 public ethMin;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint256 public tknLocked;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        77
Source: 
>     uint256 public ethMin;
>     uint256 public tknLocked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public tknUnlocked;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        78
Source: 
>     uint256 public tknLocked;
>     uint256 public tknUnlocked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        100
Source: 
> 
>     medianizerInterface public priceFeedContract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        119
Source: 
> 	 
>  	string public name;
>   ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        120
Source: 
>  	string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    STO
Line:        121
Source: 
>     string public symbol;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    STO
Line:        208
Source: 
> 			remainingTokens = 0; // set remaining token to 0
>             _buyer.transfer(refund);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    STO
Line:        214
Source: 
>         uint256 funds = msg.value.sub(refund);
>         wallet.transfer(funds);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    STO
Line:        216
Source: 
>         
>         tknUserPending[_buyer] = tknUserPending[_buyer].add(tokenAmount);	
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    STO
Line:        218
Source: 
>         
>         tknLocked = tknLocked.add(tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        85
Source: 
>         require(!initialized, "!initialized");
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        87
Source: 
>         
>         tokenContract = tokenInterface(_tokenContract);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wallet = _wallet;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        88
Source: 
>         tokenContract = tokenInterface(_tokenContract);
>         wallet = _wallet;
>         ^^^^^^^^^^^^^^^^
>         name = _name;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        89
Source: 
>         wallet = _wallet;
>         name = _name;
>         ^^^^^^^^^^^^
>         symbol = _symbol;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        90
Source: 
>         name = _name;
>         symbol = _symbol;
>         ^^^^^^^^^^^^^^^^
>         decimals = _decimals;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        91
Source: 
>         symbol = _symbol;
>         decimals = _decimals;
>         ^^^^^^^^^^^^^^^^^^^^
>         timeStart = _timeStart;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        92
Source: 
>         decimals = _decimals;
>         timeStart = _timeStart;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         timeEnd = _timeEnd;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        93
Source: 
>         timeStart = _timeStart;
>         timeEnd = _timeEnd;
>         ^^^^^^^^^^^^^^^^^^
>         ethMin = _ethMin;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        94
Source: 
>         timeEnd = _timeEnd;
>         ethMin = _ethMin;
>         ^^^^^^^^^^^^^^^^
>         priceFeedContract = medianizerInterface(_priceFeedContract);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        95
Source: 
>         ethMin = _ethMin;
>         priceFeedContract = medianizerInterface(_priceFeedContract);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    STO
Line:        97
Source: 
>         
>         owner = msg.sender;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    STO
Line:        229
Source: 
> 
> 		tokenContract.transfer(_buyer, tknUserPending[_buyer]);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_buyer, address(0), tknUserPending[_buyer]);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    STO
Line:        119
Source: 
> 	 
>  	string public name;
>   ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    STO
Line:        120
Source: 
>  	string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    STO
Line:        121
Source: 
>     string public symbol;
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
