Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.8. Changing pragma version to 0.5.8....
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Fundraiser
Line:        139
Source: 
>     function disburse(address token) external {
>         grant.tally(token);
>         ^^^^^^^^^^^^^^^^^^
>         uint amount = tokenBalance(token);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fundable
Line:        99
Source: 
>     
>     function tokenBalance(address token) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (token == address(0x0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Fundraiser
Line:        130
Source: 
> 
>     function hasExpired() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return now >= expiration;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FundraiserFactory
Line:        221
Source: 
>     
>     function newFundraiser(address payable _recipient, address payable _sponsor, uint _expiration) public returns (Fundraiser fundraiser, Grant grant) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fundraiser = new Fundraiser(_recipient, _sponsor, _expiration);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Fundable
Line:        93
Source: 
> 
> contract Fundable {
> ^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fundraiser
Line:        134
Source: 
>     
>     function raised(address token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenBalance(token) + disbursed[token] + grant.tokenBalance(token) - grant.refundable(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Fundraiser
Line:        138
Source: 
> 
>     function disburse(address token) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         grant.tally(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Grant
Line:        162
Source: 
>     
>     function refund(address token) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tally(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Grant
Line:        167
Source: 
> 
>     function refundable(address token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balance = tokenBalance(token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Grant
Line:        173
Source: 
>     
>     function sponsored(address token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Tally storage t = tallied[token];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Grant
Line:        178
Source: 
> 
>     function matched(address token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Tally storage t = tallied[token];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Grant
Line:        183
Source: 
>     
>     function tally(address token) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(fundraiser.hasExpired());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FundraiserFactory
Line:        221
Source: 
>     
>     function newFundraiser(address payable _recipient, address payable _sponsor, uint _expiration) public returns (Fundraiser fundraiser, Grant grant) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fundraiser = new Fundraiser(_recipient, _sponsor, _expiration);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Fundraiser
Line:        120
Source: 
>     Grant public grant;
>     mapping (address => uint) disbursed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Grant
Line:        155
Source: 
>     address payable public sponsor; 
>     mapping (address => Tally) tallied;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fundable
Line:        109
Source: 
>         if (token == address(0x0)) {
>             to.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Fundable
Line:        109
Source: 
>         if (token == address(0x0)) {
>             to.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Fundable
Line:        109
Source: 
>         if (token == address(0x0)) {
>             to.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Grant
Line:        184
Source: 
>     function tally(address token) public {
>         require(fundraiser.hasExpired());
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         Tally storage t = tallied[token];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Grant
Line:        195
Source: 
>     function matchable(address token) private view returns (uint) {
>         uint donations = fundraiser.tokenBalance(token);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint granted = tokenBalance(token);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fundable
Line:        103
Source: 
>         } else {
>             return IERC20(token).balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fundable
Line:        111
Source: 
>         } else {
>             IERC20(token).transfer(to, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fundraiser
Line:        135
Source: 
>     function raised(address token) external view returns (uint) {
>         return tokenBalance(token) + disbursed[token] + grant.tokenBalance(token) - grant.refundable(token);
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fundraiser
Line:        135
Source: 
>     function raised(address token) external view returns (uint) {
>         return tokenBalance(token) + disbursed[token] + grant.tokenBalance(token) - grant.refundable(token);
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fundraiser
Line:        139
Source: 
>     function disburse(address token) external {
>         grant.tally(token);
>         ^^^^^^^^^^^^^^^^^^
>         uint amount = tokenBalance(token);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fundable
Line:        103
Source: 
>         } else {
>             return IERC20(token).balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Fundable
Line:        111
Source: 
>         } else {
>             IERC20(token).transfer(to, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FundraiserFactory
Line:        223
Source: 
>         fundraiser = new Fundraiser(_recipient, _sponsor, _expiration);
>         grant = fundraiser.grant();
>                 ^^^^^^^^^^^^^^^^^^
>         emit NewFundraiser(msg.sender, _recipient, _sponsor, fundraiser, grant, _expiration);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Fundable
Line:        109
Source: 
>         if (token == address(0x0)) {
>             to.transfer(amount);
>             ^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Fundraiser
Line:        141
Source: 
>         uint amount = tokenBalance(token);
>         disbursed[token] += amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         send(recipient, token, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Grant
Line:        187
Source: 
>         if (!isTallied(t)) {
>             t.sponsored = tokenBalance(token);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             t.matched = matchable(token);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Grant
Line:        188
Source: 
>             t.sponsored = tokenBalance(token);
>             t.matched = matchable(token);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             send(address(fundraiser), token, t.matched);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Fundable
Line:        111
Source: 
>         } else {
>             IERC20(token).transfer(to, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Fundraiser
Line:        135
Source: 
>     function raised(address token) external view returns (uint) {
>         return tokenBalance(token) + disbursed[token] + grant.tokenBalance(token) - grant.refundable(token);
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Fundable
Line:        111
Source: 
>         } else {
>             IERC20(token).transfer(to, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
