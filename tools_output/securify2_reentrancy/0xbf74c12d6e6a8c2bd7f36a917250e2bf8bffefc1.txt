[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Proxy
Line:        323
Source: 
>         assembly {
>             calldatacopy(0, 0, calldatasize)
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             let success := delegatecall(not(0), _masterCopy, 0, calldatasize, 0, 0)

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    OWLAirdrop
Line:        574
Source: 
>         lockedGNO[msg.sender] = lockedGNO[msg.sender].add(amount);
>         tokenOWL.mintOWL(msg.sender, amount.mul(multiplier));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TokenOWL
Line:        466
Source: 
> 
>     masterCopyCountdownType masterCopyCountdown;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        55
Source: 
>     /// @return e**x
>     function exp(int x) public pure returns (uint) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // revert if x is > MAX_POWER, where

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        131
Source: 
>     /// @return ln(x)
>     function ln(uint x) public pure returns (int) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(x > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        190
Source: 
>     /// @return Maximum number
>     function max(int[] memory nums) public pure returns (int maxNum) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(nums.length > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        55
Source: 
>     /// @return e**x
>     function exp(int x) public pure returns (uint) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // revert if x is > MAX_POWER, where

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        131
Source: 
>     /// @return ln(x)
>     function ln(uint x) public pure returns (int) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(x > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        190
Source: 
>     /// @return Maximum number
>     function max(int[] memory nums) public pure returns (int maxNum) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(nums.length > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        55
Source: 
>     /// @return e**x
>     function exp(int x) public pure returns (uint) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // revert if x is > MAX_POWER, where

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        131
Source: 
>     /// @return ln(x)
>     function ln(uint x) public pure returns (int) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(x > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        190
Source: 
>     /// @return Maximum number
>     function max(int[] memory nums) public pure returns (int maxNum) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(nums.length > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        370
Source: 
>     /// @return Was transfer successful?
>     function transfer(address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[msg.sender].safeToSub(value) || !balances[to].safeToAdd(value)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        386
Source: 
>     /// @return Was transfer successful?
>     function transferFrom(address from, address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        403
Source: 
>     /// @return Was approval successful?
>     function approve(address spender, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        413
Source: 
>     /// @return Remaining allowance for spender
>     function allowance(address owner, address spender) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        420
Source: 
>     /// @return Balance of owner
>     function balanceOf(address owner) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        426
Source: 
>     /// @return Total supply
>     function totalSupply() public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return totalTokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        55
Source: 
>     /// @return e**x
>     function exp(int x) public pure returns (uint) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // revert if x is > MAX_POWER, where

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        131
Source: 
>     /// @return ln(x)
>     function ln(uint x) public pure returns (int) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(x > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        190
Source: 
>     /// @return Maximum number
>     function max(int[] memory nums) public pure returns (int maxNum) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(nums.length > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        370
Source: 
>     /// @return Was transfer successful?
>     function transfer(address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[msg.sender].safeToSub(value) || !balances[to].safeToAdd(value)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        386
Source: 
>     /// @return Was transfer successful?
>     function transferFrom(address from, address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        403
Source: 
>     /// @return Was approval successful?
>     function approve(address spender, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        413
Source: 
>     /// @return Remaining allowance for spender
>     function allowance(address owner, address spender) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        420
Source: 
>     /// @return Balance of owner
>     function balanceOf(address owner) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        426
Source: 
>     /// @return Total supply
>     function totalSupply() public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return totalTokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        55
Source: 
>     /// @return e**x
>     function exp(int x) public pure returns (uint) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // revert if x is > MAX_POWER, where

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        131
Source: 
>     /// @return ln(x)
>     function ln(uint x) public pure returns (int) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(x > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        190
Source: 
>     /// @return Maximum number
>     function max(int[] memory nums) public pure returns (int maxNum) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(nums.length > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        370
Source: 
>     /// @return Was transfer successful?
>     function transfer(address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[msg.sender].safeToSub(value) || !balances[to].safeToAdd(value)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        386
Source: 
>     /// @return Was transfer successful?
>     function transferFrom(address from, address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        403
Source: 
>     /// @return Was approval successful?
>     function approve(address spender, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        413
Source: 
>     /// @return Remaining allowance for spender
>     function allowance(address owner, address spender) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        420
Source: 
>     /// @return Balance of owner
>     function balanceOf(address owner) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisStandardToken
Line:        426
Source: 
>     /// @return Total supply
>     function totalSupply() public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return totalTokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenOWL
Line:        481
Source: 
>     /// updating is only possible after 30 days
>     function startMasterCopyCountdown(address _masterCopy) public onlyCreator {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(_masterCopy) != address(0), "The master copy must be a valid address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenOWL
Line:        490
Source: 
>     /// @dev executes the update process via the proxyMaster for a new address _masterCopy
>     function updateMasterCopy() public onlyCreator {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(masterCopyCountdown.masterCopy) != address(0), "The master copy must be a valid address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenOWL
Line:        501
Source: 
> 
>     function getMasterCopy() public view returns (address) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return masterCopy;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenOWL
Line:        507
Source: 
>     /// @param newMinter The new address authorized to mint this token
>     function setMinter(address newMinter) public onlyCreator {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minter = newMinter;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenOWL
Line:        513
Source: 
>     /// @param newOwner The new address, which should become the owner
>     function setNewOwner(address newOwner) public onlyCreator {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         creator = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenOWL
Line:        520
Source: 
>     /// @param amount Amount of OWL to be minted
>     function mintOWL(address to, uint amount) public {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(minter != address(0), "The minter must be initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenOWL
Line:        532
Source: 
>     /// @param amount Amount of OWL to be burnt
>     function burnOWL(address user, uint amount) public {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        55
Source: 
>     /// @return e**x
>     function exp(int x) public pure returns (uint) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // revert if x is > MAX_POWER, where

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        131
Source: 
>     /// @return ln(x)
>     function ln(uint x) public pure returns (int) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(x > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        190
Source: 
>     /// @return Maximum number
>     function max(int[] memory nums) public pure returns (int maxNum) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(nums.length > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OWLAirdrop
Line:        570
Source: 
>     /// @param amount Amount of GNO to lock
>     function lockGNO(uint amount) public {
>                       ^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp <= endTime, "The locking period has ended");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OWLAirdrop
Line:        578
Source: 
>     /// @dev Withdraws locked GNO if endTime is past
>     function withdrawGNO() public {
>                       ^^^^^^^^^^^^^
>         require(block.timestamp > endTime, "It's not allowed to withdraw during the locking time");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        55
Source: 
>     /// @return e**x
>     function exp(int x) public pure returns (uint) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // revert if x is > MAX_POWER, where

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        131
Source: 
>     /// @return ln(x)
>     function ln(uint x) public pure returns (int) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(x > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GnosisMath
Line:        190
Source: 
>     /// @return Maximum number
>     function max(int[] memory nums) public pure returns (int maxNum) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(nums.length > 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OWLAirdrop
Line:        572
Source: 
>         require(block.timestamp <= endTime, "The locking period has ended");
>         require(tokenGNO.transferFrom(msg.sender, address(this), amount), "The GNO transfer must succeed");
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lockedGNO[msg.sender] = lockedGNO[msg.sender].add(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OWLAirdrop
Line:        574
Source: 
>         lockedGNO[msg.sender] = lockedGNO[msg.sender].add(amount);
>         tokenOWL.mintOWL(msg.sender, amount.mul(multiplier));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    OWLAirdrop
Line:        580
Source: 
>         require(block.timestamp > endTime, "It's not allowed to withdraw during the locking time");
>         require(tokenGNO.transfer(msg.sender, lockedGNO[msg.sender]), "The GNO withdrawal must succeed");
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lockedGNO[msg.sender] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Proxy
Line:        311
Source: 
> /// @author Stefan George - <[email protected]>
> contract Proxy is Proxied {
>                   ^^^^^^^^^
>     /// @dev Constructor function sets address of master copy contract.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisMath
Line:        175
Source: 
>     /// @return logarithmic value
>     function floorLog2(uint x) public pure returns (int lo) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lo = -64;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisStandardToken
Line:        370
Source: 
>     /// @return Was transfer successful?
>     function transfer(address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[msg.sender].safeToSub(value) || !balances[to].safeToAdd(value)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisStandardToken
Line:        386
Source: 
>     /// @return Was transfer successful?
>     function transferFrom(address from, address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisMath
Line:        175
Source: 
>     /// @return logarithmic value
>     function floorLog2(uint x) public pure returns (int lo) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lo = -64;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisStandardToken
Line:        370
Source: 
>     /// @return Was transfer successful?
>     function transfer(address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[msg.sender].safeToSub(value) || !balances[to].safeToAdd(value)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisStandardToken
Line:        386
Source: 
>     /// @return Was transfer successful?
>     function transferFrom(address from, address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisMath
Line:        175
Source: 
>     /// @return logarithmic value
>     function floorLog2(uint x) public pure returns (int lo) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lo = -64;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisStandardToken
Line:        370
Source: 
>     /// @return Was transfer successful?
>     function transfer(address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[msg.sender].safeToSub(value) || !balances[to].safeToAdd(value)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisStandardToken
Line:        386
Source: 
>     /// @return Was transfer successful?
>     function transferFrom(address from, address to, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!balances[from].safeToSub(value) || !allowances[from][msg.sender].safeToSub(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenOWL
Line:        507
Source: 
>     /// @param newMinter The new address authorized to mint this token
>     function setMinter(address newMinter) public onlyCreator {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minter = newMinter;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenOWL
Line:        513
Source: 
>     /// @param newOwner The new address, which should become the owner
>     function setNewOwner(address newOwner) public onlyCreator {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         creator = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenOWL
Line:        520
Source: 
>     /// @param amount Amount of OWL to be minted
>     function mintOWL(address to, uint amount) public {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(minter != address(0), "The minter must be initialized");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenOWL
Line:        532
Source: 
>     /// @param amount Amount of OWL to be burnt
>     function burnOWL(address user, uint amount) public {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisMath
Line:        175
Source: 
>     /// @return logarithmic value
>     function floorLog2(uint x) public pure returns (int lo) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lo = -64;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OWLAirdrop
Line:        570
Source: 
>     /// @param amount Amount of GNO to lock
>     function lockGNO(uint amount) public {
>                       ^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp <= endTime, "The locking period has ended");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GnosisMath
Line:        175
Source: 
>     /// @return logarithmic value
>     function floorLog2(uint x) public pure returns (int lo) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lo = -64;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        403
Source: 
>     /// @return Was approval successful?
>     function approve(address spender, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        413
Source: 
>     /// @return Remaining allowance for spender
>     function allowance(address owner, address spender) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        420
Source: 
>     /// @return Balance of owner
>     function balanceOf(address owner) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        403
Source: 
>     /// @return Was approval successful?
>     function approve(address spender, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        413
Source: 
>     /// @return Remaining allowance for spender
>     function allowance(address owner, address spender) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        420
Source: 
>     /// @return Balance of owner
>     function balanceOf(address owner) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        403
Source: 
>     /// @return Was approval successful?
>     function approve(address spender, uint value) public returns (bool) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        413
Source: 
>     /// @return Remaining allowance for spender
>     function allowance(address owner, address spender) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GnosisStandardToken
Line:        420
Source: 
>     /// @return Balance of owner
>     function balanceOf(address owner) public view returns (uint) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        91
Source: 
>         uint result = ONE;
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        92
Source: 
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        93
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        94
Source: 
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe35846b82505fc5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        95
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe35846b82505fc5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        96
Source: 
>         result += 0xe35846b82505fc5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x276556df749cee5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        97
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x276556df749cee5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        98
Source: 
>         result += 0x276556df749cee5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x5761ff9e299cc4 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        99
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        100
Source: 
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xa184897c363c3 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        101
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xa184897c363c3 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        102
Source: 
>         result += 0xa184897c363c3 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xffe5fe2c4586 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        103
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xffe5fe2c4586 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        104
Source: 
>         result += 0xffe5fe2c4586 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x162c0223a5c8 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        105
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x162c0223a5c8 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        106
Source: 
>         result += 0x162c0223a5c8 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1b5253d395e * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        107
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1b5253d395e * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        108
Source: 
>         result += 0x1b5253d395e * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e4cf5158b * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        109
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e4cf5158b * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        110
Source: 
>         result += 0x1e4cf5158b * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e8cac735 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        111
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e8cac735 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        112
Source: 
>         result += 0x1e8cac735 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1c3bd650 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        113
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1c3bd650 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        114
Source: 
>         result += 0x1c3bd650 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1816193 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        115
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1816193 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        116
Source: 
>         result += 0x1816193 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x131496 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        117
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x131496 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        118
Source: 
>         result += 0x131496 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe1b7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        119
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe1b7 * zpow / ONE;
>                     ^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        120
Source: 
>         result += 0xe1b7 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x9c7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        121
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x9c7 * zpow / ONE;
>                     ^^^^^^^^^^^^
>         if (shift >= 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        170
Source: 
>         return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;
>     }
>   ^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        91
Source: 
>         uint result = ONE;
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        92
Source: 
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        93
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        94
Source: 
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe35846b82505fc5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        95
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe35846b82505fc5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        96
Source: 
>         result += 0xe35846b82505fc5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x276556df749cee5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        97
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x276556df749cee5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        98
Source: 
>         result += 0x276556df749cee5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x5761ff9e299cc4 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        99
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        100
Source: 
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xa184897c363c3 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        101
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xa184897c363c3 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        102
Source: 
>         result += 0xa184897c363c3 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xffe5fe2c4586 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        103
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xffe5fe2c4586 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        104
Source: 
>         result += 0xffe5fe2c4586 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x162c0223a5c8 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        105
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x162c0223a5c8 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        106
Source: 
>         result += 0x162c0223a5c8 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1b5253d395e * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        107
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1b5253d395e * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        108
Source: 
>         result += 0x1b5253d395e * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e4cf5158b * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        109
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e4cf5158b * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        110
Source: 
>         result += 0x1e4cf5158b * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e8cac735 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        111
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e8cac735 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        112
Source: 
>         result += 0x1e8cac735 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1c3bd650 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        113
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1c3bd650 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        114
Source: 
>         result += 0x1c3bd650 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1816193 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        115
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1816193 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        116
Source: 
>         result += 0x1816193 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x131496 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        117
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x131496 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        118
Source: 
>         result += 0x131496 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe1b7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        119
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe1b7 * zpow / ONE;
>                     ^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        120
Source: 
>         result += 0xe1b7 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x9c7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        121
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x9c7 * zpow / ONE;
>                     ^^^^^^^^^^^^
>         if (shift >= 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        170
Source: 
>         return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;
>     }
>   ^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        91
Source: 
>         uint result = ONE;
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        92
Source: 
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        93
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        94
Source: 
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe35846b82505fc5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        95
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe35846b82505fc5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        96
Source: 
>         result += 0xe35846b82505fc5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x276556df749cee5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        97
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x276556df749cee5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        98
Source: 
>         result += 0x276556df749cee5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x5761ff9e299cc4 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        99
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        100
Source: 
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xa184897c363c3 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        101
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xa184897c363c3 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        102
Source: 
>         result += 0xa184897c363c3 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xffe5fe2c4586 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        103
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xffe5fe2c4586 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        104
Source: 
>         result += 0xffe5fe2c4586 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x162c0223a5c8 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        105
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x162c0223a5c8 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        106
Source: 
>         result += 0x162c0223a5c8 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1b5253d395e * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        107
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1b5253d395e * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        108
Source: 
>         result += 0x1b5253d395e * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e4cf5158b * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        109
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e4cf5158b * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        110
Source: 
>         result += 0x1e4cf5158b * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e8cac735 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        111
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e8cac735 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        112
Source: 
>         result += 0x1e8cac735 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1c3bd650 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        113
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1c3bd650 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        114
Source: 
>         result += 0x1c3bd650 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1816193 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        115
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1816193 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        116
Source: 
>         result += 0x1816193 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x131496 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        117
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x131496 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        118
Source: 
>         result += 0x131496 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe1b7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        119
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe1b7 * zpow / ONE;
>                     ^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        120
Source: 
>         result += 0xe1b7 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x9c7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        121
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x9c7 * zpow / ONE;
>                     ^^^^^^^^^^^^
>         if (shift >= 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        170
Source: 
>         return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;
>     }
>   ^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        91
Source: 
>         uint result = ONE;
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        92
Source: 
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        93
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        94
Source: 
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe35846b82505fc5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        95
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe35846b82505fc5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        96
Source: 
>         result += 0xe35846b82505fc5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x276556df749cee5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        97
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x276556df749cee5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        98
Source: 
>         result += 0x276556df749cee5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x5761ff9e299cc4 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        99
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        100
Source: 
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xa184897c363c3 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        101
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xa184897c363c3 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        102
Source: 
>         result += 0xa184897c363c3 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xffe5fe2c4586 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        103
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xffe5fe2c4586 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        104
Source: 
>         result += 0xffe5fe2c4586 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x162c0223a5c8 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        105
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x162c0223a5c8 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        106
Source: 
>         result += 0x162c0223a5c8 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1b5253d395e * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        107
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1b5253d395e * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        108
Source: 
>         result += 0x1b5253d395e * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e4cf5158b * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        109
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e4cf5158b * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        110
Source: 
>         result += 0x1e4cf5158b * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e8cac735 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        111
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e8cac735 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        112
Source: 
>         result += 0x1e8cac735 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1c3bd650 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        113
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1c3bd650 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        114
Source: 
>         result += 0x1c3bd650 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1816193 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        115
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1816193 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        116
Source: 
>         result += 0x1816193 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x131496 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        117
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x131496 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        118
Source: 
>         result += 0x131496 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe1b7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        119
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe1b7 * zpow / ONE;
>                     ^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        120
Source: 
>         result += 0xe1b7 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x9c7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        121
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x9c7 * zpow / ONE;
>                     ^^^^^^^^^^^^
>         if (shift >= 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        170
Source: 
>         return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;
>     }
>   ^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        91
Source: 
>         uint result = ONE;
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        92
Source: 
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        93
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        94
Source: 
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe35846b82505fc5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        95
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe35846b82505fc5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        96
Source: 
>         result += 0xe35846b82505fc5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x276556df749cee5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        97
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x276556df749cee5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        98
Source: 
>         result += 0x276556df749cee5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x5761ff9e299cc4 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        99
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        100
Source: 
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xa184897c363c3 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        101
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xa184897c363c3 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        102
Source: 
>         result += 0xa184897c363c3 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xffe5fe2c4586 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        103
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xffe5fe2c4586 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        104
Source: 
>         result += 0xffe5fe2c4586 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x162c0223a5c8 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        105
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x162c0223a5c8 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        106
Source: 
>         result += 0x162c0223a5c8 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1b5253d395e * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        107
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1b5253d395e * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        108
Source: 
>         result += 0x1b5253d395e * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e4cf5158b * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        109
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e4cf5158b * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        110
Source: 
>         result += 0x1e4cf5158b * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e8cac735 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        111
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e8cac735 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        112
Source: 
>         result += 0x1e8cac735 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1c3bd650 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        113
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1c3bd650 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        114
Source: 
>         result += 0x1c3bd650 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1816193 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        115
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1816193 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        116
Source: 
>         result += 0x1816193 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x131496 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        117
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x131496 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        118
Source: 
>         result += 0x131496 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe1b7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        119
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe1b7 * zpow / ONE;
>                     ^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        120
Source: 
>         result += 0xe1b7 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x9c7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        121
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x9c7 * zpow / ONE;
>                     ^^^^^^^^^^^^
>         if (shift >= 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        170
Source: 
>         return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;
>     }
>   ^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        91
Source: 
>         uint result = ONE;
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        92
Source: 
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        93
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        94
Source: 
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe35846b82505fc5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        95
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe35846b82505fc5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        96
Source: 
>         result += 0xe35846b82505fc5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x276556df749cee5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        97
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x276556df749cee5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        98
Source: 
>         result += 0x276556df749cee5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x5761ff9e299cc4 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        99
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        100
Source: 
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xa184897c363c3 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        101
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xa184897c363c3 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        102
Source: 
>         result += 0xa184897c363c3 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xffe5fe2c4586 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        103
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xffe5fe2c4586 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        104
Source: 
>         result += 0xffe5fe2c4586 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x162c0223a5c8 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        105
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x162c0223a5c8 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        106
Source: 
>         result += 0x162c0223a5c8 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1b5253d395e * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        107
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1b5253d395e * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        108
Source: 
>         result += 0x1b5253d395e * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e4cf5158b * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        109
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e4cf5158b * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        110
Source: 
>         result += 0x1e4cf5158b * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e8cac735 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        111
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e8cac735 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        112
Source: 
>         result += 0x1e8cac735 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1c3bd650 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        113
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1c3bd650 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        114
Source: 
>         result += 0x1c3bd650 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1816193 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        115
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1816193 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        116
Source: 
>         result += 0x1816193 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x131496 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        117
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x131496 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        118
Source: 
>         result += 0x131496 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe1b7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        119
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe1b7 * zpow / ONE;
>                     ^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        120
Source: 
>         result += 0xe1b7 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x9c7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        121
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x9c7 * zpow / ONE;
>                     ^^^^^^^^^^^^
>         if (shift >= 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        170
Source: 
>         return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;
>     }
>   ^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        91
Source: 
>         uint result = ONE;
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        92
Source: 
>         result += 0xb17217f7d1cf79ab * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        93
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        94
Source: 
>         result += 0x3d7f7bff058b1d50 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe35846b82505fc5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        95
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe35846b82505fc5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        96
Source: 
>         result += 0xe35846b82505fc5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x276556df749cee5 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        97
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x276556df749cee5 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        98
Source: 
>         result += 0x276556df749cee5 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x5761ff9e299cc4 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        99
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        100
Source: 
>         result += 0x5761ff9e299cc4 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xa184897c363c3 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        101
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xa184897c363c3 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        102
Source: 
>         result += 0xa184897c363c3 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xffe5fe2c4586 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        103
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xffe5fe2c4586 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        104
Source: 
>         result += 0xffe5fe2c4586 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x162c0223a5c8 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        105
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x162c0223a5c8 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        106
Source: 
>         result += 0x162c0223a5c8 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1b5253d395e * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        107
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1b5253d395e * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        108
Source: 
>         result += 0x1b5253d395e * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e4cf5158b * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        109
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e4cf5158b * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        110
Source: 
>         result += 0x1e4cf5158b * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1e8cac735 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        111
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1e8cac735 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        112
Source: 
>         result += 0x1e8cac735 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1c3bd650 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        113
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1c3bd650 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        114
Source: 
>         result += 0x1c3bd650 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x1816193 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        115
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x1816193 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        116
Source: 
>         result += 0x1816193 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x131496 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        117
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x131496 * zpow / ONE;
>                     ^^^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        118
Source: 
>         result += 0x131496 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0xe1b7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        119
Source: 
>         zpow = zpow * z / ONE;
>         result += 0xe1b7 * zpow / ONE;
>                     ^^^^^^^^^^^^^
>         zpow = zpow * z / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        120
Source: 
>         result += 0xe1b7 * zpow / ONE;
>         zpow = zpow * z / ONE;
>                  ^^^^^^^^
>         result += 0x9c7 * zpow / ONE;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        121
Source: 
>         zpow = zpow * z / ONE;
>         result += 0x9c7 * zpow / ONE;
>                     ^^^^^^^^^^^^
>         if (shift >= 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        145
Source: 
>         int halflnz = term;
>         int termpow = term * term / int(ONE) * term / int(ONE);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 3;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        147
Source: 
>         halflnz += termpow / 3;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 5;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        149
Source: 
>         halflnz += termpow / 5;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 7;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        151
Source: 
>         halflnz += termpow / 7;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 9;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        153
Source: 
>         halflnz += termpow / 9;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        155
Source: 
>         halflnz += termpow / 11;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 13;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        157
Source: 
>         halflnz += termpow / 13;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 15;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        159
Source: 
>         halflnz += termpow / 15;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 17;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        161
Source: 
>         halflnz += termpow / 17;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 19;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        163
Source: 
>         halflnz += termpow / 19;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 21;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        165
Source: 
>         halflnz += termpow / 21;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 23;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        167
Source: 
>         halflnz += termpow / 23;
>         termpow = termpow * term / int(ONE) * term / int(ONE);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         halflnz += termpow / 25;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    GnosisMath
Line:        170
Source: 
>         return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;
>     }
>   ^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Proxy
Line:        321
Source: 
>     function() external payable {
>         address _masterCopy = masterCopy;
>                           ^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenGNO
Line:        437
Source: 
> contract TokenGNO is GnosisStandardToken {
>     string public constant symbol = "GNO";
>                       ^^^^^^^^^^^^^^^^^^^^
>     string public constant name = "Gnosis";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenGNO
Line:        438
Source: 
>     string public constant symbol = "GNO";
>     string public constant name = "Gnosis";
>                       ^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenGNO
Line:        439
Source: 
>     string public constant name = "Gnosis";
>     uint8 public constant decimals = 18;
>                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenOWL
Line:        457
Source: 
> 
>     string public constant name = "OWL Token";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "OWL";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenOWL
Line:        458
Source: 
>     string public constant name = "OWL Token";
>     string public constant symbol = "OWL";
>                       ^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenOWL
Line:        459
Source: 
>     string public constant symbol = "OWL";
>     uint8 public constant decimals = 18;
>                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenOWL
Line:        461
Source: 
> 
>     struct masterCopyCountdownType {
>                       ^^^^^^^^^^^^^^
>         address masterCopy;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        12
Source: 
> /// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
> pragma solidity ^0.5.2;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        35
Source: 
> 
> pragma solidity ^0.5.2;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        301
Source: 
> 
> pragma solidity ^0.5.2;
>                 ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Proxied
Line:        306
Source: 
> contract Proxied {
>     address public masterCopy;
>                      ^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StandardTokenData
Line:        351
Source: 
>      */
>     mapping(address => uint) balances;
>                       ^^^^^^^^^^^^^^^^
>     mapping(address => mapping(address => uint)) allowances;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StandardTokenData
Line:        352
Source: 
>     mapping(address => uint) balances;
>     mapping(address => mapping(address => uint)) allowances;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint totalTokens;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StandardTokenData
Line:        353
Source: 
>     mapping(address => mapping(address => uint)) allowances;
>     uint totalTokens;
>                       
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenGNO
Line:        437
Source: 
> contract TokenGNO is GnosisStandardToken {
>     string public constant symbol = "GNO";
>                       ^^^^^^^^^^^^^^^^^^^^
>     string public constant name = "Gnosis";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenGNO
Line:        438
Source: 
>     string public constant symbol = "GNO";
>     string public constant name = "Gnosis";
>                       ^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenGNO
Line:        439
Source: 
>     string public constant name = "Gnosis";
>     uint8 public constant decimals = 18;
>                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenOWL
Line:        457
Source: 
> 
>     string public constant name = "OWL Token";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "OWL";

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenOWL
Line:        458
Source: 
>     string public constant name = "OWL Token";
>     string public constant symbol = "OWL";
>                       ^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenOWL
Line:        459
Source: 
>     string public constant symbol = "OWL";
>     uint8 public constant decimals = 18;
>                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenOWL
Line:        466
Source: 
> 
>     masterCopyCountdownType masterCopyCountdown;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenOWL
Line:        468
Source: 
> 
>     address public creator;
>                       ^^^^^
>     address public minter;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TokenOWL
Line:        469
Source: 
>     address public creator;
>     address public minter;
>                       ^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OWLAirdrop
Line:        550
Source: 
> 
>     TokenOWL public tokenOWL;
>                       ^^^^^^^
>     TokenGNO public tokenGNO;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OWLAirdrop
Line:        551
Source: 
>     TokenOWL public tokenOWL;
>     TokenGNO public tokenGNO;
>                       ^^^^^^^
>     mapping(address => uint) public lockedGNO;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OWLAirdrop
Line:        554
Source: 
>     uint public endTime;
>     uint public multiplier;
>                       ^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OWLAirdrop
Line:        572
Source: 
>         require(block.timestamp <= endTime, "The locking period has ended");
>         require(tokenGNO.transferFrom(msg.sender, address(this), amount), "The GNO transfer must succeed");
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lockedGNO[msg.sender] = lockedGNO[msg.sender].add(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OWLAirdrop
Line:        580
Source: 
>         require(block.timestamp > endTime, "It's not allowed to withdraw during the locking time");
>         require(tokenGNO.transfer(msg.sender, lockedGNO[msg.sender]), "The GNO withdrawal must succeed");
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lockedGNO[msg.sender] = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OWLAirdrop
Line:        574
Source: 
>         lockedGNO[msg.sender] = lockedGNO[msg.sender].add(amount);
>         tokenOWL.mintOWL(msg.sender, amount.mul(multiplier));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Proxied
Line:        306
Source: 
> contract Proxied {
>     address public masterCopy;
>                      ^^^^^^^^^
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StandardTokenData
Line:        353
Source: 
>     mapping(address => mapping(address => uint)) allowances;
>     uint totalTokens;
>                       
> }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenOWL
Line:        468
Source: 
> 
>     address public creator;
>                       ^^^^^
>     address public minter;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenOWL
Line:        469
Source: 
>     address public creator;
>     address public minter;
>                       ^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Proxied
Line:        306
Source: 
> contract Proxied {
>     address public masterCopy;
>                      ^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StandardTokenData
Line:        353
Source: 
>     mapping(address => mapping(address => uint)) allowances;
>     uint totalTokens;
>                       
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TokenOWL
Line:        466
Source: 
> 
>     masterCopyCountdownType masterCopyCountdown;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        45
Source: 
>     // This is equal to 1 in our calculations
>     uint public constant ONE = 0x10000000000000000;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LN2 = 0xb17217f7d1cf79ac;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        46
Source: 
>     uint public constant ONE = 0x10000000000000000;
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LOG2_E = 0x171547652b82fe177;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        47
Source: 
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>     uint public constant LOG2_E = 0x171547652b82fe177;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        45
Source: 
>     // This is equal to 1 in our calculations
>     uint public constant ONE = 0x10000000000000000;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LN2 = 0xb17217f7d1cf79ac;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        46
Source: 
>     uint public constant ONE = 0x10000000000000000;
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LOG2_E = 0x171547652b82fe177;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        47
Source: 
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>     uint public constant LOG2_E = 0x171547652b82fe177;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        45
Source: 
>     // This is equal to 1 in our calculations
>     uint public constant ONE = 0x10000000000000000;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LN2 = 0xb17217f7d1cf79ac;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        46
Source: 
>     uint public constant ONE = 0x10000000000000000;
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LOG2_E = 0x171547652b82fe177;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        47
Source: 
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>     uint public constant LOG2_E = 0x171547652b82fe177;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        45
Source: 
>     // This is equal to 1 in our calculations
>     uint public constant ONE = 0x10000000000000000;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LN2 = 0xb17217f7d1cf79ac;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        46
Source: 
>     uint public constant ONE = 0x10000000000000000;
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LOG2_E = 0x171547652b82fe177;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        47
Source: 
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>     uint public constant LOG2_E = 0x171547652b82fe177;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        45
Source: 
>     // This is equal to 1 in our calculations
>     uint public constant ONE = 0x10000000000000000;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LN2 = 0xb17217f7d1cf79ac;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        46
Source: 
>     uint public constant ONE = 0x10000000000000000;
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LOG2_E = 0x171547652b82fe177;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        47
Source: 
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>     uint public constant LOG2_E = 0x171547652b82fe177;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        45
Source: 
>     // This is equal to 1 in our calculations
>     uint public constant ONE = 0x10000000000000000;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LN2 = 0xb17217f7d1cf79ac;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        46
Source: 
>     uint public constant ONE = 0x10000000000000000;
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LOG2_E = 0x171547652b82fe177;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        47
Source: 
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>     uint public constant LOG2_E = 0x171547652b82fe177;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        45
Source: 
>     // This is equal to 1 in our calculations
>     uint public constant ONE = 0x10000000000000000;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LN2 = 0xb17217f7d1cf79ac;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        46
Source: 
>     uint public constant ONE = 0x10000000000000000;
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant LOG2_E = 0x171547652b82fe177;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    GnosisMath
Line:        47
Source: 
>     uint public constant LN2 = 0xb17217f7d1cf79ac;
>     uint public constant LOG2_E = 0x171547652b82fe177;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        376
Source: 
>         balances[msg.sender] -= value;
>         balances[to] += value;
>                           ^^^^
>         emit Transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        392
Source: 
>         }
>         balances[from] -= value;
>                           ^^^^^^
>         allowances[from][msg.sender] -= value;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        394
Source: 
>         allowances[from][msg.sender] -= value;
>         balances[to] += value;
>                           ^^^^
>         emit Transfer(from, to, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        376
Source: 
>         balances[msg.sender] -= value;
>         balances[to] += value;
>                           ^^^^
>         emit Transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        392
Source: 
>         }
>         balances[from] -= value;
>                           ^^^^^^
>         allowances[from][msg.sender] -= value;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        394
Source: 
>         allowances[from][msg.sender] -= value;
>         balances[to] += value;
>                           ^^^^
>         emit Transfer(from, to, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        376
Source: 
>         balances[msg.sender] -= value;
>         balances[to] += value;
>                           ^^^^
>         emit Transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        392
Source: 
>         }
>         balances[from] -= value;
>                           ^^^^^^
>         allowances[from][msg.sender] -= value;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GnosisStandardToken
Line:        394
Source: 
>         allowances[from][msg.sender] -= value;
>         balances[to] += value;
>                           ^^^^
>         emit Transfer(from, to, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenOWL
Line:        535
Source: 
>         balances[user] = balances[user].sub(amount);
>         totalTokens = totalTokens.sub(amount);
>                           ^^^^^^^^^^^^^^^^^^^^
>         emit Burnt(msg.sender, user, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GnosisStandardToken
Line:        404
Source: 
>     function approve(address spender, uint value) public returns (bool) {
>         allowances[msg.sender][spender] = value;
>                           ^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenOWL
Line:        534
Source: 
>         allowances[user][msg.sender] = allowances[user][msg.sender].sub(amount);
>         balances[user] = balances[user].sub(amount);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalTokens = totalTokens.sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        225
Source: 
>     function add(uint a, uint b) internal pure returns (uint) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        234
Source: 
>     function sub(uint a, uint b) internal pure returns (uint) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        243
Source: 
>     function mul(uint a, uint b) internal pure returns (uint) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        276
Source: 
>     function add(int a, int b) internal pure returns (int) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        285
Source: 
>     function sub(int a, int b) internal pure returns (int) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        294
Source: 
>     function mul(int a, int b) internal pure returns (int) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        225
Source: 
>     function add(uint a, uint b) internal pure returns (uint) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        234
Source: 
>     function sub(uint a, uint b) internal pure returns (uint) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        243
Source: 
>     function mul(uint a, uint b) internal pure returns (uint) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        276
Source: 
>     function add(int a, int b) internal pure returns (int) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        285
Source: 
>     function sub(int a, int b) internal pure returns (int) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        294
Source: 
>     function mul(int a, int b) internal pure returns (int) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        225
Source: 
>     function add(uint a, uint b) internal pure returns (uint) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        234
Source: 
>     function sub(uint a, uint b) internal pure returns (uint) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        243
Source: 
>     function mul(uint a, uint b) internal pure returns (uint) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        276
Source: 
>     function add(int a, int b) internal pure returns (int) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        285
Source: 
>     function sub(int a, int b) internal pure returns (int) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        294
Source: 
>     function mul(int a, int b) internal pure returns (int) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        225
Source: 
>     function add(uint a, uint b) internal pure returns (uint) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        234
Source: 
>     function sub(uint a, uint b) internal pure returns (uint) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        243
Source: 
>     function mul(uint a, uint b) internal pure returns (uint) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        276
Source: 
>     function add(int a, int b) internal pure returns (int) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        285
Source: 
>     function sub(int a, int b) internal pure returns (int) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        294
Source: 
>     function mul(int a, int b) internal pure returns (int) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        225
Source: 
>     function add(uint a, uint b) internal pure returns (uint) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        234
Source: 
>     function sub(uint a, uint b) internal pure returns (uint) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        243
Source: 
>     function mul(uint a, uint b) internal pure returns (uint) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        276
Source: 
>     function add(int a, int b) internal pure returns (int) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        285
Source: 
>     function sub(int a, int b) internal pure returns (int) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        294
Source: 
>     function mul(int a, int b) internal pure returns (int) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        243
Source: 
>     function mul(uint a, uint b) internal pure returns (uint) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        276
Source: 
>     function add(int a, int b) internal pure returns (int) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        285
Source: 
>     function sub(int a, int b) internal pure returns (int) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        294
Source: 
>     function mul(int a, int b) internal pure returns (int) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        234
Source: 
>     function sub(uint a, uint b) internal pure returns (uint) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        276
Source: 
>     function add(int a, int b) internal pure returns (int) {
>         require(safeToAdd(a, b));
>                                 ^
>         return a + b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        285
Source: 
>     function sub(int a, int b) internal pure returns (int) {
>         require(safeToSub(a, b));
>                                 ^
>         return a - b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GnosisMath
Line:        294
Source: 
>     function mul(int a, int b) internal pure returns (int) {
>         require(safeToMul(a, b));
>                                 ^
>         return a * b;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Proxied
Line:        306
Source: 
> contract Proxied {
>     address public masterCopy;
>                      ^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StandardTokenData
Line:        351
Source: 
>      */
>     mapping(address => uint) balances;
>                       ^^^^^^^^^^^^^^^^
>     mapping(address => mapping(address => uint)) allowances;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StandardTokenData
Line:        352
Source: 
>     mapping(address => uint) balances;
>     mapping(address => mapping(address => uint)) allowances;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint totalTokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StandardTokenData
Line:        353
Source: 
>     mapping(address => mapping(address => uint)) allowances;
>     uint totalTokens;
>                       
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenGNO
Line:        437
Source: 
> contract TokenGNO is GnosisStandardToken {
>     string public constant symbol = "GNO";
>                       ^^^^^^^^^^^^^^^^^^^^
>     string public constant name = "Gnosis";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenGNO
Line:        438
Source: 
>     string public constant symbol = "GNO";
>     string public constant name = "Gnosis";
>                       ^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenGNO
Line:        439
Source: 
>     string public constant name = "Gnosis";
>     uint8 public constant decimals = 18;
>                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenOWL
Line:        457
Source: 
> 
>     string public constant name = "OWL Token";
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "OWL";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenOWL
Line:        458
Source: 
>     string public constant name = "OWL Token";
>     string public constant symbol = "OWL";
>                       ^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TokenOWL
Line:        459
Source: 
>     string public constant symbol = "OWL";
>     uint8 public constant decimals = 18;
>                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenOWL
Line:        493
Source: 
>         require(
>             block.timestamp >= masterCopyCountdown.timeWhenAvailable,
>                               ^^^^^^^^^^^^^^^
>             "It's not possible to update the master copy during the waiting period"

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    OWLAirdrop
Line:        561
Source: 
>     constructor(TokenOWL _tokenOWL, TokenGNO _tokenGNO, uint _endTime, uint _multiplier) public {
>         require(block.timestamp <= _endTime, "The end time cannot be in the past");
>                                   ^^^^^^^^^^^^^^^
>         tokenOWL = _tokenOWL;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    OWLAirdrop
Line:        571
Source: 
>     function lockGNO(uint amount) public {
>         require(block.timestamp <= endTime, "The locking period has ended");
>                                   ^^^^^^^^^^^^^^^
>         require(tokenGNO.transferFrom(msg.sender, address(this), amount), "The GNO transfer must succeed");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    OWLAirdrop
Line:        579
Source: 
>     function withdrawGNO() public {
>         require(block.timestamp > endTime, "It's not allowed to withdraw during the locking time");
>                                   ^^^^^^^^^^^^^^^
>         require(tokenGNO.transfer(msg.sender, lockedGNO[msg.sender]), "The GNO withdrawal must succeed");

[0m
