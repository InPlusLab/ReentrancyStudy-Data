Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Market
Line:        533
Source: 
>     // Decimal accuracy of token
>     uint256 internal decimals_ = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Market
Line:        753
Source: 
>       */
>     function finaliseMarket() public onlyVault() returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(active_, "Market deactivated");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Market
Line:        765
Source: 
>       */
>     function withdraw(uint256 _amount) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Ensures withdraw can only be called in an inactive market

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Market
Line:        918
Source: 
>       */
>     function increaseAllowance(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Market
Line:        937
Source: 
>       */
>     function decreaseAllowance(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Market
Line:        956
Source: 
>       */
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Market
Line:        982
Source: 
>       */
>     function transfer(address _to, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balances[msg.sender], "Insufficient funds");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Market
Line:        583
Source: 
>       */
>     function burn(uint256 _numTokens) external onlyActive() returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Market
Line:        677
Source: 
>       */
>     function collateralToTokenBuying(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _collateralTokenOffered

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Market
Line:        699
Source: 
>       */
>     function collateralToTokenSelling(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _collateralTokenNeeded

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Market
Line:        804
Source: 
>       */
>     function priceToMint(uint256 _numTokens) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Gets the balance of the market

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Market
Line:        826
Source: 
>       */
>     function rewardForBurn(uint256 _numTokens) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Gets the curent balance of the market

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Market
Line:        918
Source: 
>       */
>     function increaseAllowance(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Market
Line:        937
Source: 
>       */
>     function decreaseAllowance(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Market
Line:        618
Source: 
>       */
>     function mint(
>     ^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Market
Line:        872
Source: 
>       */
>     function balanceOf(address _owner) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Market
Line:        883
Source: 
>       */
>     function allowance(
>     ^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Market
Line:        900
Source: 
>       */
>     function approve(
>     ^^^^^^^^^^^^^^^^^
>         address _spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        70
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        595
Source: 
>         require(
>             collateralToken_.transfer(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        636
Source: 
>         require(
>             collateralToken_.transferFrom(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        645
Source: 
>         require(
>             collateralToken_.transfer(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(creatorVault_),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        658
Source: 
>         require(
>             creatorVault_.validateFunding(fee),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Funding validation failed"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        776
Source: 
>         // Gets the balance of the market (vault may send excess funding)
>         uint256 balance = collateralToken_.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Market
Line:        785
Source: 
>         require(
>             collateralToken_.transfer(msg.sender, collateralToTransfer),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Dai transfer failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        595
Source: 
>         require(
>             collateralToken_.transfer(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        828
Source: 
>         // Gets the curent balance of the market
>         uint256 poolBalanceFetched = collateralToken_.balanceOf(address(this));
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Returns the pool balance minus the curve intergral of the removed

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        843
Source: 
>     function _curveIntegral(uint256 _x) internal view returns (uint256) {
>         return curveLibrary_.curveIntegral(_x);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        636
Source: 
>         require(
>             collateralToken_.transferFrom(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        645
Source: 
>         require(
>             collateralToken_.transfer(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(creatorVault_),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        658
Source: 
>         require(
>             creatorVault_.validateFunding(fee),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Funding validation failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        806
Source: 
>         // Gets the balance of the market
>         uint256 balance = collateralToken_.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Performs the curve intergral with the relavant vaules

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        852
Source: 
>     function _inverseCurveIntegral(uint256 _x) internal view returns(uint256) {
>         return curveLibrary_.inverseCurveIntegral(_x);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        776
Source: 
>         // Gets the balance of the market (vault may send excess funding)
>         uint256 balance = collateralToken_.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Market
Line:        785
Source: 
>         require(
>             collateralToken_.transfer(msg.sender, collateralToTransfer),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Dai transfer failed"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Market
Line:        720
Source: 
>     function poolBalance() external view returns (uint256){
>         return collateralToken_.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Market
Line:        531
Source: 
>     // Total minted tokens
>     uint256 internal totalSupply_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Decimal accuracy of token

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Market
Line:        653
Source: 
>         // Adds the tokens to the total supply
>         totalSupply_ = totalSupply_.add(_numTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Adds the tokens to the balance of the buyer

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Market
Line:        907
Source: 
>     {
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Market
Line:        925
Source: 
>     {
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender]
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .add(_addedValue);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Market
Line:        944
Source: 
>     {
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender]
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             .sub(_subtractedValue);

[0m
