Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Utils
Line:        1044
Source: 
>     function _validateContractAddress(address _contract) private view {
>         assembly {
>         ^^^^^^^^^^
>             if iszero(extcodesize(_contract)) { revert(0, 0) }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Utils
Line:        1096
Source: 
>         uint256 parsed;
>         assembly { parsed := mload(add(_data, 32)) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return parsed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        234
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        276
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        390
Source: 
>     /// propotion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        426
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        508
Source: 
>     /// @param _address The address to check
>     function validateAddress(address _address) public pure {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_address != address(0), "Invalid address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        234
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        276
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        390
Source: 
>     /// propotion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        426
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        550
Source: 
>         if (_assetIds[0] != ETHER_ADDR) {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        560
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        1066
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        464
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BrokerExtension
Line:        24
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        550
Source: 
>         if (_assetIds[0] != ETHER_ADDR) {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        560
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        1066
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        464
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    BrokerExtension
Line:        24
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Utils
Line:        1066
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils
Line:        452
Source: 
>     /// @param _assetId The address of the token to query
>     function externalBalance(address _assetId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_assetId == ETHER_ADDR) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        234
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        276
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        360
Source: 
>     /// @param _amount The number of tokens to approve
>     function approveTokenTransfer(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _assetId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        390
Source: 
>     /// propotion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        426
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        463
Source: 
>     /// @param _assetId The address of the token to query
>     function tokenBalance(address _assetId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(_assetId).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        478
Source: 
>     /// EIP712 specification
>     function validateSignature(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _hash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        508
Source: 
>     /// @param _address The address to check
>     function validateAddress(address _address) public pure {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_address != address(0), "Invalid address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenList
Line:        1132
Source: 
>     /// @param _assetId The token address to remove from the token whitelist
>     function unwhitelistToken(address _assetId) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Utils.validateAddress(_assetId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenList
Line:        1140
Source: 
>     /// @param _assetId The token address to validate
>     function validateToken(address _assetId) external view {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenWhitelist[_assetId], "Invalid token");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        234
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        276
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        360
Source: 
>     /// @param _amount The number of tokens to approve
>     function approveTokenTransfer(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _assetId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        390
Source: 
>     /// propotion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        426
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        463
Source: 
>     /// @param _assetId The address of the token to query
>     function tokenBalance(address _assetId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(_assetId).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        478
Source: 
>     /// EIP712 specification
>     function validateSignature(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _hash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        508
Source: 
>     /// @param _address The address to check
>     function validateAddress(address _address) public pure {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_address != address(0), "Invalid address");

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BrokerExtension
Line:        16
Source: 
> contract BrokerExtension {
>     Broker public broker;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        195
Source: 
>     // ));
>     bytes32 public constant DOMAIN_SEPARATOR = 0x376a22e062fefdc56ac08f9a26f925278e5cc27dd2ef7880765327cadbb4fa5a;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        209
Source: 
>     // ));
>     bytes32 public constant OFFER_TYPEHASH = 0xf845c83a8f7964bc8dd1a092d28b83573b35be97630a5b8a3b8ae2ae79cd9260;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        223
Source: 
>     // ));
>     bytes32 public constant FILL_TYPEHASH = 0x5f59dbc3412a4575afed909d028055a91a4250ce92235f6790c155a4b2669e99;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        227
Source: 
>     // compatibility
>     address private constant ETHER_ADDR = address(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BrokerExtension
Line:        16
Source: 
> contract BrokerExtension {
>     Broker public broker;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenList
Line:        1116
Source: 
>     // on this contract.
>     mapping(address => bool) public tokenWhitelist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        195
Source: 
>     // ));
>     bytes32 public constant DOMAIN_SEPARATOR = 0x376a22e062fefdc56ac08f9a26f925278e5cc27dd2ef7880765327cadbb4fa5a;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        209
Source: 
>     // ));
>     bytes32 public constant OFFER_TYPEHASH = 0xf845c83a8f7964bc8dd1a092d28b83573b35be97630a5b8a3b8ae2ae79cd9260;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        223
Source: 
>     // ));
>     bytes32 public constant FILL_TYPEHASH = 0x5f59dbc3412a4575afed909d028055a91a4250ce92235f6790c155a4b2669e99;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        227
Source: 
>     // compatibility
>     address private constant ETHER_ADDR = address(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BrokerExtension
Line:        24
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils
Line:        550
Source: 
>         if (_assetIds[0] != ETHER_ADDR) {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BrokerExtension
Line:        24
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils
Line:        550
Source: 
>         if (_assetIds[0] != ETHER_ADDR) {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        560
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        464
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        560
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        464
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        550
Source: 
>         if (_assetIds[0] != ETHER_ADDR) {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        560
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        1066
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        464
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    BrokerExtension
Line:        24
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        550
Source: 
>         if (_assetIds[0] != ETHER_ADDR) {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        560
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        1066
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        464
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrokerExtension
Line:        31
Source: 
>         require(address(broker) == address(0), "Broker already set");
>         broker = Broker(_brokerAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
