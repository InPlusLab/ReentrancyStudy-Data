[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        146
Source: 
>     function both(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := and(x, y)}
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        149
Source: 
>     function either(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := or(x, y)}
>          ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        223
Source: 
>      */
>     function startAuction(
>      ^^^^^^^^^^^^^^^^^^^^^
>         uint256 amountToSell,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        300
Source: 
>      */
>     function settleAuction(uint256 id) external {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(contractEnabled == 1, "StakedTokenAuctionHouse/not-live");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        47
Source: 
>      */
>     function addAuthorization(address account) external isAuthorized {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        55
Source: 
>      */
>     function removeAuthorization(address account) external isAuthorized {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        243
Source: 
>         // get staked tokens
>         require(stakedToken.transferFrom(msg.sender, address(this), amountToSell), "StakedTokenAuctionHouse/cannot-transfer-staked-tokens");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        93
Source: 
> 
>     uint256  constant ONE = 1.00E18;                                              // [wad]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Minimum bid increase compared to the last bid in order to take the new one in consideration

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        243
Source: 
>         // get staked tokens
>         require(stakedToken.transferFrom(msg.sender, address(this), amountToSell), "StakedTokenAuctionHouse/cannot-transfer-staked-tokens");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        317
Source: 
>         // clear as much bad debt as possible
>         uint256 totalOnAuctionDebt = AccountingEngineLike(accountingEngine).totalOnAuctionDebt();
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AccountingEngineLike(accountingEngine).cancelAuctionedDebtWithSurplus(minimum(bid, totalOnAuctionDebt));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        321
Source: 
>         // transfer staked tokens to the high bidder
>         require(stakedToken.transfer(highBidder, amountToSell), "StakedTokenAuctionHouse/failed-transfer");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        349
Source: 
>         // send the staked tokens to the token burner
>         require(stakedToken.transfer(tokenBurner, bids[id].amountToSell), "StakedTokenAuctionHouse/failed-transfer");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        282
Source: 
>         if (bids[id].highBidder == msg.sender) {
>             safeEngine.transferInternalCoins(msg.sender, address(this), subtract(bid, bids[id].bidAmount));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        284
Source: 
>         } else {
>             safeEngine.transferInternalCoins(msg.sender, address(this), bid);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (bids[id].highBidder != address(0)) // not first bid

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        286
Source: 
>             if (bids[id].highBidder != address(0)) // not first bid
>                 safeEngine.transferInternalCoins(address(this), bids[id].highBidder, bids[id].bidAmount);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        314
Source: 
>         // transfer the surplus to the accounting engine
>         safeEngine.transferInternalCoins(address(this), accountingEngine, bid);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        318
Source: 
>         uint256 totalOnAuctionDebt = AccountingEngineLike(accountingEngine).totalOnAuctionDebt();
>         AccountingEngineLike(accountingEngine).cancelAuctionedDebtWithSurplus(minimum(bid, totalOnAuctionDebt));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        346
Source: 
>         // send the system coin bid back to the high bidder in case there was at least one bid
>         safeEngine.transferInternalCoins(address(this), bids[id].highBidder, bids[id].bidAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        154
Source: 
>     function addUint48(uint48 x, uint48 y) internal pure returns (uint48 z) {
>         require((z = x + y) >= x, "StakedTokenAuctionHouse/add-uint48-overflow");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        157
Source: 
>     function addUint256(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x + y) >= x, "StakedTokenAuctionHouse/add-uint256-overflow");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        160
Source: 
>     function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x, "StakedTokenAuctionHouse/sub-underflow");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        163
Source: 
>     function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x, "StakedTokenAuctionHouse/mul-overflow");
>                             ^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        89
Source: 
>     // Accounting engine
>     address public accountingEngine;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Token burner contract

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        91
Source: 
>     // Token burner contract
>     address public tokenBurner;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        107
Source: 
>     // Accumulator for all debt auctions currently not settled
>     uint256  public   activeStakedTokenAuctions;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Flag that indicates whether the contract is still enabled or not

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        261
Source: 
> 
>         bids[id].bidAmount       = newMinBid;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        262
Source: 
>         bids[id].bidAmount       = newMinBid;
>         bids[id].auctionDeadline = addUint48(uint48(now), totalAuctionLength);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        291
Source: 
> 
>         bids[id].bidAmount  = bid;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         bids[id].bidExpiry  = addUint48(uint48(now), bidDuration);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        292
Source: 
>         bids[id].bidAmount  = bid;
>         bids[id].bidExpiry  = addUint48(uint48(now), bidDuration);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        310
Source: 
>         // clear storage
>         activeStakedTokenAuctions = subtract(activeStakedTokenAuctions, 1);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete bids[id];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        311
Source: 
>         activeStakedTokenAuctions = subtract(activeStakedTokenAuctions, 1);
>         delete bids[id];
>          ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        343
Source: 
>         // decrease amount of active auctions
>         activeStakedTokenAuctions = subtract(activeStakedTokenAuctions, 1);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakedTokenAuctionHouse
Line:        352
Source: 
>         emit TerminateAuctionPrematurely(id, msg.sender, bids[id].highBidder, bids[id].bidAmount, activeStakedTokenAuctions);
>         delete bids[id];
>          ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StakedTokenAuctionHouse
Line:        111
Source: 
> 
>     bytes32 public constant AUCTION_HOUSE_TYPE = bytes32("STAKED_TOKEN");
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
