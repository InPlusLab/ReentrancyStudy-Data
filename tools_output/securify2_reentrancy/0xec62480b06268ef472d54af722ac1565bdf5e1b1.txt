Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    RicardianLLC
Line:        46
Source: 
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    RicardianLLC
Line:        46
Source: 
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                                                                       ^^^^^^^^^^^^^^^^
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    RicardianLLC
Line:        56
Source: 
>         supportsInterface[0x80ac58cd] = true; // ERC721 
>         supportsInterface[0x5b5e139f] = true; // METADATA
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supportsInterface[0x780e9d63] = true; // ENUMERABLE

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    RicardianLLC
Line:        61
Source: 
>     function approve(address spender, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId] || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/operator");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         getApproved[tokenId] = spender;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    RicardianLLC
Line:        98
Source: 
>     function transfer(address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId], "!owner");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    RicardianLLC
Line:        98
Source: 
>     function transfer(address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId], "!owner");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RicardianLLC
Line:        143
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RicardianLLC
Line:        143
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                              

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RicardianLLC
Line:        143
Source: 
>     }
> }


[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RicardianLLC
Line:        76
Source: 
>         tokenURI[tokenId] = "https://ipfs.globalupload.io/QmWnD9Tv6YGyMFCytGvoGTvnaGU8B6GPWWt1FwKfkuKD4V";
>         tokenOfOwnerByIndex[msg.sender][tokenId - 1] = tokenId;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (bool success, ) = ricardianLLCdao.call.value(msg.value)("");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RicardianLLC
Line:        102
Source: 
>     
>     function transferBatch(address[] calldata to, uint256[] calldata tokenId) external {
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to.length == tokenId.length, "!to/tokenId");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RicardianLLC
Line:        112
Source: 
>         require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/spender/operator");
>         _transfer(from, to, tokenId);
>                                     ^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RicardianLLC
Line:        129
Source: 
> 
>     function updateMintFee(uint256 _mintFee) external onlyRicardianLLCdao {
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mintFee = _mintFee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RicardianLLC
Line:        142
Source: 
>         emit UpdateRicardianLLCdao(ricardianLLCdao);
>     }
>    ^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RicardianLLC
Line:        44
Source: 
>     
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>                                                                            ^^^^^^^^^^^^^^^^^^^^
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RicardianLLC
Line:        97
Source: 
>     
>     function transfer(address to, uint256 tokenId) external {
>                                                ^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId], "!owner");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        41
Source: 
>     mapping(bytes4 => bool) public supportsInterface; // eip-165 
>     mapping(address => mapping(address => bool)) public isApprovedForAll;
>        ^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(uint256 => uint256)) public tokenOfOwnerByIndex;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        42
Source: 
>     mapping(address => mapping(address => bool)) public isApprovedForAll;
>     mapping(address => mapping(uint256 => uint256)) public tokenOfOwnerByIndex;
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        44
Source: 
>     
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>              ^^^^^^^^^^^^^^^^^^^^^^
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        44
Source: 
>     
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        44
Source: 
>     
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>                                                                            ^^^^^^^^^^^^^^^^^^^^
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        45
Source: 
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>                                      ^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        45
Source: 
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        46
Source: 
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        46
Source: 
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                                                                       ^^^^^^^^^^^^^^^^
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        47
Source: 
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);
>                  ^^^^^^^^^^^^^^^^^^^^
>     event UpdateMintFee(uint256 indexed mintFee);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        47
Source: 
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UpdateMintFee(uint256 indexed mintFee);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        47
Source: 
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);
>                                                                                                      ^^^^^^
>     event UpdateMintFee(uint256 indexed mintFee);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        48
Source: 
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);
>     event UpdateMintFee(uint256 indexed mintFee);
>                                              ^^^^
>     event UpdateMintStatus(bool indexed mintOpen);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        49
Source: 
>     event UpdateMintFee(uint256 indexed mintFee);
>     event UpdateMintStatus(bool indexed mintOpen);
>                                            ^^^^^^^
>     event UpdateRicardianLLCdao(address indexed ricardianLLCdao);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        50
Source: 
>     event UpdateMintStatus(bool indexed mintOpen);
>     event UpdateRicardianLLCdao(address indexed ricardianLLCdao);
>                                              ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        53
Source: 
>     constructor (string memory _masterOperatingAgreement) public {
>         ricardianLLCdao = msg.sender;
>                         ^^^^^^^^^^^^^
>         masterOperatingAgreement = _masterOperatingAgreement;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RicardianLLC
Line:        54
Source: 
>         ricardianLLCdao = msg.sender;
>         masterOperatingAgreement = _masterOperatingAgreement;
>                                                             ^
>         supportsInterface[0x80ac58cd] = true; // ERC721 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RicardianLLC
Line:        98
Source: 
>     function transfer(address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId], "!owner");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, tokenId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RicardianLLC
Line:        98
Source: 
>     function transfer(address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId], "!owner");
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, tokenId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RicardianLLC
Line:        44
Source: 
>     
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>              ^^^^^^^^^^^^^^^^^^^^^^
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RicardianLLC
Line:        44
Source: 
>     
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RicardianLLC
Line:        45
Source: 
>     event Approval(address indexed approver, address indexed spender, uint256 indexed tokenId);
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>                                      ^^^^^^^^^^^^^^^^^^^^^^
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RicardianLLC
Line:        47
Source: 
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);
>                  ^^^^^^^^^^^^^^^^^^^^
>     event UpdateMintFee(uint256 indexed mintFee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RicardianLLC
Line:        108
Source: 
>         }
>     }
> ^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RicardianLLC
Line:        110
Source: 
>     
>     function transferFrom(address from, address to, uint256 tokenId) external {
>                 ^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/spender/operator");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RicardianLLC
Line:        110
Source: 
>     
>     function transferFrom(address from, address to, uint256 tokenId) external {
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/spender/operator");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RicardianLLC
Line:        111
Source: 
>     function transferFrom(address from, address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/spender/operator");
>       ^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, tokenId);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RicardianLLC
Line:        111
Source: 
>     function transferFrom(address from, address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/spender/operator");
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, tokenId);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RicardianLLC
Line:        111
Source: 
>     function transferFrom(address from, address to, uint256 tokenId) external {
>         require(msg.sender == ownerOf[tokenId] || getApproved[tokenId] == msg.sender || isApprovedForAll[ownerOf[tokenId]][msg.sender], "!owner/spender/operator");
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, tokenId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RicardianLLC
Line:        103
Source: 
>     function transferBatch(address[] calldata to, uint256[] calldata tokenId) external {
>         require(to.length == tokenId.length, "!to/tokenId");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < to.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RicardianLLC
Line:        46
Source: 
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RicardianLLC
Line:        46
Source: 
>     event ApprovalForAll(address indexed holder, address indexed operator, bool approved);
>     event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);
>                                                                       ^^^^^^^^^^^^^^^^
>     event UpdateMasterOperatingAgreement(uint256 indexed version, string indexed masterOperatingAgreement);

[0m
