Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
>   /**
>    * Contract creator should provide total supply (without decimals) and token price, while deploying the smart contract. 
>                                                                                                                    ^^^^^^^
>    */

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    UniTopia
Line:        178
Source: 
>      soldTokens=_premint* (10 ** 18);
>     balances[msg.sender] = _premint* (10 ** 18);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(address(0), msg.sender, _premint* (10 ** 18));

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    UniTopia
Line:        184
Source: 
>   /**
>    * Users get tokens immediately according to ether contributed.
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        138
Source: 
> //****************************************************************************//
> //---------------------        MAIN CODE STARTS HERE     ---------------------//
>                                                                         ^^^^^^^^
> //****************************************************************************//

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        145
Source: 
>   /*===============================
>   =         DATA STORAGE          =
>                                   ^
>   ===============================*/    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        138
Source: 
> //****************************************************************************//
> //---------------------        MAIN CODE STARTS HERE     ---------------------//
>                                                                         ^^^^^^^^
> //****************************************************************************//

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        145
Source: 
>   /*===============================
>   =         DATA STORAGE          =
>                                   ^
>   ===============================*/    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        207
Source: 
>    * owner can withdraw the fund anytime.
>    */
>      
>   function withDraw() public onlyOwner{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        230
Source: 
>    * when safeGuard is true, then only token transfer will start. 
>    * once token transfer will be started, then it will not even reverted by owner.
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        237
Source: 
> 
>     balances[msg.sender] = balances[msg.sender].sub(value);
>                                                            
>     balances[to] = balances[to].add(value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        266
Source: 
>   /**
>    * user can transfer tokens in bulk. 
>                                       ^
>    * maximum 150 at a time.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        284
Source: 
>     require(spender != address(0));
>     allowed[msg.sender][spender] = value;
>                                   ^^^^^^^
>     emit Approval(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        295
Source: 
>     allowed[msg.sender][spender] = tokens;
>     emit Approval(msg.sender, spender, tokens);
>                                   ^^^^^^^^^^^^^
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        318
Source: 
>     require(spender != address(0));
>     allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);
>                                                                          ^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, allowed[msg.sender][spender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        330
Source: 
>     require(amount <= balances[msg.sender]);
>     _totalSupply = _totalSupply.sub(amount);
>                         ^^^^^^^^^^^^^^^^^^^^
>     balances[msg.sender] = balances[msg.sender].sub(amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        366
Source: 
>   function totalSupply() public view returns (uint256) {
>     return _totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        373
Source: 
>   
>   function allowance(address player, address spender) public view returns (uint256) {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
>     return allowed[player][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        377
Source: 
> 
> }
>                      

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        377
Source: 
> 
> }
>                                                                                                                     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        377
Source: 
> 
> }
>                                                                                                                                                                                                                                       

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        377
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniTopia
Line:        377
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                               

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    owned
Line:        138
Source: 
> //****************************************************************************//
> //---------------------        MAIN CODE STARTS HERE     ---------------------//
>                                                                         ^^^^^^^^
> //****************************************************************************//

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniTopia
Line:        284
Source: 
>     require(spender != address(0));
>     allowed[msg.sender][spender] = value;
>                                   ^^^^^^^
>     emit Approval(msg.sender, spender, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniTopia
Line:        318
Source: 
>     require(spender != address(0));
>     allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);
>                                                                          ^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, allowed[msg.sender][spender]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniTopia
Line:        330
Source: 
>     require(amount <= balances[msg.sender]);
>     _totalSupply = _totalSupply.sub(amount);
>                         ^^^^^^^^^^^^^^^^^^^^
>     balances[msg.sender] = balances[msg.sender].sub(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniTopia
Line:        295
Source: 
>     allowed[msg.sender][spender] = tokens;
>     emit Approval(msg.sender, spender, tokens);
>                                   ^^^^^^^^^^^^^
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniTopia
Line:        306
Source: 
>     require(spender != address(0));
>     allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);
>                                                                     ^^^^^^^^^^^^
>     emit Approval(msg.sender, spender, allowed[msg.sender][spender]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniTopia
Line:        377
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                  

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniTopia
Line:        377
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                               

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    UniTopia
Line:        213
Source: 
>       
>       emit TransferPoolamount(address(this),owner,Pool[owner]);
>                                 ^^^^^^^^^^^^^
>       Pool[owner]=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    UniTopia
Line:        232
Source: 
>    */
>   function transfer(address to, uint256 value) public returns (bool) {
>                                                                 ^^^^^^
>     require(safeGuard==true,'Transfer Is Not Available');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    owned
Line:        126
Source: 
> 
>     //this flow is to prevent transferring ownership to wrong wallet by mistake
>                                                             ^^^^^^^^^^^^^^^^^^^
>     function acceptOwnership() public {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        165
Source: 
>   event Transfer(address indexed from, address indexed to, uint256 value);
>   event TransferPoolamount(address _from, address _to, uint256 _ether);
>                                                        ^^^^^^^^^^^^^^^^
>   event Approval(address _from, address _spender, uint256 _tokenAmt);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        166
Source: 
>   event TransferPoolamount(address _from, address _to, uint256 _ether);
>   event Approval(address _from, address _spender, uint256 _tokenAmt);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        167
Source: 
>   event Approval(address _from, address _spender, uint256 _tokenAmt);
>   
>   
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
>   /**
>    * Contract creator should provide total supply (without decimals) and token price, while deploying the smart contract. 
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    */

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniTopia
Line:        174
Source: 
>    */
>   constructor(uint256 _supply,uint256 _price,uint256 _premint) public {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      _totalSupply= _supply * (10 ** 18);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    owned
Line:        127
Source: 
>     //this flow is to prevent transferring ownership to wrong wallet by mistake
>     function acceptOwnership() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    owned
Line:        127
Source: 
>     //this flow is to prevent transferring ownership to wrong wallet by mistake
>     function acceptOwnership() public {
>                                      ^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        165
Source: 
>   event Transfer(address indexed from, address indexed to, uint256 value);
>   event TransferPoolamount(address _from, address _to, uint256 _ether);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Approval(address _from, address _spender, uint256 _tokenAmt);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        165
Source: 
>   event Transfer(address indexed from, address indexed to, uint256 value);
>   event TransferPoolamount(address _from, address _to, uint256 _ether);
>                                                        ^^^^^^^^^^^^^^^^
>   event Approval(address _from, address _spender, uint256 _tokenAmt);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        166
Source: 
>   event TransferPoolamount(address _from, address _to, uint256 _ether);
>   event Approval(address _from, address _spender, uint256 _tokenAmt);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        167
Source: 
>   event Approval(address _from, address _spender, uint256 _tokenAmt);
>   
>   
>   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
>   /**
>    * Contract creator should provide total supply (without decimals) and token price, while deploying the smart contract. 
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
>   /**
>    * Contract creator should provide total supply (without decimals) and token price, while deploying the smart contract. 
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^
>    */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
>   /**
>    * Contract creator should provide total supply (without decimals) and token price, while deploying the smart contract. 
>                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
>    */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
>   /**
>    * Contract creator should provide total supply (without decimals) and token price, while deploying the smart contract. 
>                                                                                                                    ^^^^^^^
>    */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        174
Source: 
>    */
>   constructor(uint256 _supply,uint256 _price,uint256 _premint) public {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      _totalSupply= _supply * (10 ** 18);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        174
Source: 
>    */
>   constructor(uint256 _supply,uint256 _price,uint256 _premint) public {
>                                                                 ^^^^^^^
>      _totalSupply= _supply * (10 ** 18);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniTopia
Line:        175
Source: 
>   constructor(uint256 _supply,uint256 _price,uint256 _premint) public {
>      _totalSupply= _supply * (10 ** 18);
>                                          
>      tokenPrice=_price;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    UniTopia
Line:        232
Source: 
>    */
>   function transfer(address to, uint256 value) public returns (bool) {
>                                                                 ^^^^^^
>     require(safeGuard==true,'Transfer Is Not Available');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UniTopia
Line:        232
Source: 
>    */
>   function transfer(address to, uint256 value) public returns (bool) {
>                                                                 ^^^^^^
>     require(safeGuard==true,'Transfer Is Not Available');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UniTopia
Line:        232
Source: 
>    */
>   function transfer(address to, uint256 value) public returns (bool) {
>                                                                 ^^^^^^
>     require(safeGuard==true,'Transfer Is Not Available');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniTopia
Line:        316
Source: 
>    */
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(spender != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    owned
Line:        127
Source: 
>     //this flow is to prevent transferring ownership to wrong wallet by mistake
>     function acceptOwnership() public {
>                                      ^^
>         require(msg.sender == newOwner);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
>   /**
>    * Contract creator should provide total supply (without decimals) and token price, while deploying the smart contract. 
>                                                                                                                    ^^^^^^^
>    */

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UniTopia
Line:        222
Source: 
>   
>   function changeTokenPrice(uint256 _price) public onlyOwner{
>                                                           ^^^
>       require(_price!=0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UniTopia
Line:        223
Source: 
>   function changeTokenPrice(uint256 _price) public onlyOwner{
>       require(_price!=0);
>                           
>       tokenPrice=_price;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniTopia
Line:        297
Source: 
>     ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>     return true;
>      ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniTopia
Line:        310
Source: 
>   }
>   
>  ^
>   

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniTopia
Line:        325
Source: 
>   /**
>    * anyone can burn the tokens. and it will decrease the total supply of the tokens.
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    */

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UniTopia
Line:        332
Source: 
>     balances[msg.sender] = balances[msg.sender].sub(amount);
>     emit Transfer(msg.sender, address(0), amount);
>                                                    
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMath
Line:        105
Source: 
> //------------------ Contract to Manage Ownership -------------------//
> //*******************************************************************//
>                 ^^^^^^^^
> contract owned {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UniTopia
Line:        165
Source: 
>   event Transfer(address indexed from, address indexed to, uint256 value);
>   event TransferPoolamount(address _from, address _to, uint256 _ether);
>                                                        ^^^^^^^^^^^^^^^^
>   event Approval(address _from, address _spender, uint256 _tokenAmt);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UniTopia
Line:        166
Source: 
>   event TransferPoolamount(address _from, address _to, uint256 _ether);
>   event Approval(address _from, address _spender, uint256 _tokenAmt);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UniTopia
Line:        167
Source: 
>   event Approval(address _from, address _spender, uint256 _tokenAmt);
>   
>   
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UniTopia
Line:        172
Source: 
>   /**
>    * Contract creator should provide total supply (without decimals) and token price, while deploying the smart contract. 
>                                                                                                                    ^^^^^^^
>    */

[0m
