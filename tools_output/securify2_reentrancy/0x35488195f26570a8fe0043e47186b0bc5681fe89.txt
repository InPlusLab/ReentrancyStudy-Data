pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EOGLottery
Line:        19
Source: 
> {
>     address EOGAddress=0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EOGLottery
Line:        60
Source: 
>     }
>     function chargeLottery() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ChargedETH=msg.value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EOGLottery
Line:        108
Source: 
>     }
>     function Register() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(EIP20Interface(EOGAddress).balanceOf(msg.sender)>=MinEOG);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EOGLottery
Line:        41
Source: 
>             if( _adr==Competitors[i]){
>                 return EIP20Interface(EOGAddress).balanceOf(_adr);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EOGLottery
Line:        109
Source: 
>     function Register() public {
>         require(EIP20Interface(EOGAddress).balanceOf(msg.sender)>=MinEOG);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ExistCompetitor(msg.sender) == false);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        54
Source: 
>         for(uint i=0 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Maxrand += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        55
Source: 
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 Maxrand += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        71
Source: 
>         for(uint i=1 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(MaxHolder)<EIP20Interface(EOGAddress).balanceOf(Competitors[i])){
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 MaxHolder=Competitors[i];

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        71
Source: 
>         for(uint i=1 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(MaxHolder)<EIP20Interface(EOGAddress).balanceOf(Competitors[i])){
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 MaxHolder=Competitors[i];

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        81
Source: 
>         for(uint i=0 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint tempnum=EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        82
Source: 
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 uint tempnum=EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if(RandNum < counter+tempnum && RandNum >= counter){

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        86
Source: 
>                     if(Competitors[i] != LastLotteryWinner){
>                         Competitors[i].transfer((address(this).balance/4)*3);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastLotteryWinner=Competitors[i];

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        91
Source: 
>                         address payable MaxHold=GetMaxHolder();
>                         MaxHold.transfer(address(this).balance);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastMaxWinner=MaxHold;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EOGLottery
Line:        95
Source: 
>                 }else{
>                     counter += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EOGLottery
Line:        35
Source: 
>     }
>     function transferOwnership(address payable _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EOGLottery
Line:        46
Source: 
>     }
>     function ChangeMinEog(uint _newval,uint _seed) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         MinEOG=_newval;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EOGLottery
Line:        63
Source: 
>     }
>     function Random(uint max) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty,Competitors.length,seed))) % max;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EOGLottery
Line:        86
Source: 
>                     if(Competitors[i] != LastLotteryWinner){
>                         Competitors[i].transfer((address(this).balance/4)*3);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastLotteryWinner=Competitors[i];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    EOGLottery
Line:        81
Source: 
>         for(uint i=0 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint tempnum=EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    EOGLottery
Line:        82
Source: 
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 uint tempnum=EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if(RandNum < counter+tempnum && RandNum >= counter){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    EOGLottery
Line:        95
Source: 
>                 }else{
>                     counter += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EOGLottery
Line:        86
Source: 
>                     if(Competitors[i] != LastLotteryWinner){
>                         Competitors[i].transfer((address(this).balance/4)*3);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastLotteryWinner=Competitors[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EOGLottery
Line:        91
Source: 
>                         address payable MaxHold=GetMaxHolder();
>                         MaxHold.transfer(address(this).balance);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastMaxWinner=MaxHold;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        19
Source: 
> {
>     address EOGAddress=0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        21
Source: 
>     address owner;
>     address public LastMaxWinner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public LastLotteryWinner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        22
Source: 
>     address public LastMaxWinner;
>     address public LastLotteryWinner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public MinEOG = 5*10**18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        23
Source: 
>     address public LastLotteryWinner;
>     uint public MinEOG = 5*10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private seed;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        25
Source: 
>     uint private seed;
>     uint public ChargedETH;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address payable[]  private Competitors;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        26
Source: 
>     uint public ChargedETH;
>     address payable[]  private Competitors;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        38
Source: 
>     }
>     function GetUserPoints(address _adr) external view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint i=0 ;i < Competitors.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        46
Source: 
>     }
>     function ChangeMinEog(uint _newval,uint _seed) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         MinEOG=_newval;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        51
Source: 
>     
>     function GetPoints() public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint Maxrand=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        52
Source: 
>     function GetPoints() public view returns(uint){
>         uint Maxrand=0;
>         ^^^^^^^^^^^^
>         for(uint i=0 ;i < Competitors.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        63
Source: 
>     }
>     function Random(uint max) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty,Competitors.length,seed))) % max;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        67
Source: 
>     }
>     function GetMaxHolder() public view returns(address payable){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        address payable MaxHolder;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        68
Source: 
>     function GetMaxHolder() public view returns(address payable){
>        address payable MaxHolder;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^
>        MaxHolder=Competitors[0];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        77
Source: 
>     }
>     function StartLottery() external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint RandNum=Random(GetPoints());

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        78
Source: 
>     function StartLottery() external onlyOwner{
>         uint RandNum=Random(GetPoints());
>         ^^^^^^^^^^^^
>         uint counter=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        90
Source: 
>                     if(Competitors[i] != LastMaxWinner){
>                         address payable MaxHold=GetMaxHolder();
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                         MaxHold.transfer(address(this).balance);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        100
Source: 
>     }
>     function ExistCompetitor(address _adr) internal view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint i=0 ;i < Competitors.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EOGLottery
Line:        108
Source: 
>     }
>     function Register() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(EIP20Interface(EOGAddress).balanceOf(msg.sender)>=MinEOG);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EOGLottery
Line:        19
Source: 
> {
>     address EOGAddress=0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address owner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EOGLottery
Line:        20
Source: 
>     address EOGAddress=0x8Ae6AE8F172d7fc103CCfa5890883d6fE46038C9;
>     address owner;
>     ^^^^^^^^^^^^^
>     address public LastMaxWinner;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EOGLottery
Line:        86
Source: 
>                     if(Competitors[i] != LastLotteryWinner){
>                         Competitors[i].transfer((address(this).balance/4)*3);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastLotteryWinner=Competitors[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EOGLottery
Line:        91
Source: 
>                         address payable MaxHold=GetMaxHolder();
>                         MaxHold.transfer(address(this).balance);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastMaxWinner=MaxHold;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EOGLottery
Line:        86
Source: 
>                     if(Competitors[i] != LastLotteryWinner){
>                         Competitors[i].transfer((address(this).balance/4)*3);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastLotteryWinner=Competitors[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EOGLottery
Line:        91
Source: 
>                         address payable MaxHold=GetMaxHolder();
>                         MaxHold.transfer(address(this).balance);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastMaxWinner=MaxHold;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EOGLottery
Line:        86
Source: 
>                     if(Competitors[i] != LastLotteryWinner){
>                         Competitors[i].transfer((address(this).balance/4)*3);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastLotteryWinner=Competitors[i];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EOGLottery
Line:        91
Source: 
>                         address payable MaxHold=GetMaxHolder();
>                         MaxHold.transfer(address(this).balance);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         LastMaxWinner=MaxHold;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EOGLottery
Line:        54
Source: 
>         for(uint i=0 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Maxrand += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EOGLottery
Line:        71
Source: 
>         for(uint i=1 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(MaxHolder)<EIP20Interface(EOGAddress).balanceOf(Competitors[i])){
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 MaxHolder=Competitors[i];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EOGLottery
Line:        71
Source: 
>         for(uint i=1 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(MaxHolder)<EIP20Interface(EOGAddress).balanceOf(Competitors[i])){
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 MaxHolder=Competitors[i];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EOGLottery
Line:        81
Source: 
>         for(uint i=0 ;i < Competitors.length;i++){
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint tempnum=EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EOGLottery
Line:        82
Source: 
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 uint tempnum=EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if(RandNum < counter+tempnum && RandNum >= counter){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EOGLottery
Line:        95
Source: 
>                 }else{
>                     counter += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EOGLottery
Line:        109
Source: 
>     function Register() public {
>         require(EIP20Interface(EOGAddress).balanceOf(msg.sender)>=MinEOG);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ExistCompetitor(msg.sender) == false);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EOGLottery
Line:        41
Source: 
>             if( _adr==Competitors[i]){
>                 return EIP20Interface(EOGAddress).balanceOf(_adr);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EOGLottery
Line:        55
Source: 
>             if( EIP20Interface(EOGAddress).balanceOf(Competitors[i])>MinEOG){
>                 Maxrand += EIP20Interface(EOGAddress).balanceOf(Competitors[i])/(10**13);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EOGLottery
Line:        21
Source: 
>     address owner;
>     address public LastMaxWinner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public LastLotteryWinner;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EOGLottery
Line:        22
Source: 
>     address public LastMaxWinner;
>     address public LastLotteryWinner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public MinEOG = 5*10**18;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EOGLottery
Line:        24
Source: 
>     uint public MinEOG = 5*10**18;
>     uint private seed;
>     ^^^^^^^^^^^^^^^^^
>     uint public ChargedETH;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EOGLottery
Line:        25
Source: 
>     uint private seed;
>     uint public ChargedETH;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address payable[]  private Competitors;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EOGLottery
Line:        111
Source: 
>         require(ExistCompetitor(msg.sender) == false);
>         Competitors.push(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EOGLottery
Line:        61
Source: 
>     function chargeLottery() public payable {
>         ChargedETH=msg.value;
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EOGLottery
Line:        25
Source: 
>     uint private seed;
>     uint public ChargedETH;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     address payable[]  private Competitors;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    EOGLottery
Line:        64
Source: 
>     function Random(uint max) public view returns(uint){
>         uint randomnumber = uint(keccak256(abi.encodePacked(block.timestamp, block.difficulty,Competitors.length,seed))) % max;
>                                                             ^^^^^^^^^^^^^^^
>         return randomnumber;

[0m
