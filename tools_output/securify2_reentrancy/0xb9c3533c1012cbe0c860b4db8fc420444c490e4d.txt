Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.1. Changing pragma version to 0.6.1....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        334
Source: 
>      */
>     function executeLimitOrder(address _client, uint256 deadline)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        368
Source: 
>      */
>     function setTriggerAddress(address _address, bool _authorized)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        378
Source: 
>      */
>     function getMaxTokens(uint256 _etherAmount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        390
Source: 
>      */
>     function setLimitOrder(uint256 _tokenAmount, uint256 _etherAmount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        413
Source: 
>      */
>     function canPurchase(address _client)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        438
Source: 
>      */
>     function withdrawFeeTokens(address _client) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(clientTokenFees[_client] > 0, "No fees!");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        451
Source: 
>      */
>     function withdrawClientTokens() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(clientTokenBalances[msg.sender] > 0, "No tokens!");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        465
Source: 
>      */
>     function withdrawEther() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(clientEthBalances[msg.sender] > 0, "No ETH balance!");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        477
Source: 
>      */
>     function contractEthBalance() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniswapOTC
Line:        484
Source: 
>      */
>     function contractTokenBalance() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return token.balanceOf(address(this));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    UniswapOTC
Line:        357
Source: 
>         //Call Uniswap contract
>         exchange.ethToTokenSwapInput.value(ethBalance)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokensBought,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniswapOTC
Line:        334
Source: 
>      */
>     function executeLimitOrder(address _client, uint256 deadline)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniswapOTC
Line:        368
Source: 
>      */
>     function setTriggerAddress(address _address, bool _authorized)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniswapOTC
Line:        378
Source: 
>      */
>     function getMaxTokens(uint256 _etherAmount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniswapOTC
Line:        340
Source: 
>         //Avoids Uniswap Assert Failure when no liquidity (gas saving)
>         require(token.balanceOf(exchangeAddress) > 0, "No liquidity on Uniswap!"); //27,055 Gas
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniswapOTC
Line:        343
Source: 
>         uint256 ethBalance = clientEthBalances[_client];
>         uint256 tokensBought = exchange.getEthToTokenInputPrice(ethBalance);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 minTokens = clientMinTokens[_client];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniswapOTC
Line:        445
Source: 
> 
>         token.transfer(msg.sender, sendFees);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniswapOTC
Line:        458
Source: 
> 
>         token.transfer(msg.sender, sendTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    UniswapOTC
Line:        471
Source: 
> 
>         payable(msg.sender).transfer(sendEth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniswapOTC
Line:        291
Source: 
>     mapping (address => uint256) public purchaseTimestamp;        //Withdrawal timestamp
>     uint256 constant ONE_DAY_SECONDS = 86400;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant FIVE_MINUTE_SECONDS = 300;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniswapOTC
Line:        292
Source: 
>     uint256 constant ONE_DAY_SECONDS = 86400;
>     uint256 constant FIVE_MINUTE_SECONDS = 300;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniswapOTC
Line:        296
Source: 
> 
>     IERC20 token;
>     ^^^^^^^^^^^^
>     IUniswapExchange exchange;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniswapOTC
Line:        297
Source: 
>     IERC20 token;
>     IUniswapExchange exchange;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    UniswapOTC
Line:        357
Source: 
>         //Call Uniswap contract
>         exchange.ethToTokenSwapInput.value(ethBalance)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokensBought,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    UniswapOTC
Line:        471
Source: 
> 
>         payable(msg.sender).transfer(sendEth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UniswapOTC
Line:        357
Source: 
>         //Call Uniswap contract
>         exchange.ethToTokenSwapInput.value(ethBalance)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokensBought,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UniswapOTC
Line:        357
Source: 
>         //Call Uniswap contract
>         exchange.ethToTokenSwapInput.value(ethBalance)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokensBought,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UniswapOTC
Line:        471
Source: 
> 
>         payable(msg.sender).transfer(sendEth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniswapOTC
Line:        340
Source: 
>         //Avoids Uniswap Assert Failure when no liquidity (gas saving)
>         require(token.balanceOf(exchangeAddress) > 0, "No liquidity on Uniswap!"); //27,055 Gas
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniswapOTC
Line:        343
Source: 
>         uint256 ethBalance = clientEthBalances[_client];
>         uint256 tokensBought = exchange.getEthToTokenInputPrice(ethBalance);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 minTokens = clientMinTokens[_client];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniswapOTC
Line:        419
Source: 
>         //Avoids Uniswap Assert Failure when no liquidity (gas saving)
>         if (token.balanceOf(exchangeAddress) == 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniswapOTC
Line:        306
Source: 
>         exchangeAddress = _exchangeAddress;
>         tokenAddress = exchange.tokenAddress();
>                        ^^^^^^^^^^^^^^^^^^^^^^^
>         token = IERC20(tokenAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniswapOTC
Line:        357
Source: 
>         //Call Uniswap contract
>         exchange.ethToTokenSwapInput.value(ethBalance)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokensBought,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniswapOTC
Line:        428
Source: 
>         
>         uint256 tokensBought = exchange.getEthToTokenInputPrice(ethBalance);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 minTokens = clientMinTokens[_client];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniswapOTC
Line:        445
Source: 
> 
>         token.transfer(msg.sender, sendFees);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniswapOTC
Line:        458
Source: 
> 
>         token.transfer(msg.sender, sendTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniswapOTC
Line:        485
Source: 
>     function contractTokenBalance() public view returns (uint256) {
>         return token.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapOTC
Line:        357
Source: 
>         //Call Uniswap contract
>         exchange.ethToTokenSwapInput.value(ethBalance)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokensBought,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapOTC
Line:        445
Source: 
> 
>         token.transfer(msg.sender, sendFees);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapOTC
Line:        458
Source: 
> 
>         token.transfer(msg.sender, sendTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    UniswapOTC
Line:        440
Source: 
>         require(clientTokenFees[_client] > 0, "No fees!");
>         require(block.timestamp > purchaseTimestamp[_client], "Wait for client withdrawal.");
>                 ^^^^^^^^^^^^^^^
> 

[0m
