[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoGames
Line:        127
Source: 
>         listGames[seed] = Game({
>             game_title: Games.CoinFlip,
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             player: msg.sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoGames
Line:        143
Source: 
>     // The stone breaks the scissors, the scissors cut the paper, the paper wraps the stone.
>     // Everything is just kk in childhood, it remains only to try to play
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function game_knb(bytes memory _choice, bytes32 seed) public betInRange payable {

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoGames
Line:        168
Source: 
>     // Game Dice
>     // Playing dice, the player can select up to 5 dice values at a time. The more dice a player chooses, the less his final reward.
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The reward is calculated according to the formula:  (6 / number of selected cubes) * bet

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoGames
Line:        222
Source: 
>             assembly {user_choice := mload(add(0x1, choice))}
>             if(game.result != user_choice){
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 if (user_choice == 1 && game.result == 2 || user_choice == 2 && game.result == 3 || user_choice == 3 && game.result == 1) {

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoGames
Line:        232
Source: 
>                     emit ConfirmGame(game.player, 'KNB', 0, game.choice, game.result, game.seed, false, false, now);
>                 }
>             ^^^^^
>             }else{

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoGames
Line:        259
Source: 
>     }
>     // Demo game, 0 ether value. To reduce the cost of the game, we calculate a random result on the server
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function demo_game(string memory game, bytes memory _choice, bytes32 seed, uint bet) public {

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoGames
Line:        74
Source: 
>         GameState state;
>         uint result;
>    ^^^^^^^^^^^^^^^^^
>         bytes choice;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoGames
Line:        79
Source: 
> 
>     event NewGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoGames
Line:        79
Source: 
> 
>     event NewGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>                                                                                         ^^^^^^
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoGames
Line:        80
Source: 
>     event NewGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event ConfirmGame(address indexed player, string  game, uint profit, bytes choice, uint game_choice, bytes32 seed, bool status, bool draw,  uint timestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        137
Source: 
>         emit NewGame(msg.sender, seed, msg.value, _choice, game_title);
>         return user_choice;
>                           ^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        164
Source: 
>         });
>        emit NewGame(msg.sender, seed, msg.value, _choice, game_title);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        190
Source: 
>         });
>         emit NewGame(msg.sender, seed, msg.value, _choice, game_title);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        210
Source: 
>             if(game.result == user_choice){
>                 profit = game.bet.mul(WIN_COEFFICIENT).div(100);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 game.state = GameState.Win;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        276
Source: 
>     //automatic withdrawal using server bot
>     function multisend(address payable[] memory dests, uint256[] memory values, uint256[] memory ident) onlyOwner contractIsOn public returns(uint) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 i = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        279
Source: 
>         
>         while (i < dests.length) {
>              ^^^^^^^^^^^^^^^^^^^^^
>             uint transfer_value = values[i].sub(values[i].mul(3).div(100));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        292
Source: 
>     }
>     
>  ^^^
>     function stopProphylaxy()onlyOwner public {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        297
Source: 
>     // recharge function for games
>     function() external isNotContract contractIsOn betInRange payable {
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposit[msg.sender]+= msg.value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        305
Source: 
> //
> //
>                                  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoGames
Line:        305
Source: 
> //
> //
>                                                                                                                          

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CryptoGames
Line:        303
Source: 
> 
> //P̴̩͖͈̳o̷̡̳̭̞͔̺̩̩w̸̡̡̡̤̹͙͔̜̮̟̺̬̰͔͉͉͎͉̠̝͜ͅe̵̜̤̹ŗ̶̹̞̰̭̹̭̻̤͔͈͓͉ę̵̡͉͚̲̞̘͙̥̳͇͓̭ḑ̷̞̰̯̭͚͎̣͔̜̝̬͜ͅͅ ̵̣̲b̷̢͙͈̣̝̩͔͉͖y̷̢̱̠̙̘̹̟̠̙͖͍̹̦͍ͅ ̵̡̢̠̗͎͍͕̯̹͈͈̬̹c̷̢̪̪͎̺̠̤̮̙̜̞͈̞̝̭̭r̸̥̯̩̩̝̟͉̲̪̣̬̟̮̤̲̜y̵̗̬͓͎̻̱̝̗͕̟͙̯͇̜̤̲͔̭̫͓p̸̢͇͇̠̪t̵̹̳̮͇͜ǫ̸̙̬ͅͅģ̵̹̬͉̫̣͔̝̳̘̰̘̤̮a̸̡͖̮͙̯̬̰̫̫̘͎͎̰͇̹̜̼̥͚͇͉͔͚͓m̸̢̫̙̫̮̪͕̭̟̬̣̟̫̦͙̖ȩ̸̡̧̟̰̯͖̲͍̳͚̘̦͎̙̥̫͎̺̤̮͜ͅ.̴̨̱̲͚b̸͍͔e̶̡̡̡̜̬͓̤̣͍̝͚͖̘͈̱̘̲̠͓͍͙͉̯͍t̵̻̮
>                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> //

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoGames
Line:        276
Source: 
>     //automatic withdrawal using server bot
>     function multisend(address payable[] memory dests, uint256[] memory values, uint256[] memory ident) onlyOwner contractIsOn public returns(uint) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 i = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoGames
Line:        279
Source: 
>         
>         while (i < dests.length) {
>              ^^^^^^^^^^^^^^^^^^^^^
>             uint transfer_value = values[i].sub(values[i].mul(3).div(100));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoGames
Line:        292
Source: 
>     }
>     
>  ^^^
>     function stopProphylaxy()onlyOwner public {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoGames
Line:        297
Source: 
>     // recharge function for games
>     function() external isNotContract contractIsOn betInRange payable {
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposit[msg.sender]+= msg.value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        49
Source: 
>     uint public maxStake = 15 ether;
>     uint public constant WIN_COEFFICIENT = 198;
>                                       ^^^^^
>     uint public constant DICE_COEFFICIENT = 600;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CryptoGames
Line:        251
Source: 
>                 game.profit = profit;
>                 game.player.transfer(profit);
>                                ^^^^^^^^^^^^^^
>                 emit ConfirmGame(game.player, 'Dice', profit, game.choice, game.result, game.seed, true, false, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CryptoGames
Line:        303
Source: 
> 
> //P̴̩͖͈̳o̷̡̳̭̞͔̺̩̩w̸̡̡̡̤̹͙͔̜̮̟̺̬̰͔͉͉͎͉̠̝͜ͅe̵̜̤̹ŗ̶̹̞̰̭̹̭̻̤͔͈͓͉ę̵̡͉͚̲̞̘͙̥̳͇͓̭ḑ̷̞̰̯̭͚͎̣͔̜̝̬͜ͅͅ ̵̣̲b̷̢͙͈̣̝̩͔͉͖y̷̢̱̠̙̘̹̟̠̙͖͍̹̦͍ͅ ̵̡̢̠̗͎͍͕̯̹͈͈̬̹c̷̢̪̪͎̺̠̤̮̙̜̞͈̞̝̭̭r̸̥̯̩̩̝̟͉̲̪̣̬̟̮̤̲̜y̵̗̬͓͎̻̱̝̗͕̟͙̯͇̜̤̲͔̭̫͓p̸̢͇͇̠̪t̵̹̳̮͇͜ǫ̸̙̬ͅͅģ̵̹̬͉̫̣͔̝̳̘̰̘̤̮a̸̡͖̮͙̯̬̰̫̫̘͎͎̰͇̹̜̼̥͚͇͉͔͚͓m̸̢̫̙̫̮̪͕̭̟̬̣̟̫̦͙̖ȩ̸̡̧̟̰̯͖̲͍̳͚̘̦͎̙̥̫͎̺̤̮͜ͅ.̴̨̱̲͚b̸͍͔e̶̡̡̡̜̬͓̤̣͍̝͚͖̘͈̱̘̲̠͓͍͙͉̯͍t̵̻̮
>                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> //

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    CryptoGames
Line:        106
Source: 
>         assembly { size := extcodesize(addr) }
>         require(size == 0 && tx.origin == msg.sender);
>                          ^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    CryptoGames
Line:        111
Source: 
>     modifier contractIsOn() {
>         require(status);
>  ^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        79
Source: 
> 
>     event NewGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        137
Source: 
>         emit NewGame(msg.sender, seed, msg.value, _choice, game_title);
>         return user_choice;
>                           ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        142
Source: 
>     // Game of stone, scissors, paper
>     // The stone breaks the scissors, the scissors cut the paper, the paper wraps the stone.
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^
>     // Everything is just kk in childhood, it remains only to try to play

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        142
Source: 
>     // Game of stone, scissors, paper
>     // The stone breaks the scissors, the scissors cut the paper, the paper wraps the stone.
>                                                                                    ^^^^^^^^^
>     // Everything is just kk in childhood, it remains only to try to play

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        164
Source: 
>         });
>        emit NewGame(msg.sender, seed, msg.value, _choice, game_title);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        168
Source: 
>     // Game Dice
>     // Playing dice, the player can select up to 5 dice values at a time. The more dice a player chooses, the less his final reward.
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>     // The reward is calculated according to the formula:  (6 / number of selected cubes) * bet

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        168
Source: 
>     // Game Dice
>     // Playing dice, the player can select up to 5 dice values at a time. The more dice a player chooses, the less his final reward.
>                                                            ^^^^^^^^^^^^^^^^^
>     // The reward is calculated according to the formula:  (6 / number of selected cubes) * bet

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        190
Source: 
>         });
>         emit NewGame(msg.sender, seed, msg.value, _choice, game_title);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        193
Source: 
> 
>     //Casino must sign the resulting value V with its PrivKey, thus producing the digital signature S = sign(PrivKey, V), and send the corresponding TX, containing S.
>                            ^^^^^^^^^^^^^^^^^^^^^^^^
>     //The contract recovers the actual public key (K) from the digital signature S, and verifies that it is equal to the previously published PubKey (K == PubKey).

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        217
Source: 
>                 game.state = GameState.Lose;
>                 emit ConfirmGame(game.player, 'CoinFlip', 0, game.choice, game.result, game.seed, false, false, now);
>                                                 ^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        276
Source: 
>     //automatic withdrawal using server bot
>     function multisend(address payable[] memory dests, uint256[] memory values, uint256[] memory ident) onlyOwner contractIsOn public returns(uint) {
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 i = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        279
Source: 
>         
>         while (i < dests.length) {
>              ^^^^^^^^^^^^^^^^^^^^^
>             uint transfer_value = values[i].sub(values[i].mul(3).div(100));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        292
Source: 
>     }
>     
>  ^^^
>     function stopProphylaxy()onlyOwner public {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoGames
Line:        303
Source: 
> 
> //P̴̩͖͈̳o̷̡̳̭̞͔̺̩̩w̸̡̡̡̤̹͙͔̜̮̟̺̬̰͔͉͉͎͉̠̝͜ͅe̵̜̤̹ŗ̶̹̞̰̭̹̭̻̤͔͈͓͉ę̵̡͉͚̲̞̘͙̥̳͇͓̭ḑ̷̞̰̯̭͚͎̣͔̜̝̬͜ͅͅ ̵̣̲b̷̢͙͈̣̝̩͔͉͖y̷̢̱̠̙̘̹̟̠̙͖͍̹̦͍ͅ ̵̡̢̠̗͎͍͕̯̹͈͈̬̹c̷̢̪̪͎̺̠̤̮̙̜̞͈̞̝̭̭r̸̥̯̩̩̝̟͉̲̪̣̬̟̮̤̲̜y̵̗̬͓͎̻̱̝̗͕̟͙̯͇̜̤̲͔̭̫͓p̸̢͇͇̠̪t̵̹̳̮͇͜ǫ̸̙̬ͅͅģ̵̹̬͉̫̣͔̝̳̘̰̘̤̮a̸̡͖̮͙̯̬̰̫̫̘͎͎̰͇̹̜̼̥͚͇͉͔͚͓m̸̢̫̙̫̮̪͕̭̟̬̣̟̫̦͙̖ȩ̸̡̧̟̰̯͖̲͍̳͚̘̦͎̙̥̫͎̺̤̮͜ͅ.̴̨̱̲͚b̸͍͔e̶̡̡̡̜̬͓̤̣͍̝͚͖̘͈̱̘̲̠͓͍͙͉̯͍t̵̻̮
>                                                                             ^^^^^^^^^^^^^^^^^^^
> //

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        74
Source: 
>         GameState state;
>         uint result;
>    ^^^^^^^^^^^^^^^^^
>         bytes choice;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        79
Source: 
> 
>     event NewGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        79
Source: 
> 
>     event NewGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>                                                                                         ^^^^^^
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        80
Source: 
>     event NewGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event ConfirmGame(address indexed player, string  game, uint profit, bytes choice, uint game_choice, bytes32 seed, bool status, bool draw,  uint timestamp);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        80
Source: 
>     event NewGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
>     event ConfirmGame(address indexed player, string  game, uint profit, bytes choice, uint game_choice, bytes32 seed, bool status, bool draw,  uint timestamp);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        81
Source: 
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>     event ConfirmGame(address indexed player, string  game, uint profit, bytes choice, uint game_choice, bytes32 seed, bool status, bool draw,  uint timestamp);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Deposit(address indexed from, uint indexed block, uint value, uint time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        81
Source: 
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>     event ConfirmGame(address indexed player, string  game, uint profit, bytes choice, uint game_choice, bytes32 seed, bool status, bool draw,  uint timestamp);
>                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Deposit(address indexed from, uint indexed block, uint value, uint time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        81
Source: 
>     event DemoGame(address indexed player, bytes32 seed, uint bet, bytes choice, string  game);
>     event ConfirmGame(address indexed player, string  game, uint profit, bytes choice, uint game_choice, bytes32 seed, bool status, bool draw,  uint timestamp);
>                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Deposit(address indexed from, uint indexed block, uint value, uint time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        82
Source: 
>     event ConfirmGame(address indexed player, string  game, uint profit, bytes choice, uint game_choice, bytes32 seed, bool status, bool draw,  uint timestamp);
>     event Deposit(address indexed from, uint indexed block, uint value, uint time);
>      ^^^^^^^^^^^^^^^^^^
>     event Withdrawal(address indexed from, uint indexed block, uint value, uint ident,uint time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        115
Source: 
> 
>     // Game CoinFlip
>               ^^^^^^
>     // The game of tossing a coin, the coin has 2 sides,

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        124
Source: 
>         require(_choice.length == 1);
>         require(user_choice == 0 || user_choice == 1);
>                                                       
>         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoGames
Line:        126
Source: 
>         
>         listGames[seed] = Game({
>         ^^^^^^^^^^^^
>             game_title: Games.CoinFlip,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoGames
Line:        225
Source: 
>                     profit = game.bet.mul(WIN_COEFFICIENT).div(100);
>                     game.state = GameState.Win;
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                     game.profit = profit;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoGames
Line:        241
Source: 
>         }else if(game.game_title == Games.Dice){
>             uint length = game.choice.length + 1;
>                                 ^^^^^^^^^^^^^^^^^
>             for(uint8 i=1; i< length; i++){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoGames
Line:        251
Source: 
>                 game.profit = profit;
>                 game.player.transfer(profit);
>                                ^^^^^^^^^^^^^^
>                 emit ConfirmGame(game.player, 'Dice', profit, game.choice, game.result, game.seed, true, false, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoGames
Line:        266
Source: 
>         Game storage game = listGames[seed];
>         return game.choice;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoGames
Line:        294
Source: 
>     function stopProphylaxy()onlyOwner public {
>         status = true;
>          ^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoGames
Line:        303
Source: 
> 
> //P̴̩͖͈̳o̷̡̳̭̞͔̺̩̩w̸̡̡̡̤̹͙͔̜̮̟̺̬̰͔͉͉͎͉̠̝͜ͅe̵̜̤̹ŗ̶̹̞̰̭̹̭̻̤͔͈͓͉ę̵̡͉͚̲̞̘͙̥̳͇͓̭ḑ̷̞̰̯̭͚͎̣͔̜̝̬͜ͅͅ ̵̣̲b̷̢͙͈̣̝̩͔͉͖y̷̢̱̠̙̘̹̟̠̙͖͍̹̦͍ͅ ̵̡̢̠̗͎͍͕̯̹͈͈̬̹c̷̢̪̪͎̺̠̤̮̙̜̞͈̞̝̭̭r̸̥̯̩̩̝̟͉̲̪̣̬̟̮̤̲̜y̵̗̬͓͎̻̱̝̗͕̟͙̯͇̜̤̲͔̭̫͓p̸̢͇͇̠̪t̵̹̳̮͇͜ǫ̸̙̬ͅͅģ̵̹̬͉̫̣͔̝̳̘̰̘̤̮a̸̡͖̮͙̯̬̰̫̫̘͎͎̰͇̹̜̼̥͚͇͉͔͚͓m̸̢̫̙̫̮̪͕̭̟̬̣̟̫̦͙̖ȩ̸̡̧̟̰̯͖̲͍̳͚̘̦͎̙̥̫͎̺̤̮͜ͅ.̴̨̱̲͚b̸͍͔e̶̡̡̡̜̬͓̤̣͍̝͚͖̘͈̱̘̲̠͓͍͙͉̯͍t̵̻̮
>                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> //

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoGames
Line:        303
Source: 
> 
> //P̴̩͖͈̳o̷̡̳̭̞͔̺̩̩w̸̡̡̡̤̹͙͔̜̮̟̺̬̰͔͉͉͎͉̠̝͜ͅe̵̜̤̹ŗ̶̹̞̰̭̹̭̻̤͔͈͓͉ę̵̡͉͚̲̞̘͙̥̳͇͓̭ḑ̷̞̰̯̭͚͎̣͔̜̝̬͜ͅͅ ̵̣̲b̷̢͙͈̣̝̩͔͉͖y̷̢̱̠̙̘̹̟̠̙͖͍̹̦͍ͅ ̵̡̢̠̗͎͍͕̯̹͈͈̬̹c̷̢̪̪͎̺̠̤̮̙̜̞͈̞̝̭̭r̸̥̯̩̩̝̟͉̲̪̣̬̟̮̤̲̜y̵̗̬͓͎̻̱̝̗͕̟͙̯͇̜̤̲͔̭̫͓p̸̢͇͇̠̪t̵̹̳̮͇͜ǫ̸̙̬ͅͅģ̵̹̬͉̫̣͔̝̳̘̰̘̤̮a̸̡͖̮͙̯̬̰̫̫̘͎͎̰͇̹̜̼̥͚͇͉͔͚͓m̸̢̫̙̫̮̪͕̭̟̬̣̟̫̦͙̖ȩ̸̡̧̟̰̯͖̲͍̳͚̘̦͎̙̥̫͎̺̤̮͜ͅ.̴̨̱̲͚b̸͍͔e̶̡̡̡̜̬͓̤̣͍̝͚͖̘͈̱̘̲̠͓͍͙͉̯͍t̵̻̮
>                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> //

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoGames
Line:        225
Source: 
>                     profit = game.bet.mul(WIN_COEFFICIENT).div(100);
>                     game.state = GameState.Win;
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                     game.profit = profit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoGames
Line:        241
Source: 
>         }else if(game.game_title == Games.Dice){
>             uint length = game.choice.length + 1;
>                                 ^^^^^^^^^^^^^^^^^
>             for(uint8 i=1; i< length; i++){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoGames
Line:        251
Source: 
>                 game.profit = profit;
>                 game.player.transfer(profit);
>                                ^^^^^^^^^^^^^^
>                 emit ConfirmGame(game.player, 'Dice', profit, game.choice, game.result, game.seed, true, false, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoGames
Line:        266
Source: 
>         Game storage game = listGames[seed];
>         return game.choice;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CryptoGames
Line:        294
Source: 
>     function stopProphylaxy()onlyOwner public {
>         status = true;
>          ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoGames
Line:        225
Source: 
>                     profit = game.bet.mul(WIN_COEFFICIENT).div(100);
>                     game.state = GameState.Win;
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>                     game.profit = profit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoGames
Line:        241
Source: 
>         }else if(game.game_title == Games.Dice){
>             uint length = game.choice.length + 1;
>                                 ^^^^^^^^^^^^^^^^^
>             for(uint8 i=1; i< length; i++){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoGames
Line:        251
Source: 
>                 game.profit = profit;
>                 game.player.transfer(profit);
>                                ^^^^^^^^^^^^^^
>                 emit ConfirmGame(game.player, 'Dice', profit, game.choice, game.result, game.seed, true, false, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoGames
Line:        266
Source: 
>         Game storage game = listGames[seed];
>         return game.choice;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoGames
Line:        294
Source: 
>     function stopProphylaxy()onlyOwner public {
>         status = true;
>          ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoGames
Line:        303
Source: 
> 
> //P̴̩͖͈̳o̷̡̳̭̞͔̺̩̩w̸̡̡̡̤̹͙͔̜̮̟̺̬̰͔͉͉͎͉̠̝͜ͅe̵̜̤̹ŗ̶̹̞̰̭̹̭̻̤͔͈͓͉ę̵̡͉͚̲̞̘͙̥̳͇͓̭ḑ̷̞̰̯̭͚͎̣͔̜̝̬͜ͅͅ ̵̣̲b̷̢͙͈̣̝̩͔͉͖y̷̢̱̠̙̘̹̟̠̙͖͍̹̦͍ͅ ̵̡̢̠̗͎͍͕̯̹͈͈̬̹c̷̢̪̪͎̺̠̤̮̙̜̞͈̞̝̭̭r̸̥̯̩̩̝̟͉̲̪̣̬̟̮̤̲̜y̵̗̬͓͎̻̱̝̗͕̟͙̯͇̜̤̲͔̭̫͓p̸̢͇͇̠̪t̵̹̳̮͇͜ǫ̸̙̬ͅͅģ̵̹̬͉̫̣͔̝̳̘̰̘̤̮a̸̡͖̮͙̯̬̰̫̫̘͎͎̰͇̹̜̼̥͚͇͉͔͚͓m̸̢̫̙̫̮̪͕̭̟̬̣̟̫̦͙̖ȩ̸̡̧̟̰̯͖̲͍̳͚̘̦͎̙̥̫͎̺̤̮͜ͅ.̴̨̱̲͚b̸͍͔e̶̡̡̡̜̬͓̤̣͍̝͚͖̘͈̱̘̲̠͓͍͙͉̯͍t̵̻̮
>                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> //

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    CryptoGames
Line:        145
Source: 
>     function game_knb(bytes memory _choice, bytes32 seed) public betInRange payable {
>         string memory game_title = 'KNB';
>         ^^^^^^^^^^^
>         uint8 user_choice;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    CryptoGames
Line:        171
Source: 
>     function game_dice(bytes memory _choice, bytes32 seed) public betInRange payable {
>         string memory game_title = 'Dice';
>                     ^^^^^^^^^^^
>         require(listGames[seed].bet == 0x0);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    CryptoGames
Line:        223
Source: 
>             if(game.result != user_choice){
>                 if (user_choice == 1 && game.result == 2 || user_choice == 2 && game.result == 3 || user_choice == 3 && game.result == 1) {
>                                                       ^^^^^^^^^^^
>                     profit = game.bet.mul(WIN_COEFFICIENT).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CryptoGames
Line:        146
Source: 
>         string memory game_title = 'KNB';
>         uint8 user_choice;
>                        ^^^
>         assembly {user_choice := mload(add(0x1, _choice))}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CryptoGames
Line:        172
Source: 
>         string memory game_title = 'Dice';
>         require(listGames[seed].bet == 0x0);
>                                 ^^^^^^^^^^^^
>         //Checking that bids are in the right range, and no more than 5 cubes are selected

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CryptoGames
Line:        195
Source: 
>     //The contract recovers the actual public key (K) from the digital signature S, and verifies that it is equal to the previously published PubKey (K == PubKey).
>     //If APK does not match PubKey, it is tantamount to cheating. In this case, the contract simply rejects the transaction.
>                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //The contract uses S as a seed for the predefined PRNG algorithm (e.g. SHA-3 based), which produces the lucky number (L), e.g. between 1 and 6.

[0m
