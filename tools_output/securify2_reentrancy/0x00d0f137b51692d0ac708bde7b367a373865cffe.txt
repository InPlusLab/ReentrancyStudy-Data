Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        84
Source: 
>      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * imposed by `transfer`, making them unable to receive funds via

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        213
Source: 
>  * manner, since when dealing with GSN meta-transactions the account sending and
>  * paying for execution may not be the actual sender (as far as an application
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * is concerned).

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        219
Source: 
> contract Context {
>     // Empty internal constructor, to prevent people from mistakenly deploying
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // an instance of this contract, which should be used via inheritance.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        292
Source: 
>      * NOTE: Renouncing ownership will leave the contract without an owner,
>      * thereby removing any functionality that is only available to the owner.
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        316
Source: 
>         emit OwnershipTransferred(_owner, newOwner);
>         _owner = newOwner;
>                        ^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        328
Source: 
>  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
>  * available, which can be applied to functions to make sure there are no nested
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * (reentrant) calls to them.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        316
Source: 
>         emit OwnershipTransferred(_owner, newOwner);
>         _owner = newOwner;
>                        ^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        328
Source: 
>  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
>  * available, which can be applied to functions to make sure there are no nested
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * (reentrant) calls to them.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        836
Source: 
>             _ToTokenContractAddress == address(0) &&
>             IBPool_Balancer_Unzap_V1_1(_FromBalancerPoolAddress).isBound(
>                                                                 ^^^^^^^^^
>                 wethTokenAddress

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1250
Source: 
>         uint256 contractBalance = address(this).balance;
>         address payable _to = owner().toPayable();
>                                       ^^^^^^^^^^^^
>         _to.transfer(contractBalance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }
>                                                                                                                                                 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }
>                                                                                                                                                                                                                                                                                                                                                                              

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }


[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        845
Source: 
>                 _IncomingBPT
>             );
>           ^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        851
Source: 
>                 _ToTokenContractAddress,
>                 _FromBalancerPoolAddress,
>                               ^^^^^^^^^^^
>                 _IncomingBPT,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        915
Source: 
>         if (_ToTokenContractAddress == address(0)) {
>             uint256 ethBought = _token2Eth(
>                               ^^^^^^^^^^^^^
>                 _IntermediateToken,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1004
Source: 
>         require(
>             IERC20(_tokenContractAddress).transferFrom(
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1112
Source: 
> 
>     /**
>      ^^
>     @notice This function is used to zap out of the given balancer pool

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1114
Source: 
>     @notice This function is used to zap out of the given balancer pool
>     @param _FromBalancerPoolAddress The address of balancer pool to zap out
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _ToTokenContractAddress The Token address which will be zapped out

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1116
Source: 
>     @param _ToTokenContractAddress The Token address which will be zapped out
>     @param _amount The amount of token for zapout
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>     @return The amount of tokens received after zap out

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1119
Source: 
>      */
>     function _exitBalancer(
>                         ^^^
>         address _FromBalancerPoolAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1123
Source: 
>         uint256 _amount
>     ) internal returns (uint256 returnedTokens) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1230
Source: 
>     function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {
>         require(
>               ^^
>             _new_goodwill >= 0 && _new_goodwill < 10000,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1232
Source: 
>             _new_goodwill >= 0 && _new_goodwill < 10000,
>             "GoodWill Value not allowed"
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1235
Source: 
>         goodwill = _new_goodwill;
>     }
>      
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1243
Source: 
>     // - to Pause the contract
>     function toggleContractActive() public onlyOwner {
>                                             ^^^^^^^^^^
>         stopped = !stopped;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1194
Source: 
>     @notice This function is used to swap tokens to eth
>     @param _FromTokenContractAddress The token address to swap from
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param tokens2Trade The quantity of tokens to swap

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1203
Source: 
>         address payable _toWhomToIssue
>     ) internal returns (uint256 ethBought) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_FromTokenContractAddress == wethTokenAddress) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TransferHelper
Line:        678
Source: 
>         address token,
>         address from,
>       ^^^^^^^^^^^^^^^
>         address to,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        862
Source: 
>     @param _toWhomToIssue is the address of user
>     @param _ToTokenContractAddress is the address of the token to which you want to convert to
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _FromBalancerPoolAddress the address of the Balancer Pool from which you want to ZapOut

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1048
Source: 
>                 ) {
>                     continue;
>                            ^^
>                 }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }
>                                                                                                                                                                                                                                              

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }
>                                                                                                                                                                                                                                                                                              

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }


[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1104
Source: 
>             balance,
>             denorm,
>           ^^^^^^^^^
>             totalSupply,

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1065
Source: 
>             } else {
>                 //get max eth value
>                              ^^^^^^
>                 if (maxEth < tokensForBPT) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1077
Source: 
>     @param _FromBalancerPoolAddress Address of balancer pool to zapout from
>     @param _IncomingBPT The amount of BPT to zapout
>                                           ^^^^^^^^^
>     @param _toToken Address of token to zap out with

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        678
Source: 
>         address token,
>         address from,
>       ^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        693
Source: 
> 
> interface IUniswapV2Factory {
>         ^^^^^^^^^^^^^^^^^^^^^
>     function getPair(address tokenA, address tokenB)

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        712
Source: 
> 
>     //token 2 token
>       ^^^^^^^^^^^^^
>     function swapExactTokensForTokens(

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        678
Source: 
>         address token,
>         address from,
>       ^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        693
Source: 
> 
> interface IUniswapV2Factory {
>         ^^^^^^^^^^^^^^^^^^^^^
>     function getPair(address tokenA, address tokenB)

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        712
Source: 
> 
>     //token 2 token
>       ^^^^^^^^^^^^^
>     function swapExactTokensForTokens(

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        678
Source: 
>         address token,
>         address from,
>       ^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        693
Source: 
> 
> interface IUniswapV2Factory {
>         ^^^^^^^^^^^^^^^^^^^^^
>     function getPair(address tokenA, address tokenB)

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        712
Source: 
> 
>     //token 2 token
>       ^^^^^^^^^^^^^
>     function swapExactTokensForTokens(

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        678
Source: 
>         address token,
>         address from,
>       ^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        693
Source: 
> 
> interface IUniswapV2Factory {
>         ^^^^^^^^^^^^^^^^^^^^^
>     function getPair(address tokenA, address tokenB)

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TransferHelper
Line:        712
Source: 
> 
>     //token 2 token
>       ^^^^^^^^^^^^^
>     function swapExactTokensForTokens(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        328
Source: 
>  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
>  * available, which can be applied to functions to make sure there are no nested
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * (reentrant) calls to them.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        836
Source: 
>             _ToTokenContractAddress == address(0) &&
>             IBPool_Balancer_Unzap_V1_1(_FromBalancerPoolAddress).isBound(
>                                                                 ^^^^^^^^^
>                 wethTokenAddress

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }
>                                                                                                                                                 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        845
Source: 
>                 _IncomingBPT
>             );
>           ^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        851
Source: 
>                 _ToTokenContractAddress,
>                 _FromBalancerPoolAddress,
>                               ^^^^^^^^^^^
>                 _IncomingBPT,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        862
Source: 
>     @param _toWhomToIssue is the address of user
>     @param _ToTokenContractAddress is the address of the token to which you want to convert to
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _FromBalancerPoolAddress the address of the Balancer Pool from which you want to ZapOut

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        851
Source: 
>                 _ToTokenContractAddress,
>                 _FromBalancerPoolAddress,
>                               ^^^^^^^^^^^
>                 _IncomingBPT,

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        862
Source: 
>     @param _toWhomToIssue is the address of user
>     @param _ToTokenContractAddress is the address of the token to which you want to convert to
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _FromBalancerPoolAddress the address of the Balancer Pool from which you want to ZapOut

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                   ^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IBFactory_Balancer_Unzap_V1_1
Line:        577
Source: 
> 
>     function isBound(address t) external view returns (bool);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IBPool_Balancer_Unzap_V1_1
Line:        581
Source: 
>         uint256 tokenBalanceOut,
>         uint256 tokenWeightOut,
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 poolSupply,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IuniswapFactory_Balancer_Unzap_V1_1
Line:        617
Source: 
>         view
>         returns (uint256 tokens_bought);
>                        ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Iuniswap_Balancer_Unzap_V1_1
Line:        623
Source: 
>         uint256 deadline,
>         address recipient
>                     ^^^^^
>     ) external returns (uint256 eth_bought);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        782
Source: 
> 
>     address
>    ^^^^^^^^
>         private constant wethTokenAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        786
Source: 
>     uint256
>         private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;
>                                                                                        ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        790
Source: 
>         address _toWhomToIssue,
>         address _fromBalancerPoolAddress,
>                                  ^^^^^^^^
>         address _toTokenContractAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        796
Source: 
>     constructor(uint16 _goodwill) public {
>         goodwill = _goodwill;
>                  ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        802
Source: 
>         if (stopped) {
>             revert("Temporarily Paused");
>                        ^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        810
Source: 
>     @notice This function is used for zapping out of balancer pools
>     @param _ToTokenContractAddress The token in which we want zapout (for ethers, its zero address)
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _FromBalancerPoolAddress The address of balancer pool to zap out

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        811
Source: 
>     @param _ToTokenContractAddress The token in which we want zapout (for ethers, its zero address)
>     @param _FromBalancerPoolAddress The address of balancer pool to zap out
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _IncomingBPT The quantity of balancer pool tokens

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        836
Source: 
>             _ToTokenContractAddress == address(0) &&
>             IBPool_Balancer_Unzap_V1_1(_FromBalancerPoolAddress).isBound(
>                                                                 ^^^^^^^^^
>                 wethTokenAddress

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        850
Source: 
>                 msg.sender,
>                 _ToTokenContractAddress,
>                    ^^^^^^^^^^^^^^^^^^^^^
>                 _FromBalancerPoolAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        931
Source: 
>             uint256 tokenBought = _token2Token(
>                 _IntermediateToken,
>           ^^^^^^^^^^^^^^^^^^^^^^^
>                 _toWhomToIssue,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1250
Source: 
>         uint256 contractBalance = address(this).balance;
>         address payable _to = owner().toPayable();
>                                       ^^^^^^^^^^^^
>         _to.transfer(contractBalance);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        280
Source: 
> 
>     /**
>    ^^^^
>      * @dev Returns true if the caller is the current owner.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuard
Line:        360
Source: 
>      * function is not supported. It is possible to prevent this from happening
>      * by making the `nonReentrant` function external, and make it call a
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>      * `private` function that does the actual work.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        786
Source: 
>     uint256
>         private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        786
Source: 
>     uint256
>         private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;
>                                                            ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        786
Source: 
>     uint256
>         private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;
>                                                                                        ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        796
Source: 
>     constructor(uint16 _goodwill) public {
>         goodwill = _goodwill;
>                  ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        802
Source: 
>         if (stopped) {
>             revert("Temporarily Paused");
>                        ^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        810
Source: 
>     @notice This function is used for zapping out of balancer pools
>     @param _ToTokenContractAddress The token in which we want zapout (for ethers, its zero address)
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _FromBalancerPoolAddress The address of balancer pool to zap out

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        811
Source: 
>     @param _ToTokenContractAddress The token in which we want zapout (for ethers, its zero address)
>     @param _FromBalancerPoolAddress The address of balancer pool to zap out
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _IncomingBPT The quantity of balancer pool tokens

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }


[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }


[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1232
Source: 
>             _new_goodwill >= 0 && _new_goodwill < 10000,
>             "GoodWill Value not allowed"
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1232
Source: 
>             _new_goodwill >= 0 && _new_goodwill < 10000,
>             "GoodWill Value not allowed"
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }


[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        845
Source: 
>                 _IncomingBPT
>             );
>           ^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        851
Source: 
>                 _ToTokenContractAddress,
>                 _FromBalancerPoolAddress,
>                               ^^^^^^^^^^^
>                 _IncomingBPT,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        909
Source: 
>         uint256 _returnedTokens = _exitBalancer(
>             _FromBalancerPoolAddress,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _IntermediateToken,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        915
Source: 
>         if (_ToTokenContractAddress == address(0)) {
>             uint256 ethBought = _token2Eth(
>                               ^^^^^^^^^^^^^
>                 _IntermediateToken,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1147
Source: 
>     @param _FromTokenContractAddress The token address to swap from
>     @param _ToWhomToIssue The address to transfer after swap
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _ToTokenContractAddress The token address to swap to

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1156
Source: 
>         address _ToTokenContractAddress,
>         uint256 tokens2Trade
>                        ^^^^^
>     ) internal returns (uint256 tokenBought) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1104
Source: 
>             balance,
>             denorm,
>           ^^^^^^^^^
>             totalSupply,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1114
Source: 
>     @notice This function is used to zap out of the given balancer pool
>     @param _FromBalancerPoolAddress The address of balancer pool to zap out
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _ToTokenContractAddress The Token address which will be zapped out

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1116
Source: 
>     @param _ToTokenContractAddress The Token address which will be zapped out
>     @param _amount The amount of token for zapout
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>     @return The amount of tokens received after zap out

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1119
Source: 
>      */
>     function _exitBalancer(
>                         ^^^
>         address _FromBalancerPoolAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1123
Source: 
>         uint256 _amount
>     ) internal returns (uint256 returnedTokens) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1243
Source: 
>     // - to Pause the contract
>     function toggleContractActive() public onlyOwner {
>                                             ^^^^^^^^^^
>         stopped = !stopped;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1194
Source: 
>     @notice This function is used to swap tokens to eth
>     @param _FromTokenContractAddress The token address to swap from
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param tokens2Trade The quantity of tokens to swap

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1203
Source: 
>         address payable _toWhomToIssue
>     ) internal returns (uint256 ethBought) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_FromTokenContractAddress == wethTokenAddress) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1025
Source: 
>         //get token list
>         address[] memory tokens = IBPool_Balancer_Unzap_V1_1(
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
>             _FromBalancerPoolAddress

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        862
Source: 
>     @param _toWhomToIssue is the address of user
>     @param _ToTokenContractAddress is the address of the token to which you want to convert to
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     @param _FromBalancerPoolAddress the address of the Balancer Pool from which you want to ZapOut

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1048
Source: 
>                 ) {
>                     continue;
>                            ^^
>                 }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1065
Source: 
>             } else {
>                 //get max eth value
>                              ^^^^^^
>                 if (maxEth < tokensForBPT) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1077
Source: 
>     @param _FromBalancerPoolAddress Address of balancer pool to zapout from
>     @param _IncomingBPT The amount of BPT to zapout
>                                           ^^^^^^^^^
>     @param _toToken Address of token to zap out with

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }
>                                                                                                                                                                                                                                              

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1004
Source: 
>         require(
>             IERC20(_tokenContractAddress).transferFrom(
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1112
Source: 
> 
>     /**
>      ^^
>     @notice This function is used to zap out of the given balancer pool

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1230
Source: 
>     function set_new_goodwill(uint16 _new_goodwill) public onlyOwner {
>         require(
>               ^^
>             _new_goodwill >= 0 && _new_goodwill < 10000,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1235
Source: 
>         goodwill = _new_goodwill;
>     }
>      
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }
>                                                                                                                                                                                                                                                                                              

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        85
Source: 
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>      * imposed by `transfer`, making them unable to receive funds via
>          ^^^^^^^^
>      * `transfer`. {sendValue} removes this limitation.

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1082
Source: 
>     function _getBPT2Token(
>         address _FromBalancerPoolAddress,
>                                     ^^^^^
>         uint256 _IncomingBPT,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Balancer_ZapOut_General_V2_2
Line:        1232
Source: 
>             _new_goodwill >= 0 && _new_goodwill < 10000,
>             "GoodWill Value not allowed"
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        392
Source: 
>  *
>  * Using this library instead of the unchecked operations eliminates an entire
>                                        ^^^^^^^^^^^^^^^^^^^
>  * class of bugs, so it's recommended to use it always.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        397
Source: 
>     /**
>      * @dev Returns the addition of two unsigned integers, reverting on
>                                                ^^^^^^^^^^^^^^^^^^
>      * overflow.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        678
Source: 
>         address token,
>         address from,
>       ^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        693
Source: 
> 
> interface IUniswapV2Factory {
>         ^^^^^^^^^^^^^^^^^^^^^
>     function getPair(address tokenA, address tokenB)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        712
Source: 
> 
>     //token 2 token
>       ^^^^^^^^^^^^^
>     function swapExactTokensForTokens(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        678
Source: 
>         address token,
>         address from,
>       ^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        693
Source: 
> 
> interface IUniswapV2Factory {
>         ^^^^^^^^^^^^^^^^^^^^^
>     function getPair(address tokenA, address tokenB)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        712
Source: 
> 
>     //token 2 token
>       ^^^^^^^^^^^^^
>     function swapExactTokensForTokens(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        678
Source: 
>         address token,
>         address from,
>       ^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        693
Source: 
> 
> interface IUniswapV2Factory {
>         ^^^^^^^^^^^^^^^^^^^^^
>     function getPair(address tokenA, address tokenB)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        712
Source: 
> 
>     //token 2 token
>       ^^^^^^^^^^^^^
>     function swapExactTokensForTokens(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1004
Source: 
>         require(
>             IERC20(_tokenContractAddress).transferFrom(
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1235
Source: 
>         goodwill = _new_goodwill;
>     }
>      
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Balancer_ZapOut_General_V2_2
Line:        1255
Source: 
>     function() external payable {}
> }
>                                                                                                                                                                                                                                                                                              

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        132
Source: 
>     /**
>      * @dev Moves `amount` tokens from the caller's account to `recipient`.
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        693
Source: 
> 
> interface IUniswapV2Factory {
>         ^^^^^^^^^^^^^^^^^^^^^
>     function getPair(address tokenA, address tokenB)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TransferHelper
Line:        712
Source: 
> 
>     //token 2 token
>       ^^^^^^^^^^^^^
>     function swapExactTokensForTokens(

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        360
Source: 
>      * function is not supported. It is possible to prevent this from happening
>      * by making the `nonReentrant` function external, and make it call a
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>      * `private` function that does the actual work.

[0m
