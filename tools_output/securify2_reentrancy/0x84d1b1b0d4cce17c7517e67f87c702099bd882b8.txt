Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.13. Changing pragma version to 0.5.13....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdsaleToken
Line:        56
Source: 
>     /// @param _value the amount to send
>     function transfer(address payable _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdsaleToken
Line:        67
Source: 
> 
>     function getBalance(address addr) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   		return balanceOf[addr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdsaleToken
Line:        71
Source: 
> 
>     function getEtherBalance() public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   		//return contract ether balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdsaleToken
Line:        76
Source: 
> 
>     function getOwner() public view returns(address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdSale
Line:        169
Source: 
> 
>     function depositFunds() public payable
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdSale
Line:        200
Source: 
>      */
>     function checkGoalReached() public afterDeadline returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (amountRaised >= fundingGoal){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdSale
Line:        217
Source: 
>      */
>     function safeWithdrawal() public afterDeadline {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!fundingGoalReached) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdSale
Line:        233
Source: 
> 
>     function crowdfundWithdrawal() public afterDeadline onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (fundingGoalReached && beneficiary == msg.sender) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdSale
Line:        245
Source: 
>     /* in case goal is reached early */
>     function closeDeadline() public goalReached onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       deadline = now;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdSale
Line:        249
Source: 
> 
>     function getcrowdsaleClosed() public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return crowdsaleClosed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CrowdSale
Line:        253
Source: 
> 
>     function getfundingGoalReached() public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return fundingGoalReached;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    CrowdsaleToken
Line:        7
Source: 
> 
> contract CrowdsaleToken {
> ^^^^^^^^^^^^^^^^^^^^^^^^^
>     /* Public variables of the token */

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CrowdsaleToken
Line:        56
Source: 
>     /// @param _value the amount to send
>     function transfer(address payable _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CrowdsaleToken
Line:        67
Source: 
> 
>     function getBalance(address addr) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   		return balanceOf[addr];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CrowdSale
Line:        151
Source: 
>               amountRaised += msg.value;
>               tokenReward.transfer(msg.sender, amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               emit FundTransfer(msg.sender, amount, true);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CrowdSale
Line:        178
Source: 
>           amountRaised += msg.value;
>           tokenReward.transfer(msg.sender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           emit FundTransfer(msg.sender, amount, true);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    CrowdSale
Line:        223
Source: 
>             if (returnamount >= price) {
>                 if (msg.sender.send(returnamount)) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit FundTransfer(msg.sender, returnamount, false);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdsaleToken
Line:        9
Source: 
>     /* Public variables of the token */
>     string public constant name = 'Rocketclock';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = 'RCLK';

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdsaleToken
Line:        10
Source: 
>     string public constant name = 'Rocketclock';
>     string public constant symbol = 'RCLK';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //uint256 public constant decimals = 6;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdsaleToken
Line:        14
Source: 
>     address payable contractaddress;
>     uint256 public constant totalSupply = 1000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdSale
Line:        95
Source: 
>     //0.25 eth
>     uint256 public constant price = 250 finney;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public constant amount = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CrowdSale
Line:        96
Source: 
>     uint256 public constant price = 250 finney;
>     uint public constant amount = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CrowdsaleToken
Line:        12
Source: 
>     //uint256 public constant decimals = 6;
>     address payable owner;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address payable contractaddress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CrowdsaleToken
Line:        13
Source: 
>     address payable owner;
>     address payable contractaddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant totalSupply = 1000;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CrowdSale
Line:        223
Source: 
>             if (returnamount >= price) {
>                 if (msg.sender.send(returnamount)) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit FundTransfer(msg.sender, returnamount, false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CrowdSale
Line:        236
Source: 
> 
>           if (beneficiary.send(amountRaised)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               emit FundTransfer(beneficiary, amountRaised, false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CrowdSale
Line:        236
Source: 
> 
>           if (beneficiary.send(amountRaised)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               emit FundTransfer(beneficiary, amountRaised, false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CrowdSale
Line:        223
Source: 
>             if (returnamount >= price) {
>                 if (msg.sender.send(returnamount)) {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit FundTransfer(msg.sender, returnamount, false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CrowdSale
Line:        236
Source: 
> 
>           if (beneficiary.send(amountRaised)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               emit FundTransfer(beneficiary, amountRaised, false);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CrowdSale
Line:        151
Source: 
>               amountRaised += msg.value;
>               tokenReward.transfer(msg.sender, amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               emit FundTransfer(msg.sender, amount, true);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CrowdSale
Line:        178
Source: 
>           amountRaised += msg.value;
>           tokenReward.transfer(msg.sender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           emit FundTransfer(msg.sender, amount, true);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CrowdSale
Line:        89
Source: 
>     uint public fundingGoal;
>     uint public amountRaised;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public tokensSold;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CrowdSale
Line:        90
Source: 
>     uint public amountRaised;
>     uint public tokensSold;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint public deadline;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdsaleToken
Line:        48
Source: 
>         require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows
>         balanceOf[_from] -= _value;                         // Subtract from the sender
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[_to] += _value;                            // Add the same to the recipient

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdsaleToken
Line:        49
Source: 
>         balanceOf[_from] -= _value;                         // Subtract from the sender
>         balanceOf[_to] += _value;                            // Add the same to the recipient
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_from, _to, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdSale
Line:        176
Source: 
>           balanceOf[msg.sender] += msg.value;
>           tokensSold += amount;
>           ^^^^^^^^^^^^^^^^^^^^
>           amountRaised += msg.value;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdSale
Line:        177
Source: 
>           tokensSold += amount;
>           amountRaised += msg.value;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^
>           tokenReward.transfer(msg.sender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdSale
Line:        183
Source: 
>           //donation
>           amountRaised += msg.value;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdSale
Line:        202
Source: 
>         if (amountRaised >= fundingGoal){
>             fundingGoalReached = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit GoalReached(beneficiary, amountRaised);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CrowdSale
Line:        205
Source: 
>         }
>         crowdsaleClosed = true;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         return crowdsaleClosed;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CrowdSale
Line:        151
Source: 
>               amountRaised += msg.value;
>               tokenReward.transfer(msg.sender, amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               emit FundTransfer(msg.sender, amount, true);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CrowdSale
Line:        178
Source: 
>           amountRaised += msg.value;
>           tokenReward.transfer(msg.sender, amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           emit FundTransfer(msg.sender, amount, true);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CrowdsaleToken
Line:        9
Source: 
>     /* Public variables of the token */
>     string public constant name = 'Rocketclock';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = 'RCLK';

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CrowdsaleToken
Line:        10
Source: 
>     string public constant name = 'Rocketclock';
>     string public constant symbol = 'RCLK';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //uint256 public constant decimals = 6;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CrowdsaleToken
Line:        13
Source: 
>     address payable owner;
>     address payable contractaddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant totalSupply = 1000;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CrowdSale
Line:        84
Source: 
>     address payable public beneficiary;
>     address payable public crowdsaleAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //debugging

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CrowdSale
Line:        86
Source: 
>     //debugging
>     address payable public tokenAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CrowdSale
Line:        92
Source: 
>     uint public deadline;
>     uint public initiation;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     //uint public price;

[0m
