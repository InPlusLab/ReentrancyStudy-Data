Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        135
Source: 
> 	// ------------------------------------------------------------------------
> 	function setGatewayManager(address addr) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		manager = addr;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        143
Source: 
> 	// ------------------------------------------------------------------------
> 	function totalSupply() public view returns (uint) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply.sub(balances[address(0)]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        151
Source: 
> 	// ------------------------------------------------------------------------
> 	function stopTrade() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_stopTrade != true);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        160
Source: 
> 	// ------------------------------------------------------------------------
> 	function startTrade() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_stopTrade == true);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        187
Source: 
> 	function transfer(address to, uint tokens) public returns (bool success) {
> 		require(_stopTrade != true);
>            ^^^^^^^^^^^^^^^^^^^
> 		_swap(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        217
Source: 
> 	function approve(address spender, uint tokens) public returns (bool success) {
> 		require(_stopTrade != true);
>        ^^^^^^^^^^^^^^^^^^^^^^^
> 		_swap(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        235
Source: 
> 	// ------------------------------------------------------------------------
> 	function transferFrom(address from, address to, uint tokens) public returns (bool success) {
>                                                                                        ^^^^^^
> 		require(_stopTrade != true);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        266
Source: 
> 	// ------------------------------------------------------------------------
> 	function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>                                                                                        ^^^^^^^^
> 		require(_stopTrade != true);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        278
Source: 
> 	// ------------------------------------------------------------------------
> 	function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
>                                                                                        ^^^^^^^^^^^^^^^^^^
> 		require(msg.sender != spender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        299
Source: 
> 	// ------------------------------------------------------------------------
> 	function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^
> 		return ERC20Interface(tokenAddress).transfer(owner, tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        310
Source: 
> 	function swap(address swapAddr) public returns (bool success) {
> 		require(mswap[swapAddr] != true, "already swap");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_swap(swapAddr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        323
Source: 
> 	function isGatewayAddress(address gAddr) public view returns (bool isGateway) {
> 		return mgatewayAddress[gAddr];
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        342
Source: 
> 	function mint(address minter, uint256 _value) public {
> 		require(_stopTrade != true, "stop trade");
>                                ^^^^^^^^^^^^^
> 		require(msg.sender == manager, "manager only");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        356
Source: 
> 	function depositGatewayAdd(address gatewayAddr) public {
> 		require(_stopTrade != true, "stop trade");
>                              ^^^^^^^^^^^^^^^
> 		require(msg.sender == manager, "manager only");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        368
Source: 
> 	function depositGatewayRemove(address gatewayAddr) public {
> 		require(_stopTrade != true, "stop trade");
>                           ^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == manager, "manager only");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    FletaV2Token
Line:        93
Source: 
> // ----------------------------------------------------------------------------
> contract FletaV2Token is ERC20Interface, Owned {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	using SafeMath for uint;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        135
Source: 
> 	// ------------------------------------------------------------------------
> 	function setGatewayManager(address addr) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		manager = addr;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        187
Source: 
> 	function transfer(address to, uint tokens) public returns (bool success) {
> 		require(_stopTrade != true);
>            ^^^^^^^^^^^^^^^^^^^
> 		_swap(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        235
Source: 
> 	// ------------------------------------------------------------------------
> 	function transferFrom(address from, address to, uint tokens) public returns (bool success) {
>                                                                                        ^^^^^^
> 		require(_stopTrade != true);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        342
Source: 
> 	function mint(address minter, uint256 _value) public {
> 		require(_stopTrade != true, "stop trade");
>                                ^^^^^^^^^^^^^
> 		require(msg.sender == manager, "manager only");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        356
Source: 
> 	function depositGatewayAdd(address gatewayAddr) public {
> 		require(_stopTrade != true, "stop trade");
>                              ^^^^^^^^^^^^^^^
> 		require(msg.sender == manager, "manager only");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        217
Source: 
> 	function approve(address spender, uint tokens) public returns (bool success) {
> 		require(_stopTrade != true);
>        ^^^^^^^^^^^^^^^^^^^^^^^
> 		_swap(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        266
Source: 
> 	// ------------------------------------------------------------------------
> 	function allowance(address tokenOwner, address spender) public view returns (uint remaining) {
>                                                                                        ^^^^^^^^
> 		require(_stopTrade != true);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        278
Source: 
> 	// ------------------------------------------------------------------------
> 	function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {
>                                                                                        ^^^^^^^^^^^^^^^^^^
> 		require(msg.sender != spender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        299
Source: 
> 	// ------------------------------------------------------------------------
> 	function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^
> 		return ERC20Interface(tokenAddress).transfer(owner, tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        323
Source: 
> 	function isGatewayAddress(address gAddr) public view returns (bool isGateway) {
> 		return mgatewayAddress[gAddr];
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        368
Source: 
> 	function depositGatewayRemove(address gatewayAddr) public {
> 		require(_stopTrade != true, "stop trade");
>                           ^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == manager, "manager only");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FletaV2Token
Line:        318
Source: 
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);
> 			balances[swapAddr] = balances[swapAddr].add(_value);
>                                        ^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FletaV2Token
Line:        318
Source: 
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);
> 			balances[swapAddr] = balances[swapAddr].add(_value);
>                          ^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        99
Source: 
> 	uint8 public decimals;
> 	uint _totalSupply;
>  ^^^^^^^^^^^^^^^^^
> 	bool _stopTrade;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        100
Source: 
> 	uint _totalSupply;
> 	bool _stopTrade;
>  ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        102
Source: 
> 
> 	mapping(address => uint) balances;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => mapping(address => uint)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        103
Source: 
> 	mapping(address => uint) balances;
> 	mapping(address => mapping(address => uint)) allowed;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        109
Source: 
> 	address public v1Address;
> 	mapping(address => bool) mswap;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => bool) mgatewayAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        110
Source: 
> 	mapping(address => bool) mswap;
> 	mapping(address => bool) mgatewayAddress;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FletaV2Token
Line:        127
Source: 
> 
> 		_totalSupply = ERC20Interface(v1Addr).totalSupply();
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		v1Address = v1Addr;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FletaV2Token
Line:        179
Source: 
> 
> 	// ------------------------------------------------------------------------
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Transfer the balance from token owner's account to `to` account

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FletaV2Token
Line:        318
Source: 
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);
> 			balances[swapAddr] = balances[swapAddr].add(_value);
>                                        ^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FletaV2Token
Line:        283
Source: 
> 		emit Approval(msg.sender, spender, tokens);
> 		ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>                                                                                         ^^^
> 		return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FletaV2Token
Line:        303
Source: 
> 
> // ------------------------------------------------------------------------
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> // Below functions added to v2 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FletaV2Token
Line:        99
Source: 
> 	uint8 public decimals;
> 	uint _totalSupply;
>  ^^^^^^^^^^^^^^^^^
> 	bool _stopTrade;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FletaV2Token
Line:        108
Source: 
> 
> 	address public v1Address;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => bool) mswap;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FletaV2Token
Line:        199
Source: 
> 			emit Transfer(to, address(0), tokens);
> 		} else {
>    ^^^^^^^
> 			balances[to] = balances[to].add(tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FletaV2Token
Line:        202
Source: 
> 			emit Transfer(msg.sender, to, tokens);
> 		}
>    
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FletaV2Token
Line:        222
Source: 
> 		emit Approval(msg.sender, spender, tokens);
> 		return true;
>  ^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FletaV2Token
Line:        243
Source: 
> 		if(from != to && from != msg.sender) {
> 			allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FletaV2Token
Line:        317
Source: 
> 			mswap[swapAddr] = true;
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);
>                                                               ^
> 			balances[swapAddr] = balances[swapAddr].add(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FletaV2Token
Line:        322
Source: 
> 
> 	function isGatewayAddress(address gAddr) public view returns (bool isGateway) {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return mgatewayAddress[gAddr];

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Owned
Line:        76
Source: 
> contract Owned {
> 	address public owner;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FletaV2Token
Line:        96
Source: 
> 
> 	string public symbol;
>  ^^^^^^^^^^^^^^^^^^^^
> 	string public name;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FletaV2Token
Line:        97
Source: 
> 	string public symbol;
> 	string public name;
>  ^^^^^^^^^^^^^^^^^^
> 	uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FletaV2Token
Line:        98
Source: 
> 	string public name;
> 	uint8 public decimals;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	uint _totalSupply;

[0m
