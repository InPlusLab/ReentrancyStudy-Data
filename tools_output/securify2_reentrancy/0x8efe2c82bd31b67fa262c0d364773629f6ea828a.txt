Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DssExec
Line:        293
Source: 
>         address _action = _spellAction;  // Required for assembly access
>         assembly { _tag := extcodehash(_action) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tag = _tag;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DssSpell
Line:        634
Source: 
> contract DssSpell is DssExec {
>     DssSpellAction internal action_ = new DssSpellAction();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DssExec
Line:        299
Source: 
>         require(now <= expiration, "This contract has expired");
>         require(eta == 0, "This spell has already been scheduled");
>                 ^^^^^^^^
>         eta = now + PauseAbstract(pause).delay();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExec
Line:        297
Source: 
> 
>     function schedule() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now <= expiration, "This contract has expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExec
Line:        304
Source: 
> 
>     function cast() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!done, "spell-already-cast");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        128
Source: 
>     address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;
>     function vat()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function cat()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        129
Source: 
>     function vat()        public view returns (address) {}
>     function cat()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function pot()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        130
Source: 
>     function cat()        public view returns (address) {}
>     function pot()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function vow()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        131
Source: 
>     function pot()        public view returns (address) {}
>     function vow()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function end()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        132
Source: 
>     function vow()        public view returns (address) {}
>     function end()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function reg()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        133
Source: 
>     function end()        public view returns (address) {}
>     function reg()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function spotter()    public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        134
Source: 
>     function reg()        public view returns (address) {}
>     function spotter()    public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function flipperMom() public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        135
Source: 
>     function spotter()    public view returns (address) {}
>     function flipperMom() public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function flip(bytes32) public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        136
Source: 
>     function flipperMom() public view returns (address) {}
>     function flip(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function osmMom() public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        137
Source: 
>     function flip(bytes32) public view returns (address) {}
>     function osmMom() public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getChangelogAddress(bytes32) public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        138
Source: 
>     function osmMom() public view returns (address) {}
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogAddress(bytes32, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        139
Source: 
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     function setChangelogAddress(bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogVersion(string memory) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        140
Source: 
>     function setChangelogAddress(bytes32, address) public {}
>     function setChangelogVersion(string memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function authorize(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        141
Source: 
>     function setChangelogVersion(string memory) public {}
>     function authorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deauthorize(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        142
Source: 
>     function authorize(address, address) public {}
>     function deauthorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function canCast(uint40, bool) public pure returns (bool) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        143
Source: 
>     function deauthorize(address, address) public {}
>     function canCast(uint40, bool) public pure returns (bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        144
Source: 
>     function canCast(uint40, bool) public pure returns (bool) {}
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        145
Source: 
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     function setContract(address, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, bytes32, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        146
Source: 
>     function setContract(address, bytes32, address) public {}
>     function setContract(address, bytes32, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        147
Source: 
>     function setContract(address, bytes32, bytes32, address) public {}
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkLiquidationRatio(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        148
Source: 
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        149
Source: 
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        150
Source: 
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        151
Source: 
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeIlkFromAutoLine(bytes32) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        152
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function removeIlkFromAutoLine(bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addWritersToMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        153
Source: 
>     function removeIlkFromAutoLine(bytes32) public {}
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        154
Source: 
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        155
Source: 
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToOSMWhitelist(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        156
Source: 
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     function addReaderToOSMWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        157
Source: 
>     function addReaderToOSMWhitelist(address, address) public {}
>     function addReaderToMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeReaderFromMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        158
Source: 
>     function addReaderToMedianWhitelist(address, address) public {}
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        159
Source: 
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function allowOSMFreeze(address, bytes32) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        160
Source: 
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     function allowOSMFreeze(address, bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        129
Source: 
>     function vat()        public view returns (address) {}
>     function cat()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function pot()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        130
Source: 
>     function cat()        public view returns (address) {}
>     function pot()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function vow()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        131
Source: 
>     function pot()        public view returns (address) {}
>     function vow()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function end()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        133
Source: 
>     function end()        public view returns (address) {}
>     function reg()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function spotter()    public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        135
Source: 
>     function spotter()    public view returns (address) {}
>     function flipperMom() public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function flip(bytes32) public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        136
Source: 
>     function flipperMom() public view returns (address) {}
>     function flip(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function osmMom() public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        142
Source: 
>     function authorize(address, address) public {}
>     function deauthorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function canCast(uint40, bool) public pure returns (bool) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        145
Source: 
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     function setContract(address, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, bytes32, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        148
Source: 
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        150
Source: 
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        151
Source: 
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeIlkFromAutoLine(bytes32) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        153
Source: 
>     function removeIlkFromAutoLine(bytes32) public {}
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        154
Source: 
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        155
Source: 
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToOSMWhitelist(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        159
Source: 
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function allowOSMFreeze(address, bytes32) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExec
Line:        297
Source: 
> 
>     function schedule() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now <= expiration, "This contract has expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExec
Line:        304
Source: 
> 
>     function cast() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!done, "spell-already-cast");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        128
Source: 
>     address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;
>     function vat()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function cat()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        129
Source: 
>     function vat()        public view returns (address) {}
>     function cat()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function pot()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        130
Source: 
>     function cat()        public view returns (address) {}
>     function pot()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function vow()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        131
Source: 
>     function pot()        public view returns (address) {}
>     function vow()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function end()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        132
Source: 
>     function vow()        public view returns (address) {}
>     function end()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function reg()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        133
Source: 
>     function end()        public view returns (address) {}
>     function reg()        public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function spotter()    public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        134
Source: 
>     function reg()        public view returns (address) {}
>     function spotter()    public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function flipperMom() public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        135
Source: 
>     function spotter()    public view returns (address) {}
>     function flipperMom() public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function flip(bytes32) public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        136
Source: 
>     function flipperMom() public view returns (address) {}
>     function flip(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function osmMom() public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        137
Source: 
>     function flip(bytes32) public view returns (address) {}
>     function osmMom() public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getChangelogAddress(bytes32) public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        138
Source: 
>     function osmMom() public view returns (address) {}
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogAddress(bytes32, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        139
Source: 
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     function setChangelogAddress(bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogVersion(string memory) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        140
Source: 
>     function setChangelogAddress(bytes32, address) public {}
>     function setChangelogVersion(string memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function authorize(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        141
Source: 
>     function setChangelogVersion(string memory) public {}
>     function authorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deauthorize(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        142
Source: 
>     function authorize(address, address) public {}
>     function deauthorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function canCast(uint40, bool) public pure returns (bool) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        143
Source: 
>     function deauthorize(address, address) public {}
>     function canCast(uint40, bool) public pure returns (bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        144
Source: 
>     function canCast(uint40, bool) public pure returns (bool) {}
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        145
Source: 
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     function setContract(address, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, bytes32, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        146
Source: 
>     function setContract(address, bytes32, address) public {}
>     function setContract(address, bytes32, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        147
Source: 
>     function setContract(address, bytes32, bytes32, address) public {}
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkLiquidationRatio(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        148
Source: 
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        149
Source: 
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        150
Source: 
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        151
Source: 
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeIlkFromAutoLine(bytes32) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        152
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function removeIlkFromAutoLine(bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addWritersToMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        153
Source: 
>     function removeIlkFromAutoLine(bytes32) public {}
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        154
Source: 
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        155
Source: 
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToOSMWhitelist(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        156
Source: 
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     function addReaderToOSMWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        157
Source: 
>     function addReaderToOSMWhitelist(address, address) public {}
>     function addReaderToMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeReaderFromMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        158
Source: 
>     function addReaderToMedianWhitelist(address, address) public {}
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        159
Source: 
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function allowOSMFreeze(address, bytes32) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssExecLib
Line:        160
Source: 
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     function allowOSMFreeze(address, bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        136
Source: 
>     function flipperMom() public view returns (address) {}
>     function flip(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function osmMom() public view returns (address) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        138
Source: 
>     function osmMom() public view returns (address) {}
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogAddress(bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        139
Source: 
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     function setChangelogAddress(bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogVersion(string memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        140
Source: 
>     function setChangelogAddress(bytes32, address) public {}
>     function setChangelogVersion(string memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function authorize(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        141
Source: 
>     function setChangelogVersion(string memory) public {}
>     function authorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deauthorize(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        142
Source: 
>     function authorize(address, address) public {}
>     function deauthorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function canCast(uint40, bool) public pure returns (bool) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        143
Source: 
>     function deauthorize(address, address) public {}
>     function canCast(uint40, bool) public pure returns (bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        144
Source: 
>     function canCast(uint40, bool) public pure returns (bool) {}
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        145
Source: 
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     function setContract(address, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        146
Source: 
>     function setContract(address, bytes32, address) public {}
>     function setContract(address, bytes32, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        147
Source: 
>     function setContract(address, bytes32, bytes32, address) public {}
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkLiquidationRatio(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        148
Source: 
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        149
Source: 
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        150
Source: 
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        151
Source: 
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeIlkFromAutoLine(bytes32) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        152
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function removeIlkFromAutoLine(bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addWritersToMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        153
Source: 
>     function removeIlkFromAutoLine(bytes32) public {}
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        154
Source: 
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        155
Source: 
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToOSMWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        156
Source: 
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     function addReaderToOSMWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        157
Source: 
>     function addReaderToOSMWhitelist(address, address) public {}
>     function addReaderToMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeReaderFromMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        158
Source: 
>     function addReaderToMedianWhitelist(address, address) public {}
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        159
Source: 
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function allowOSMFreeze(address, bytes32) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        160
Source: 
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     function allowOSMFreeze(address, bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        136
Source: 
>     function flipperMom() public view returns (address) {}
>     function flip(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function osmMom() public view returns (address) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        138
Source: 
>     function osmMom() public view returns (address) {}
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogAddress(bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        139
Source: 
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     function setChangelogAddress(bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogVersion(string memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        140
Source: 
>     function setChangelogAddress(bytes32, address) public {}
>     function setChangelogVersion(string memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function authorize(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        141
Source: 
>     function setChangelogVersion(string memory) public {}
>     function authorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deauthorize(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        142
Source: 
>     function authorize(address, address) public {}
>     function deauthorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function canCast(uint40, bool) public pure returns (bool) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        143
Source: 
>     function deauthorize(address, address) public {}
>     function canCast(uint40, bool) public pure returns (bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        144
Source: 
>     function canCast(uint40, bool) public pure returns (bool) {}
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        145
Source: 
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     function setContract(address, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        146
Source: 
>     function setContract(address, bytes32, address) public {}
>     function setContract(address, bytes32, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        147
Source: 
>     function setContract(address, bytes32, bytes32, address) public {}
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkLiquidationRatio(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        148
Source: 
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        149
Source: 
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        150
Source: 
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        151
Source: 
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeIlkFromAutoLine(bytes32) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        152
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function removeIlkFromAutoLine(bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addWritersToMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        153
Source: 
>     function removeIlkFromAutoLine(bytes32) public {}
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        154
Source: 
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        155
Source: 
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToOSMWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        156
Source: 
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     function addReaderToOSMWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        157
Source: 
>     function addReaderToOSMWhitelist(address, address) public {}
>     function addReaderToMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeReaderFromMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        158
Source: 
>     function addReaderToMedianWhitelist(address, address) public {}
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        159
Source: 
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function allowOSMFreeze(address, bytes32) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        160
Source: 
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     function allowOSMFreeze(address, bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        136
Source: 
>     function flipperMom() public view returns (address) {}
>     function flip(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function osmMom() public view returns (address) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        138
Source: 
>     function osmMom() public view returns (address) {}
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogAddress(bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        139
Source: 
>     function getChangelogAddress(bytes32) public view returns (address) {}
>     function setChangelogAddress(bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setChangelogVersion(string memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        140
Source: 
>     function setChangelogAddress(bytes32, address) public {}
>     function setChangelogVersion(string memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function authorize(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        141
Source: 
>     function setChangelogVersion(string memory) public {}
>     function authorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deauthorize(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        142
Source: 
>     function authorize(address, address) public {}
>     function deauthorize(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function canCast(uint40, bool) public pure returns (bool) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        143
Source: 
>     function deauthorize(address, address) public {}
>     function canCast(uint40, bool) public pure returns (bool) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        144
Source: 
>     function canCast(uint40, bool) public pure returns (bool) {}
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        145
Source: 
>     function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}
>     function setContract(address, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setContract(address, bytes32, bytes32, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        146
Source: 
>     function setContract(address, bytes32, address) public {}
>     function setContract(address, bytes32, bytes32, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        147
Source: 
>     function setContract(address, bytes32, bytes32, address) public {}
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkLiquidationRatio(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        148
Source: 
>     function setIlkStabilityFee(bytes32, uint256, bool) public {}
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        149
Source: 
>     function setIlkLiquidationRatio(bytes32, uint256) public {}
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        150
Source: 
>     function setIlkDebtCeiling(bytes32, uint256) public {}
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        151
Source: 
>     function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeIlkFromAutoLine(bytes32) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        152
Source: 
>     function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}
>     function removeIlkFromAutoLine(bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addWritersToMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        153
Source: 
>     function removeIlkFromAutoLine(bytes32) public {}
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        154
Source: 
>     function addWritersToMedianWhitelist(address, address[] memory) public {}
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        155
Source: 
>     function removeWritersFromMedianWhitelist(address, address[] memory) public {}
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToOSMWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        156
Source: 
>     function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}
>     function addReaderToOSMWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addReaderToMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        157
Source: 
>     function addReaderToOSMWhitelist(address, address) public {}
>     function addReaderToMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function removeReaderFromMedianWhitelist(address, address) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        158
Source: 
>     function addReaderToMedianWhitelist(address, address) public {}
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        159
Source: 
>     function removeReaderFromMedianWhitelist(address, address) public {}
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function allowOSMFreeze(address, bytes32) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DssExecLib
Line:        160
Source: 
>     function sendPaymentFromSurplusBuffer(address, uint256) public {}
>     function allowOSMFreeze(address, bytes32) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        300
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        301
Source: 
>         eta = now + PauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        307
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        300
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        301
Source: 
>         eta = now + PauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssExec
Line:        307
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DssSpellAction
Line:        500
Source: 
>         // ------------------------------ Debt ceiling updates -----------------------------
>         (,,,uint256 kncLine,) = VatAbstract(MCD_VAT).ilks("KNC-A");
>             ^^^^^^^^^^^^^^^
>         DssExecLib.removeIlkFromAutoLine("KNC-A");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssVat
Line:        63
Source: 
>     function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);
>     function Line() external view returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function suck(address, address, uint) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssExec
Line:        259
Source: 
> 
>     Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256                 public eta;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssExec
Line:        291
Source: 
>         sig = abi.encodeWithSignature("execute()");
>         bytes32 _tag;                    // Required for assembly access
>         ^^^^^^^^^^^^
>         address _action = _spellAction;  // Required for assembly access

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssExec
Line:        292
Source: 
>         bytes32 _tag;                    // Required for assembly access
>         address _action = _spellAction;  // Required for assembly access
>         ^^^^^^^^^^^^^^^
>         assembly { _tag := extcodehash(_action) }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    VatAbstract
Line:        380
Source: 
>     function vice() external view returns (uint256);
>     function Line() external view returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function live() external view returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpellAction
Line:        426
Source: 
>     // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/098eabb0973a264de343457ad42e29084577c338/governance/votes/Executive%20vote%20-%20May%2014%2C%202021.md -q -O - 2> /dev/null)"
>     string public constant description =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         "2021-05-14 MakerDAO Executive Spell | Hash: 0xd33a03015df3af9e045e54f62f3a78a5843514b01a0f282698afda166fdde202";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpellAction
Line:        488
Source: 
>     function actions() public override {
>         address MCD_VAT  = DssExecLib.vat();
>         ^^^^^^^^^^^^^^^
>         address MCD_SPOT = DssExecLib.spotter();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpellAction
Line:        489
Source: 
>         address MCD_VAT  = DssExecLib.vat();
>         address MCD_SPOT = DssExecLib.spotter();
>         ^^^^^^^^^^^^^^^^
>         address MCD_END  = DssExecLib.end();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpellAction
Line:        490
Source: 
>         address MCD_SPOT = DssExecLib.spotter();
>         address MCD_END  = DssExecLib.end();
>         ^^^^^^^^^^^^^^^
>         address OSM_MOM  = DssExecLib.osmMom();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpellAction
Line:        491
Source: 
>         address MCD_END  = DssExecLib.end();
>         address OSM_MOM  = DssExecLib.osmMom();
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpellAction
Line:        500
Source: 
>         // ------------------------------ Debt ceiling updates -----------------------------
>         (,,,uint256 kncLine,) = VatAbstract(MCD_VAT).ilks("KNC-A");
>             ^^^^^^^^^^^^^^^
>         DssExecLib.removeIlkFromAutoLine("KNC-A");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpellAction
Line:        505
Source: 
>         DssExecLib.setIlkDebtCeiling("USDC-B", 0); // -30M
>         uint256 Line = VatAbstract(MCD_VAT).Line();
>         ^^^^^^^^^^^^
>         VatAbstract(MCD_VAT).file("Line", sub(Line, add(130 * MILLION * RAD, kncLine)));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> // SPDX-License-Identifier: AGPL-3.0-or-later
> pragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        429
Source: 
> 
>     address constant PIP_UNIV2DAIETH  = 0xFc8137E1a45BAF0030563EC4F0F851bd36a85b7D;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2WBTCETH = 0x8400D2EDb8B97f780356Ef602b1BdBc082c2aD07;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        430
Source: 
>     address constant PIP_UNIV2DAIETH  = 0xFc8137E1a45BAF0030563EC4F0F851bd36a85b7D;
>     address constant PIP_UNIV2WBTCETH = 0x8400D2EDb8B97f780356Ef602b1BdBc082c2aD07;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2USDCETH = 0xf751f24DD9cfAd885984D1bA68860F558D21E52A;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        431
Source: 
>     address constant PIP_UNIV2WBTCETH = 0x8400D2EDb8B97f780356Ef602b1BdBc082c2aD07;
>     address constant PIP_UNIV2USDCETH = 0xf751f24DD9cfAd885984D1bA68860F558D21E52A;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2DAIUSDC = 0x25D03C2C928ADE19ff9f4FFECc07d991d0df054B;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        432
Source: 
>     address constant PIP_UNIV2USDCETH = 0xf751f24DD9cfAd885984D1bA68860F558D21E52A;
>     address constant PIP_UNIV2DAIUSDC = 0x25D03C2C928ADE19ff9f4FFECc07d991d0df054B;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2ETHUSDT = 0x5f6dD5B421B8d92c59dC6D907C9271b1DBFE3016;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        433
Source: 
>     address constant PIP_UNIV2DAIUSDC = 0x25D03C2C928ADE19ff9f4FFECc07d991d0df054B;
>     address constant PIP_UNIV2ETHUSDT = 0x5f6dD5B421B8d92c59dC6D907C9271b1DBFE3016;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2LINKETH = 0xd7d31e62AE5bfC3bfaa24Eda33e8c32D31a1746F;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        434
Source: 
>     address constant PIP_UNIV2ETHUSDT = 0x5f6dD5B421B8d92c59dC6D907C9271b1DBFE3016;
>     address constant PIP_UNIV2LINKETH = 0xd7d31e62AE5bfC3bfaa24Eda33e8c32D31a1746F;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2UNIETH  = 0x8462A88f50122782Cc96108F476deDB12248f931;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        435
Source: 
>     address constant PIP_UNIV2LINKETH = 0xd7d31e62AE5bfC3bfaa24Eda33e8c32D31a1746F;
>     address constant PIP_UNIV2UNIETH  = 0x8462A88f50122782Cc96108F476deDB12248f931;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2WBTCDAI = 0x5bB72127a196392cf4aC00Cf57aB278394d24e55;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        436
Source: 
>     address constant PIP_UNIV2UNIETH  = 0x8462A88f50122782Cc96108F476deDB12248f931;
>     address constant PIP_UNIV2WBTCDAI = 0x5bB72127a196392cf4aC00Cf57aB278394d24e55;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2AAVEETH = 0x32d8416e8538Ac36272c44b0cd962cD7E0198489;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        437
Source: 
>     address constant PIP_UNIV2WBTCDAI = 0x5bB72127a196392cf4aC00Cf57aB278394d24e55;
>     address constant PIP_UNIV2AAVEETH = 0x32d8416e8538Ac36272c44b0cd962cD7E0198489;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant PIP_UNIV2DAIUSDT = 0x9A1CD705dc7ac64B50777BcEcA3529E58B1292F1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        438
Source: 
>     address constant PIP_UNIV2AAVEETH = 0x32d8416e8538Ac36272c44b0cd962cD7E0198489;
>     address constant PIP_UNIV2DAIUSDT = 0x9A1CD705dc7ac64B50777BcEcA3529E58B1292F1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        440
Source: 
> 
>     uint256 constant ONE_PCT   = 1000000000315522921573372069;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant THREE_PCT = 1000000000937303470807876289;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        441
Source: 
>     uint256 constant ONE_PCT   = 1000000000315522921573372069;
>     uint256 constant THREE_PCT = 1000000000937303470807876289;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant FIVE_PCT  = 1000000001547125957863212448;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        442
Source: 
>     uint256 constant THREE_PCT = 1000000000937303470807876289;
>     uint256 constant FIVE_PCT  = 1000000001547125957863212448;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        444
Source: 
> 
>     uint256 constant MILLION = 10 ** 6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAD     = 10 ** 45;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpellAction
Line:        445
Source: 
>     uint256 constant MILLION = 10 ** 6;
>     uint256 constant RAD     = 10 ** 45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DssSpellAction
Line:        440
Source: 
> 
>     uint256 constant ONE_PCT   = 1000000000315522921573372069;
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant THREE_PCT = 1000000000937303470807876289;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DssSpellAction
Line:        441
Source: 
>     uint256 constant ONE_PCT   = 1000000000315522921573372069;
>     uint256 constant THREE_PCT = 1000000000937303470807876289;
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant FIVE_PCT  = 1000000001547125957863212448;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DssSpellAction
Line:        442
Source: 
>     uint256 constant THREE_PCT = 1000000000937303470807876289;
>     uint256 constant FIVE_PCT  = 1000000001547125957863212448;
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssExec
Line:        300
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        500
Source: 
>         // ------------------------------ Debt ceiling updates -----------------------------
>         (,,,uint256 kncLine,) = VatAbstract(MCD_VAT).ilks("KNC-A");
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DssExecLib.removeIlkFromAutoLine("KNC-A");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        505
Source: 
>         DssExecLib.setIlkDebtCeiling("USDC-B", 0); // -30M
>         uint256 Line = VatAbstract(MCD_VAT).Line();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         VatAbstract(MCD_VAT).file("Line", sub(Line, add(130 * MILLION * RAD, kncLine)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        458
Source: 
>         address oldOracle = DssExecLib.getChangelogAddress(pipKey);
>         address orb0 = LPOsmAbstract(newOracle).orb0();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address orb1 = LPOsmAbstract(newOracle).orb1();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        459
Source: 
>         address orb0 = LPOsmAbstract(newOracle).orb0();
>         address orb1 = LPOsmAbstract(newOracle).orb1();
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(LPOsmAbstract(newOracle).wat() == LPOsmAbstract(oldOracle).wat(), "DssSpell/not-matching-wat");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        460
Source: 
>         address orb1 = LPOsmAbstract(newOracle).orb1();
>         require(LPOsmAbstract(newOracle).wat() == LPOsmAbstract(oldOracle).wat(), "DssSpell/not-matching-wat");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(LPOsmAbstract(newOracle).src() == LPOsmAbstract(oldOracle).src(), "DssSpell/not-matching-src");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        460
Source: 
>         address orb1 = LPOsmAbstract(newOracle).orb1();
>         require(LPOsmAbstract(newOracle).wat() == LPOsmAbstract(oldOracle).wat(), "DssSpell/not-matching-wat");
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(LPOsmAbstract(newOracle).src() == LPOsmAbstract(oldOracle).src(), "DssSpell/not-matching-src");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        461
Source: 
>         require(LPOsmAbstract(newOracle).wat() == LPOsmAbstract(oldOracle).wat(), "DssSpell/not-matching-wat");
>         require(LPOsmAbstract(newOracle).src() == LPOsmAbstract(oldOracle).src(), "DssSpell/not-matching-src");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orb0 == LPOsmAbstract(oldOracle).orb0(), "DssSpell/not-matching-orb0");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        461
Source: 
>         require(LPOsmAbstract(newOracle).wat() == LPOsmAbstract(oldOracle).wat(), "DssSpell/not-matching-wat");
>         require(LPOsmAbstract(newOracle).src() == LPOsmAbstract(oldOracle).src(), "DssSpell/not-matching-src");
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orb0 == LPOsmAbstract(oldOracle).orb0(), "DssSpell/not-matching-orb0");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        462
Source: 
>         require(LPOsmAbstract(newOracle).src() == LPOsmAbstract(oldOracle).src(), "DssSpell/not-matching-src");
>         require(orb0 == LPOsmAbstract(oldOracle).orb0(), "DssSpell/not-matching-orb0");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(orb1 == LPOsmAbstract(oldOracle).orb1(), "DssSpell/not-matching-orb1");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpellAction
Line:        463
Source: 
>         require(orb0 == LPOsmAbstract(oldOracle).orb0(), "DssSpell/not-matching-orb0");
>         require(orb1 == LPOsmAbstract(oldOracle).orb1(), "DssSpell/not-matching-orb1");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DssExecLib.setContract(spotter, ilk, "pip", newOracle);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssExec
Line:        300
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        274
Source: 
>     function officeHours() external view returns (bool) {
>         return SpellAction(action).officeHours();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        278
Source: 
>     function nextCastTime() external view returns (uint256 castTime) {
>         return SpellAction(action).nextCastTime(eta);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        285
Source: 
>     constructor(string memory _description, uint256 _expiration, address _spellAction) public {
>         pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         description = _description;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        301
Source: 
>         eta = now + PauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        307
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpellAction
Line:        506
Source: 
>         uint256 Line = VatAbstract(MCD_VAT).Line();
>         VatAbstract(MCD_VAT).file("Line", sub(Line, add(130 * MILLION * RAD, kncLine)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        274
Source: 
>     function officeHours() external view returns (bool) {
>         return SpellAction(action).officeHours();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        278
Source: 
>     function nextCastTime() external view returns (uint256 castTime) {
>         return SpellAction(action).nextCastTime(eta);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        285
Source: 
>     constructor(string memory _description, uint256 _expiration, address _spellAction) public {
>         pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         description = _description;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        301
Source: 
>         eta = now + PauseAbstract(pause).delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssExec
Line:        307
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        635
Source: 
>     DssSpellAction internal action_ = new DssSpellAction();
>     constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}
>                           ^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DssExec
Line:        294
Source: 
>         assembly { _tag := extcodehash(_action) }
>         tag = _tag;
>               ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DssSpellAction
Line:        481
Source: 
>     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DssSpellAction
Line:        484
Source: 
>     function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        260
Source: 
>     Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
>     uint256                 public eta;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes                   public sig;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        261
Source: 
>     uint256                 public eta;
>     bytes                   public sig;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool                    public done;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        262
Source: 
>     bytes                   public sig;
>     bool                    public done;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32       immutable public tag;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        263
Source: 
>     bool                    public done;
>     bytes32       immutable public tag;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address       immutable public action;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        264
Source: 
>     bytes32       immutable public tag;
>     address       immutable public action;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256       immutable public expiration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        265
Source: 
>     address       immutable public action;
>     uint256       immutable public expiration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     PauseAbstract immutable public pause;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        266
Source: 
>     uint256       immutable public expiration;
>     PauseAbstract immutable public pause;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        271
Source: 
>     // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"
>     string                  public description;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        260
Source: 
>     Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);
>     uint256                 public eta;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes                   public sig;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        261
Source: 
>     uint256                 public eta;
>     bytes                   public sig;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool                    public done;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        262
Source: 
>     bytes                   public sig;
>     bool                    public done;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32       immutable public tag;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        263
Source: 
>     bool                    public done;
>     bytes32       immutable public tag;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address       immutable public action;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        264
Source: 
>     bytes32       immutable public tag;
>     address       immutable public action;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256       immutable public expiration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        265
Source: 
>     address       immutable public action;
>     uint256       immutable public expiration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     PauseAbstract immutable public pause;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        266
Source: 
>     uint256       immutable public expiration;
>     PauseAbstract immutable public pause;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssExec
Line:        271
Source: 
>     // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"
>     string                  public description;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    DssExecLib
Line:        127
Source: 
> library DssExecLib {
>     address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function vat()        public view returns (address) {}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssExec
Line:        300
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssExec
Line:        306
Source: 
>         require(!done, "spell-already-cast");
>         done = true;
>         ^^^^^^^^^^^
>         pause.exec(action, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssExec
Line:        300
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         eta = now + PauseAbstract(pause).delay();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssExec
Line:        306
Source: 
>         require(!done, "spell-already-cast");
>         done = true;
>         ^^^^^^^^^^^
>         pause.exec(action, tag, sig, eta);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DssExec
Line:        307
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExec
Line:        271
Source: 
>     // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"
>     string                  public description;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        127
Source: 
> library DssExecLib {
>     address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function vat()        public view returns (address) {}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssSpellAction
Line:        426
Source: 
>     // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/098eabb0973a264de343457ad42e29084577c338/governance/votes/Executive%20vote%20-%20May%2014%2C%202021.md -q -O - 2> /dev/null)"
>     string public constant description =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         "2021-05-14 MakerDAO Executive Spell | Hash: 0xd33a03015df3af9e045e54f62f3a78a5843514b01a0f282698afda166fdde202";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        127
Source: 
> library DssExecLib {
>     address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function vat()        public view returns (address) {}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExec
Line:        271
Source: 
>     // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"
>     string                  public description;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssExecLib
Line:        127
Source: 
> library DssExecLib {
>     address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function vat()        public view returns (address) {}

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    DssSpell
Line:        635
Source: 
>     DssSpellAction internal action_ = new DssSpellAction();
>     constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}
>                                                  ^^^^^^^^^^^^^^^
> }

[0m
