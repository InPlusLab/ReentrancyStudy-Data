Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.10. Changing pragma version to 0.6.10....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        324
Source: 
>         uint256 cs;
>         assembly {
>         ^^^^^^^^^^
>             cs := extcodesize(self)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Initializable
Line:        331
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrueFarm
Line:        442
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         IERC20 _stakingToken,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueFarm
Line:        458
Source: 
>      */
>     function stake(uint256 amount) external override update {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         staked[msg.sender] = staked[msg.sender].add(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueFarm
Line:        492
Source: 
>      */
>     function unstake(uint256 amount) external override update {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _unstake(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueFarm
Line:        507
Source: 
>      */
>     function exit(uint256 amount) external override update {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _unstake(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueFarm
Line:        516
Source: 
>      */
>     function claimable(address account) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // estimate pending reward from distributor

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueFarm
Line:        442
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         IERC20 _stakingToken,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueFarm
Line:        449
Source: 
>         trueDistributor = _trueDistributor;
>         trustToken = _trueDistributor.trustToken();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         name = _name;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueFarm
Line:        451
Source: 
>         name = _name;
>         require(trueDistributor.farm() == address(this), "distributor farm not set");
>                 ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueFarm
Line:        538
Source: 
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>             trueDistributor.distribute();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueFarm
Line:        541
Source: 
>         // calculate total rewards
>         uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(totalClaimedRewards).mul(PRECISION);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // calculate block reward

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueFarm
Line:        461
Source: 
>         totalStaked = totalStaked.add(amount);
>         require(stakingToken.transferFrom(msg.sender, address(this), amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Stake(msg.sender, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Initializable
Line:        331
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        302
Source: 
> 
>         bool isTopLevelCall = !initializing;
>         ^^^^^^^^^^^^^^^^^^^
>         if (isTopLevelCall) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueFarm
Line:        383
Source: 
>     using SafeMath for uint256;
>     uint256 constant PRECISION = 1e30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueFarm
Line:        541
Source: 
>         // calculate total rewards
>         uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(totalClaimedRewards).mul(PRECISION);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // calculate block reward

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueFarm
Line:        543
Source: 
>         // calculate block reward
>         uint256 totalBlockReward = newTotalFarmRewards.sub(totalFarmRewards);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         // update farm rewards

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        451
Source: 
>         name = _name;
>         require(trueDistributor.farm() == address(this), "distributor farm not set");
>                 ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        541
Source: 
>         // calculate total rewards
>         uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(totalClaimedRewards).mul(PRECISION);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // calculate block reward

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        461
Source: 
>         totalStaked = totalStaked.add(amount);
>         require(stakingToken.transferFrom(msg.sender, address(this), amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Stake(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        473
Source: 
>         totalStaked = totalStaked.sub(amount);
>         require(stakingToken.transfer(msg.sender, amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Unstake(msg.sender, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        484
Source: 
>         claimableReward[msg.sender] = 0;
>         require(trustToken.transfer(msg.sender, rewardToClaim));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Claim(msg.sender, rewardToClaim);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        541
Source: 
>         // calculate total rewards
>         uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(totalClaimedRewards).mul(PRECISION);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // calculate block reward

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        541
Source: 
>         // calculate total rewards
>         uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(totalClaimedRewards).mul(PRECISION);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // calculate block reward

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        537
Source: 
>         // only pull if there is distribution and distributor farm is set to this farm
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>                                                       ^^^^^^^^^^^^^^^^^^^^^^
>             trueDistributor.distribute();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        541
Source: 
>         // calculate total rewards
>         uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(totalClaimedRewards).mul(PRECISION);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // calculate block reward

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        518
Source: 
>         // estimate pending reward from distributor
>         uint256 pending = trueDistributor.nextDistribution();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // calculate total rewards (including pending)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueFarm
Line:        520
Source: 
>         // calculate total rewards (including pending)
>         uint256 newTotalFarmRewards = trustToken.balanceOf(address(this)).add(pending).add(totalClaimedRewards).mul(PRECISION);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // calculate block reward

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueFarm
Line:        449
Source: 
>         trueDistributor = _trueDistributor;
>         trustToken = _trueDistributor.trustToken();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         name = _name;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueFarm
Line:        538
Source: 
>         if (trueDistributor.nextDistribution() > 0 && trueDistributor.farm() == address(this)) {
>             trueDistributor.distribute();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        327
Source: 
>         }
>         return cs == 0;
>                ^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        289
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        294
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueFarm
Line:        391
Source: 
> 
>     IERC20 public override stakingToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20 public override trustToken;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueFarm
Line:        392
Source: 
>     IERC20 public override stakingToken;
>     IERC20 public override trustToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ITrueDistributor public override trueDistributor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueFarm
Line:        393
Source: 
>     IERC20 public override trustToken;
>     ITrueDistributor public override trueDistributor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public override name;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueFarm
Line:        394
Source: 
>     ITrueDistributor public override trueDistributor;
>     string public override name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueFarm
Line:        397
Source: 
>     // track stakes
>     uint256 public override totalStaked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public staked;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueFarm
Line:        408
Source: 
>     // track total rewards
>     uint256 public totalClaimedRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalFarmRewards;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        289
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        294
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        331
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TrueFarm
Line:        401
Source: 
>     // track overall cumulative rewards
>     uint256 public cumulativeRewardPerToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // track previous cumulate rewards for accounts

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TrueFarm
Line:        409
Source: 
>     uint256 public totalClaimedRewards;
>     uint256 public totalFarmRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TrueFarm
Line:        545
Source: 
>         // update farm rewards
>         totalFarmRewards = newTotalFarmRewards;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // if there are stakers

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        304
Source: 
>         if (isTopLevelCall) {
>             initializing = true;
>             ^^^^^^^^^^^^^^^^^^^
>             initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        305
Source: 
>             initializing = true;
>             initialized = true;
>             ^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueFarm
Line:        447
Source: 
>     ) public initializer {
>         stakingToken = _stakingToken;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trueDistributor = _trueDistributor;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueFarm
Line:        448
Source: 
>         stakingToken = _stakingToken;
>         trueDistributor = _trueDistributor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trustToken = _trueDistributor.trustToken();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueFarm
Line:        449
Source: 
>         trueDistributor = _trueDistributor;
>         trustToken = _trueDistributor.trustToken();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         name = _name;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueFarm
Line:        450
Source: 
>         trustToken = _trueDistributor.trustToken();
>         name = _name;
>         ^^^^^^^^^^^^
>         require(trueDistributor.farm() == address(this), "distributor farm not set");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        311
Source: 
>         if (isTopLevelCall) {
>             initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueFarm
Line:        548
Source: 
>         if (totalStaked > 0) {
>             cumulativeRewardPerToken = cumulativeRewardPerToken.add(totalBlockReward.div(totalStaked));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueFarm
Line:        460
Source: 
>         staked[msg.sender] = staked[msg.sender].add(amount);
>         totalStaked = totalStaked.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakingToken.transferFrom(msg.sender, address(this), amount));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueFarm
Line:        481
Source: 
>     function _claim() internal {
>         totalClaimedRewards = totalClaimedRewards.add(claimableReward[msg.sender]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rewardToClaim = claimableReward[msg.sender];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueFarm
Line:        548
Source: 
>         if (totalStaked > 0) {
>             cumulativeRewardPerToken = cumulativeRewardPerToken.add(totalBlockReward.div(totalStaked));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        289
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        294
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        331
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TrueFarm
Line:        394
Source: 
>     ITrueDistributor public override trueDistributor;
>     string public override name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
