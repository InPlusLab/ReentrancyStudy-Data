Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AtomicSwap
Line:        299
Source: 
>     uint256 public minimumAmount = 100 ether;
>     uint256 priceMultiplicator = 1000000; // 6 decimals price
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        140
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        140
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        166
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AtomicSwap
Line:        313
Source: 
> 
>     function setMinimumPrices(uint256 _buyPrice, uint256 _sellPrice, uint256 _tradePrice) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimumBuyPrice = _buyPrice;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AtomicSwap
Line:        318
Source: 
>     }
>     function setMinimumAmount(uint256 _amount) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimumAmount = _amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AtomicSwap
Line:        322
Source: 
> 
>     function forceCloseSwap(uint256 _swapId) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Swap memory swap = swaps[_swapId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AtomicSwap
Line:        334
Source: 
> 
>     function openSwap(uint256 _price, uint256 _amount, Direction _direction) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > minimumAmount, "Amount is too low");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AtomicSwap
Line:        359
Source: 
> 
>     function closeSwap(uint256 _swapId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Swap memory swap = swaps[_swapId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AtomicSwap
Line:        375
Source: 
> 
>     function tradeSwap(uint256 _swapId, uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount > minimumAmount, "Amount is too low");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AtomicSwap
Line:        399
Source: 
> 
>     function getSwap(uint256 _swapId) public view returns (uint256 price, uint256 amount, uint256 remainingAmount, Direction direction, address openTrader, SwapState swapState) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Swap memory swap = swaps[_swapId];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        175
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AtomicSwap
Line:        313
Source: 
> 
>     function setMinimumPrices(uint256 _buyPrice, uint256 _sellPrice, uint256 _tradePrice) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimumBuyPrice = _buyPrice;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AtomicSwap
Line:        318
Source: 
>     }
>     function setMinimumAmount(uint256 _amount) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimumAmount = _amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AtomicSwap
Line:        399
Source: 
> 
>     function getSwap(uint256 _swapId) public view returns (uint256 price, uint256 amount, uint256 remainingAmount, Direction direction, address openTrader, SwapState swapState) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Swap memory swap = swaps[_swapId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        70
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        327
Source: 
>         if (swap.direction == Direction.Buy) {
>             require(awgContract.transfer(swap.openTrader,(swap.remainingAmount).mul(swap.price).div(priceMultiplicator)), "Cannot transfer AWG");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        329
Source: 
>         } else {
>             require(awxContract.transfer(swap.openTrader,swap.remainingAmount), "Cannot transfer AWX");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        338
Source: 
>             require((_price > minimumBuyPrice || isOwner()), "Price is too low");
>             require(_amount.mul(_price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)), "Cannot transfer AWG");
>                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awgContract.transferFrom(msg.sender, address(this), _amount.mul(_price).div(priceMultiplicator)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        339
Source: 
>             require(_amount.mul(_price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)), "Cannot transfer AWG");
>             require(awgContract.transferFrom(msg.sender, address(this), _amount.mul(_price).div(priceMultiplicator)));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        342
Source: 
>             require((_price > minimumSellPrice || isOwner()), "Price is too low");
>             require(_amount <= awxContract.allowance(msg.sender, address(this)), "Cannot transfer AWX");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awxContract.transferFrom(msg.sender, address(this), _amount));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        343
Source: 
>             require(_amount <= awxContract.allowance(msg.sender, address(this)), "Cannot transfer AWX");
>             require(awxContract.transferFrom(msg.sender, address(this), _amount));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        365
Source: 
>         if (swap.direction == Direction.Buy) {
>             require(awgContract.transfer(msg.sender,(swap.remainingAmount).mul(swap.price).div(priceMultiplicator)), "Cannot transfer AWG");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        367
Source: 
>         } else {
>             require(awxContract.transfer(msg.sender,swap.remainingAmount), "Cannot transfer AWX");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        382
Source: 
>         if (swap.direction == Direction.Buy) {
>             require(_amount <= awxContract.allowance(msg.sender, address(this)));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awxContract.transferFrom(msg.sender, swap.openTrader, _amount));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        383
Source: 
>             require(_amount <= awxContract.allowance(msg.sender, address(this)));
>             require(awxContract.transferFrom(msg.sender, swap.openTrader, _amount));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awgContract.transfer(msg.sender, _amount.mul(swap.price).div(priceMultiplicator)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        384
Source: 
>             require(awxContract.transferFrom(msg.sender, swap.openTrader, _amount));
>             require(awgContract.transfer(msg.sender, _amount.mul(swap.price).div(priceMultiplicator)));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        386
Source: 
>         } else {
>             require(_amount.mul(swap.price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)));
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awgContract.transferFrom(msg.sender, swap.openTrader, _amount.mul(swap.price).div(priceMultiplicator)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        387
Source: 
>             require(_amount.mul(swap.price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)));
>             require(awgContract.transferFrom(msg.sender, swap.openTrader, _amount.mul(swap.price).div(priceMultiplicator)));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awxContract.transfer(msg.sender, _amount));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AtomicSwap
Line:        388
Source: 
>             require(awgContract.transferFrom(msg.sender, swap.openTrader, _amount.mul(swap.price).div(priceMultiplicator)));
>             require(awxContract.transfer(msg.sender, _amount));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // File: openzeppelin-solidity/contracts/math/SafeMath.sol
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> /**

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AtomicSwap
Line:        299
Source: 
>     uint256 public minimumAmount = 100 ether;
>     uint256 priceMultiplicator = 1000000; // 6 decimals price
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AtomicSwap
Line:        301
Source: 
> 
>     uint256 swapId = 0;
>     ^^^^^^^^^^^^^^^^^^
>     IERC20 awgContract;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AtomicSwap
Line:        302
Source: 
>     uint256 swapId = 0;
>     IERC20 awgContract;
>     ^^^^^^^^^^^^^^^^^^
>     IERC20 awxContract;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AtomicSwap
Line:        303
Source: 
>     IERC20 awgContract;
>     IERC20 awxContract;
>     ^^^^^^^^^^^^^^^^^^
>     event Open(uint256 swapId);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AtomicSwap
Line:        299
Source: 
>     uint256 public minimumAmount = 100 ether;
>     uint256 priceMultiplicator = 1000000; // 6 decimals price
>                                  ^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        327
Source: 
>         if (swap.direction == Direction.Buy) {
>             require(awgContract.transfer(swap.openTrader,(swap.remainingAmount).mul(swap.price).div(priceMultiplicator)), "Cannot transfer AWG");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        329
Source: 
>         } else {
>             require(awxContract.transfer(swap.openTrader,swap.remainingAmount), "Cannot transfer AWX");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        338
Source: 
>             require((_price > minimumBuyPrice || isOwner()), "Price is too low");
>             require(_amount.mul(_price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)), "Cannot transfer AWG");
>                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awgContract.transferFrom(msg.sender, address(this), _amount.mul(_price).div(priceMultiplicator)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        339
Source: 
>             require(_amount.mul(_price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)), "Cannot transfer AWG");
>             require(awgContract.transferFrom(msg.sender, address(this), _amount.mul(_price).div(priceMultiplicator)));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        342
Source: 
>             require((_price > minimumSellPrice || isOwner()), "Price is too low");
>             require(_amount <= awxContract.allowance(msg.sender, address(this)), "Cannot transfer AWX");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awxContract.transferFrom(msg.sender, address(this), _amount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        343
Source: 
>             require(_amount <= awxContract.allowance(msg.sender, address(this)), "Cannot transfer AWX");
>             require(awxContract.transferFrom(msg.sender, address(this), _amount));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        365
Source: 
>         if (swap.direction == Direction.Buy) {
>             require(awgContract.transfer(msg.sender,(swap.remainingAmount).mul(swap.price).div(priceMultiplicator)), "Cannot transfer AWG");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        367
Source: 
>         } else {
>             require(awxContract.transfer(msg.sender,swap.remainingAmount), "Cannot transfer AWX");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        382
Source: 
>         if (swap.direction == Direction.Buy) {
>             require(_amount <= awxContract.allowance(msg.sender, address(this)));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awxContract.transferFrom(msg.sender, swap.openTrader, _amount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        383
Source: 
>             require(_amount <= awxContract.allowance(msg.sender, address(this)));
>             require(awxContract.transferFrom(msg.sender, swap.openTrader, _amount));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awgContract.transfer(msg.sender, _amount.mul(swap.price).div(priceMultiplicator)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        384
Source: 
>             require(awxContract.transferFrom(msg.sender, swap.openTrader, _amount));
>             require(awgContract.transfer(msg.sender, _amount.mul(swap.price).div(priceMultiplicator)));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        386
Source: 
>         } else {
>             require(_amount.mul(swap.price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)));
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awgContract.transferFrom(msg.sender, swap.openTrader, _amount.mul(swap.price).div(priceMultiplicator)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        387
Source: 
>             require(_amount.mul(swap.price).div(priceMultiplicator) <= awgContract.allowance(msg.sender, address(this)));
>             require(awgContract.transferFrom(msg.sender, swap.openTrader, _amount.mul(swap.price).div(priceMultiplicator)));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(awxContract.transfer(msg.sender, _amount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AtomicSwap
Line:        388
Source: 
>             require(awgContract.transferFrom(msg.sender, swap.openTrader, _amount.mul(swap.price).div(priceMultiplicator)));
>             require(awxContract.transfer(msg.sender, _amount));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
