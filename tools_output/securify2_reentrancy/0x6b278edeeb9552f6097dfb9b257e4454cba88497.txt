Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        263
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ReserveEternalStorage
Line:        368
Source: 
>     /// `setBalance` is available anyway.
>     function addBalance(address key, uint256 value) external onlyReserveAddress {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balance[key] = balance[key].add(value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        495
Source: 
>     /// Change who holds the `minter` role.
>     function changeMinter(address newMinter) external onlyOwnerOr(minter) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minter = newMinter;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        501
Source: 
>     /// Change who holds the `pauser` role.
>     function changePauser(address newPauser) external onlyOwnerOr(pauser) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pauser = newPauser;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        506
Source: 
> 
>     function changeFeeRecipient(address newFeeRecipient) external onlyOwnerOr(feeRecipient) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         feeRecipient = newFeeRecipient;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        521
Source: 
>     /// Change the contract that is able to do metatransactions.
>     function changeRelayer(address newTrustedRelayer) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trustedRelayer = newTrustedRelayer;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        527
Source: 
>     /// Change the contract that helps with transaction fee calculation.
>     function changeTxFeeHelper(address newTrustedTxFee) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         trustedTxFee = ITXFee(newTrustedTxFee);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        533
Source: 
>     /// Change the maximum supply allowed.
>     function changeMaxSupply(uint256 newMaxSupply) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         maxSupply = newMaxSupply;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        567
Source: 
>     /// @return how many attoRSV are held by `holder`.
>     function balanceOf(address holder) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return trustedData.balance(holder);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        572
Source: 
>     /// @return how many attoRSV `holder` has allowed `spender` to control.
>     function allowance(address holder, address spender) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return trustedData.allowed(holder, spender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        577
Source: 
>     /// Transfer `value` attoRSV from `msg.sender` to `to`.
>     function transfer(address to, uint256 value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        600
Source: 
>      */
>     function approve(address spender, uint256 value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        613
Source: 
>     /// @param value uint256 The number of attotokens to send.
>     function transferFrom(address from, address to, uint256 value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        627
Source: 
>     /// @param addedValue How many attotokens to increase the allowance by.
>     function increaseAllowance(address spender, uint256 addedValue)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        654
Source: 
>     /// Mint `value` new attotokens to `account`.
>     function mint(address account, uint256 value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        668
Source: 
>     /// Burn `value` attotokens from `account`, if sender has that much allowance from `account`.
>     function burnFrom(address account, uint256 value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        681
Source: 
>     /// Callable only by the relay contract.
>     function relayTransfer(address from, address to, uint256 value) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        693
Source: 
>     /// Callable only by the relay contract.
>     function relayApprove(address holder, address spender, uint256 value) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Reserve
Line:        706
Source: 
>     /// Callable only by the relay contract.
>     function relayTransferFrom(address holder, address spender, address to, uint256 value) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ReserveEternalStorage
Line:        373
Source: 
>     /// Subtract `value` from `balance[key]`, unless this causes integer underflow.
>     function subBalance(address key, uint256 value) external onlyReserveAddress {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balance[key] = balance[key].sub(value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ReserveEternalStorage
Line:        378
Source: 
>     /// Set `balance[key]` to `value`.
>     function setBalance(address key, uint256 value) external onlyReserveAddress {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balance[key] = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ReserveEternalStorage
Line:        389
Source: 
>     /// Set `to`'s allowance of `from`'s tokens to `value`.
>     function setAllowed(address from, address to, uint256 value) external onlyReserveAddress {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[from][to] = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Reserve
Line:        640
Source: 
>     /// @param subtractedValue How many attotokens to decrease the allowance by.
>     function decreaseAllowance(address spender, uint256 subtractedValue)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Reserve
Line:        663
Source: 
>         require(totalSupply < maxSupply, "max supply exceeded");
>         trustedData.addBalance(account, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), account, value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Reserve
Line:        450
Source: 
>     // Basic information as constants
>     string public constant name = "Reserve";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "RSV";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Reserve
Line:        451
Source: 
>     string public constant name = "Reserve";
>     string public constant symbol = "RSV";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Reserve
Line:        452
Source: 
>     string public constant symbol = "RSV";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Reserve
Line:        483
Source: 
>     /// Modifies a function to only run if sent by `role`.
>     modifier only(address role) {
>                   ^^^^^^^^^^^^
>         require(msg.sender == role, "unauthorized: not role holder");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Reserve
Line:        489
Source: 
>     /// Modifies a function to only run if sent by `role` or the contract's `owner`.
>     modifier onlyOwnerOr(address role) {
>                          ^^^^^^^^^^^^
>         require(msg.sender == owner() || msg.sender == role, "unauthorized: not owner or role");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Reserve
Line:        725
Source: 
>         if (address(trustedTxFee) != address(0)) {
>             fee = trustedTxFee.calculateFee(from, to, value);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(fee <= value, "transaction fee out of bounds");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Reserve
Line:        632
Source: 
>     {
>         _approve(msg.sender, spender, trustedData.allowed(msg.sender, spender).add(addedValue));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        467
Source: 
>             trustedData = new ReserveEternalStorage();
>             trustedData.nominateNewOwner(msg.sender);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        517
Source: 
>         emit EternalStorageTransferred(newReserveAddress);
>         trustedData.updateReserveAddress(newReserveAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        568
Source: 
>     function balanceOf(address holder) external view returns (uint256) {
>         return trustedData.balance(holder);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        573
Source: 
>     function allowance(address holder, address spender) external view returns (uint256) {
>         return trustedData.allowed(holder, spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        721
Source: 
>         require(to != address(0), "can't transfer to address zero");
>         trustedData.subBalance(from, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 fee = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        728
Source: 
> 
>             trustedData.addBalance(feeRecipient, fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Transfer(from, feeRecipient, fee);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        732
Source: 
> 
>         trustedData.addBalance(to, value.sub(fee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(from, to, value.sub(fee));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        752
Source: 
> 
>         trustedData.setAllowed(holder, spender, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(holder, spender, value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        619
Source: 
>         _transfer(from, to, value);
>         _approve(from, msg.sender, trustedData.allowed(from, msg.sender).sub(value));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        648
Source: 
>             spender,
>             trustedData.allowed(msg.sender, spender).sub(subtractedValue)
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        663
Source: 
>         require(totalSupply < maxSupply, "max supply exceeded");
>         trustedData.addBalance(account, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), account, value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        674
Source: 
>         _burn(account, value);
>         _approve(account, msg.sender, trustedData.allowed(account, msg.sender).sub(value));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        742
Source: 
>         totalSupply = totalSupply.sub(value);
>         trustedData.subBalance(account, value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(account, address(0), value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Reserve
Line:        713
Source: 
>         _transfer(holder, to, value);
>         _approve(holder, spender, trustedData.allowed(holder, spender).sub(value));
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        246
Source: 
>     address private _owner;
>     address private _nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Reserve
Line:        421
Source: 
>     // Basic token data
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public maxSupply;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Reserve
Line:        428
Source: 
>     // Auth roles
>     address public minter;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address public pauser;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        294
Source: 
>         emit NewOwnerNominated(_owner, newOwner);
>         _nominatedOwner = newOwner;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        319
Source: 
>         emit OwnershipTransferred(_owner, address(0));
>         _owner = address(0);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        294
Source: 
>         emit NewOwnerNominated(_owner, newOwner);
>         _nominatedOwner = newOwner;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        319
Source: 
>         emit OwnershipTransferred(_owner, address(0));
>         _owner = address(0);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        294
Source: 
>         emit NewOwnerNominated(_owner, newOwner);
>         _nominatedOwner = newOwner;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        319
Source: 
>         emit OwnershipTransferred(_owner, address(0));
>         _owner = address(0);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Reserve
Line:        522
Source: 
>     function changeRelayer(address newTrustedRelayer) external onlyOwner {
>         trustedRelayer = newTrustedRelayer;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TrustedRelayerChanged(newTrustedRelayer);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Reserve
Line:        528
Source: 
>     function changeTxFeeHelper(address newTrustedTxFee) external onlyOwner {
>         trustedTxFee = ITXFee(newTrustedTxFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TxFeeHelperChanged(newTrustedTxFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Reserve
Line:        534
Source: 
>     function changeMaxSupply(uint256 newMaxSupply) external onlyOwner {
>         maxSupply = newMaxSupply;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit MaxSupplyChanged(newMaxSupply);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Reserve
Line:        450
Source: 
>     // Basic information as constants
>     string public constant name = "Reserve";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "RSV";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Reserve
Line:        451
Source: 
>     string public constant name = "Reserve";
>     string public constant symbol = "RSV";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Reserve
Line:        452
Source: 
>     string public constant symbol = "RSV";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
