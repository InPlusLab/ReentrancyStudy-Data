Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    hashelot_dayrings
Line:        34
Source: 
> 
>     function dustStack() OwnerOnly public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (block.number > stackTime+stackWait, "Unable to dust: there is an ongoing bet.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    hashelot_dayrings
Line:        88
Source: 
> 
>     function checkBalance() public view returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    hashelot_dayrings
Line:        92
Source: 
> 
>     function checkPlayers() public view returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stackPlayers.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    hashelot_dayrings
Line:        96
Source: 
> 
>     function depositStack() public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.value >= 1 finney, "Deposit error: not enough cash."); // At least 1 finney bets

[0m
[0;35mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Conflict
Contract:    hashelot_dayrings
Line:        78
Source: 
>         // Send share to owner
>         owner.transfer(_ownerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Conflict
Contract:    hashelot_dayrings
Line:        81
Source: 
>         // Send share to winner
>         _winnerKey.transfer(_winnerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stackSoFar = stackSoFar+_winnerShare; // Update the total amount won

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    hashelot_dayrings
Line:        57
Source: 
>         // 2% of the total stack goes to the owner
>         _ownerShare = stackTotal/100*2;
>                       ^^^^^^^^^^^^^^^^
>         // The rest goes to the winner

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    hashelot_dayrings
Line:        130
Source: 
>               if (playerChange > 0) {
>                 msg.sender.transfer(playerChange);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    hashelot_dayrings
Line:        78
Source: 
>         // Send share to owner
>         owner.transfer(_ownerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    hashelot_dayrings
Line:        81
Source: 
>         // Send share to winner
>         _winnerKey.transfer(_winnerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stackSoFar = stackSoFar+_winnerShare; // Update the total amount won

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    hashelot_dayrings
Line:        11
Source: 
> 
> contract hashelot_dayrings{ // Son of a lockdown
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    hashelot_dayrings
Line:        28
Source: 
> 
>     modifier OwnerOnly{
>     ^^^^^^^^^^^^^^^^^^^
>         if(msg.sender == owner){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    hashelot_dayrings
Line:        40
Source: 
>         }
>         uint _balance = address(this).balance;
>         ^^^^^^^^^^^^^
>         if(_balance > 0){ // Is there something to dust?

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    hashelot_dayrings
Line:        47
Source: 
>     function closeBet() public payable {
>         uint _block = block.number;
>         ^^^^^^^^^^^
>         /* To close a bet there has to be at least one player in and

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    hashelot_dayrings
Line:        52
Source: 
>         uint currentKey;
>         uint _ownerShare;
>         ^^^^^^^^^^^^^^^^
>         uint _winnerShare;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    hashelot_dayrings
Line:        53
Source: 
>         uint _ownerShare;
>         uint _winnerShare;
>         ^^^^^^^^^^^^^^^^^
>         address payable _winnerKey;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    hashelot_dayrings
Line:        54
Source: 
>         uint _winnerShare;
>         address payable _winnerKey;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stackTotal = stackPlayers.length*stackValue;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    hashelot_dayrings
Line:        99
Source: 
> 
>         uint _block = block.number;
>         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity ^0.6.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    hashelot_dayrings
Line:        42
Source: 
>         if(_balance > 0){ // Is there something to dust?
>           owner.transfer(_balance);
>           ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    hashelot_dayrings
Line:        78
Source: 
>         // Send share to owner
>         owner.transfer(_ownerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    hashelot_dayrings
Line:        81
Source: 
>         // Send share to winner
>         _winnerKey.transfer(_winnerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stackSoFar = stackSoFar+_winnerShare; // Update the total amount won

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    hashelot_dayrings
Line:        130
Source: 
>               if (playerChange > 0) {
>                 msg.sender.transfer(playerChange);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    hashelot_dayrings
Line:        42
Source: 
>         if(_balance > 0){ // Is there something to dust?
>           owner.transfer(_balance);
>           ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    hashelot_dayrings
Line:        78
Source: 
>         // Send share to owner
>         owner.transfer(_ownerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    hashelot_dayrings
Line:        81
Source: 
>         // Send share to winner
>         _winnerKey.transfer(_winnerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stackSoFar = stackSoFar+_winnerShare; // Update the total amount won

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    hashelot_dayrings
Line:        42
Source: 
>         if(_balance > 0){ // Is there something to dust?
>           owner.transfer(_balance);
>           ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    hashelot_dayrings
Line:        78
Source: 
>         // Send share to owner
>         owner.transfer(_ownerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    hashelot_dayrings
Line:        81
Source: 
>         // Send share to winner
>         _winnerKey.transfer(_winnerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stackSoFar = stackSoFar+_winnerShare; // Update the total amount won

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    hashelot_dayrings
Line:        124
Source: 
>           if (alreadyIn){ // Hey, don't play twice!
>             msg.sender.transfer(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }else{ // You can enter the round

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    hashelot_dayrings
Line:        130
Source: 
>               if (playerChange > 0) {
>                 msg.sender.transfer(playerChange);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    hashelot_dayrings
Line:        134
Source: 
>             }else{ // Too poor to enter the bet
>               msg.sender.transfer(msg.value);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    hashelot_dayrings
Line:        17
Source: 
> 
>     uint public stackValue; // Current value to enter the bet
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint public stackTime;  // The block.number at which the bet started

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    hashelot_dayrings
Line:        18
Source: 
>     uint public stackValue; // Current value to enter the bet
>     uint public stackTime;  // The block.number at which the bet started
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint public stackWait; // What a difference a day made

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    hashelot_dayrings
Line:        78
Source: 
>         // Send share to owner
>         owner.transfer(_ownerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    hashelot_dayrings
Line:        81
Source: 
>         // Send share to winner
>         _winnerKey.transfer(_winnerShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stackSoFar = stackSoFar+_winnerShare; // Update the total amount won

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    hashelot_dayrings
Line:        82
Source: 
>         _winnerKey.transfer(_winnerShare);
>         stackSoFar = stackSoFar+_winnerShare; // Update the total amount won
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stackValue = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    hashelot_dayrings
Line:        83
Source: 
>         stackSoFar = stackSoFar+_winnerShare; // Update the total amount won
>         stackValue = 0;
>         ^^^^^^^^^^^^^^
>         stackTime = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    hashelot_dayrings
Line:        84
Source: 
>         stackValue = 0;
>         stackTime = 0;
>         ^^^^^^^^^^^^^
>         delete stackPlayers; // Closing previous bets

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    hashelot_dayrings
Line:        85
Source: 
>         stackTime = 0;
>         delete stackPlayers; // Closing previous bets
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    hashelot_dayrings
Line:        109
Source: 
> 
>           stackValue = msg.value; // New value one needs to enter the bet
>           ^^^^^^^^^^^^^^^^^^^^^^
>           stackTime = _block; // The game starts now!

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    hashelot_dayrings
Line:        110
Source: 
>           stackValue = msg.value; // New value one needs to enter the bet
>           stackTime = _block; // The game starts now!
>           ^^^^^^^^^^^^^^^^^^
>           stackPlayers.push(msg.sender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    hashelot_dayrings
Line:        111
Source: 
>           stackTime = _block; // The game starts now!
>           stackPlayers.push(msg.sender);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
