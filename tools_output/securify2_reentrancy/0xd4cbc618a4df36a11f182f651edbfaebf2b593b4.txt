[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TestPayable
Line:        193
Source: 
> 
>     address public manager;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public recordsCount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        24
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        50
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        50
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        59
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    TestPayable
Line:        217
Source: 
>         address _owner = owner();
>         payableOwner.transfer(vault);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vault = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TestPayable
Line:        216
Source: 
>         address payable payableOwner = address(uint160(owner()));
>         address _owner = owner();
>         ^^^^^^^^^^^^^^
>         payableOwner.transfer(vault);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TestPayable
Line:        216
Source: 
>         address payable payableOwner = address(uint160(owner()));
>         address _owner = owner();
>         ^^^^^^^^^^^^^^
>         payableOwner.transfer(vault);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TestPayable
Line:        217
Source: 
>         address _owner = owner();
>         payableOwner.transfer(vault);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vault = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TestPayable
Line:        217
Source: 
>         address _owner = owner();
>         payableOwner.transfer(vault);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vault = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TestPayable
Line:        217
Source: 
>         address _owner = owner();
>         payableOwner.transfer(vault);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vault = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TestPayable
Line:        193
Source: 
> 
>     address public manager;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public recordsCount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TestPayable
Line:        209
Source: 
>     function() external payable {
>         vault = vault.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         recordsCount= recordsCount.add(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TestPayable
Line:        210
Source: 
>         vault = vault.add(msg.value);
>         recordsCount= recordsCount.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ReceiveEther(msg.sender, msg.value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TestPayable
Line:        193
Source: 
> 
>     address public manager;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public recordsCount;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TestPayable
Line:        196
Source: 
>     uint256 public vault;
>     mapping (address => uint256) public addressValueMapping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => bytes32) public addressMapping;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TestPayable
Line:        197
Source: 
>     mapping (address => uint256) public addressValueMapping;
>     mapping (address => bytes32) public addressMapping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (bytes32 => address) public hashMapping;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TestPayable
Line:        198
Source: 
>     mapping (address => bytes32) public addressMapping;
>     mapping (bytes32 => address) public hashMapping;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
