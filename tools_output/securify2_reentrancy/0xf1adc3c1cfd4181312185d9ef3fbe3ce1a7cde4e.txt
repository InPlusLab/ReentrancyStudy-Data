Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.11. Changing pragma version to 0.5.11....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    dETH
Line:        420
Source: 
>   uint256 private _numberOfBuys;
>   address payable charon = 0x4C3cC1D2229CBD17D26ec984F2E1b9bD336cBf69;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address payable deployed_sparkle = 0x286ae10228C274a9396a05A56B9E3B8f42D1cE14;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    dETH
Line:        421
Source: 
>   address payable charon = 0x4C3cC1D2229CBD17D26ec984F2E1b9bD336cBf69;
>   address payable deployed_sparkle = 0x286ae10228C274a9396a05A56B9E3B8f42D1cE14;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant private COST_PER_SPARKLE = 1e14; // 1 Sparkle = .0001 ETH

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        320
Source: 
>      */
>     function name() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        328
Source: 
>      */
>     function symbol() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        344
Source: 
>      */
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        430
Source: 
>    */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        434
Source: 
> 
>   function totalDead() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _totalDead;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        441
Source: 
>    */
>   function balanceOf(address account) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        453
Source: 
>    */
>   function transfer(address recipient, uint256 amount) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _transfer(msg.sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        461
Source: 
>    */
>   function allowance(address owner, address spender) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        472
Source: 
>    */
>   function approve(address spender, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        489
Source: 
>    */
>   function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        507
Source: 
>    */
>   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        526
Source: 
>    */
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        678
Source: 
>     // all ether collected by Charon must be converted into Sparkle in order to withdraw it
>     function buySparkle() public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == charon, "Access denied.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        693
Source: 
> 
>     function sellSparkle(uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(msg.sender == charon, "Access denied.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    dETH
Line:        701
Source: 
> 
>     function withdrawSparkle(uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           require(msg.sender == charon, "Access denied.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    dETH
Line:        645
Source: 
> 
>           riverStyx.call.value(buyerAmount).gas(25000)("");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    dETH
Line:        663
Source: 
> 
>         riverStyx.call.value(buyerAmount).gas(25000)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    dETH
Line:        685
Source: 
>       if (MAX_SPARKLE_SUPPLY >= sparkleSupply.add(buyingAmount)) {
>       deployed_sparkle.call.value(pot).gas(120000)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    dETH
Line:        453
Source: 
>    */
>   function transfer(address recipient, uint256 amount) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _transfer(msg.sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    dETH
Line:        489
Source: 
>    */
>   function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    dETH
Line:        507
Source: 
>    */
>   function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    dETH
Line:        693
Source: 
> 
>     function sellSparkle(uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(msg.sender == charon, "Access denied.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    dETH
Line:        701
Source: 
> 
>     function withdrawSparkle(uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           require(msg.sender == charon, "Access denied.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    dETH
Line:        441
Source: 
>    */
>   function balanceOf(address account) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    dETH
Line:        461
Source: 
>    */
>   function allowance(address owner, address spender) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    dETH
Line:        472
Source: 
>    */
>   function approve(address spender, uint256 value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    dETH
Line:        526
Source: 
>    */
>   function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    dETH
Line:        645
Source: 
> 
>           riverStyx.call.value(buyerAmount).gas(25000)("");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    dETH
Line:        663
Source: 
> 
>         riverStyx.call.value(buyerAmount).gas(25000)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        311
Source: 
>      */
>      constructor (string memory name, string memory symbol, uint8 decimals) public {
>                   ^^^^^^^^^^^^^^^^^^
>          _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        311
Source: 
>      */
>      constructor (string memory name, string memory symbol, uint8 decimals) public {
>                                       ^^^^^^^^^^^^^^^^^^^^
>          _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        311
Source: 
>      */
>      constructor (string memory name, string memory symbol, uint8 decimals) public {
>                                                             ^^^^^^^^^^^^^^
>          _name = name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    dETH
Line:        410
Source: 
> 
> contract dETH is ERC20Detailed {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    dETH
Line:        421
Source: 
>   address payable charon = 0x4C3cC1D2229CBD17D26ec984F2E1b9bD336cBf69;
>   address payable deployed_sparkle = 0x286ae10228C274a9396a05A56B9E3B8f42D1cE14;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant private COST_PER_SPARKLE = 1e14; // 1 Sparkle = .0001 ETH

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    dETH
Line:        639
Source: 
>           uint256 amountBonus = amount.mul(13).div(10); // 30% bonus for destroying more than block reward
>           uint256 _price = _numberOfBuys.add(1000);
>           ^^^^^^^^^^^^^^
>           uint256 buyerAmount = amountBonus.div(_price).mul(1000);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    dETH
Line:        657
Source: 
>         uint256 amount = msg.value.sub(1e16); // Charon takes .01 eth to cross River Styx
>         uint256 _price = _numberOfBuys.add(1000);
>         ^^^^^^^^^^^^^^
>         uint256 buyerAmount = amount.div(_price).mul(1000);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    dETH
Line:        420
Source: 
>   uint256 private _numberOfBuys;
>   address payable charon = 0x4C3cC1D2229CBD17D26ec984F2E1b9bD336cBf69;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address payable deployed_sparkle = 0x286ae10228C274a9396a05A56B9E3B8f42D1cE14;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    dETH
Line:        421
Source: 
>   address payable charon = 0x4C3cC1D2229CBD17D26ec984F2E1b9bD336cBf69;
>   address payable deployed_sparkle = 0x286ae10228C274a9396a05A56B9E3B8f42D1cE14;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 constant private COST_PER_SPARKLE = 1e14; // 1 Sparkle = .0001 ETH

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    dETH
Line:        423
Source: 
>   uint256 constant private COST_PER_SPARKLE = 1e14; // 1 Sparkle = .0001 ETH
>   uint256 constant private MAX_SPARKLE_SUPPLY = 400000000 * 10 ** 18;
>                                                 ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    dETH
Line:        636
Source: 
> 
>         if (msg.value >= 3000000000000000000) {
>                          ^^^^^^^^^^^^^^^^^^^
>           uint256 amount = msg.value.sub(1e16); // Charon takes .01 eth to cross River Styx

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    dETH
Line:        685
Source: 
>       if (MAX_SPARKLE_SUPPLY >= sparkleSupply.add(buyingAmount)) {
>       deployed_sparkle.call.value(pot).gas(120000)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    dETH
Line:        688
Source: 
>     } else {
>       charon.transfer(address(this).balance);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    dETH
Line:        696
Source: 
>             Sparkle(deployed_sparkle).sellSparkle(amount);
>             charon.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    dETH
Line:        685
Source: 
>       if (MAX_SPARKLE_SUPPLY >= sparkleSupply.add(buyingAmount)) {
>       deployed_sparkle.call.value(pot).gas(120000)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    dETH
Line:        688
Source: 
>     } else {
>       charon.transfer(address(this).balance);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    dETH
Line:        696
Source: 
>             Sparkle(deployed_sparkle).sellSparkle(amount);
>             charon.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    dETH
Line:        645
Source: 
> 
>           riverStyx.call.value(buyerAmount).gas(25000)("");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    dETH
Line:        663
Source: 
> 
>         riverStyx.call.value(buyerAmount).gas(25000)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    dETH
Line:        685
Source: 
>       if (MAX_SPARKLE_SUPPLY >= sparkleSupply.add(buyingAmount)) {
>       deployed_sparkle.call.value(pot).gas(120000)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    dETH
Line:        688
Source: 
>     } else {
>       charon.transfer(address(this).balance);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    dETH
Line:        696
Source: 
>             Sparkle(deployed_sparkle).sellSparkle(amount);
>             charon.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    dETH
Line:        682
Source: 
>       uint256 buyingAmount = pot.div(COST_PER_SPARKLE);
>       uint256 sparkleSupply = Sparkle(deployed_sparkle).totalSupply();
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       // if the Sparkle max supply cap has been reached, send colleted eth to Charon

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    dETH
Line:        695
Source: 
>             require(msg.sender == charon, "Access denied.");
>             Sparkle(deployed_sparkle).sellSparkle(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             charon.transfer(address(this).balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    dETH
Line:        703
Source: 
>           require(msg.sender == charon, "Access denied.");
>               Sparkle(deployed_sparkle).transfer(charon, amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    dETH
Line:        417
Source: 
> 
>   uint256 private _totalSupply;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private _totalDead;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    dETH
Line:        418
Source: 
>   uint256 private _totalSupply;
>   uint256 private _totalDead;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private _numberOfBuys;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    dETH
Line:        419
Source: 
>   uint256 private _totalDead;
>   uint256 private _numberOfBuys;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address payable charon = 0x4C3cC1D2229CBD17D26ec984F2E1b9bD336cBf69;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    dETH
Line:        645
Source: 
> 
>           riverStyx.call.value(buyerAmount).gas(25000)("");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    dETH
Line:        663
Source: 
> 
>         riverStyx.call.value(buyerAmount).gas(25000)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted call to selfdestruct
Description: Calls to selfdestruct that can be triggered by any user
             must be inspected.
Type:        Violation
Contract:    Hades
Line:        405
Source: 
>   function () external payable {
>     selfdestruct(address(this));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dETH
Line:        607
Source: 
> 
>       _allowances[owner][spender] = value;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit Approval(owner, spender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dETH
Line:        649
Source: 
> 
>           _totalSupply = _totalSupply.add(buyerAmount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           _totalDead = _totalDead.add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dETH
Line:        650
Source: 
>           _totalSupply = _totalSupply.add(buyerAmount);
>           _totalDead = _totalDead.add(amount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dETH
Line:        667
Source: 
> 
>         _totalSupply = _totalSupply.add(buyerAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalDead = _totalDead.add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    dETH
Line:        668
Source: 
>         _totalSupply = _totalSupply.add(buyerAmount);
>         _totalDead = _totalDead.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    dETH
Line:        549
Source: 
> 
>       _balances[sender] = _balances[sender].sub(amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    dETH
Line:        550
Source: 
>       _balances[sender] = _balances[sender].sub(amount);
>       _balances[recipient] = _balances[recipient].add(amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    dETH
Line:        641
Source: 
>           uint256 buyerAmount = amountBonus.div(_price).mul(1000);
>           _numberOfBuys = _numberOfBuys.add(1);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    dETH
Line:        659
Source: 
>         uint256 buyerAmount = amount.div(_price).mul(1000);
>         _numberOfBuys = _numberOfBuys.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    dETH
Line:        645
Source: 
> 
>           riverStyx.call.value(buyerAmount).gas(25000)("");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    dETH
Line:        663
Source: 
> 
>         riverStyx.call.value(buyerAmount).gas(25000)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    dETH
Line:        685
Source: 
>       if (MAX_SPARKLE_SUPPLY >= sparkleSupply.add(buyingAmount)) {
>       deployed_sparkle.call.value(pot).gas(120000)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    dETH
Line:        695
Source: 
>             require(msg.sender == charon, "Access denied.");
>             Sparkle(deployed_sparkle).sellSparkle(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             charon.transfer(address(this).balance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    dETH
Line:        703
Source: 
>           require(msg.sender == charon, "Access denied.");
>               Sparkle(deployed_sparkle).transfer(charon, amount);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               return true;

[0m
