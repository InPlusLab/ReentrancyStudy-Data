[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LPStaker
Line:        179
Source: 
>         Auction a = (is_chr) ? chr_auction : usdt_auction;
>         (,,,,,,,bool distributed) = a.getBid(msg.sender); 
>                                     ^^^^^^^^^^^^^^^^^^^^
>         require(distributed, "need to win auction to get bonus");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LPStaker
Line:        204
Source: 
>         emit Deposit(msg.sender, amount, until, reward);
>         require(depositToken.transferFrom(msg.sender, address(this), amount), "transfer unsuccessful");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LPStaker
Line:        223
Source: 
>         
>         require(depositToken.transfer(to, balance), "transfer unsuccessful");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(rewardToken.transfer(to, reward), "transfer unsuccessful");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LPStaker
Line:        224
Source: 
>         require(depositToken.transfer(to, balance), "transfer unsuccessful");
>         require(rewardToken.transfer(to, reward), "transfer unsuccessful");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LPStaker
Line:        176
Source: 
> 
>     function depositWithBonus(uint128 amount, bool is_chr) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         deposit(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LPStaker
Line:        186
Source: 
> 
>     function deposit(uint128 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp < 1602547200, "deposits no longer accepted"); // 2020 October 13 00:00 UTC

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LPStaker
Line:        207
Source: 
> 
>     function withdraw(address to) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StakeState storage ss = _states[msg.sender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LPStaker
Line:        171
Source: 
> 
>     function getStakeState(address account) external view returns (uint256, uint64, uint64) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StakeState storage ss = _states[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        138
Source: 
> 
>             uint256 boughtTokens = (741101126592248 * tAllocatedReward) / (1000000000000000);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        155
Source: 
>             int256 rd = int256(remainingDeposit);
>             int256 tDepositedTokensSquared = int256(tDepositedTokens*tDepositedTokens);
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             int256 temp1 = int256(tAllocatedReward) * rd;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        156
Source: 
>             int256 tDepositedTokensSquared = int256(tDepositedTokens*tDepositedTokens);
>             int256 temp1 = int256(tAllocatedReward) * rd;
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             int256 x1 = (799572 * temp1)/int256(tDepositedTokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        157
Source: 
>             int256 temp1 = int256(tAllocatedReward) * rd;
>             int256 x1 = (799572 * temp1)/int256(tDepositedTokens);
>                          ^^^^^^^^^^^^^^
>             int256 x2 = (75513 * temp1 * rd)/tDepositedTokensSquared;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        158
Source: 
>             int256 x1 = (799572 * temp1)/int256(tDepositedTokens);
>             int256 x2 = (75513 * temp1 * rd)/tDepositedTokensSquared;
>                          ^^^^^^^^^^^^^
>             int256 x3 = (((17042 * temp1 * rd)/tDepositedTokensSquared) * rd)/int256(tDepositedTokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        158
Source: 
>             int256 x1 = (799572 * temp1)/int256(tDepositedTokens);
>             int256 x2 = (75513 * temp1 * rd)/tDepositedTokensSquared;
>                          ^^^^^^^^^^^^^^^^^^
>             int256 x3 = (((17042 * temp1 * rd)/tDepositedTokensSquared) * rd)/int256(tDepositedTokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        159
Source: 
>             int256 x2 = (75513 * temp1 * rd)/tDepositedTokensSquared;
>             int256 x3 = (((17042 * temp1 * rd)/tDepositedTokensSquared) * rd)/int256(tDepositedTokens);
>                            ^^^^^^^^^^^^^
>             int256 res = (x1 - x2 + x3)/1000000;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        159
Source: 
>             int256 x2 = (75513 * temp1 * rd)/tDepositedTokensSquared;
>             int256 x3 = (((17042 * temp1 * rd)/tDepositedTokensSquared) * rd)/int256(tDepositedTokens);
>                            ^^^^^^^^^^^^^^^^^^
>             int256 res = (x1 - x2 + x3)/1000000;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    LPStaker
Line:        159
Source: 
>             int256 x2 = (75513 * temp1 * rd)/tDepositedTokensSquared;
>             int256 x3 = (((17042 * temp1 * rd)/tDepositedTokensSquared) * rd)/int256(tDepositedTokens);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             int256 res = (x1 - x2 + x3)/1000000;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LPStaker
Line:        204
Source: 
>         emit Deposit(msg.sender, amount, until, reward);
>         require(depositToken.transferFrom(msg.sender, address(this), amount), "transfer unsuccessful");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    LPStaker
Line:        179
Source: 
>         Auction a = (is_chr) ? chr_auction : usdt_auction;
>         (,,,,,,,bool distributed) = a.getBid(msg.sender); 
>                 ^^^^^^^^^^^^^^^^
>         require(distributed, "need to win auction to get bonus");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LPStaker
Line:        97
Source: 
>     
>     uint128 constant initialDepositedTokens = 1000 * 1000000; // an offset
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint128 constant initialAllocatedReward = 250 * 1000000; // an offset

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LPStaker
Line:        98
Source: 
>     uint128 constant initialDepositedTokens = 1000 * 1000000; // an offset
>     uint128 constant initialAllocatedReward = 250 * 1000000; // an offset
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LPStaker
Line:        114
Source: 
>     
>     Auction constant usdt_auction = Auction(0xf8E30096dD15Ce4F47310A20EdD505B42a633808);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Auction constant chr_auction = Auction(0x12F41B4bb7D5e5a2148304caAfeb26d9edb7Ef4A);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LPStaker
Line:        115
Source: 
>     Auction constant usdt_auction = Auction(0xf8E30096dD15Ce4F47310A20EdD505B42a633808);
>     Auction constant chr_auction = Auction(0x12F41B4bb7D5e5a2148304caAfeb26d9edb7Ef4A);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LPStaker
Line:        179
Source: 
>         Auction a = (is_chr) ? chr_auction : usdt_auction;
>         (,,,,,,,bool distributed) = a.getBid(msg.sender); 
>                 ^^^^^^^^^^^^^^^^
>         require(distributed, "need to win auction to get bonus");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LPStaker
Line:        97
Source: 
>     
>     uint128 constant initialDepositedTokens = 1000 * 1000000; // an offset
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint128 constant initialAllocatedReward = 250 * 1000000; // an offset

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LPStaker
Line:        98
Source: 
>     uint128 constant initialDepositedTokens = 1000 * 1000000; // an offset
>     uint128 constant initialAllocatedReward = 250 * 1000000; // an offset
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LPStaker
Line:        100
Source: 
>     
>     uint128 totalDepositedTokens = initialDepositedTokens; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint128 totalAllocatedReward = initialAllocatedReward;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LPStaker
Line:        101
Source: 
>     uint128 totalDepositedTokens = initialDepositedTokens; 
>     uint128 totalAllocatedReward = initialAllocatedReward;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint128 public totalBonusDeposits = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LPStaker
Line:        114
Source: 
>     
>     Auction constant usdt_auction = Auction(0xf8E30096dD15Ce4F47310A20EdD505B42a633808);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Auction constant chr_auction = Auction(0x12F41B4bb7D5e5a2148304caAfeb26d9edb7Ef4A);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LPStaker
Line:        115
Source: 
>     Auction constant usdt_auction = Auction(0xf8E30096dD15Ce4F47310A20EdD505B42a633808);
>     Auction constant chr_auction = Auction(0x12F41B4bb7D5e5a2148304caAfeb26d9edb7Ef4A);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LPStaker
Line:        97
Source: 
>     
>     uint128 constant initialDepositedTokens = 1000 * 1000000; // an offset
>                                                      ^^^^^^^
>     uint128 constant initialAllocatedReward = 250 * 1000000; // an offset

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LPStaker
Line:        98
Source: 
>     uint128 constant initialDepositedTokens = 1000 * 1000000; // an offset
>     uint128 constant initialAllocatedReward = 250 * 1000000; // an offset
>                                                     ^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LPStaker
Line:        138
Source: 
> 
>             uint256 boughtTokens = (741101126592248 * tAllocatedReward) / (1000000000000000);
>                                                                            ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LPStaker
Line:        160
Source: 
>             int256 x3 = (((17042 * temp1 * rd)/tDepositedTokensSquared) * rd)/int256(tDepositedTokens);
>             int256 res = (x1 - x2 + x3)/1000000;
>                                         ^^^^^^^
>             if (res > 0)  totalBoughtTokens += uint256(res);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LPStaker
Line:        190
Source: 
>         
>         uint128 adjustedAmount = (1139 * amount) / (100000 * 1000); // represents price about $3.0 per HGET
>                                                     ^^^^^^
>         uint64 reward = uint64(calculateReward(adjustedAmount));

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LPStaker
Line:        194
Source: 
>         
>         require(totalAllocatedReward <= 7500 * 1000000, "reward pool exhausted");
>                                                ^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LPStaker
Line:        220
Source: 
>             ss.bonusBalance = 0;
>             reward += uint64((2500 * 1000000 * bonusBalance) / totalBonusDeposits); // TODO
>                                      ^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LPStaker
Line:        179
Source: 
>         Auction a = (is_chr) ? chr_auction : usdt_auction;
>         (,,,,,,,bool distributed) = a.getBid(msg.sender); 
>                                     ^^^^^^^^^^^^^^^^^^^^
>         require(distributed, "need to win auction to get bonus");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LPStaker
Line:        204
Source: 
>         emit Deposit(msg.sender, amount, until, reward);
>         require(depositToken.transferFrom(msg.sender, address(this), amount), "transfer unsuccessful");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LPStaker
Line:        223
Source: 
>         
>         require(depositToken.transfer(to, balance), "transfer unsuccessful");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(rewardToken.transfer(to, reward), "transfer unsuccessful");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LPStaker
Line:        224
Source: 
>         require(depositToken.transfer(to, balance), "transfer unsuccessful");
>         require(rewardToken.transfer(to, reward), "transfer unsuccessful");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LPStaker
Line:        183
Source: 
>         ss.bonusBalance += amount;
>         totalBonusDeposits += amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LPStaker
Line:        192
Source: 
>         uint64 reward = uint64(calculateReward(adjustedAmount));
>         totalAllocatedReward += reward;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LPStaker
Line:        196
Source: 
>         
>         totalDepositedTokens += adjustedAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LPStaker
Line:        199
Source: 
>         StakeState storage ss = _states[msg.sender];
>         ss.balance += amount;
>         ^^^^^^^^^^^^^^^^^^^^
>         ss.reward += reward;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LPStaker
Line:        200
Source: 
>         ss.balance += amount;
>         ss.reward += reward;
>         ^^^^^^^^^^^^^^^^^^^
>         ss.lockedUntil = until;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LPStaker
Line:        201
Source: 
>         ss.reward += reward;
>         ss.lockedUntil = until;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LPStaker
Line:        182
Source: 
>         StakeState storage ss = _states[msg.sender];
>         ss.bonusBalance += amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalBonusDeposits += amount;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    LPStaker
Line:        209
Source: 
>         StakeState storage ss = _states[msg.sender];
>         require(ss.lockedUntil < block.timestamp, "still locked");
>                                  ^^^^^^^^^^^^^^^
>         require(ss.balance > 0, "must have tokens to withdraw");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    LPStaker
Line:        187
Source: 
>     function deposit(uint128 amount) public {
>         require(block.timestamp < 1602547200, "deposits no longer accepted"); // 2020 October 13 00:00 UTC
>                 ^^^^^^^^^^^^^^^
>         uint64 until = uint64(block.timestamp + 2 weeks); // TODO

[0m
