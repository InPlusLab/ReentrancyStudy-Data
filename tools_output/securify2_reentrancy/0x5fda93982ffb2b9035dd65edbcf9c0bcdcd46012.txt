Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DaiProxy
Line:        161
Source: 
>         uint256 id;
>         assembly {
>             ^^^^^^
>             id := chainid()

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaiProxy
Line:        114
Source: 
>     // contract.
>     function permitAndTransfer(
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         address sender, address recipient, uint256 amount, uint256 fee, uint256 expiry,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiProxy
Line:        148
Source: 
>         require(nonce == nonces[sender]++, "Proxy/invalid nonce");
>         require(safeAdd(amount, fee) <= dai.balanceOf(sender), "Proxy/insufficient funds");
>                                             ^^^^^^^^^^^^^^^^^^^^^
>         require(sender == ecrecover(digest, v, r, s), "Proxy/invalid signature");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiProxy
Line:        154
Source: 
>         if (fee > 0) {
>             dai.transferFrom(sender, feeRecipient, fee);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaiProxy
Line:        156
Source: 
>         }
>         dai.transferFrom(sender, recipient, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiLike
Line:        41
Source: 
>     string public name;
>     string public constant version  = "1";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiProxy
Line:        102
Source: 
>     // EIP712
>     string  public constant name    = "DaiProxy";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string  public constant version = "1.0";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiProxy
Line:        103
Source: 
>     string  public constant name    = "DaiProxy";
>     string  public constant version = "1.0";
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 public DOMAIN_SEPARATOR;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaiProxy
Line:        104
Source: 
>     string  public constant version = "1.0";
>     bytes32 public DOMAIN_SEPARATOR;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 public constant TRANSFER_TYPEHASH = keccak256("Transfer(address sender,address recipient,uint256 amount,uint256 fee,uint256 expiry,uint256 nonce)");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiProxy
Line:        120
Source: 
> 
>         if (safeAdd(amount, fee) >= dai.allowance(sender, address(this))) {
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             dai.permit(sender, address(this), p_nonce, expiry, true, p_v, p_r, p_s);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaiProxy
Line:        148
Source: 
>         require(nonce == nonces[sender]++, "Proxy/invalid nonce");
>         require(safeAdd(amount, fee) <= dai.balanceOf(sender), "Proxy/insufficient funds");
>                                             ^^^^^^^^^^^^^^^^^^^^^
>         require(sender == ecrecover(digest, v, r, s), "Proxy/invalid signature");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiProxy
Line:        121
Source: 
>         if (safeAdd(amount, fee) >= dai.allowance(sender, address(this))) {
>             dai.permit(sender, address(this), p_nonce, expiry, true, p_v, p_r, p_s);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiProxy
Line:        154
Source: 
>         if (fee > 0) {
>             dai.transferFrom(sender, feeRecipient, fee);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaiProxy
Line:        156
Source: 
>         }
>         dai.transferFrom(sender, recipient, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DaiProxy
Line:        95
Source: 
>     function safeAdd(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x);
>                      ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DaiProxy
Line:        98
Source: 
>     function safeSub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x);
>                      ^
>     }

[0m
