pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CentaurStakingV1
Line:        358
Source: 
> 	// CNTR Token Contract & Funding Address
> 	IERC20 public tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public fundingAddress = 0x6359EAdBB84C8f7683E26F392A1573Ab6a37B4b4;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        63
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        63
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CentaurStakingV1
Line:        405
Source: 
> 
> 	function updateFundingAddress(address _address) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(block.timestamp < stakeStartTimestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CentaurStakingV1
Line:        411
Source: 
> 
> 	function changeStartTimestamp(uint256 _timestamp) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(block.timestamp < stakeStartTimestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CentaurStakingV1
Line:        417
Source: 
> 
> 	function changeEndTimestamp(uint256 _timestamp) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(block.timestamp < stakeEndTimestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CentaurStakingV1
Line:        428
Source: 
> 
>     function deposit(uint256 _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	require(block.timestamp > stakeStartTimestamp && block.timestamp < stakeEndTimestamp, "Contract is not accepting deposits at the moment");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CentaurStakingV1
Line:        488
Source: 
> 
>     function withdraw() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	_withdraw(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CentaurStakingV1
Line:        492
Source: 
> 
>     function withdrawAddress(address _address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	_withdraw(_address);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CentaurStakingV1
Line:        519
Source: 
> 
>     function amountAvailableForWithdrawal(address _address) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	uint256 withdrawAmount = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CentaurStakingV1
Line:        532
Source: 
> 
>     function getStakes(address _address) public view returns(StakeInfo[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	StakeInfo[] memory stakes = new StakeInfo[](stakeHolders[_address].length);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CentaurStakingV1
Line:        434
Source: 
>     	// Transfers amount to contract
>     	require(tokenContract.transferFrom(msg.sender, address(this), _amount));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Deposit(block.timestamp, msg.sender, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CentaurStakingV1
Line:        481
Source: 
> 		// Transfer stake rewards from funding address to contract
>     	require(tokenContract.transferFrom(fundingAddress, address(this), stakeRewards));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CentaurStakingV1
Line:        484
Source: 
>     	// Transfer total from contract to msg.sender
>     	require(tokenContract.transfer(msg.sender, stakeRewards));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CentaurStakingV1
Line:        405
Source: 
> 
> 	function updateFundingAddress(address _address) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(block.timestamp < stakeStartTimestamp);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CentaurStakingV1
Line:        411
Source: 
> 
> 	function changeStartTimestamp(uint256 _timestamp) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(block.timestamp < stakeStartTimestamp);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CentaurStakingV1
Line:        492
Source: 
> 
>     function withdrawAddress(address _address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	_withdraw(_address);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CentaurStakingV1
Line:        532
Source: 
> 
>     function getStakes(address _address) public view returns(StakeInfo[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	StakeInfo[] memory stakes = new StakeInfo[](stakeHolders[_address].length);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CentaurStakingV1
Line:        434
Source: 
>     	// Transfers amount to contract
>     	require(tokenContract.transferFrom(msg.sender, address(this), _amount));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Deposit(block.timestamp, msg.sender, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CentaurStakingV1
Line:        481
Source: 
> 		// Transfer stake rewards from funding address to contract
>     	require(tokenContract.transferFrom(fundingAddress, address(this), stakeRewards));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CentaurStakingV1
Line:        484
Source: 
>     	// Transfer total from contract to msg.sender
>     	require(tokenContract.transfer(msg.sender, stakeRewards));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    CentaurStakingV1
Line:        444
Source: 
> 			// Variable cache
> 			uint256 amountToNextDecrement = amountToNextDecrement();
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CentaurStakingV1
Line:        365
Source: 
> 	// Initial & Final Reward Constants (100% => 10000)
> 	uint256 constant initialRewardPercentage = 1000; // 10%
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 constant finalRewardPercetage = 500; // 5%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CentaurStakingV1
Line:        366
Source: 
> 	uint256 constant initialRewardPercentage = 1000; // 10%
> 	uint256 constant finalRewardPercetage = 500; // 5%
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CentaurStakingV1
Line:        369
Source: 
> 	// Rewards % decrement when TVL hits certain volume (100% => 10000)
> 	uint256 constant rewardDecrementCycle = 10000000 * 1 ether; // Decrement when TVL hits certain volume
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 constant percentageDecrementPerCycle = 50; // 0.5%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CentaurStakingV1
Line:        370
Source: 
> 	uint256 constant rewardDecrementCycle = 10000000 * 1 ether; // Decrement when TVL hits certain volume
> 	uint256 constant percentageDecrementPerCycle = 50; // 0.5%
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CentaurStakingV1
Line:        373
Source: 
> 	// Stake Lock Constants
> 	uint256 public constant stakeLockDuration = 30 days;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CentaurStakingV1
Line:        365
Source: 
> 	// Initial & Final Reward Constants (100% => 10000)
> 	uint256 constant initialRewardPercentage = 1000; // 10%
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 constant finalRewardPercetage = 500; // 5%

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CentaurStakingV1
Line:        366
Source: 
> 	uint256 constant initialRewardPercentage = 1000; // 10%
> 	uint256 constant finalRewardPercetage = 500; // 5%
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CentaurStakingV1
Line:        369
Source: 
> 	// Rewards % decrement when TVL hits certain volume (100% => 10000)
> 	uint256 constant rewardDecrementCycle = 10000000 * 1 ether; // Decrement when TVL hits certain volume
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 constant percentageDecrementPerCycle = 50; // 0.5%

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CentaurStakingV1
Line:        370
Source: 
> 	uint256 constant rewardDecrementCycle = 10000000 * 1 ether; // Decrement when TVL hits certain volume
> 	uint256 constant percentageDecrementPerCycle = 50; // 0.5%
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CentaurStakingV1
Line:        379
Source: 
> 
> 	mapping(address => StakeInfo[]) stakeHolders;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CentaurStakingV1
Line:        369
Source: 
> 	// Rewards % decrement when TVL hits certain volume (100% => 10000)
> 	uint256 constant rewardDecrementCycle = 10000000 * 1 ether; // Decrement when TVL hits certain volume
>                                          ^^^^^^^^
> 	uint256 constant percentageDecrementPerCycle = 50; // 0.5%

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CentaurStakingV1
Line:        434
Source: 
>     	// Transfers amount to contract
>     	require(tokenContract.transferFrom(msg.sender, address(this), _amount));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Deposit(block.timestamp, msg.sender, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CentaurStakingV1
Line:        481
Source: 
> 		// Transfer stake rewards from funding address to contract
>     	require(tokenContract.transferFrom(fundingAddress, address(this), stakeRewards));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CentaurStakingV1
Line:        484
Source: 
>     	// Transfer total from contract to msg.sender
>     	require(tokenContract.transfer(msg.sender, stakeRewards));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CentaurStakingV1
Line:        511
Source: 
> 
>     	require(tokenContract.transfer(_address, withdrawAmount));
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	emit Withdraw(block.timestamp, _address, withdrawAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    CentaurStakingV1
Line:        441
Source: 
>     	// Check if deposit exceeds rewardDecrementCycle
> 		while(stakeAmount >= amountToNextDecrement()) {
>                        ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CentaurStakingV1
Line:        389
Source: 
> 	// Total Value Locked (TVL) Tracking
> 	uint256 public totalValueLocked;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CentaurStakingV1
Line:        503
Source: 
> 	    		withdrawAmount = withdrawAmount.add(stake.amountStaked);
> 	    		stake.withdrawn = true;
>        ^^^^^^^^^^^^^^^^^^^^^^
>     		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CentaurStakingV1
Line:        509
Source: 
> 
>     	totalValueLocked = totalValueLocked.sub(withdrawAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    CentaurStakingV1
Line:        406
Source: 
> 	function updateFundingAddress(address _address) public onlyOwner {
> 		require(block.timestamp < stakeStartTimestamp);
>           ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    CentaurStakingV1
Line:        412
Source: 
> 	function changeStartTimestamp(uint256 _timestamp) public onlyOwner {
> 		require(block.timestamp < stakeStartTimestamp);
>           ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    CentaurStakingV1
Line:        418
Source: 
> 	function changeEndTimestamp(uint256 _timestamp) public onlyOwner {
> 		require(block.timestamp < stakeEndTimestamp);
>           ^^^^^^^^^^^^^^^
> 		require(_timestamp > stakeStartTimestamp);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    CentaurStakingV1
Line:        524
Source: 
>     		StakeInfo storage stake = stakeHolders[_address][i];
>     		if (!stake.withdrawn && block.timestamp >= stake.startTimestamp + stakeLockDuration) {
>                               ^^^^^^^^^^^^^^^
> 	    		withdrawAmount = withdrawAmount.add(stake.amountStaked);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    CentaurStakingV1
Line:        397
Source: 
> 		currentRewardPercentage = initialRewardPercentage;
> 		stakeStartTimestamp = block.timestamp + 7 days; // Stake event will start 7 days from deployment
>                         ^^^^^^^^^^^^^^^
> 		stakeEndTimestamp = stakeStartTimestamp + 30 days; // Stake event is going to run for 30 days

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    CentaurStakingV1
Line:        429
Source: 
>     function deposit(uint256 _amount) public {
>     	require(block.timestamp > stakeStartTimestamp && block.timestamp < stakeEndTimestamp, "Contract is not accepting deposits at the moment");
>              ^^^^^^^^^^^^^^^
>     	require(_amount > 0, "Amount has to be more than 0");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    CentaurStakingV1
Line:        429
Source: 
>     function deposit(uint256 _amount) public {
>     	require(block.timestamp > stakeStartTimestamp && block.timestamp < stakeEndTimestamp, "Contract is not accepting deposits at the moment");
>                                                       ^^^^^^^^^^^^^^^
>     	require(_amount > 0, "Amount has to be more than 0");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    CentaurStakingV1
Line:        501
Source: 
>     		StakeInfo storage stake = stakeHolders[_address][i];
>     		if (!stake.withdrawn && block.timestamp >= stake.startTimestamp + stakeLockDuration) {
>                               ^^^^^^^^^^^^^^^
> 	    		withdrawAmount = withdrawAmount.add(stake.amountStaked);

[0m
