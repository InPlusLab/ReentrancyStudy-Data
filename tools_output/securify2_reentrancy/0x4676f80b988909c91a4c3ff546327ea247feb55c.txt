pragma directive defines a prior version to 0.5.12. Changing pragma version to 0.5.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        222
Source: 
> 
>     uint256 public minBid = 0.02 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public currentRound = 1;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TwistedSisterArtistFundSplitter
Line:        166
Source: 
>     function() external payable {
>         (uint256[] memory _percentages, address payable[] memory _artists) = artistCommissionRegistry.getCommissionSplits();
>                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_percentages.length > 0, "No commissions found");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TwistedSisterArtistFundSplitter
Line:        169
Source: 
> 
>         uint256 modulo = artistCommissionRegistry.getMaxCommission();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    TwistedSisterArtistFundSplitter
Line:        176
Source: 
>             uint256 valueToSend = msg.value.div(modulo).mul(percentage);
>             (bool success, ) = artist.call.value(valueToSend)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TwistedSisterArtistFundSplitter
Line:        176
Source: 
>             uint256 valueToSend = msg.value.div(modulo).mul(percentage);
>             (bool success, ) = artist.call.value(valueToSend)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TwistedSisterAuction
Line:        284
Source: 
> 
>             (bool success, ) = highestBidder.call.value(highestBidAmount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Failed to refund the highest bidder");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TwistedSisterAuction
Line:        295
Source: 
> 
>         (bool pfSuccess, ) = printingFund.call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pfSuccess, "Failed to transfer funds to the printing fund");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TwistedSisterAuction
Line:        298
Source: 
> 
>         (bool fsSuccess, ) = address(artistFundSplitter).call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(fsSuccess, "Failed to send funds to the auction fund splitter");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        302
Source: 
> 
>     function bid(uint256 _parameter) external payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_parameter > 0, "The parameter cannot be zero");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        337
Source: 
> 
>     function updateAuctionStartTime(uint256 _auctionStartTime) external isWhitelisted {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         auctionStartTime = _auctionStartTime;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        312
Source: 
> 
>     function issueTwistAndPrepNextRound(string calldata _ipfsHash) external isWhitelisted {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!_isWithinBiddingWindowForRound(), "Current round still active");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        351
Source: 
> 
>     function updateArtistFundSplitter(TwistedSisterArtistFundSplitter _artistFundSplitter) external isWhitelisted {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         artistFundSplitter = _artistFundSplitter;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        72
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TwistedSisterAuction
Line:        242
Source: 
>     modifier isWhitelisted() {
>         require(accessControls.isWhitelisted(msg.sender), "Caller not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TwistedSisterAuction
Line:        328
Source: 
>         uint256 winningRoundParam = winningRoundParameter[previousRound];
>         uint256 tokenId = twistedTokenCreator.createTwisted(previousRound, winningRoundParam, _ipfsHash, winner);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenId == previousRound, "Error minting the TWIST token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TwistedSisterAuction
Line:        242
Source: 
>     modifier isWhitelisted() {
>         require(accessControls.isWhitelisted(msg.sender), "Caller not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TwistedSisterArtistFundSplitter
Line:        166
Source: 
>     function() external payable {
>         (uint256[] memory _percentages, address payable[] memory _artists) = artistCommissionRegistry.getCommissionSplits();
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_percentages.length > 0, "No commissions found");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TwistedSisterArtistFundSplitter
Line:        166
Source: 
>     function() external payable {
>         (uint256[] memory _percentages, address payable[] memory _artists) = artistCommissionRegistry.getCommissionSplits();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_percentages.length > 0, "No commissions found");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TwistedSisterArtistFundSplitter
Line:        176
Source: 
>             uint256 valueToSend = msg.value.div(modulo).mul(percentage);
>             (bool success, ) = artist.call.value(valueToSend)("");
>              ^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        226
Source: 
>     uint256 public roundLengthInSeconds = 0.5 days;
>     uint256 constant public secondsInADay = 1 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        284
Source: 
> 
>             (bool success, ) = highestBidder.call.value(highestBidAmount)("");
>              ^^^^^^^^^^^^
>             require(success, "Failed to refund the highest bidder");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        295
Source: 
> 
>         (bool pfSuccess, ) = printingFund.call.value(valueToSend)("");
>          ^^^^^^^^^^^^^^
>         require(pfSuccess, "Failed to transfer funds to the printing fund");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        298
Source: 
> 
>         (bool fsSuccess, ) = address(artistFundSplitter).call.value(valueToSend)("");
>          ^^^^^^^^^^^^^^
>         require(fsSuccess, "Failed to send funds to the auction fund splitter");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TwistedSisterAuction
Line:        217
Source: 
> 
>     address payable printingFund;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable auctionOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TwistedSisterAuction
Line:        218
Source: 
>     address payable printingFund;
>     address payable auctionOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        295
Source: 
> 
>         (bool pfSuccess, ) = printingFund.call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pfSuccess, "Failed to transfer funds to the printing fund");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        298
Source: 
> 
>         (bool fsSuccess, ) = address(artistFundSplitter).call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(fsSuccess, "Failed to send funds to the auction fund splitter");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        284
Source: 
> 
>             (bool success, ) = highestBidder.call.value(highestBidAmount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Failed to refund the highest bidder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TwistedSisterArtistFundSplitter
Line:        176
Source: 
>             uint256 valueToSend = msg.value.div(modulo).mul(percentage);
>             (bool success, ) = artist.call.value(valueToSend)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        284
Source: 
> 
>             (bool success, ) = highestBidder.call.value(highestBidAmount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Failed to refund the highest bidder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        295
Source: 
> 
>         (bool pfSuccess, ) = printingFund.call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pfSuccess, "Failed to transfer funds to the printing fund");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        298
Source: 
> 
>         (bool fsSuccess, ) = address(artistFundSplitter).call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(fsSuccess, "Failed to send funds to the auction fund splitter");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        284
Source: 
> 
>             (bool success, ) = highestBidder.call.value(highestBidAmount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Failed to refund the highest bidder");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        295
Source: 
> 
>         (bool pfSuccess, ) = printingFund.call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pfSuccess, "Failed to transfer funds to the printing fund");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        298
Source: 
> 
>         (bool fsSuccess, ) = address(artistFundSplitter).call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(fsSuccess, "Failed to send funds to the auction fund splitter");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TwistedSisterArtistFundSplitter
Line:        166
Source: 
>     function() external payable {
>         (uint256[] memory _percentages, address payable[] memory _artists) = artistCommissionRegistry.getCommissionSplits();
>                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_percentages.length > 0, "No commissions found");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TwistedSisterArtistFundSplitter
Line:        169
Source: 
> 
>         uint256 modulo = artistCommissionRegistry.getMaxCommission();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        242
Source: 
>     modifier isWhitelisted() {
>         require(accessControls.isWhitelisted(msg.sender), "Caller not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        328
Source: 
>         uint256 winningRoundParam = winningRoundParameter[previousRound];
>         uint256 tokenId = twistedTokenCreator.createTwisted(previousRound, winningRoundParam, _ipfsHash, winner);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenId == previousRound, "Error minting the TWIST token");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        242
Source: 
>     modifier isWhitelisted() {
>         require(accessControls.isWhitelisted(msg.sender), "Caller not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        284
Source: 
> 
>             (bool success, ) = highestBidder.call.value(highestBidAmount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Failed to refund the highest bidder");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        295
Source: 
> 
>         (bool pfSuccess, ) = printingFund.call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pfSuccess, "Failed to transfer funds to the printing fund");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        298
Source: 
> 
>         (bool fsSuccess, ) = address(artistFundSplitter).call.value(valueToSend)("");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(fsSuccess, "Failed to send funds to the auction fund splitter");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    TwistedSisterArtistFundSplitter
Line:        176
Source: 
>             uint256 valueToSend = msg.value.div(modulo).mul(percentage);
>             (bool success, ) = artist.call.value(valueToSend)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        306
Source: 
>         _refundHighestBidder();
>         highestBidFromRound[currentRound] = msg.value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         highestBidderFromRound[currentRound] = msg.sender;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        307
Source: 
>         highestBidFromRound[currentRound] = msg.value;
>         highestBidderFromRound[currentRound] = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         winningRoundParameter[currentRound] = _parameter;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        308
Source: 
>         highestBidderFromRound[currentRound] = msg.sender;
>         winningRoundParameter[currentRound] = _parameter;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BidAccepted(currentRound, now, winningRoundParameter[currentRound], highestBidFromRound[currentRound], highestBidderFromRound[currentRound]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        317
Source: 
>         uint256 previousRound = currentRound;
>         currentRound = currentRound.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        321
Source: 
>         if (highestBidderFromRound[previousRound] == address(0)) {
>             highestBidderFromRound[previousRound] = auctionOwner;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             winningRoundParameter[previousRound] = 1; // 1 is the default and first param (1...64)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        322
Source: 
>             highestBidderFromRound[previousRound] = auctionOwner;
>             winningRoundParameter[previousRound] = 1; // 1 is the default and first param (1...64)
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TwistedSisterAuction
Line:        343
Source: 
>         require(_numOfRounds >= currentRound, "Number of rounds can't be smaller than the number of previous");
>         numOfRounds = _numOfRounds;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        338
Source: 
>     function updateAuctionStartTime(uint256 _auctionStartTime) external isWhitelisted {
>         auctionStartTime = _auctionStartTime;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        348
Source: 
>         require(_roundLengthInSeconds < secondsInADay);
>         roundLengthInSeconds = _roundLengthInSeconds;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TwistedSisterAuction
Line:        352
Source: 
>     function updateArtistFundSplitter(TwistedSisterArtistFundSplitter _artistFundSplitter) external isWhitelisted {
>         artistFundSplitter = _artistFundSplitter;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
