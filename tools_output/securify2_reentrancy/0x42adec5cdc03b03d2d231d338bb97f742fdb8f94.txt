Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StableDEX
Line:        127
Source: 
>         uint256 length;
>         assembly {
>         ^^^^^^^^^^
>             length := mload(message)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StableDEX
Line:        148
Source: 
>             lengthOffset++;
>             assembly {
>             ^^^^^^^^^^
>                 mstore8(lengthOffset, digit)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StableDEX
Line:        157
Source: 
>         }
>         assembly {
>         ^^^^^^^^^^
>             mstore(header, lengthLength)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StableDEX
Line:        65
Source: 
>     
>     function deposit() public payable returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StableDEX
Line:        72
Source: 
>     
>     function tokenDeposit(address tokenaddr,uint256 tokenAmount) public returns(bool)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StableDEX
Line:        83
Source: 
>   
>     function withdraw(uint8 type_,address tokenaddr,uint256 amount) public  returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(type_ ==0 || type_ == 1);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StableDEX
Line:        101
Source: 
> 
>      function adminProfitWithdraw(uint8 type_,address tokenAddr)public returns(bool){ //  tokenAddr = type 0 - address(0),  type 1 - token address;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(msg.sender == feeAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StableDEX
Line:        168
Source: 
>     
>      function makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)public returns(bool){
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == admin);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StableDEX
Line:        278
Source: 
>     
>      function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Token(tokenAddr).balanceOf(baladdr);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StableDEX
Line:        77
Source: 
>         userDetails[msg.sender][tokenaddr]+=tokenAmount;
>         Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StableDEX
Line:        283
Source: 
>     function tokenallowance(address tokenAddr,address owner) public view returns(uint256){
>         return Token(tokenAddr).allowance(owner,address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StableDEX
Line:        88
Source: 
>              require(amount<=address(this).balance );
>                 msg.sender.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 userDetails[msg.sender][tokenaddr]-=amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StableDEX
Line:        94
Source: 
>             require(tokenaddr != address(0)) ;
>             Token(tokenaddr).transfer(msg.sender, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               userDetails[msg.sender][tokenaddr]-=amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StableDEX
Line:        105
Source: 
>          if(type_==0){ // withdraw ether
>             feeAddress.transfer(feeAmount[feeAddress][address(0)]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             feeAmount[feeAddress][address(0)]=0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StableDEX
Line:        111
Source: 
>             require(tokenAddr != address(0)) ;
>             Token(tokenAddr).transfer(feeAddress, feeAmount[feeAddress][tokenAddr]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             feeAmount[feeAddress][tokenAddr]=0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StableDEX
Line:        279
Source: 
>      function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
>         return Token(tokenAddr).balanceOf(baladdr);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StableDEX
Line:        168
Source: 
>     
>      function makeOrder(uint256[9] memory tradeDetails,address[2] memory traderAddresses,string memory message,uint8  v,bytes32 r,bytes32 s)public returns(bool){
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == admin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableDEX
Line:        72
Source: 
>     
>     function tokenDeposit(address tokenaddr,uint256 tokenAmount) public returns(bool)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableDEX
Line:        278
Source: 
>     
>      function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Token(tokenAddr).balanceOf(baladdr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StableDEX
Line:        282
Source: 
>     
>     function tokenallowance(address tokenAddr,address owner) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Token(tokenAddr).allowance(owner,address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    StableDEX
Line:        144
Source: 
>             lengthLength++;
>             length -= digit * divisor;
>                       ^^^^^^^^^^^^^^^
>             divisor /= 10;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    StableDEX
Line:        88
Source: 
>              require(amount<=address(this).balance );
>                 msg.sender.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 userDetails[msg.sender][tokenaddr]-=amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    StableDEX
Line:        105
Source: 
>          if(type_==0){ // withdraw ether
>             feeAddress.transfer(feeAmount[feeAddress][address(0)]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             feeAmount[feeAddress][address(0)]=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableDEX
Line:        35
Source: 
>       
>     struct orders{
>     ^^^^^^^^^^^^^^
>         address userAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableDEX
Line:        59
Source: 
>     
>     mapping(uint256=>orders) public Order; //place order by passing userID and orderID as argument;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StableDEX
Line:        190
Source: 
>     
>       uint256 amount__;
>       ^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        17
Source: 
> 
> pragma solidity ^0.5.11;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    StableDEX
Line:        30
Source: 
>     
>     address public admin;
>     ^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    StableDEX
Line:        32
Source: 
>     
>     address  payable feeAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    StableDEX
Line:        59
Source: 
>     
>     mapping(uint256=>orders) public Order; //place order by passing userID and orderID as argument;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    StableDEX
Line:        61
Source: 
>     
>     mapping(address=>mapping(address=>uint256))public userDetails;  // trader token balance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    StableDEX
Line:        63
Source: 
>     
>     mapping(address=>mapping(address=>uint256))public feeAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    StableDEX
Line:        121
Source: 
>     
>     mapping(string=>bool) public hashComformation;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StableDEX
Line:        32
Source: 
>     
>     address  payable feeAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StableDEX
Line:        133
Source: 
>         uint256 lengthLength = 0;
>         uint256 divisor = 100000; 
>                           ^^^^^^
>         while (divisor != 0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    StableDEX
Line:        88
Source: 
>              require(amount<=address(this).balance );
>                 msg.sender.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 userDetails[msg.sender][tokenaddr]-=amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    StableDEX
Line:        105
Source: 
>          if(type_==0){ // withdraw ether
>             feeAddress.transfer(feeAmount[feeAddress][address(0)]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             feeAmount[feeAddress][address(0)]=0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    StableDEX
Line:        88
Source: 
>              require(amount<=address(this).balance );
>                 msg.sender.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 userDetails[msg.sender][tokenaddr]-=amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    StableDEX
Line:        279
Source: 
>      function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
>         return Token(tokenAddr).balanceOf(baladdr);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    StableDEX
Line:        105
Source: 
>          if(type_==0){ // withdraw ether
>             feeAddress.transfer(feeAmount[feeAddress][address(0)]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             feeAmount[feeAddress][address(0)]=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    StableDEX
Line:        88
Source: 
>              require(amount<=address(this).balance );
>                 msg.sender.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 userDetails[msg.sender][tokenaddr]-=amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    StableDEX
Line:        105
Source: 
>          if(type_==0){ // withdraw ether
>             feeAddress.transfer(feeAmount[feeAddress][address(0)]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             feeAmount[feeAddress][address(0)]=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    StableDEX
Line:        279
Source: 
>      function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
>         return Token(tokenAddr).balanceOf(baladdr);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableDEX
Line:        77
Source: 
>         userDetails[msg.sender][tokenaddr]+=tokenAmount;
>         Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableDEX
Line:        283
Source: 
>     function tokenallowance(address tokenAddr,address owner) public view returns(uint256){
>         return Token(tokenAddr).allowance(owner,address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableDEX
Line:        94
Source: 
>             require(tokenaddr != address(0)) ;
>             Token(tokenaddr).transfer(msg.sender, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               userDetails[msg.sender][tokenaddr]-=amount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableDEX
Line:        111
Source: 
>             require(tokenAddr != address(0)) ;
>             Token(tokenAddr).transfer(feeAddress, feeAmount[feeAddress][tokenAddr]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             feeAmount[feeAddress][tokenAddr]=0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StableDEX
Line:        279
Source: 
>      function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
>         return Token(tokenAddr).balanceOf(baladdr);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StableDEX
Line:        131
Source: 
>         }
>         require(length <= 999999);
>                 ^^^^^^
>         uint256 lengthLength = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    StableDEX
Line:        279
Source: 
>      function viewTokenBalance(address tokenAddr,address baladdr)public view returns(uint256){
>         return Token(tokenAddr).balanceOf(baladdr);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StableDEX
Line:        67
Source: 
>         require(msg.value > 0);
>         userDetails[msg.sender][address(0)]+=msg.value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DepositandWithdraw( msg.sender, address(0),msg.value,0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StableDEX
Line:        76
Source: 
>         require(tokenallowance(tokenaddr,msg.sender) > 0);
>         userDetails[msg.sender][tokenaddr]+=tokenAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StableDEX
Line:        77
Source: 
>         userDetails[msg.sender][tokenaddr]+=tokenAmount;
>         Token(tokenaddr).transferFrom(msg.sender,address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DepositandWithdraw( msg.sender,tokenaddr,tokenAmount,0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StableDEX
Line:        94
Source: 
>             require(tokenaddr != address(0)) ;
>             Token(tokenaddr).transfer(msg.sender, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               userDetails[msg.sender][tokenaddr]-=amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StableDEX
Line:        111
Source: 
>             require(tokenAddr != address(0)) ;
>             Token(tokenAddr).transfer(feeAddress, feeAmount[feeAddress][tokenAddr]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             feeAmount[feeAddress][tokenAddr]=0;

[0m
