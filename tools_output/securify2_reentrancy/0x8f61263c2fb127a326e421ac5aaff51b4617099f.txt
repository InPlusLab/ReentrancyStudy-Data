Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        145
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        237
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        181
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AlphaSwapV0
Line:        376
Source: 
>     }
>     function devWithdrawFee(address xToken, uint256 amt) external devOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (amt <= devFeeAmt[xToken]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AlphaSwapV0
Line:        483
Source: 
>     
>     function Payoff(address xMarket, uint xEpoch, uint xOpinion, address xToken) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (xOpinion <= 1, "!opinion");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AlphaSwapV0
Line:        347
Source: 
>     }
>     function govSetEpochPeriod(address xMarket, uint newPeriod) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (newPeriod > 0, "!period");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AlphaSwapV0
Line:        352
Source: 
>     }
>     function govMarketWhitelist(address xMarket, uint status) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (status <= 1, "!status");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AlphaSwapV0
Line:        357
Source: 
>     }
>     function govTokenWhitelist(address xToken, uint status) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (status <= 1, "!status");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AlphaSwapV0
Line:        362
Source: 
>     }
>     function govSetDevFee(address xMarket, address xToken, uint newBP) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (newBP <= 10); // max fee = 10 basis points = 0.1%

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AlphaSwapV0
Line:        384
Source: 
> 
>     function readStake(address user, address xMarket, uint xEpoch, uint xOpinion, address xToken) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return market[xMarket][xEpoch].stake[xToken][xOpinion][user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AlphaSwapV0
Line:        387
Source: 
>     }
>     function readTotalStake(address xMarket, uint xEpoch, uint xOpinion, address xToken) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return market[xMarket][xEpoch].totalStake[xToken][xOpinion];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AlphaSwapV0
Line:        439
Source: 
>         uint32 pairTimestamp;
>         (reserve0, reserve1, pairTimestamp) = pair.getReserves();
>                                               ^^^^^^^^^^^^^^^^^^
>         if (pairTimestamp <= mmm.pairTimestamp)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AlphaSwapV0
Line:        446
Source: 
>         m.pairTimestamp = pairTimestamp;
>         m.accuPrice = pair.price0CumulativeLast();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AlphaSwapV0
Line:        468
Source: 
>         uint32 pairTimestamp;
>         (reserve0, reserve1, pairTimestamp) = pair.getReserves();
>                                               ^^^^^^^^^^^^^^^^^^
>         require (pairTimestamp > mmm.pairTimestamp, "!no-trade");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AlphaSwapV0
Line:        474
Source: 
>         m.pairTimestamp = pairTimestamp;
>         m.accuPrice = pair.price0CumulativeLast();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        181
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        262
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        263
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        280
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        302
Source: 
>     
>     struct MARKET_EPOCH {
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint timestamp;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        321
Source: 
>     
>     event MARKET_PERIOD(address indexed market, uint period);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event MARKET_WHITELIST(address indexed market, uint status);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        322
Source: 
>     event MARKET_PERIOD(address indexed market, uint period);
>     event MARKET_WHITELIST(address indexed market, uint status);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event TOKEN_WHITELIST(address indexed token, uint status);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        323
Source: 
>     event MARKET_WHITELIST(address indexed market, uint status);
>     event TOKEN_WHITELIST(address indexed token, uint status);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event FEE_CHANGE(address indexed market, address indexed token, uint BP);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        324
Source: 
>     event TOKEN_WHITELIST(address indexed token, uint status);
>     event FEE_CHANGE(address indexed market, address indexed token, uint BP);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        393
Source: 
>     
>     function Stake(address xMarket, uint xEpoch, uint xOpinion, address xToken, uint xAmt) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (xAmt > 0, "!amt");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        425
Source: 
>     
>     function _Sync(address xMarket) private {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint epochPeriod = marketEpochPeriod[xMarket];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        455
Source: 
>     
>     function Sync(address xMarket) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint epochPeriod = marketEpochPeriod[xMarket];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlphaSwapV0
Line:        483
Source: 
>     
>     function Payoff(address xMarket, uint xEpoch, uint xOpinion, address xToken) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (xOpinion <= 1, "!opinion");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        16
Source: 
> //
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlphaSwapV0
Line:        410
Source: 
>             uint32 pairTimestamp;
>             (reserve0, reserve1, pairTimestamp) = pair.getReserves();
>                                                   ^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlphaSwapV0
Line:        413
Source: 
>             m.pairTimestamp = pairTimestamp;
>             m.accuPrice = pair.price0CumulativeLast();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlphaSwapV0
Line:        439
Source: 
>         uint32 pairTimestamp;
>         (reserve0, reserve1, pairTimestamp) = pair.getReserves();
>                                               ^^^^^^^^^^^^^^^^^^
>         if (pairTimestamp <= mmm.pairTimestamp)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlphaSwapV0
Line:        446
Source: 
>         m.pairTimestamp = pairTimestamp;
>         m.accuPrice = pair.price0CumulativeLast();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlphaSwapV0
Line:        468
Source: 
>         uint32 pairTimestamp;
>         (reserve0, reserve1, pairTimestamp) = pair.getReserves();
>                                               ^^^^^^^^^^^^^^^^^^
>         require (pairTimestamp > mmm.pairTimestamp, "!no-trade");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlphaSwapV0
Line:        474
Source: 
>         m.pairTimestamp = pairTimestamp;
>         m.accuPrice = pair.price0CumulativeLast();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        146
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    AlphaSwapV0
Line:        444
Source: 
>         MARKET_EPOCH memory m;
>         m.timestamp = block.timestamp;
>         ^
>         m.pairTimestamp = pairTimestamp;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    AlphaSwapV0
Line:        472
Source: 
>         MARKET_EPOCH memory m;
>         m.timestamp = block.timestamp;
>         ^
>         m.pairTimestamp = pairTimestamp;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AlphaSwapV0
Line:        404
Source: 
>         if (m.timestamp == 0) { // new market
>             m.timestamp = block.timestamp;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AlphaSwapV0
Line:        412
Source: 
>         
>             m.pairTimestamp = pairTimestamp;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             m.accuPrice = pair.price0CumulativeLast();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AlphaSwapV0
Line:        413
Source: 
>             m.pairTimestamp = pairTimestamp;
>             m.accuPrice = pair.price0CumulativeLast();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AlphaSwapV0
Line:        420
Source: 
>         m.stake[xToken][xOpinion][user] = m.stake[xToken][xOpinion][user].add(xAmt);
>         m.totalStake[xToken][xOpinion] = m.totalStake[xToken][xOpinion].add(xAmt);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AlphaSwapV0
Line:        449
Source: 
>         uint newEpoch = marketEpoch[xMarket].add(1);
>         marketEpoch[xMarket] = newEpoch;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         market[xMarket][newEpoch] = m;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AlphaSwapV0
Line:        450
Source: 
>         marketEpoch[xMarket] = newEpoch;
>         market[xMarket][newEpoch] = m;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AlphaSwapV0
Line:        477
Source: 
>         uint newEpoch = marketEpoch[xMarket].add(1);
>         marketEpoch[xMarket] = newEpoch;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         market[xMarket][newEpoch] = m;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AlphaSwapV0
Line:        478
Source: 
>         marketEpoch[xMarket] = newEpoch;
>         market[xMarket][newEpoch] = m;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlphaSwapV0
Line:        413
Source: 
>             m.pairTimestamp = pairTimestamp;
>             m.accuPrice = pair.price0CumulativeLast();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlphaSwapV0
Line:        446
Source: 
>         m.pairTimestamp = pairTimestamp;
>         m.accuPrice = pair.price0CumulativeLast();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlphaSwapV0
Line:        474
Source: 
>         m.pairTimestamp = pairTimestamp;
>         m.accuPrice = pair.price0CumulativeLast();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        181
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        203
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        210
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        215
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
