Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        158
Source: 
>      */
>     function transferOwnership(address payable newOwner) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        63
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        100
Source: 
>      */
>     function approve(address _spender, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        112
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        122
Source: 
>      */
>     function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        128
Source: 
> 
>     function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldValue = allowed[msg.sender][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        158
Source: 
>      */
>     function transferOwnership(address payable newOwner) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FourArt
Line:        194
Source: 
>     // Set buy and sell price of 1 token in eth.
>     function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellPrice = newSellPrice;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FourArt
Line:        200
Source: 
>     // @notice Buy tokens from contract by sending ether
>     function buy() payable public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amount = msg.value.div(buyPrice);       // calculates the amount

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FourArt
Line:        206
Source: 
>     // @notice Sell `amount` tokens to contract
>     function sell(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FourArt
Line:        234
Source: 
>     // @dev if owner wants to transfer contract ether balance to own account.
>     function transferBalanceToOwner(uint256 _value) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FourArt
Line:        244
Source: 
>     */
>     function transfer(address _to, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FourArt
Line:        256
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FourArt
Line:        271
Source: 
>      */
>     function convertIcoCoins(uint256 _amount) public {   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // msg.sender mush approve tokens for this contract using Approve()

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        122
Source: 
>      */
>     function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FourArt
Line:        194
Source: 
>     // Set buy and sell price of 1 token in eth.
>     function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellPrice = newSellPrice;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FourArt
Line:        244
Source: 
>     */
>     function transfer(address _to, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, _to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FourArt
Line:        271
Source: 
>      */
>     function convertIcoCoins(uint256 _amount) public {   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // msg.sender mush approve tokens for this contract using Approve()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        63
Source: 
>     */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        100
Source: 
>      */
>     function approve(address _spender, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        112
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    FourArt
Line:        215
Source: 
>         emit Transfer(msg.sender, owner, amount); 
>         msg.sender.transfer(requiredBalance);    // sends ether to the seller.
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FourArt
Line:        174
Source: 
>     FourArt public associatedToken;
>     string public constant name = "4ArtCoin";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "4Art";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FourArt
Line:        175
Source: 
>     string public constant name = "4ArtCoin";
>     string public constant symbol = "4Art";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FourArt
Line:        176
Source: 
>     string public constant symbol = "4Art";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public sellPrice = 0; // eth

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FourArt
Line:        185
Source: 
>         associatedToken = _address;
>         totalSupply = 3508500000e18;
>                       ^^^^^^^^^^^^^
>         balances[msg.sender] = totalSupply;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FourArt
Line:        215
Source: 
>         emit Transfer(msg.sender, owner, amount); 
>         msg.sender.transfer(requiredBalance);    // sends ether to the seller.
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FourArt
Line:        236
Source: 
>         require(_value <= address(this).balance);
>         owner.transfer(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FourArt
Line:        236
Source: 
>         require(_value <= address(this).balance);
>         owner.transfer(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FourArt
Line:        215
Source: 
>         emit Transfer(msg.sender, owner, amount); 
>         msg.sender.transfer(requiredBalance);    // sends ether to the seller.
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FourArt
Line:        236
Source: 
>         require(_value <= address(this).balance);
>         owner.transfer(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FourArt
Line:        276
Source: 
>         
>         require(associatedToken.transferFrom(msg.sender, address(this), _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(owner, msg.sender, _amount);   // makes the transfer of trading coins

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FourArt
Line:        228
Source: 
>         // SafeMath.sub will throw if there is not enough balance.
>         balances[_from] = balances[_from].sub(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_to] = balances[_to].add(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FourArt
Line:        229
Source: 
>         balances[_from] = balances[_from].sub(_value);
>         balances[_to] = balances[_to].add(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_from, _to, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        101
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool) {
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        123
Source: 
>     function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FourArt
Line:        260
Source: 
>         require(_value <= allowed[_from][_to]);
>         balances[_from] = balances[_from].sub(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_to] = balances[_to].add(_value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FourArt
Line:        261
Source: 
>         balances[_from] = balances[_from].sub(_value);
>         balances[_to] = balances[_to].add(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FourArt
Line:        174
Source: 
>     FourArt public associatedToken;
>     string public constant name = "4ArtCoin";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "4Art";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FourArt
Line:        175
Source: 
>     string public constant name = "4ArtCoin";
>     string public constant symbol = "4Art";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FourArt
Line:        176
Source: 
>     string public constant symbol = "4Art";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public sellPrice = 0; // eth

[0m
