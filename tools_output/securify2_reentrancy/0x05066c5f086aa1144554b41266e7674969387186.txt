Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    OPERATORS
Line:        198
Source: 
>     uint256 public MINIMUM_POP = 10000000000000000000;
> 	uint256 private MIN_POP_DUR = 10 days;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public MIN_FIRE_TO_POP = 1000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    OPERATORS
Line:        220
Source: 
> 	
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 	mapping(address => bool) whitelisted;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OPERATORS
Line:        244
Source: 
>     
> 	 function machinery(address _popcorn, address _power, address _fire) public onlyCreator returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         popcornToken = _popcorn;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OPERATORS
Line:        253
Source: 
>     
>     function _whitelist(address _address) onlyCreator public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OPERATORS
Line:        260
Source: 
> 	
> 	function _minPopAmount(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OPERATORS
Line:        266
Source: 
> 	
> 	function _minFIRE_TO_POP(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OPERATORS
Line:        272
Source: 
>     
>     function machineReady(bool _status) public onlyCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	_machineReady = _status;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OPERATORS
Line:        276
Source: 
>     
>     function ditchFee(uint _rate) public onlyCreator returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DITCH_FEE = _rate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OPERATORS
Line:        308
Source: 
> 
> 	function userData(address _user) public view 
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	returns (uint256 totalCornsPopping, uint256 userpopslot, 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OPERATORS
Line:        260
Source: 
> 	
> 	function _minPopAmount(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OPERATORS
Line:        266
Source: 
> 	
> 	function _minFIRE_TO_POP(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OPERATORS
Line:        272
Source: 
>     
>     function machineReady(bool _status) public onlyCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	_machineReady = _status;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OPERATORS
Line:        276
Source: 
>     
>     function ditchFee(uint _rate) public onlyCreator returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DITCH_FEE = _rate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OPERATORS
Line:        283
Source: 
> 
> 	function popCorns(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_popcorns(_tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OPERATORS
Line:        287
Source: 
>     
>     function DitchCorns(uint256 _tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_ditchcorns(_tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OPERATORS
Line:        244
Source: 
>     
> 	 function machinery(address _popcorn, address _power, address _fire) public onlyCreator returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         popcornToken = _popcorn;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OPERATORS
Line:        253
Source: 
>     
>     function _whitelist(address _address) onlyCreator public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OPERATORS
Line:        297
Source: 
> 	
>     function popslotOf(address _user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].popslot;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OPERATORS
Line:        301
Source: 
> 
> 	function cornsOf(address _user) public view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OPERATORS
Line:        308
Source: 
> 
> 	function userData(address _user) public view 
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	returns (uint256 totalCornsPopping, uint256 userpopslot, 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OPERATORS
Line:        409
Source: 
>  
>     function scaledOperators(uint _amount) external onlypopcornToken returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        262
Source: 
> 		
> 		MINIMUM_POP = _number*1000000000000000000;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        268
Source: 
> 		
> 		MIN_FIRE_TO_POP = _number*1000000000000000000;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        333
Source: 
> 		
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); 
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		IERC20(popcornToken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        347
Source: 
> 		info.users[msg.sender].popslot -= _amount;
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        419
Source: 
>             
>     		info.scaledPayoutPerToken += _amount * FLOAT_SCALAR / info.totalPopping;
>                                    ^^^^^^^^^^^^^^^^^^^^^^
>     		infocheck = info.scaledPayoutPerToken;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        434
Source: 
>               l /= pow2;
>               l += h * ((-pow2) / pow2 + 1);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>               uint r = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        436
Source: 
>               uint r = 1;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        436
Source: 
>               uint r = 1;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        437
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        437
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        438
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        438
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        439
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        439
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        440
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        440
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        441
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        441
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        442
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        442
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        443
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               return l * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        443
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               return l * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        444
Source: 
>               r *= 2 - z * r;
>               return l * r;
>                      ^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        449
Source: 
>               uint mm = mulmod (x, y, uint (-1));
>               l = x * y;
>                   ^^^^^
>               h = mm - l;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        303
Source: 
> 	    
> 	   return uint256(int256(info.scaledPayoutPerToken * info.users[_user].popslot) - info.users[_user].scaledPayout) / FLOAT_SCALAR;   
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        397
Source: 
> 		require(_dividends >= 0, "you do not have any corn yet");
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OPERATORS
Line:        411
Source: 
>             
>     		info.scaledPayoutPerToken += _amount * FLOAT_SCALAR / info.totalPopping;
>                                    ^^^^^^^^^^^^^^^^^^^^^^
>     		infocheck = info.scaledPayoutPerToken;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OPERATORS
Line:        353
Source: 
>     		   
>     		   require(IERC20(popcornToken).transfer(msg.sender, _amount), "Transaction failed");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         emit DITCHEvent(address(this), msg.sender, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OPERATORS
Line:        364
Source: 
>             		
>             		require(IERC20(popcornToken).transfer(msg.sender, actualValue), "Transaction failed");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit DITCHEvent(address(this), msg.sender, actualValue);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OPERATORS
Line:        368
Source: 
>             		_burnedAmount /=2;
>             		require(IERC20(popcornToken).transfer(address(this), _burnedAmount), "Transaction failed");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             		scaledOperatorSelf(_burnedAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OPERATORS
Line:        373
Source: 
>             		
>              	    require(IERC20(popcornToken).transfer(power, _burnedAmount), "Transaction failed");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              		POWER(power).scaledPower(_burnedAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OPERATORS
Line:        374
Source: 
>              	    require(IERC20(popcornToken).transfer(power, _burnedAmount), "Transaction failed");
>              		POWER(power).scaledPower(_burnedAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OPERATORS
Line:        381
Source: 
>             		    
>             		require(IERC20(popcornToken).transfer(msg.sender, _amount), "Transaction failed");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit DITCHEvent(address(this), msg.sender, _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        194
Source: 
>     
>     bool public _machineReady;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        197
Source: 
>     uint256 constant private FLOAT_SCALAR = 2**64;
>     uint256 public MINIMUM_POP = 10000000000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 private MIN_POP_DUR = 10 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        198
Source: 
>     uint256 public MINIMUM_POP = 10000000000000000000;
> 	uint256 private MIN_POP_DUR = 10 days;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public MIN_FIRE_TO_POP = 1000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        199
Source: 
> 	uint256 private MIN_POP_DUR = 10 days;
> 	uint256 public MIN_FIRE_TO_POP = 1000000000000000000;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 private  DITCH_FEE = 30; 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        200
Source: 
> 	uint256 public MIN_FIRE_TO_POP = 1000000000000000000;
> 	uint256 private  DITCH_FEE = 30; 
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public infocheck;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        253
Source: 
>     
>     function _whitelist(address _address) onlyCreator public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        260
Source: 
> 	
> 	function _minPopAmount(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        266
Source: 
> 	
> 	function _minFIRE_TO_POP(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        287
Source: 
>     
>     function DitchCorns(uint256 _tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_ditchcorns(_tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        393
Source: 
> 		
> 	function Takecorns() external returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        395
Source: 
> 		    
> 		uint256 _dividends = cornsOf(msg.sender);
>   ^^^^^^^^^^^^^^^^^^
> 		require(_dividends >= 0, "you do not have any corn yet");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        426
Source: 
>     function mulDiv (uint x, uint y, uint z) public pure returns (uint) {
>               (uint l, uint h) = fullMul (x, y);
>                ^^^^^^
>               assert (h < z);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OPERATORS
Line:        447
Source: 
>         
>     function fullMul (uint x, uint y) private pure returns (uint l, uint h) {
>                                                             ^^^^^^
>               uint mm = mulmod (x, y, uint (-1));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OPERATORS
Line:        202
Source: 
> 	uint public infocheck;
> 	uint _burnedAmount;
>  ^^^^^^^^^^^^^^^^^^
> 	uint actualValue;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OPERATORS
Line:        203
Source: 
> 	uint _burnedAmount;
> 	uint actualValue;
>  ^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    OPERATORS
Line:        221
Source: 
> 	Info private info;
> 	mapping(address => bool) whitelisted;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OPERATORS
Line:        197
Source: 
>     uint256 constant private FLOAT_SCALAR = 2**64;
>     uint256 public MINIMUM_POP = 10000000000000000000;
>                                  ^^^^^^^^^^^^^^^^^^^^
> 	uint256 private MIN_POP_DUR = 10 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OPERATORS
Line:        199
Source: 
> 	uint256 private MIN_POP_DUR = 10 days;
> 	uint256 public MIN_FIRE_TO_POP = 1000000000000000000;
>                                   ^^^^^^^^^^^^^^^^^^^
> 	uint256 private  DITCH_FEE = 30; 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OPERATORS
Line:        262
Source: 
> 		
> 		MINIMUM_POP = _number*1000000000000000000;
>                         ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OPERATORS
Line:        268
Source: 
> 		
> 		MIN_FIRE_TO_POP = _number*1000000000000000000;
>                             ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        323
Source: 
> 	    require(_machineReady, "Staking not yet initialized");
> 	    require(FIRE(fireball).balanceOf(msg.sender) > MIN_FIRE_TO_POP, "You do not have sufficient fire to pop this corn");
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        325
Source: 
> 	    
> 		require(IERC20(popcornToken).balanceOf(msg.sender) >= _amount, "Insufficient corn balance");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(popslotOf(msg.sender) + _amount >= MINIMUM_POP, "Your amount is lower than the minimum amount allowed to stake");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        327
Source: 
> 		require(popslotOf(msg.sender) + _amount >= MINIMUM_POP, "Your amount is lower than the minimum amount allowed to stake");
> 		require(IERC20(popcornToken).allowance(msg.sender, address(this)) >= _amount, "Not enough allowance given to contract yet to spend by user");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        353
Source: 
>     		   
>     		   require(IERC20(popcornToken).transfer(msg.sender, _amount), "Transaction failed");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         emit DITCHEvent(address(this), msg.sender, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        364
Source: 
>             		
>             		require(IERC20(popcornToken).transfer(msg.sender, actualValue), "Transaction failed");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit DITCHEvent(address(this), msg.sender, actualValue);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        368
Source: 
>             		_burnedAmount /=2;
>             		require(IERC20(popcornToken).transfer(address(this), _burnedAmount), "Transaction failed");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             		scaledOperatorSelf(_burnedAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        373
Source: 
>             		
>              	    require(IERC20(popcornToken).transfer(power, _burnedAmount), "Transaction failed");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              		POWER(power).scaledPower(_burnedAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        381
Source: 
>             		    
>             		require(IERC20(popcornToken).transfer(msg.sender, _amount), "Transaction failed");
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit DITCHEvent(address(this), msg.sender, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OPERATORS
Line:        399
Source: 
> 		
> 		require(IERC20(popcornToken).transfer(msg.sender, _dividends), "Transaction Failed");    // Transfer dividends to msg.sender
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit PooppingRewardEvent(msg.sender, address(this), _dividends);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OPERATORS
Line:        334
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); 
> 		IERC20(popcornToken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OPERATORS
Line:        374
Source: 
>              	    require(IERC20(popcornToken).transfer(power, _burnedAmount), "Transaction failed");
>              		POWER(power).scaledPower(_burnedAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              		

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OPERATORS
Line:        190
Source: 
>      //======================================OPERATORS VARS=========================================//
>     address public popcornToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public power;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OPERATORS
Line:        191
Source: 
>     address public popcornToken;
>     address public power;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public fireball;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OPERATORS
Line:        192
Source: 
>     address public power;
>     address public fireball;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OPERATORS
Line:        201
Source: 
> 	uint256 private  DITCH_FEE = 30; 
> 	uint public infocheck;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	uint _burnedAmount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OPERATORS
Line:        202
Source: 
> 	uint public infocheck;
> 	uint _burnedAmount;
>  ^^^^^^^^^^^^^^^^^^
> 	uint actualValue;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OPERATORS
Line:        203
Source: 
> 	uint _burnedAmount;
> 	uint actualValue;
>  ^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OPERATORS
Line:        220
Source: 
> 	
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 	mapping(address => bool) whitelisted;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OPERATORS
Line:        329
Source: 
> 		
> 		info.users[msg.sender].poptime = now;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.totalPopping += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OPERATORS
Line:        330
Source: 
> 		info.users[msg.sender].poptime = now;
> 		info.totalPopping += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].popslot += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OPERATORS
Line:        331
Source: 
> 		info.totalPopping += _amount;
> 		info.users[msg.sender].popslot += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OPERATORS
Line:        333
Source: 
> 		
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); 
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		IERC20(popcornToken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OPERATORS
Line:        345
Source: 
> 		
> 		info.totalPopping -= _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].popslot -= _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OPERATORS
Line:        346
Source: 
> 		info.totalPopping -= _amount;
> 		info.users[msg.sender].popslot -= _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OPERATORS
Line:        347
Source: 
> 		info.users[msg.sender].popslot -= _amount;
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OPERATORS
Line:        397
Source: 
> 		require(_dividends >= 0, "you do not have any corn yet");
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OPERATORS
Line:        334
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); 
> 		IERC20(popcornToken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OPERATORS
Line:        374
Source: 
>              	    require(IERC20(popcornToken).transfer(power, _burnedAmount), "Transaction failed");
>              		POWER(power).scaledPower(_burnedAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              		

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OPERATORS
Line:        201
Source: 
> 	uint256 private  DITCH_FEE = 30; 
> 	uint public infocheck;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	uint _burnedAmount;

[0m
