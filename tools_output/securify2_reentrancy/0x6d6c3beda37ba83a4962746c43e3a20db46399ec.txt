[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BasicTournament
Line:        1239
Source: 
>         require(wizards[wizardId].maxPower != 0, "Wizard does not exist");
>         require(WIZARD_GUILD.isApprovedOrOwner(msg.sender, wizardId), "Must be Wizard controller");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BasicTournament
Line:        1408
Source: 
>     function updateAffinity(uint256 wizardId) external exists(wizardId) {
>         (, , uint8 newAffinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         BattleWizard storage wizard = wizards[wizardId];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BasicTournament
Line:        1656
Source: 
>         bytes32 signedHash2 = _signedHash(wizardId1, wizardId2, wiz1.nonce, wiz2.nonce, commit2);
>         WIZARD_GUILD.verifySignatures(wizardId1, wizardId2, signedHash1, signedHash2, sig1, sig2);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BasicTournament
Line:        1796
Source: 
>         // you really should have known better!
>         require(duelResolver.isValidMoveSet(moveSet), "Invalid moveset");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BasicTournament
Line:        1937
Source: 
> 
>         int256 powerDiff = duelResolver.resolveDuel(
>                                    ^^^^^^^^^^^^^^^^^
>             moveSet1,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BasicTournament
Line:        2293
Source: 
> 
>         msg.sender.transfer(address(this).balance);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BasicTournament
Line:        2343
Source: 
> 
>         msg.sender.transfer(claimingWinnerShare);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    BasicTournament
Line:        1356
Source: 
> 
>             (, uint88 innatePower, uint8 affinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        347
Source: 
>     /// @param newCeo The address of the new CEO
>     function setCeo(address newCeo) external onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCeo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        361
Source: 
>     /// @param newCoo The address of the new COO
>     function setCoo(address newCoo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCoo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        369
Source: 
>     /// @param newCfo The address of the new CFO
>     function setCfo(address payable newCfo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCfo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        347
Source: 
>     /// @param newCeo The address of the new CEO
>     function setCeo(address newCeo) external onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCeo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        361
Source: 
>     /// @param newCoo The address of the new COO
>     function setCoo(address newCoo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCoo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        369
Source: 
>     /// @param newCfo The address of the new CFO
>     function setCfo(address payable newCfo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCfo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        347
Source: 
>     /// @param newCeo The address of the new CEO
>     function setCeo(address newCeo) external onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCeo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        361
Source: 
>     /// @param newCoo The address of the new COO
>     function setCoo(address newCoo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCoo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccessControl
Line:        369
Source: 
>     /// @param newCfo The address of the new CFO
>     function setCfo(address payable newCfo) public onlyCEO {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         checkControlAddress(newCfo);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BasicTournament
Line:        1254
Source: 
>     ///         is in a battle by checking "currentDuel" against 0.
>     function getWizard(uint256 wizardId) public view exists(wizardId) returns(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 affinity,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BasicTournament
Line:        1283
Source: 
>     ///         when the actual transfer is executed on-chain.
>     function wizardFingerprint(uint256 wizardId) external view returns (bytes32) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (uint256 affinity,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BasicTournament
Line:        1316
Source: 
>     ///         battle, and has a valid affinity.
>     function isReady(uint256 wizardId) public view exists(wizardId) returns (bool) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         BattleWizard memory wizard = wizards[wizardId];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BasicTournament
Line:        1612
Source: 
>     /// @param sig2 The signature corresponding to wizard2
>     function doubleCommit(
>             ^^^^^^^^^^^^^^
>         uint256 wizardId1,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BasicTournament
Line:        2284
Source: 
>     ///         get to take the pot, regardless of the mold level.
>     function claimTheBigCheeze(uint256 claimingWinnerId) external duringCullingWindow onlyWizardController(claimingWinnerId) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(remainingWizards == 1, "Keep fighting!");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicTournament
Line:        1176
Source: 
>     ///      uses less than 30,000 gas.
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicTournament
Line:        1448
Source: 
>     ///         exactly who they will be fighting!)
>     function challengeAscending(uint256 wizardId, bytes32 commitment) external duringFightWindow onlyWizardController(wizardId) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ascensionCommitment.opponentId == 0, "Wizard already challenged");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicTournament
Line:        1469
Source: 
>     //          thereby starting an Ascension Battle.
>     function acceptAscensionChallenge(bytes32 commitment) external duringFightWindow onlyWizardController(ascendingWizardId) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 challengerId = ascensionCommitment.opponentId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicTournament
Line:        1513
Source: 
> 
>     function oneSidedCommit(uint256 committingWizardId, uint256 otherWizardId, bytes32 commitment)
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             external duringFightWindow onlyWizardController(committingWizardId) exists(otherWizardId)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicTournament
Line:        1838
Source: 
>     /// @param salt2 The secret salt of the 2nd wizard
>     function doubleReveal(
>             ^^^^^^^^^^^^^^
>         uint256 wizardId1,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TournamentTimeAbstract
Line:        743
Source: 
> 
>         return localParams.firstWindowStartBlock + sessionCount * localParams.sessionDuration;
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TournamentTimeAbstract
Line:        762
Source: 
> 
>         uint256 resolutionWindowStart = localParams.firstWindowStartBlock + sessionCount * localParams.sessionDuration;
>                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    BasicTournament
Line:        1419
Source: 
> 
>         require(wizard.power < _blueMoldPower() * 2, "Not eligible for ascension");
>                                        ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    BasicTournament
Line:        1930
Source: 
>             // putting much less power at risk (while the ascending Wizard is risking EVERYTHING).
>             if (battlePower1 > battlePower2 + 2*moldPower) {
>                                                       ^^^^^^
>                 battlePower1 = battlePower2;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    BasicTournament
Line:        1932
Source: 
>                 battlePower1 = battlePower2;
>             } else if (battlePower2 > battlePower1 + 2*moldPower) {
>                                                              ^^^^^^
>                 battlePower2 = battlePower1;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BasicTournament
Line:        1356
Source: 
> 
>             (, uint88 innatePower, uint8 affinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    BasicTournament
Line:        2293
Source: 
> 
>         msg.sender.transfer(address(this).balance);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    BasicTournament
Line:        2343
Source: 
> 
>         msg.sender.transfer(claimingWinnerShare);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BasicTournament
Line:        1356
Source: 
> 
>             (, uint88 innatePower, uint8 affinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                        ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BasicTournament
Line:        1408
Source: 
>     function updateAffinity(uint256 wizardId) external exists(wizardId) {
>         (, , uint8 newAffinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                      ^^^^^^^^^^^^^^^^^
>         BattleWizard storage wizard = wizards[wizardId];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BasicTournament
Line:        1284
Source: 
>     function wizardFingerprint(uint256 wizardId) external view returns (bytes32) {
>         (uint256 affinity,
>                  ^^^^^^^^^
>         uint256 power,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BasicTournament
Line:        1356
Source: 
> 
>             (, uint88 innatePower, uint8 affinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                        ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BasicTournament
Line:        1408
Source: 
>     function updateAffinity(uint256 wizardId) external exists(wizardId) {
>         (, , uint8 newAffinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                      ^^^^^^^^^^^^^^^^^
>         BattleWizard storage wizard = wizards[wizardId];

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5.6 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BasicTournament
Line:        1232
Source: 
>     // Modifier to ensure a specific Wizard is currently entered into the Tournament
>     modifier exists(uint256 wizardId) {
>                             ^^^^^^^^^^^
>         checkExists(wizardId);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BasicTournament
Line:        1244
Source: 
>     // Also checks that the Wizard exists!
>     modifier onlyWizardController(uint256 wizardId) {
>                                           ^^^^^^^^^^^
>         checkController(wizardId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BasicTournament
Line:        2293
Source: 
> 
>         msg.sender.transfer(address(this).balance);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BasicTournament
Line:        2343
Source: 
> 
>         msg.sender.transfer(claimingWinnerShare);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BasicTournament
Line:        2293
Source: 
> 
>         msg.sender.transfer(address(this).balance);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BasicTournament
Line:        2343
Source: 
> 
>         msg.sender.transfer(claimingWinnerShare);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BasicTournament
Line:        1161
Source: 
>             duelResolver_ != address(0) &&
>             duelResolver.supportsInterface(_INTERFACE_ID_DUELRESOLVER));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BasicTournament
Line:        1239
Source: 
>         require(wizards[wizardId].maxPower != 0, "Wizard does not exist");
>         require(WIZARD_GUILD.isApprovedOrOwner(msg.sender, wizardId), "Must be Wizard controller");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BasicTournament
Line:        1356
Source: 
> 
>             (, uint88 innatePower, uint8 affinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BasicTournament
Line:        1796
Source: 
>         // you really should have known better!
>         require(duelResolver.isValidMoveSet(moveSet), "Invalid moveset");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BasicTournament
Line:        1937
Source: 
> 
>         int256 powerDiff = duelResolver.resolveDuel(
>                                    ^^^^^^^^^^^^^^^^^
>             moveSet1,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BasicTournament
Line:        1408
Source: 
>     function updateAffinity(uint256 wizardId) external exists(wizardId) {
>         (, , uint8 newAffinity, ) = WIZARD_GUILD.getWizard(wizardId);
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         BattleWizard storage wizard = wizards[wizardId];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BasicTournament
Line:        1656
Source: 
>         bytes32 signedHash2 = _signedHash(wizardId1, wizardId2, wiz1.nonce, wiz2.nonce, commit2);
>         WIZARD_GUILD.verifySignatures(wizardId1, wizardId2, signedHash1, signedHash2, sig1, sig2);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AccessControl
Line:        303
Source: 
>     ///      computer.
>     address payable public cfoAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BasicTournament
Line:        1021
Source: 
>     ///      powerScale_ argument in Tournament's constructor function.
>     uint256 public powerScale;
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BasicTournament
Line:        1063
Source: 
>     ///         look for winners once this gets down to 5 or less!
>     uint256 internal remainingWizards;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BasicTournament
Line:        1091
Source: 
>     // Wizard tries to ascend when someone is already in the chamber, we make 'em fight!
>     uint256 internal ascendingWizardId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BasicTournament
Line:        1112
Source: 
>     // own moves. It makes sense in context, but it is technically a semantic switch worth being explicit about.
>     SingleCommitment internal ascensionCommitment;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BasicTournament
Line:        2293
Source: 
> 
>         msg.sender.transfer(address(this).balance);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BasicTournament
Line:        2343
Source: 
> 
>         msg.sender.transfer(claimingWinnerShare);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted call to selfdestruct
Description: Calls to selfdestruct that can be triggered by any user
             must be inspected.
Type:        Warning
Contract:    BasicTournament
Line:        2350
Source: 
> 
>         selfdestruct(msg.sender);
>                 ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1371
Source: 
> 
>         remainingWizards += wizardIds.length;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1424
Source: 
>             // Wizard in the Ascension Chamber and make them fight it out!
>             ascensionOpponents[ascendingWizardId] = wizardId;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ascensionOpponents[wizardId] = ascendingWizardId;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1425
Source: 
>             ascensionOpponents[ascendingWizardId] = wizardId;
>             ascensionOpponents[wizardId] = ascendingWizardId;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1430
Source: 
>             // Empty out the Ascension Chamber for the next Ascension
>             ascendingWizardId = 0;
>                     ^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1433
Source: 
>             // the chamber is empty, get in!
>             ascendingWizardId = wizardId;
>                     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1463
Source: 
>         // Store a pending commitment that the ascending Wizard can accept
>         ascensionCommitment = SingleCommitment({opponentId: wizardId, commitmentHash: commitment});
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit AscensionChallenged(ascendingWizardId, wizardId, commitment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1480
Source: 
>         // The duel has begun! THERE CAN BE ONLY ONE!!!
>         delete ascensionCommitment;
>                 ^^^^^^^^^^^^^^^^^^^
>         delete ascendingWizardId;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1708
Source: 
>         // Store the duel ID in each Wizard, to mark the fact that they are fighting
>         wiz1.currentDuel = duelId;
>                 ^^^^^^^^^^^^^^^^^^
>         wiz2.currentDuel = duelId;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1709
Source: 
>         wiz1.currentDuel = duelId;
>         wiz2.currentDuel = duelId;
>                 ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1724
Source: 
> 
>         duels[duelId] = Duel({timeout: uint128(duelTimeout), isAscensionBattle: isAscensionBattle});
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1510
Source: 
> 
>         ascendingWizardId = 0;
>                 ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1505
Source: 
>             _updatePower(ascendingWiz, ascendingWiz.power * 3);
>             ascendingWiz.nonce += 1;
>                     ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1552
Source: 
>             // pending commitment so that the other Wizard can pick it up later.
>             pendingCommitments[committingWizardId] = SingleCommitment({opponentId: otherWizardId, commitmentHash: commitment});
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1568
Source: 
> 
>             delete pendingCommitments[otherWizardId];
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1662
Source: 
>         // Remove any potential commitments so that they won't be reused
>         delete pendingCommitments[wizardId1];
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete pendingCommitments[wizardId2];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        1663
Source: 
>         delete pendingCommitments[wizardId1];
>         delete pendingCommitments[wizardId2];
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        2263
Source: 
>         delete wizards[wizardId];
>         remainingWizards--;
>                 ^^^^^^^^^^^
>         emit WizardElimination(wizardId);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        2290
Source: 
> 
>         remainingWizards = 0;
>                 ^^^^^^^^^^^^^
>         delete wizards[claimingWinnerId];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        2291
Source: 
>         remainingWizards = 0;
>         delete wizards[claimingWinnerId];
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        2338
Source: 
>         // Be sure to delete their claim on the prize before sending them the balance!
>         delete wizards[claimingWinnerId];
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         remainingWizards--;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BasicTournament
Line:        2339
Source: 
>         delete wizards[claimingWinnerId];
>         remainingWizards--;
>                 ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1360
Source: 
> 
>             wizards[wizardId] = BattleWizard({
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 power: power,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1395
Source: 
> 
>         wizard.power = revivalPower;
>                 ^^^^^^^^^^^^^^^^^^^^
>         wizard.nonce += 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1396
Source: 
>         wizard.power = revivalPower;
>         wizard.nonce += 1;
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1411
Source: 
>         require(wizard.affinity == ELEMENT_NOTSET, "Affinity already updated");
>         wizard.affinity = newAffinity;
>                 ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2035
Source: 
> 
>         sendingWiz.power = 0;
>                 ^^^^^^^^^^^^^
>         // update the nonces to reflect the state change and invalidate any pending commitments

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2037
Source: 
>         // update the nonces to reflect the state change and invalidate any pending commitments
>         sendingWiz.nonce += 1;
>                 ^^^^^^^^^^^^^^
>         receivingWiz.nonce += 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2038
Source: 
>         sendingWiz.nonce += 1;
>         receivingWiz.nonce += 1;
>                 ^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2018
Source: 
> 
>         wizard.power = uint88(newPower);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2021
Source: 
>         if (wizard.maxPower < newPower) {
>             wizard.maxPower = uint88(newPower);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1588
Source: 
> 
>         delete pendingCommitments[wizardId];
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1994
Source: 
>         // unlock wizards
>         wiz1.currentDuel = 0;
>                 ^^^^^^^^^^^^^
>         wiz2.currentDuel = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1995
Source: 
>         wiz1.currentDuel = 0;
>         wiz2.currentDuel = 0;
>                 ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1998
Source: 
>         // Increment the Wizard nonces
>         wiz1.nonce += 1;
>                 ^^^^^^^^
>         wiz2.nonce += 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1999
Source: 
>         wiz1.nonce += 1;
>         wiz2.nonce += 1;
>                 ^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2002
Source: 
>         // Clean up old data
>         delete duels[duelId];
>                 ^^^^^^^^^^^^^
>         delete revealedMoves[duelId][wizardId1];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        1809
Source: 
>             // Store our revealed moves for later resolution
>             revealedMoves[duelId][committingWizardId] = moveSet;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OneSidedRevealAdded(duelId, committingWizardId, otherWizardId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2052
Source: 
>         // clean up state
>         delete pendingCommitments[wizardId];
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete ascensionOpponents[wizardId];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2080
Source: 
>             _updatePower(wiz1, allPower);
>             wiz2.power = 0;
>                     ^^^^^^^
>         } else if (revealedMoves[duelId][wizardId2] != 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2089
Source: 
>         // unlock wizards
>         wiz1.currentDuel = 0;
>                 ^^^^^^^^^^^^^
>         wiz2.currentDuel = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2090
Source: 
>         wiz1.currentDuel = 0;
>         wiz2.currentDuel = 0;
>                 ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2093
Source: 
>         // Increment the Wizard nonces
>         wiz1.nonce += 1;
>                 ^^^^^^^^
>         wiz2.nonce += 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2094
Source: 
>         wiz1.nonce += 1;
>         wiz2.nonce += 1;
>                 ^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2097
Source: 
>         // Clean up old data
>         delete duels[duelId];
>                 ^^^^^^^^^^^^^
>         delete revealedMoves[duelId][wizardId1];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2084
Source: 
>             _updatePower(wiz2, allPower);
>             wiz1.power = 0;
>                     ^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BasicTournament
Line:        2262
Source: 
>         require(wizards[wizardId].currentDuel == 0, "Wizard is dueling");
>         delete wizards[wizardId];
>                 ^^^^^^^^^^^^^^^^^
>         remainingWizards--;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        24
Source: 
>     // In this case the affinity can be set by the owner.
>     uint8 internal constant ELEMENT_NOTSET = 0; //000
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // A neutral Wizard has no particular strength or weakness with specific

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        27
Source: 
>     // elements.
>     uint8 internal constant ELEMENT_NEUTRAL = 1; //001
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The fire, water and wind elements are used both to reflect an affinity

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        33
Source: 
>     // ThreeAffinityDuelResolver would need to be updated accordingly.
>     uint8 internal constant ELEMENT_FIRE = 2; //010
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant ELEMENT_WATER = 3; //011

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        34
Source: 
>     uint8 internal constant ELEMENT_FIRE = 2; //010
>     uint8 internal constant ELEMENT_WATER = 3; //011
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant ELEMENT_WIND = 4; //100

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        36
Source: 
>     uint8 internal constant ELEMENT_WIND = 4; //100
>     uint8 internal constant MAX_ELEMENT = ELEMENT_WIND;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardGuildInterfaceId
Line:        109
Source: 
> contract WizardGuildInterfaceId {
>     bytes4 internal constant _INTERFACE_ID_WIZARDGUILD = 0x41d4d437;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DuelResolverInterfaceId
Line:        234
Source: 
>     /// @notice The erc165 interface ID
>     bytes4 internal constant _INTERFACE_ID_DUELRESOLVER = 0x41fc4f1e;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TournamentInterfaceId
Line:        884
Source: 
> contract TournamentInterfaceId {
>     bytes4 internal constant _INTERFACE_ID_TOURNAMENT = 0xbd059098;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        27
Source: 
>     // elements.
>     uint8 internal constant ELEMENT_NEUTRAL = 1; //001
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The fire, water and wind elements are used both to reflect an affinity

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        33
Source: 
>     // ThreeAffinityDuelResolver would need to be updated accordingly.
>     uint8 internal constant ELEMENT_FIRE = 2; //010
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant ELEMENT_WATER = 3; //011

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        34
Source: 
>     uint8 internal constant ELEMENT_FIRE = 2; //010
>     uint8 internal constant ELEMENT_WATER = 3; //011
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant ELEMENT_WIND = 4; //100

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WizardConstants
Line:        36
Source: 
>     uint8 internal constant ELEMENT_WIND = 4; //100
>     uint8 internal constant MAX_ELEMENT = ELEMENT_WIND;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
