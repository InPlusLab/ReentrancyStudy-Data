Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        485
Source: 
>      */
>     function registryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _registryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        511
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        551
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        589
Source: 
> 
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        511
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        551
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        589
Source: 
> 
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        720
Source: 
> 
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        511
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        551
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        589
Source: 
> 
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        720
Source: 
> 
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        511
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        551
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        589
Source: 
> 
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        720
Source: 
> 
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        511
Source: 
>      */
>     function renounceRegistryManagement() public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RegistryManagementTransferred(_registryAdmin, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WithClaimableRegistryManagement
Line:        551
Source: 
>     */
>     function pendingRegistryAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return _pendingRegistryAdmin;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        589
Source: 
> 
>     function isInitializationComplete() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initializationAdmin == address(0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        720
Source: 
> 
>     function getContractRegistry() public override view returns (IContractRegistry) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return contractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        715
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        637
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        665
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    GuardiansRegistration
Line:        876
Source: 
> 
> 		electionsContract.guardianUnregistered(msg.sender);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit GuardianDataUpdated(msg.sender, false, guardian.ip, guardian.orbsAddr, guardian.name, guardian.website, guardian.registrationTime);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    GuardiansRegistration
Line:        996
Source: 
> 	function migrateGuardianMetadata(IGuardiansRegistrationPreviousVersion previousContract, address guardianAddress) private {
> 		string memory rewardsFreqMetadata = previousContract.getMetadata(guardianAddress, ID_FORM_URL_METADATA_KEY);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (bytes(rewardsFreqMetadata).length > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    GuardiansRegistration
Line:        979
Source: 
> 	function migrateGuardianData(IGuardiansRegistrationPreviousVersion previousContract, address guardianAddress) private {
> 		(bytes4 ip, address orbsAddr, string memory name, string memory website,, uint registrationTime, uint lastUpdateTime) = previousContract.getGuardianData(guardianAddress);
>                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		guardians[guardianAddress] = Guardian({

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        714
Source: 
> 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        724
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        714
Source: 
> 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        724
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        714
Source: 
> 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        724
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        536
Source: 
>      */
>     function transferRegistryManagement(address newRegistryAdmin) public onlyRegistryAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pendingRegistryAdmin = newRegistryAdmin;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        714
Source: 
> 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        724
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GuardiansRegistration
Line:        854
Source: 
> 
> 	function updateGuardianIp(bytes4 ip) external override onlyWhenActive {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address guardianAddr = resolveGuardianAddress(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GuardiansRegistration
Line:        931
Source: 
> 
> 	function migrateGuardians(address[] calldata guardiansToMigrate, IGuardiansRegistrationPreviousVersion previousContract) external override onlyInitializationAdmin {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(previousContract != IGuardiansRegistrationPreviousVersion(0), "previousContract must not be the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        840
Source: 
>     /// @dev Called by a participant who wishes to register as a guardian
> 	function registerGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website) external override onlyWhenActive {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!isRegistered(msg.sender), "registerGuardian: Guardian is already registered");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        850
Source: 
>     /// @dev Called by a participant who wishes to update its properties
> 	function updateGuardian(bytes4 ip, address orbsAddr, string calldata name, string calldata website) external override onlyRegisteredGuardian onlyWhenActive {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_updateGuardian(msg.sender, ip, orbsAddr, name, website);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        861
Source: 
>     /// @dev Called by a guardian to update additional guardian metadata properties.
>     function setMetadata(string calldata key, string calldata value) external override onlyRegisteredGuardian onlyWhenActive {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_setMetadata(msg.sender, key, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        865
Source: 
> 
> 	function getMetadata(address guardian, string calldata key) external override view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return guardianMetadata[guardian][key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        882
Source: 
>     /// @dev Returns a guardian's data
> 	function getGuardianData(address guardian) external override view returns (bytes4 ip, address orbsAddr, string memory name, string memory website, uint registrationTime, uint lastUpdateTime) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Guardian memory v = guardians[guardian];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        887
Source: 
> 
> 	function getGuardiansOrbsAddress(address[] calldata guardianAddrs) external override view returns (address[] memory orbsAddrs) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		orbsAddrs = new address[](guardianAddrs.length);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        894
Source: 
> 
> 	function getGuardianIp(address guardian) external override view returns (bytes4 ip) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return guardians[guardian].ip;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        898
Source: 
> 
> 	function getGuardianIps(address[] calldata guardianAddrs) external override view returns (bytes4[] memory ips) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ips = new bytes4[](guardianAddrs.length);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        905
Source: 
> 
> 	function isRegistered(address guardian) public override view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return guardians[guardian].registrationTime != 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GuardiansRegistration
Line:        920
Source: 
> 	/// @dev Translates a list guardians Orbs addresses to Ethereum addresses
> 	function getGuardianAddresses(address[] calldata orbsAddrs) external override view returns (address[] memory guardianAddrs) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		guardianAddrs = new address[](orbsAddrs.length);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        715
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GuardiansRegistration
Line:        979
Source: 
> 	function migrateGuardianData(IGuardiansRegistrationPreviousVersion previousContract, address guardianAddress) private {
> 		(bytes4 ip, address orbsAddr, string memory name, string memory website,, uint registrationTime, uint lastUpdateTime) = previousContract.getGuardianData(guardianAddress);
>                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		guardians[guardianAddress] = Guardian({

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        607
Source: 
> 
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) public {
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
>         require(address(_contractRegistry) != address(0), "_contractRegistry cannot be 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        724
Source: 
> 
>     function setRegistryAdmin(address _registryAdmin) external override onlyInitializationAdmin {
>                               ^^^^^^^^^^^^^^^^^^^^^^
>         _transferRegistryManagement(_registryAdmin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Lockable
Line:        768
Source: 
> 
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) ContractRegistryAccessor(_contractRegistry, _registryAdmin) public {}
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ManagedContract
Line:        799
Source: 
> 
>     constructor(IContractRegistry _contractRegistry, address _registryAdmin) Lockable(_contractRegistry, _registryAdmin) public {}
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    GuardiansRegistration
Line:        827
Source: 
> 
> 	constructor(IContractRegistry _contractRegistry, address _registryAdmin) ManagedContract(_contractRegistry, _registryAdmin) public {}
>                                                   ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        636
Source: 
>     function isManager(string memory role) internal view returns (bool) {
>         IContractRegistry _contractRegistry = contractRegistry;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GuardiansRegistration
Line:        979
Source: 
> 	function migrateGuardianData(IGuardiansRegistrationPreviousVersion previousContract, address guardianAddress) private {
> 		(bytes4 ip, address orbsAddr, string memory name, string memory website,, uint registrationTime, uint lastUpdateTime) = previousContract.getGuardianData(guardianAddress);
>    ^^^^^^^^^
> 		guardians[guardianAddress] = Guardian({

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        434
Source: 
> 
> pragma solidity ^0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    GuardiansRegistration
Line:        822
Source: 
> 	}
> 	mapping(address => Guardian) guardians;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => address) orbsAddressToGuardianAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    GuardiansRegistration
Line:        823
Source: 
> 	mapping(address => Guardian) guardians;
> 	mapping(address => address) orbsAddressToGuardianAddress;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(bytes4 => address) public ipToGuardian;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    GuardiansRegistration
Line:        825
Source: 
> 	mapping(bytes4 => address) public ipToGuardian;
> 	mapping(address => mapping(string => string)) guardianMetadata;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    GuardiansRegistration
Line:        1006
Source: 
> 
> 	IElections electionsContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function refreshContracts() external override {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        715
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        637
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        715
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        637
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        715
Source: 
>     function setContractRegistry(IContractRegistry newContractRegistry) public override onlyAdmin {
>         require(newContractRegistry.getPreviousContractRegistry() == address(contractRegistry), "new contract registry must provide the previous contract registry");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         contractRegistry = newContractRegistry;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        637
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GuardiansRegistration
Line:        996
Source: 
> 	function migrateGuardianMetadata(IGuardiansRegistrationPreviousVersion previousContract, address guardianAddress) private {
> 		string memory rewardsFreqMetadata = previousContract.getMetadata(guardianAddress, ID_FORM_URL_METADATA_KEY);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if (bytes(rewardsFreqMetadata).length > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        665
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GuardiansRegistration
Line:        876
Source: 
> 
> 		electionsContract.guardianUnregistered(msg.sender);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit GuardianDataUpdated(msg.sender, false, guardian.ip, guardian.orbsAddr, guardian.name, guardian.website, guardian.registrationTime);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GuardiansRegistration
Line:        979
Source: 
> 	function migrateGuardianData(IGuardiansRegistrationPreviousVersion previousContract, address guardianAddress) private {
> 		(bytes4 ip, address orbsAddr, string memory name, string memory website,, uint registrationTime, uint lastUpdateTime) = previousContract.getGuardianData(guardianAddress);
>                                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		guardians[guardianAddress] = Guardian({

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        469
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        605
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        766
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        469
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        605
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        766
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        469
Source: 
>     address private _registryAdmin;
>     address private _pendingRegistryAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ContractRegistryAccessor
Line:        605
Source: 
> 
>     IContractRegistry private contractRegistry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Lockable
Line:        766
Source: 
> 
>     bool public locked;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GuardiansRegistration
Line:        1006
Source: 
> 
> 	IElections electionsContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	function refreshContracts() external override {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WithClaimableRegistryManagement
Line:        522
Source: 
>         emit RegistryManagementTransferred(_registryAdmin, newRegistryAdmin);
>         _registryAdmin = newRegistryAdmin;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GuardiansRegistration
Line:        843
Source: 
> 
> 		guardians[msg.sender].registrationTime = uint32(block.timestamp);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit GuardianRegistered(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GuardiansRegistration
Line:        955
Source: 
> 		require(ipToGuardian[ip] == address(0), "ip is already in use");
> 		ipToGuardian[ip] = guardianAddr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GuardiansRegistration
Line:        959
Source: 
> 		require(orbsAddressToGuardianAddress[orbsAddr] == address(0), "orbs address is already in use");
> 		orbsAddressToGuardianAddress[orbsAddr] = guardianAddr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GuardiansRegistration
Line:        967
Source: 
> 
> 		guardians[guardianAddr] = guardian;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GuardiansRegistration
Line:        974
Source: 
> 		string memory oldValue = guardianMetadata[guardian][key];
> 		guardianMetadata[guardian][key] = value;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit GuardianMetadataChanged(guardian, key, value, oldValue);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GuardiansRegistration
Line:        874
Source: 
> 		Guardian memory guardian = guardians[msg.sender];
> 		delete guardians[msg.sender];
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GuardiansRegistration
Line:        1008
Source: 
> 	function refreshContracts() external override {
> 		electionsContract = IElections(getElectionsContract());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        637
Source: 
>         IContractRegistry _contractRegistry = contractRegistry;
>         return isAdmin() || _contractRegistry != IContractRegistry(0) && contractRegistry.getManager(role) == msg.sender;
>                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        649
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        653
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        657
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        661
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        665
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        669
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        673
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        677
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        681
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        685
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        689
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        693
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        697
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        701
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        705
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        649
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        653
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        657
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        661
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        665
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        669
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        673
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        677
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        681
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        685
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        689
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        693
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        697
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        701
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        705
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        649
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        653
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        657
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        661
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        665
Source: 
>     function getElectionsContract() internal view returns (address) {
>         return contractRegistry.getContract("elections");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        669
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        673
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        677
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        681
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        685
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        689
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        693
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        697
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        701
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        705
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        649
Source: 
>     function getProtocolContract() internal view returns (address) {
>         return contractRegistry.getContract("protocol");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        653
Source: 
>     function getStakingRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        657
Source: 
>     function getFeesAndBootstrapRewardsContract() internal view returns (address) {
>         return contractRegistry.getContract("feesAndBootstrapRewards");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        661
Source: 
>     function getCommitteeContract() internal view returns (address) {
>         return contractRegistry.getContract("committee");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        669
Source: 
>     function getDelegationsContract() internal view returns (address) {
>         return contractRegistry.getContract("delegations");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        673
Source: 
>     function getGuardiansRegistrationContract() internal view returns (address) {
>         return contractRegistry.getContract("guardiansRegistration");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        677
Source: 
>     function getCertificationContract() internal view returns (address) {
>         return contractRegistry.getContract("certification");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        681
Source: 
>     function getStakingContract() internal view returns (address) {
>         return contractRegistry.getContract("staking");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        685
Source: 
>     function getSubscriptionsContract() internal view returns (address) {
>         return contractRegistry.getContract("subscriptions");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        689
Source: 
>     function getStakingRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("stakingRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        693
Source: 
>     function getBootstrapRewardsWallet() internal view returns (address) {
>         return contractRegistry.getContract("bootstrapRewardsWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        697
Source: 
>     function getGeneralFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("generalFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        701
Source: 
>     function getCertifiedFeesWallet() internal view returns (address) {
>         return contractRegistry.getContract("certifiedFeesWallet");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ContractRegistryAccessor
Line:        705
Source: 
>     function getStakingContractHandler() internal view returns (address) {
>         return contractRegistry.getContract("stakingContractHandler");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
