pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    bridgeContract
Line:        171
Source: 
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");
>         tether.transferFrom(msg.sender, holdingAddress, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].options = true;

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    bridgeContract
Line:        194
Source: 
>         require(users[msg.sender].ecoBalance>0, "insufficient balance");
>         Eco.transfer(_useraddress, users[_useraddress].ecoBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].ecoBalance = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20Basic
Line:        4
Source: 
> contract ERC20Basic {
>     uint public _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public name;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20Basic
Line:        5
Source: 
>     uint public _totalSupply;
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20Basic
Line:        6
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20Basic
Line:        7
Source: 
>     string public symbol;
>     uint public decimals;
>     ^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view  returns (uint){}

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TetherToken
Line:        19
Source: 
> 
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TetherToken
Line:        20
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TetherToken
Line:        21
Source: 
>     string public symbol;
>     uint public decimals;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PhoenixTiger
Line:        36
Source: 
>     -----------------------------------*/
>     address public owner;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public totalGpv;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PhoenixTiger
Line:        37
Source: 
>     address public owner;
>     uint public totalGpv;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public lastuid;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PhoenixTiger
Line:        38
Source: 
>     uint public totalGpv;
>     uint public lastuid;
>     ^^^^^^^^^^^^^^^^^^^
>     /*-----------Mapping---------------

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PhoenixTiger
Line:        55
Source: 
>     
>     uint[12] public Packs;
>     ^^^^^^^^^^^^^^^^^^^^^
>     enum Status {CREATED, ACTIVE}

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    IAbacusOracle
Line:        90
Source: 
> contract IAbacusOracle{
>     uint public callFee;
>     ^^^^^^^^^^^^^^^^^^^
>     function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    bridgeContract
Line:        101
Source: 
>     address payable owner;
>     address public master;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address private holdingAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Basic
Line:        8
Source: 
>     uint public decimals;
>     function totalSupply() public view  returns (uint){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function balanceOf(address who) public view returns (uint){}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Basic
Line:        9
Source: 
>     function totalSupply() public view  returns (uint){}
>     function balanceOf(address who) public view returns (uint){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transfer(address to, uint value) public {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Basic
Line:        10
Source: 
>     function balanceOf(address who) public view returns (uint){}
>     function transfer(address to, uint value) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transferFrom(address _from, address _to, uint _value) public{}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Basic
Line:        11
Source: 
>     function transfer(address to, uint value) public {}
>     function transferFrom(address _from, address _to, uint _value) public{}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function allowance(address _owner, address _spender) public view returns (uint remaining) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Basic
Line:        12
Source: 
>     function transferFrom(address _from, address _to, uint _value) public{}
>     function allowance(address _owner, address _spender) public view returns (uint remaining) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TetherToken
Line:        24
Source: 
>     // Forward ERC20 methods to upgraded contract if this one is deprecated
>     function transfer(address _to, uint _value) public {  }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Forward ERC20 methods to upgraded contract if this one is deprecated

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TetherToken
Line:        26
Source: 
>     // Forward ERC20 methods to upgraded contract if this one is deprecated
>     function transferFrom(address _from, address _to, uint _value) public  {   }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Forward ERC20 methods to upgraded contract if this one is deprecated

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TetherToken
Line:        28
Source: 
>     // Forward ERC20 methods to upgraded contract if this one is deprecated
>     function allowance(address _owner, address _spender) public view returns (uint remaining) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PhoenixTiger
Line:        80
Source: 
>     }
>     function getLastBuyPack(address) public view returns(uint[2] memory ){  }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getCountryUsersCount(uint) public view returns (uint){    }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PhoenixTiger
Line:        81
Source: 
>     function getLastBuyPack(address) public view returns(uint[2] memory ){  }
>     function getCountryUsersCount(uint) public view returns (uint){    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getTrainingLevel(address useraddress, uint pack) public view returns (uint tlevel, uint upack) {    }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PhoenixTiger
Line:        82
Source: 
>     function getCountryUsersCount(uint) public view returns (uint){    }
>     function getTrainingLevel(address useraddress, uint pack) public view returns (uint tlevel, uint upack) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getAllPacksofUsers(address useraddress) public view returns(uint[] memory pck) {    }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PhoenixTiger
Line:        83
Source: 
>     function getTrainingLevel(address useraddress, uint pack) public view returns (uint tlevel, uint upack) {    }
>     function getAllPacksofUsers(address useraddress) public view returns(uint[] memory pck) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getidfromaddress(address useraddress) public view returns(uint userID){    }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PhoenixTiger
Line:        84
Source: 
>     function getAllPacksofUsers(address useraddress) public view returns(uint[] memory pck) {    }
>     function getidfromaddress(address useraddress) public view returns(uint userID){    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getAllLevelsofUsers(address useraddress,uint pack) public view returns(uint lvl) {    }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PhoenixTiger
Line:        85
Source: 
>     function getidfromaddress(address useraddress) public view returns(uint userID){    }
>     function getAllLevelsofUsers(address useraddress,uint pack) public view returns(uint lvl) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function isUserExists(address user) public view returns (bool) {    }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PhoenixTiger
Line:        86
Source: 
>     function getAllLevelsofUsers(address useraddress,uint pack) public view returns(uint lvl) {    }
>     function isUserExists(address user) public view returns (bool) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function checkPackPurchased(address useraddress, uint pack) public view returns (uint userpack, uint usertraininglevel, bool packpurchased){}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PhoenixTiger
Line:        87
Source: 
>     function isUserExists(address user) public view returns (bool) {    }
>     function checkPackPurchased(address useraddress, uint pack) public view returns (uint userpack, uint usertraininglevel, bool packpurchased){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IAbacusOracle
Line:        91
Source: 
>     uint public callFee;
>     function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function scheduleFunc(address to ,uint callTime, bytes memory data , uint fee , uint gaslimit ,uint gasprice)public payable{}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    IAbacusOracle
Line:        92
Source: 
>     function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }
>     function scheduleFunc(address to ,uint callTime, bytes memory data , uint fee , uint gaslimit ,uint gasprice)public payable{}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        159
Source: 
>     
>     function updatetrainingLevel(address  []memory _users,uint  []memory _values) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        167
Source: 
>     
>     function buyOptions(address _useraddress, uint _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(phoenix.isUserExists(_useraddress), "You are not a Phoenix User");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        175
Source: 
>     
>     function updateExtraPrinciple(address  []memory _users,uint  []memory _values) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        183
Source: 
>     
>     function initSOS(address  []memory _users,uint  []memory _values) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        191
Source: 
> 
>     function redeemEcoBalance(address _useraddress) public{ //called weekly
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(phoenix.isUserExists(_useraddress), "user not exists");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        247
Source: 
>     
>     function weektrigger() public { // called weekly from outside
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        264
Source: 
>     
>     function monthTrigger() public { // called monthly from outside
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        274
Source: 
>     
>     function addEco(uint _amount) public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(Eco.allowance(msg.sender,address(this)) >= _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bridgeContract
Line:        283
Source: 
>     
>     function getECODue() public view returns(uint _ecoDue) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(totalECOBalance > Eco.balanceOf(address(this))) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        168
Source: 
>     function buyOptions(address _useraddress, uint _amount) public {
>         require(phoenix.isUserExists(_useraddress), "You are not a Phoenix User");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tether.allowance(msg.sender, address(this)) >= _amount,"set allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        169
Source: 
>         require(phoenix.isUserExists(_useraddress), "You are not a Phoenix User");
>         require(tether.allowance(msg.sender, address(this)) >= _amount,"set allowance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        170
Source: 
>         require(tether.allowance(msg.sender, address(this)) >= _amount,"set allowance");
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tether.transferFrom(msg.sender, holdingAddress, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        170
Source: 
>         require(tether.allowance(msg.sender, address(this)) >= _amount,"set allowance");
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tether.transferFrom(msg.sender, holdingAddress, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        171
Source: 
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");
>         tether.transferFrom(msg.sender, holdingAddress, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].options = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        192
Source: 
>     function redeemEcoBalance(address _useraddress) public{ //called weekly
>         require(phoenix.isUserExists(_useraddress), "user not exists");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].ecoBalance>0, "insufficient balance");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        194
Source: 
>         require(users[msg.sender].ecoBalance>0, "insufficient balance");
>         Eco.transfer(_useraddress, users[_useraddress].ecoBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].ecoBalance = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        207
Source: 
>         if(users[_useraddress].trainingLevel >= users[_useraddress].week  && getLocktime(_useraddress) >= now){
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple )*25)/1000/fetchPrice(ecoFetchId);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[0] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        207
Source: 
>         if(users[_useraddress].trainingLevel >= users[_useraddress].week  && getLocktime(_useraddress) >= now){
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple )*25)/1000/fetchPrice(ecoFetchId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[0] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        290
Source: 
>     function fetchPrice(uint64 _fetchId) private view returns(uint){
>         return abacus.getJobResponse(_fetchId)[0];
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        216
Source: 
>         uint reward;   
>         reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*10)/100)/fetchPrice(ecoFetchId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].dueReward += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        229
Source: 
>         if(users[_useraddress].options == true && getLocktime(_useraddress)>now){
>             reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*20)/100)/fetchPrice(ecoFetchId);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[2] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        229
Source: 
>         if(users[_useraddress].options == true && getLocktime(_useraddress)>now){
>             reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*20)/100)/fetchPrice(ecoFetchId);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[2] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        239
Source: 
>         if(getLocktime(_useraddress)>now) {
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple))/fetchPrice(ecoFetchId);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[1] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        239
Source: 
>         if(getLocktime(_useraddress)>now) {
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple))/fetchPrice(ecoFetchId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[1] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        275
Source: 
>     function addEco(uint _amount) public{
>         require(Eco.allowance(msg.sender,address(this)) >= _amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Eco.transferFrom(msg.sender,address(this),_amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        276
Source: 
>         require(Eco.allowance(msg.sender,address(this)) >= _amount);
>         Eco.transferFrom(msg.sender,address(this),_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        284
Source: 
>     function getECODue() public view returns(uint _ecoDue) {
>         if(totalECOBalance > Eco.balanceOf(address(this))) {
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (totalECOBalance-Eco.balanceOf(address(this)));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    bridgeContract
Line:        285
Source: 
>         if(totalECOBalance > Eco.balanceOf(address(this))) {
>             return (totalECOBalance-Eco.balanceOf(address(this)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        280
Source: 
>     function getLocktime(address _useraddress) private view returns(uint){
>         return (phoenix.userLockTime(_useraddress)*30 days);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        216
Source: 
>         uint reward;   
>         reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*10)/100)/fetchPrice(ecoFetchId);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].dueReward += reward;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        249
Source: 
>         require(msg.sender == owner);
>         for( uint i= 1000001; i < phoenix.lastuid() ; i++) {
>                                   ^^^^^^^^^^^^^^^^^
>             address _address = phoenix.useridmap(i);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        250
Source: 
>         for( uint i= 1000001; i < phoenix.lastuid() ; i++) {
>             address _address = phoenix.useridmap(i);
>                                ^^^^^^^^^^^^^^^^^^^^
>             uint _lastbuy = phoenix.getLastBuyPack(_address)[1];

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        251
Source: 
>             address _address = phoenix.useridmap(i);
>             uint _lastbuy = phoenix.getLastBuyPack(_address)[1];
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(!users[_address].ecoPauser && _lastbuy > 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        266
Source: 
>         require(msg.sender == owner);
>         for( uint i= 1000001; i < phoenix.lastuid(); i++) {
>                                   ^^^^^^^^^^^^^^^^^
>             if(!users[phoenix.useridmap(i)].ecoPauser) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        267
Source: 
>         for( uint i= 1000001; i < phoenix.lastuid(); i++) {
>             if(!users[phoenix.useridmap(i)].ecoPauser) {
>                       ^^^^^^^^^^^^^^^^^^^^
>                 disburseReward(phoenix.useridmap(i));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        268
Source: 
>             if(!users[phoenix.useridmap(i)].ecoPauser) {
>                 disburseReward(phoenix.useridmap(i));
>                                ^^^^^^^^^^^^^^^^^^^^
>                 disburseOptions(phoenix.useridmap(i));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    bridgeContract
Line:        269
Source: 
>                 disburseReward(phoenix.useridmap(i));
>                 disburseOptions(phoenix.useridmap(i));
>                                 ^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    IAbacusOracle
Line:        89
Source: 
> }
> contract IAbacusOracle{
> ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public callFee;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    bridgeContract
Line:        149
Source: 
>     
>     function updateEcoFetchID(uint64 _ecoFetchID) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    bridgeContract
Line:        154
Source: 
>     
>     function updateUSDTID(uint64 _usdtID) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    bridgeContract
Line:        167
Source: 
>     
>     function buyOptions(address _useraddress, uint _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(phoenix.isUserExists(_useraddress), "You are not a Phoenix User");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    bridgeContract
Line:        191
Source: 
> 
>     function redeemEcoBalance(address _useraddress) public{ //called weekly
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(phoenix.isUserExists(_useraddress), "user not exists");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Basic
Line:        9
Source: 
>     function totalSupply() public view  returns (uint){}
>     function balanceOf(address who) public view returns (uint){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transfer(address to, uint value) public {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Basic
Line:        10
Source: 
>     function balanceOf(address who) public view returns (uint){}
>     function transfer(address to, uint value) public {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transferFrom(address _from, address _to, uint _value) public{}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Basic
Line:        11
Source: 
>     function transfer(address to, uint value) public {}
>     function transferFrom(address _from, address _to, uint _value) public{}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function allowance(address _owner, address _spender) public view returns (uint remaining) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Basic
Line:        12
Source: 
>     function transferFrom(address _from, address _to, uint _value) public{}
>     function allowance(address _owner, address _spender) public view returns (uint remaining) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TetherToken
Line:        24
Source: 
>     // Forward ERC20 methods to upgraded contract if this one is deprecated
>     function transfer(address _to, uint _value) public {  }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Forward ERC20 methods to upgraded contract if this one is deprecated

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TetherToken
Line:        26
Source: 
>     // Forward ERC20 methods to upgraded contract if this one is deprecated
>     function transferFrom(address _from, address _to, uint _value) public  {   }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Forward ERC20 methods to upgraded contract if this one is deprecated

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TetherToken
Line:        28
Source: 
>     // Forward ERC20 methods to upgraded contract if this one is deprecated
>     function allowance(address _owner, address _spender) public view returns (uint remaining) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PhoenixTiger
Line:        80
Source: 
>     }
>     function getLastBuyPack(address) public view returns(uint[2] memory ){  }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getCountryUsersCount(uint) public view returns (uint){    }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PhoenixTiger
Line:        81
Source: 
>     function getLastBuyPack(address) public view returns(uint[2] memory ){  }
>     function getCountryUsersCount(uint) public view returns (uint){    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getTrainingLevel(address useraddress, uint pack) public view returns (uint tlevel, uint upack) {    }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PhoenixTiger
Line:        82
Source: 
>     function getCountryUsersCount(uint) public view returns (uint){    }
>     function getTrainingLevel(address useraddress, uint pack) public view returns (uint tlevel, uint upack) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getAllPacksofUsers(address useraddress) public view returns(uint[] memory pck) {    }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PhoenixTiger
Line:        83
Source: 
>     function getTrainingLevel(address useraddress, uint pack) public view returns (uint tlevel, uint upack) {    }
>     function getAllPacksofUsers(address useraddress) public view returns(uint[] memory pck) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getidfromaddress(address useraddress) public view returns(uint userID){    }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PhoenixTiger
Line:        84
Source: 
>     function getAllPacksofUsers(address useraddress) public view returns(uint[] memory pck) {    }
>     function getidfromaddress(address useraddress) public view returns(uint userID){    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getAllLevelsofUsers(address useraddress,uint pack) public view returns(uint lvl) {    }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PhoenixTiger
Line:        85
Source: 
>     function getidfromaddress(address useraddress) public view returns(uint userID){    }
>     function getAllLevelsofUsers(address useraddress,uint pack) public view returns(uint lvl) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function isUserExists(address user) public view returns (bool) {    }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PhoenixTiger
Line:        86
Source: 
>     function getAllLevelsofUsers(address useraddress,uint pack) public view returns(uint lvl) {    }
>     function isUserExists(address user) public view returns (bool) {    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function checkPackPurchased(address useraddress, uint pack) public view returns (uint userpack, uint usertraininglevel, bool packpurchased){}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PhoenixTiger
Line:        87
Source: 
>     function isUserExists(address user) public view returns (bool) {    }
>     function checkPackPurchased(address useraddress, uint pack) public view returns (uint userpack, uint usertraininglevel, bool packpurchased){}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IAbacusOracle
Line:        91
Source: 
>     uint public callFee;
>     function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function scheduleFunc(address to ,uint callTime, bytes memory data , uint fee , uint gaslimit ,uint gasprice)public payable{}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    IAbacusOracle
Line:        92
Source: 
>     function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }
>     function scheduleFunc(address to ,uint callTime, bytes memory data , uint fee , uint gaslimit ,uint gasprice)public payable{}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    bridgeContract
Line:        139
Source: 
>     
>     function updateOptionsBWAPI(address _useraddress, bool _status) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    bridgeContract
Line:        144
Source: 
>     
>     function updatePhoenixAddress(address _phoenixAddress) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        192
Source: 
>     function redeemEcoBalance(address _useraddress) public{ //called weekly
>         require(phoenix.isUserExists(_useraddress), "user not exists");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].ecoBalance>0, "insufficient balance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        194
Source: 
>         require(users[msg.sender].ecoBalance>0, "insufficient balance");
>         Eco.transfer(_useraddress, users[_useraddress].ecoBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].ecoBalance = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        207
Source: 
>         if(users[_useraddress].trainingLevel >= users[_useraddress].week  && getLocktime(_useraddress) >= now){
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple )*25)/1000/fetchPrice(ecoFetchId);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[0] += reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        207
Source: 
>         if(users[_useraddress].trainingLevel >= users[_useraddress].week  && getLocktime(_useraddress) >= now){
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple )*25)/1000/fetchPrice(ecoFetchId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[0] += reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        216
Source: 
>         uint reward;   
>         reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*10)/100)/fetchPrice(ecoFetchId);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].dueReward += reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        216
Source: 
>         uint reward;   
>         reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*10)/100)/fetchPrice(ecoFetchId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].dueReward += reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        229
Source: 
>         if(users[_useraddress].options == true && getLocktime(_useraddress)>now){
>             reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*20)/100)/fetchPrice(ecoFetchId);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[2] += reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        229
Source: 
>         if(users[_useraddress].options == true && getLocktime(_useraddress)>now){
>             reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*20)/100)/fetchPrice(ecoFetchId);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[2] += reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        239
Source: 
>         if(getLocktime(_useraddress)>now) {
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple))/fetchPrice(ecoFetchId);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[1] += reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        239
Source: 
>         if(getLocktime(_useraddress)>now) {
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple))/fetchPrice(ecoFetchId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[1] += reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        249
Source: 
>         require(msg.sender == owner);
>         for( uint i= 1000001; i < phoenix.lastuid() ; i++) {
>                                   ^^^^^^^^^^^^^^^^^
>             address _address = phoenix.useridmap(i);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        250
Source: 
>         for( uint i= 1000001; i < phoenix.lastuid() ; i++) {
>             address _address = phoenix.useridmap(i);
>                                ^^^^^^^^^^^^^^^^^^^^
>             uint _lastbuy = phoenix.getLastBuyPack(_address)[1];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    bridgeContract
Line:        251
Source: 
>             address _address = phoenix.useridmap(i);
>             uint _lastbuy = phoenix.getLastBuyPack(_address)[1];
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(!users[_address].ecoPauser && _lastbuy > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20Basic
Line:        4
Source: 
> contract ERC20Basic {
>     uint public _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PhoenixTiger
Line:        55
Source: 
>     
>     uint[12] public Packs;
>     ^^^^^^^^^^^^^^^^^^^^^
>     enum Status {CREATED, ACTIVE}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    bridgeContract
Line:        97
Source: 
> 
> contract bridgeContract{
> ^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    bridgeContract
Line:        103
Source: 
>     address private holdingAddress;
>     ERC20Basic Eco;
>     ^^^^^^^^^^^^^^
>     IAbacusOracle abacus; 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    bridgeContract
Line:        250
Source: 
>         for( uint i= 1000001; i < phoenix.lastuid() ; i++) {
>             address _address = phoenix.useridmap(i);
>             ^^^^^^^^^^^^^^^^
>             uint _lastbuy = phoenix.getLastBuyPack(_address)[1];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    bridgeContract
Line:        251
Source: 
>             address _address = phoenix.useridmap(i);
>             uint _lastbuy = phoenix.getLastBuyPack(_address)[1];
>             ^^^^^^^^^^^^^
>             if(!users[_address].ecoPauser && _lastbuy > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    bridgeContract
Line:        99
Source: 
>     
>     TetherToken tether;
>     ^^^^^^^^^^^^^^^^^^
>     address payable owner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    bridgeContract
Line:        100
Source: 
>     TetherToken tether;
>     address payable owner;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address public master;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    bridgeContract
Line:        103
Source: 
>     address private holdingAddress;
>     ERC20Basic Eco;
>     ^^^^^^^^^^^^^^
>     IAbacusOracle abacus; 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    bridgeContract
Line:        104
Source: 
>     ERC20Basic Eco;
>     IAbacusOracle abacus; 
>     ^^^^^^^^^^^^^^^^^^^^
>     PhoenixTiger phoenix;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    bridgeContract
Line:        105
Source: 
>     IAbacusOracle abacus; 
>     PhoenixTiger phoenix;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public totalECOBalance;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    bridgeContract
Line:        109
Source: 
>     uint64 public usdtFetchId;
>     uint lastweek;
>     ^^^^^^^^^^^^^
>     mapping(address =>User) public users;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    bridgeContract
Line:        249
Source: 
>         require(msg.sender == owner);
>         for( uint i= 1000001; i < phoenix.lastuid() ; i++) {
>                      ^^^^^^^
>             address _address = phoenix.useridmap(i);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    bridgeContract
Line:        266
Source: 
>         require(msg.sender == owner);
>         for( uint i= 1000001; i < phoenix.lastuid(); i++) {
>                      ^^^^^^^
>             if(!users[phoenix.useridmap(i)].ecoPauser) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        168
Source: 
>     function buyOptions(address _useraddress, uint _amount) public {
>         require(phoenix.isUserExists(_useraddress), "You are not a Phoenix User");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tether.allowance(msg.sender, address(this)) >= _amount,"set allowance");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        169
Source: 
>         require(phoenix.isUserExists(_useraddress), "You are not a Phoenix User");
>         require(tether.allowance(msg.sender, address(this)) >= _amount,"set allowance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        170
Source: 
>         require(tether.allowance(msg.sender, address(this)) >= _amount,"set allowance");
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tether.transferFrom(msg.sender, holdingAddress, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        170
Source: 
>         require(tether.allowance(msg.sender, address(this)) >= _amount,"set allowance");
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tether.transferFrom(msg.sender, holdingAddress, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        192
Source: 
>     function redeemEcoBalance(address _useraddress) public{ //called weekly
>         require(phoenix.isUserExists(_useraddress), "user not exists");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].ecoBalance>0, "insufficient balance");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        207
Source: 
>         if(users[_useraddress].trainingLevel >= users[_useraddress].week  && getLocktime(_useraddress) >= now){
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple )*25)/1000/fetchPrice(ecoFetchId);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[0] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        207
Source: 
>         if(users[_useraddress].trainingLevel >= users[_useraddress].week  && getLocktime(_useraddress) >= now){
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple )*25)/1000/fetchPrice(ecoFetchId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[0] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        280
Source: 
>     function getLocktime(address _useraddress) private view returns(uint){
>         return (phoenix.userLockTime(_useraddress)*30 days);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        216
Source: 
>         uint reward;   
>         reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*10)/100)/fetchPrice(ecoFetchId);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].dueReward += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        229
Source: 
>         if(users[_useraddress].options == true && getLocktime(_useraddress)>now){
>             reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*20)/100)/fetchPrice(ecoFetchId);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[2] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        229
Source: 
>         if(users[_useraddress].options == true && getLocktime(_useraddress)>now){
>             reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*20)/100)/fetchPrice(ecoFetchId);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[2] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        239
Source: 
>         if(getLocktime(_useraddress)>now) {
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple))/fetchPrice(ecoFetchId);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[1] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        239
Source: 
>         if(getLocktime(_useraddress)>now) {
>             reward = ((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple))/fetchPrice(ecoFetchId);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_useraddress].earnings[1] += reward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        249
Source: 
>         require(msg.sender == owner);
>         for( uint i= 1000001; i < phoenix.lastuid() ; i++) {
>                                   ^^^^^^^^^^^^^^^^^
>             address _address = phoenix.useridmap(i);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        250
Source: 
>         for( uint i= 1000001; i < phoenix.lastuid() ; i++) {
>             address _address = phoenix.useridmap(i);
>                                ^^^^^^^^^^^^^^^^^^^^
>             uint _lastbuy = phoenix.getLastBuyPack(_address)[1];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        251
Source: 
>             address _address = phoenix.useridmap(i);
>             uint _lastbuy = phoenix.getLastBuyPack(_address)[1];
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(!users[_address].ecoPauser && _lastbuy > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        266
Source: 
>         require(msg.sender == owner);
>         for( uint i= 1000001; i < phoenix.lastuid(); i++) {
>                                   ^^^^^^^^^^^^^^^^^
>             if(!users[phoenix.useridmap(i)].ecoPauser) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        267
Source: 
>         for( uint i= 1000001; i < phoenix.lastuid(); i++) {
>             if(!users[phoenix.useridmap(i)].ecoPauser) {
>                       ^^^^^^^^^^^^^^^^^^^^
>                 disburseReward(phoenix.useridmap(i));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        268
Source: 
>             if(!users[phoenix.useridmap(i)].ecoPauser) {
>                 disburseReward(phoenix.useridmap(i));
>                                ^^^^^^^^^^^^^^^^^^^^
>                 disburseOptions(phoenix.useridmap(i));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        269
Source: 
>                 disburseReward(phoenix.useridmap(i));
>                 disburseOptions(phoenix.useridmap(i));
>                                 ^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        275
Source: 
>     function addEco(uint _amount) public{
>         require(Eco.allowance(msg.sender,address(this)) >= _amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Eco.transferFrom(msg.sender,address(this),_amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bridgeContract
Line:        284
Source: 
>     function getECODue() public view returns(uint _ecoDue) {
>         if(totalECOBalance > Eco.balanceOf(address(this))) {
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (totalECOBalance-Eco.balanceOf(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bridgeContract
Line:        171
Source: 
>         require(phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1]) <= _amount, "invalid amount of wholesale package purchase");
>         tether.transferFrom(msg.sender, holdingAddress, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].options = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bridgeContract
Line:        194
Source: 
>         require(users[msg.sender].ecoBalance>0, "insufficient balance");
>         Eco.transfer(_useraddress, users[_useraddress].ecoBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].ecoBalance = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bridgeContract
Line:        290
Source: 
>     function fetchPrice(uint64 _fetchId) private view returns(uint){
>         return abacus.getJobResponse(_fetchId)[0];
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bridgeContract
Line:        216
Source: 
>         uint reward;   
>         reward = (((phoenix.Packs(phoenix.getLastBuyPack(_useraddress)[1])*fetchPrice(usdtFetchId) + users[_useraddress].extraPrinciple)*10)/100)/fetchPrice(ecoFetchId);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_useraddress].dueReward += reward;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bridgeContract
Line:        276
Source: 
>         require(Eco.allowance(msg.sender,address(this)) >= _amount);
>         Eco.transferFrom(msg.sender,address(this),_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bridgeContract
Line:        285
Source: 
>         if(totalECOBalance > Eco.balanceOf(address(this))) {
>             return (totalECOBalance-Eco.balanceOf(address(this)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    bridgeContract
Line:        106
Source: 
>     PhoenixTiger phoenix;
>     uint public totalECOBalance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint64 public ecoFetchId;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20Basic
Line:        4
Source: 
> contract ERC20Basic {
>     uint public _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public name;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20Basic
Line:        5
Source: 
>     uint public _totalSupply;
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20Basic
Line:        6
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public decimals;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20Basic
Line:        7
Source: 
>     string public symbol;
>     uint public decimals;
>     ^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view  returns (uint){}

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TetherToken
Line:        19
Source: 
> 
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TetherToken
Line:        20
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public decimals;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TetherToken
Line:        21
Source: 
>     string public symbol;
>     uint public decimals;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PhoenixTiger
Line:        36
Source: 
>     -----------------------------------*/
>     address public owner;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public totalGpv;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PhoenixTiger
Line:        37
Source: 
>     address public owner;
>     uint public totalGpv;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public lastuid;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PhoenixTiger
Line:        38
Source: 
>     uint public totalGpv;
>     uint public lastuid;
>     ^^^^^^^^^^^^^^^^^^^
>     /*-----------Mapping---------------

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PhoenixTiger
Line:        55
Source: 
>     
>     uint[12] public Packs;
>     ^^^^^^^^^^^^^^^^^^^^^
>     enum Status {CREATED, ACTIVE}

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    IAbacusOracle
Line:        90
Source: 
> contract IAbacusOracle{
>     uint public callFee;
>     ^^^^^^^^^^^^^^^^^^^
>     function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    bridgeContract
Line:        101
Source: 
>     address payable owner;
>     address public master;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address private holdingAddress;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    bridgeContract
Line:        172
Source: 
>         tether.transferFrom(msg.sender, holdingAddress, _amount);
>         users[_useraddress].options = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    bridgeContract
Line:        285
Source: 
>         if(totalECOBalance > Eco.balanceOf(address(this))) {
>             return (totalECOBalance-Eco.balanceOf(address(this)));
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Basic
Line:        4
Source: 
> contract ERC20Basic {
>     uint public _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     string public name;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Basic
Line:        5
Source: 
>     uint public _totalSupply;
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Basic
Line:        6
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Basic
Line:        7
Source: 
>     string public symbol;
>     uint public decimals;
>     ^^^^^^^^^^^^^^^^^^^^
>     function totalSupply() public view  returns (uint){}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TetherToken
Line:        19
Source: 
> 
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TetherToken
Line:        20
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    TetherToken
Line:        21
Source: 
>     string public symbol;
>     uint public decimals;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        36
Source: 
>     -----------------------------------*/
>     address public owner;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public totalGpv;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        37
Source: 
>     address public owner;
>     uint public totalGpv;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint public lastuid;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        38
Source: 
>     uint public totalGpv;
>     uint public lastuid;
>     ^^^^^^^^^^^^^^^^^^^
>     /*-----------Mapping---------------

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        41
Source: 
>     -----------------------------------*/
>     mapping(address => bool) public nonEcoUser;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => User) public users;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        42
Source: 
>     mapping(address => bool) public nonEcoUser;
>     mapping(address => User) public users;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) public userExist;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        43
Source: 
>     mapping(address => User) public users;
>     mapping(address => bool) public userExist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => uint) public totalCountryGpv;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        44
Source: 
>     mapping(address => bool) public userExist;
>     mapping(uint => uint) public totalCountryGpv;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint[]) private userPackages;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        45
Source: 
>     mapping(uint => uint) public totalCountryGpv;
>     mapping(address => uint[]) private userPackages;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) public orgpool;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        46
Source: 
>     mapping(address => uint[]) private userPackages;
>     mapping(address => bool) public orgpool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=> bool) public millpool;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        47
Source: 
>     mapping(address => bool) public orgpool;
>     mapping(address=> bool) public millpool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) public globalpool;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        48
Source: 
>     mapping(address=> bool) public millpool;
>     mapping(address => bool) public globalpool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=>address[]) public userDownlink;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        49
Source: 
>     mapping(address => bool) public globalpool;
>     mapping(address=>address[]) public userDownlink;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) public isRegistrar;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        50
Source: 
>     mapping(address=>address[]) public userDownlink;
>     mapping(address => bool) public isRegistrar;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address=> uint) public userLockTime;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        51
Source: 
>     mapping(address => bool) public isRegistrar;
>     mapping(address=> uint) public userLockTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address =>bool) public isCountryEli;    

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        52
Source: 
>     mapping(address=> uint) public userLockTime;
>     mapping(address =>bool) public isCountryEli;    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint => address) public useridmap;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        53
Source: 
>     mapping(address =>bool) public isCountryEli;    
>     mapping(uint => address) public useridmap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PhoenixTiger
Line:        55
Source: 
>     
>     uint[12] public Packs;
>     ^^^^^^^^^^^^^^^^^^^^^
>     enum Status {CREATED, ACTIVE}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    IAbacusOracle
Line:        90
Source: 
> contract IAbacusOracle{
>     uint public callFee;
>     ^^^^^^^^^^^^^^^^^^^
>     function getJobResponse(uint64 _jobId) public view returns(uint64[] memory _values){    }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    bridgeContract
Line:        101
Source: 
>     address payable owner;
>     address public master;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address private holdingAddress;

[0m
