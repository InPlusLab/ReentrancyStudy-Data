[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        132
Source: 
>         // solium-disable-next-line security/no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        412
Source: 
>     /// @dev Returns true if token is non-fungible
>     function isNonFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == TYPE_NF_BIT;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        417
Source: 
>     /// @dev Returns true if token is fungible
>     function isFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        422
Source: 
>     /// @dev Returns index of non-fungible token
>     function getNonFungibleIndex(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & NF_INDEX_MASK;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        427
Source: 
>     /// @dev Returns base type of non-fungible token
>     function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_MASK;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        432
Source: 
>     /// @dev Returns true if input is base-type of a non-fungible token
>     function isNonFungibleBaseType(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does not have an index.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        438
Source: 
>     /// @dev Returns true if input is a non-fungible token
>     function isNonFungibleItem(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does has an index.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        444
Source: 
>     /// @dev returns owner of a non-fungible token
>     function ownerOf(uint256 id) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nfOwners[id];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        417
Source: 
>     /// @dev Returns true if token is fungible
>     function isFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        422
Source: 
>     /// @dev Returns index of non-fungible token
>     function getNonFungibleIndex(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & NF_INDEX_MASK;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        427
Source: 
>     /// @dev Returns base type of non-fungible token
>     function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_MASK;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        432
Source: 
>     /// @dev Returns true if input is base-type of a non-fungible token
>     function isNonFungibleBaseType(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does not have an index.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        444
Source: 
>     /// @dev returns owner of a non-fungible token
>     function ownerOf(uint256 id) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nfOwners[id];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        422
Source: 
>     /// @dev Returns index of non-fungible token
>     function getNonFungibleIndex(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & NF_INDEX_MASK;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        427
Source: 
>     /// @dev Returns base type of non-fungible token
>     function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_MASK;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        432
Source: 
>     /// @dev Returns true if input is base-type of a non-fungible token
>     function isNonFungibleBaseType(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does not have an index.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        444
Source: 
>     /// @dev returns owner of a non-fungible token
>     function ownerOf(uint256 id) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nfOwners[id];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        926
Source: 
> 
>     function transferOwnership(address newOwner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        422
Source: 
>     /// @dev Returns index of non-fungible token
>     function getNonFungibleIndex(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & NF_INDEX_MASK;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        427
Source: 
>     /// @dev Returns base type of non-fungible token
>     function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_MASK;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        432
Source: 
>     /// @dev Returns true if input is base-type of a non-fungible token
>     function isNonFungibleBaseType(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does not have an index.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        444
Source: 
>     /// @dev returns owner of a non-fungible token
>     function ownerOf(uint256 id) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nfOwners[id];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        926
Source: 
> 
>     function transferOwnership(address newOwner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC1155Mintable
Line:        832
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC1155Mintable
Line:        881
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC1155Mintable
Line:        832
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC1155Mintable
Line:        881
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC1155Mintable
Line:        796
Source: 
>     /// @param quantities amounts of minted tokens
>     function mintFungible(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 id,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        412
Source: 
>     /// @dev Returns true if token is non-fungible
>     function isNonFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == TYPE_NF_BIT;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        417
Source: 
>     /// @dev Returns true if token is fungible
>     function isFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        422
Source: 
>     /// @dev Returns index of non-fungible token
>     function getNonFungibleIndex(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & NF_INDEX_MASK;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        427
Source: 
>     /// @dev Returns base type of non-fungible token
>     function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_MASK;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        432
Source: 
>     /// @dev Returns true if input is base-type of a non-fungible token
>     function isNonFungibleBaseType(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does not have an index.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        438
Source: 
>     /// @dev Returns true if input is a non-fungible token
>     function isNonFungibleItem(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does has an index.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        444
Source: 
>     /// @dev returns owner of a non-fungible token
>     function ownerOf(uint256 id) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nfOwners[id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        412
Source: 
>     /// @dev Returns true if token is non-fungible
>     function isNonFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == TYPE_NF_BIT;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        417
Source: 
>     /// @dev Returns true if token is fungible
>     function isFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        422
Source: 
>     /// @dev Returns index of non-fungible token
>     function getNonFungibleIndex(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & NF_INDEX_MASK;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        427
Source: 
>     /// @dev Returns base type of non-fungible token
>     function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_MASK;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        432
Source: 
>     /// @dev Returns true if input is base-type of a non-fungible token
>     function isNonFungibleBaseType(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does not have an index.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        438
Source: 
>     /// @dev Returns true if input is a non-fungible token
>     function isNonFungibleItem(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does has an index.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        444
Source: 
>     /// @dev returns owner of a non-fungible token
>     function ownerOf(uint256 id) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nfOwners[id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        480
Source: 
>     /// @param data    Additional data with no specified format, sent in call to `_to`
>     function safeTransferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        551
Source: 
>     /// @param data    Additional data with no specified format, sent in call to `_to`
>     function safeBatchTransferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        620
Source: 
>     /// @param approved  True if the operator is approved, false to revoke approval
>     function setApprovalForAll(address operator, bool approved) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operatorApproval[msg.sender][operator] = approved;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        629
Source: 
>     /// @return           True if the operator is approved, false if not
>     function isApprovedForAll(address owner, address operator) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return operatorApproval[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        412
Source: 
>     /// @dev Returns true if token is non-fungible
>     function isNonFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == TYPE_NF_BIT;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        417
Source: 
>     /// @dev Returns true if token is fungible
>     function isFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        422
Source: 
>     /// @dev Returns index of non-fungible token
>     function getNonFungibleIndex(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & NF_INDEX_MASK;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        427
Source: 
>     /// @dev Returns base type of non-fungible token
>     function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_MASK;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        432
Source: 
>     /// @dev Returns true if input is base-type of a non-fungible token
>     function isNonFungibleBaseType(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does not have an index.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        438
Source: 
>     /// @dev Returns true if input is a non-fungible token
>     function isNonFungibleItem(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does has an index.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        444
Source: 
>     /// @dev returns owner of a non-fungible token
>     function ownerOf(uint256 id) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nfOwners[id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        480
Source: 
>     /// @param data    Additional data with no specified format, sent in call to `_to`
>     function safeTransferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        551
Source: 
>     /// @param data    Additional data with no specified format, sent in call to `_to`
>     function safeBatchTransferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        620
Source: 
>     /// @param approved  True if the operator is approved, false to revoke approval
>     function setApprovalForAll(address operator, bool approved) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operatorApproval[msg.sender][operator] = approved;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        629
Source: 
>     /// @return           True if the operator is approved, false if not
>     function isApprovedForAll(address owner, address operator) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return operatorApproval[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155Mintable
Line:        734
Source: 
>     /// @return type_ of token (a unique identifier)
>     function create(
>     ^^^^^^^^^^^^^^^^
>         string calldata uri,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155Mintable
Line:        769
Source: 
>     /// @param uri URI of token
>     function createWithType(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 type_,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        412
Source: 
>     /// @dev Returns true if token is non-fungible
>     function isNonFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == TYPE_NF_BIT;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        417
Source: 
>     /// @dev Returns true if token is fungible
>     function isFungible(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_NF_BIT == 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        422
Source: 
>     /// @dev Returns index of non-fungible token
>     function getNonFungibleIndex(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & NF_INDEX_MASK;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        427
Source: 
>     /// @dev Returns base type of non-fungible token
>     function getNonFungibleBaseType(uint256 id) public pure returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return id & TYPE_MASK;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        432
Source: 
>     /// @dev Returns true if input is base-type of a non-fungible token
>     function isNonFungibleBaseType(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does not have an index.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        438
Source: 
>     /// @dev Returns true if input is a non-fungible token
>     function isNonFungibleItem(uint256 id) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // A base type has the NF bit but does has an index.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MixinNonFungibleToken
Line:        444
Source: 
>     /// @dev returns owner of a non-fungible token
>     function ownerOf(uint256 id) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return nfOwners[id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        480
Source: 
>     /// @param data    Additional data with no specified format, sent in call to `_to`
>     function safeTransferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        551
Source: 
>     /// @param data    Additional data with no specified format, sent in call to `_to`
>     function safeBatchTransferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        620
Source: 
>     /// @param approved  True if the operator is approved, false to revoke approval
>     function setApprovalForAll(address operator, bool approved) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operatorApproval[msg.sender][operator] = approved;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155
Line:        629
Source: 
>     /// @return           True if the operator is approved, false if not
>     function isApprovedForAll(address owner, address operator) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return operatorApproval[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155Mintable
Line:        734
Source: 
>     /// @return type_ of token (a unique identifier)
>     function create(
>     ^^^^^^^^^^^^^^^^
>         string calldata uri,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC1155Mintable
Line:        769
Source: 
>     /// @param uri URI of token
>     function createWithType(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 type_,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VotedToken
Line:        944
Source: 
>     /// @return type_ of token (a unique identifier)
>     function create(
>     ^^^^^^^^^^^^^^^^
>         string calldata uri,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VotedToken
Line:        980
Source: 
>     /// @param uri URI of token
>     function createWithType(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 type_,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC1155Mintable
Line:        881
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ERC1155Mintable
Line:        881
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC1155Mintable
Line:        725
Source: 
>     /// asserts token is owned by msg.sender
>     modifier creatorOnly(uint256 _id) {
>                          ^^^^^^^^^^^
>         require(creators[_id] == msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155Mintable
Line:        832
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155Mintable
Line:        881
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        522
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155Received(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155
Line:        602
Source: 
>         if (to.isContract()) {
>             bytes4 callbackReturnValue = IERC1155Receiver(to).onERC1155BatchReceived(
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155Mintable
Line:        832
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC1155Mintable
Line:        881
Source: 
>             if (dst.isContract()) {
>                 bytes4 callbackReturnValue = IERC1155Receiver(dst).onERC1155Received(
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     msg.sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        133
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC1155Mintable
Line:        716
Source: 
>     /// token nonce
>     uint256 internal nonce;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC1155Mintable
Line:        742
Source: 
>         // Store the type in the upper 128 bits
>         type_ = (++nonce << 128);
>                  ^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155
Line:        621
Source: 
>     function setApprovalForAll(address operator, bool approved) external {
>         operatorApproval[msg.sender][operator] = approved;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ApprovalForAll(msg.sender, operator, approved);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155Mintable
Line:        742
Source: 
>         // Store the type in the upper 128 bits
>         type_ = (++nonce << 128);
>                  ^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155Mintable
Line:        750
Source: 
>         // This will allow restricted access to creators.
>         creators[type_] = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155Mintable
Line:        776
Source: 
>         // This will allow restricted access to creators.
>         creators[type_] = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155
Line:        621
Source: 
>     function setApprovalForAll(address operator, bool approved) external {
>         operatorApproval[msg.sender][operator] = approved;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ApprovalForAll(msg.sender, operator, approved);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155Mintable
Line:        750
Source: 
>         // This will allow restricted access to creators.
>         creators[type_] = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC1155Mintable
Line:        776
Source: 
>         // This will allow restricted access to creators.
>         creators[type_] = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
