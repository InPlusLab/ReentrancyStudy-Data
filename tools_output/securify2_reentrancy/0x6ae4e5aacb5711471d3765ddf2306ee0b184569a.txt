Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    VestingVault
Line:        533
Source: 
> 
>         token.transfer(beneficiary, transferable);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit NewRelease(beneficiary, transferable);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        29
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == owner);
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    VestingVault
Line:        426
Source: 
>         // make sure a single address can be granted tokens only once.
>         require(grants[_to].value == 0, "Already added to vesting vault");
>                 ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    VestingVault
Line:        470
Source: 
> 
>         if (grantInfo.value == 0) {
>             ^^^^^^^^^^^^^^^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    VestingVault
Line:        486
Source: 
> 
>         if (_grant.level == 1) {
>             ^^^^^^^^^^^^^^^^^
>             if (_time < _grant.vestingCliff.add(_grant.vestingStart)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        58
Source: 
>     // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
>     if (_a == 0) {
>         ^^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        63
Source: 
>     uint256 c = _a * _b;
>     require(c / _a == _b);
>             ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        29
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == owner);
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        37
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        160
Source: 
>      */
>     function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0), "Address should not be zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        174
Source: 
>      */
>     function finishMinting() public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!mintingFinished);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        185
Source: 
>      */
>     function startMinting() public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(mintingFinished);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        197
Source: 
>     */
>     function transfer(address _to, uint256 _value) public canTransfer returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0), "Address should not be zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        214
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _value) public canTransfer returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0), "Address should not be zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        236
Source: 
>      */
>     function approve(address _spender, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        248
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        258
Source: 
>      */
>     function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        272
Source: 
>      */
>     function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint oldValue = allowed[msg.sender][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        288
Source: 
>      */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        296
Source: 
>      */
>     function burn(uint _burnAmount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_burnAmount <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        309
Source: 
>      */
>     function revoke(address _from, uint256 _value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balances[_from]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        325
Source: 
>      */
>     function freeze() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!frozen);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsToken
Line:        334
Source: 
>      */
>     function unfreeze() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(frozen);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        37
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        392
Source: 
>      */
>     function returnVestedAddresses() public view returns (address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return vestedAddresses;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        399
Source: 
>      */
>     function returnGrantInfo(address _user)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public view returns (uint, uint, uint, uint, uint[] memory, uint[] memory, uint, uint) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        420
Source: 
>      */
>     function grant(
>     ^^^^^^^^^^^^^^^
>         address _to, uint _value, uint _start, uint _duration, uint _cliff, uint[] memory _scheduleTimes,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        467
Source: 
>      */
>     function transferableTokens(address _holder, uint256 _time) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Grant storage grantInfo = grants[_holder];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        518
Source: 
>      */
>     function claim() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address beneficiary = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        540
Source: 
>      */
>     function revokeTokens(address _from, uint _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // finally transfer all remaining tokens to owner

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        560
Source: 
>      */
>     function burnRemainingTokens() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // finally burn all remaining tokens to owner

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        571
Source: 
>      */
>     function withdraw() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // finally withdraw all remaining tokens to owner

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    VestingVault
Line:        582
Source: 
>      */
>     function lockVault() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // finally lock vault

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        37
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        633
Source: 
>      */
>     function allocNormalUser(address _to, uint _value) public onlyOwner isAllowed {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.mint(_to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        649
Source: 
>      */
>     function allocVestedUser(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to, uint _value, uint _start, uint _duration, uint _cliff, uint[] memory _scheduleTimes,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        662
Source: 
>      */
>     function allocNormalUsers(address[] memory _holders, uint[] memory _amounts) public onlyOwner isAllowed {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_holders.length > 0, "Empty holder addresses");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        674
Source: 
>      */
>     function revokeTokensFromVestedUser(address _from, uint _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vestingVault.revokeTokens(_from, _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        682
Source: 
>      */
>     function transferBackTokenOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transferOwnership(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        689
Source: 
>      */
>     function transferBackVestingVaultOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vestingVault.transferOwnership(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        696
Source: 
>      */
>     function finalize() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.finishMinting();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VestingVault
Line:        528
Source: 
>         require(transferable > 0, "There is no remaining balance for this address");
>         require(token.balanceOf(address(this)) >= transferable, "Contract Balance is insufficient");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VestingVault
Line:        533
Source: 
> 
>         token.transfer(beneficiary, transferable);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit NewRelease(beneficiary, transferable);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VestingVault
Line:        548
Source: 
>         require(revocable >= _amount, "Revocable balance is insufficient");
>         require(token.balanceOf(address(this)) >= _amount, "Contract Balance is insufficient");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VestingVault
Line:        553
Source: 
> 
>         token.burn(_amount);
>         ^^^^^^^^^^^^^^^^^^^
>         emit BurnTokens(_amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VestingVault
Line:        562
Source: 
>         // finally burn all remaining tokens to owner
>         uint amount = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VestingVault
Line:        564
Source: 
> 
>         token.burn(amount);
>         ^^^^^^^^^^^^^^^^^^
>         emit BurnTokens(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VestingVault
Line:        573
Source: 
>         // finally withdraw all remaining tokens to owner
>         uint amount = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(owner, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    VestingVault
Line:        574
Source: 
>         uint amount = token.balanceOf(address(this));
>         token.transfer(owner, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        634
Source: 
>     function allocNormalUser(address _to, uint _value) public onlyOwner isAllowed {
>         token.mint(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenMinted(_to, _value, "Allocated Tokens To User");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        652
Source: 
>         uint[] memory _scheduleValues, uint _level) public onlyOwner isAllowed {
>         _value = vestingVault.grant(_to, _value, _start, _duration, _cliff, _scheduleTimes, _scheduleValues, _level);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.mint(address(vestingVault), _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        653
Source: 
>         _value = vestingVault.grant(_to, _value, _start, _duration, _cliff, _scheduleTimes, _scheduleValues, _level);
>         token.mint(address(vestingVault), _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenMinted(_to, _value, "Allocated Vested Tokens To User");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        675
Source: 
>     function revokeTokensFromVestedUser(address _from, uint _amount) public onlyOwner {
>         vestingVault.revokeTokens(_from, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RevokeTokens(_from, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        683
Source: 
>     function transferBackTokenOwnership() public onlyOwner {
>         token.transferOwnership(owner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        690
Source: 
>     function transferBackVestingVaultOwnership() public onlyOwner {
>         vestingVault.transferOwnership(owner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        697
Source: 
>     function finalize() public onlyOwner {
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         finished = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        666
Source: 
>         for (uint i = 0; i < _holders.length; i++) {
>             token.mint(_holders[i], _amounts[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit TokenMinted(_holders[i], _amounts[i], "Allocated Tokens To Users");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsToken
Line:        160
Source: 
>      */
>     function mint(address _to, uint256 _amount) public onlyOwner canMint returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0), "Address should not be zero");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsToken
Line:        258
Source: 
>      */
>     function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VestingVault
Line:        467
Source: 
>      */
>     function transferableTokens(address _holder, uint256 _time) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Grant storage grantInfo = grants[_holder];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        633
Source: 
>      */
>     function allocNormalUser(address _to, uint _value) public onlyOwner isAllowed {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.mint(_to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        662
Source: 
>      */
>     function allocNormalUsers(address[] memory _holders, uint[] memory _amounts) public onlyOwner isAllowed {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_holders.length > 0, "Empty holder addresses");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        674
Source: 
>      */
>     function revokeTokensFromVestedUser(address _from, uint _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vestingVault.revokeTokens(_from, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsToken
Line:        236
Source: 
>      */
>     function approve(address _spender, uint256 _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsToken
Line:        248
Source: 
>      */
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsToken
Line:        288
Source: 
>      */
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VestingVault
Line:        420
Source: 
>      */
>     function grant(
>     ^^^^^^^^^^^^^^^
>         address _to, uint _value, uint _start, uint _duration, uint _cliff, uint[] memory _scheduleTimes,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        649
Source: 
>      */
>     function allocVestedUser(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to, uint _value, uint _start, uint _duration, uint _cliff, uint[] memory _scheduleTimes,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        62
Source: 
> 
>     uint256 c = _a * _b;
>                 ^^^^^^^
>     require(c / _a == _b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VestingVault
Line:        528
Source: 
>         require(transferable > 0, "There is no remaining balance for this address");
>         require(token.balanceOf(address(this)) >= transferable, "Contract Balance is insufficient");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VestingVault
Line:        533
Source: 
> 
>         token.transfer(beneficiary, transferable);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit NewRelease(beneficiary, transferable);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VestingVault
Line:        548
Source: 
>         require(revocable >= _amount, "Revocable balance is insufficient");
>         require(token.balanceOf(address(this)) >= _amount, "Contract Balance is insufficient");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    VestingVault
Line:        553
Source: 
> 
>         token.burn(_amount);
>         ^^^^^^^^^^^^^^^^^^^
>         emit BurnTokens(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        697
Source: 
>     function finalize() public onlyOwner {
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         finished = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    VestingVault
Line:        402
Source: 
>         require(_user != address(0), "Address should not be zero");
>         Grant storage grant = grants[_user];
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsToken
Line:        117
Source: 
> 
>     string public constant symbol = 'RWRD';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant name = 'Rewards Cash';

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsToken
Line:        118
Source: 
>     string public constant symbol = 'RWRD';
>     string public constant name = 'Rewards Cash';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsToken
Line:        119
Source: 
>     string public constant name = 'Rewards Cash';
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsToken
Line:        121
Source: 
> 
>     uint256 public constant hardCap = 5 * (10 ** (18 + 8)); //500MM tokens. Max amount of tokens which can be minte10
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RewardsToken
Line:        127
Source: 
> 
>     mapping(address => uint256) balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping(address => uint256)) internal allowed;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VestingVault
Line:        528
Source: 
>         require(transferable > 0, "There is no remaining balance for this address");
>         require(token.balanceOf(address(this)) >= transferable, "Contract Balance is insufficient");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VestingVault
Line:        548
Source: 
>         require(revocable >= _amount, "Revocable balance is insufficient");
>         require(token.balanceOf(address(this)) >= _amount, "Contract Balance is insufficient");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VestingVault
Line:        562
Source: 
>         // finally burn all remaining tokens to owner
>         uint amount = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VestingVault
Line:        573
Source: 
>         // finally withdraw all remaining tokens to owner
>         uint amount = token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(owner, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RewardsTokenDistribution
Line:        652
Source: 
>         uint[] memory _scheduleValues, uint _level) public onlyOwner isAllowed {
>         _value = vestingVault.grant(_to, _value, _start, _duration, _cliff, _scheduleTimes, _scheduleValues, _level);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.mint(address(vestingVault), _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VestingVault
Line:        533
Source: 
> 
>         token.transfer(beneficiary, transferable);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit NewRelease(beneficiary, transferable);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VestingVault
Line:        553
Source: 
> 
>         token.burn(_amount);
>         ^^^^^^^^^^^^^^^^^^^
>         emit BurnTokens(_amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VestingVault
Line:        564
Source: 
> 
>         token.burn(amount);
>         ^^^^^^^^^^^^^^^^^^
>         emit BurnTokens(amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VestingVault
Line:        574
Source: 
>         uint amount = token.balanceOf(address(this));
>         token.transfer(owner, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        634
Source: 
>     function allocNormalUser(address _to, uint _value) public onlyOwner isAllowed {
>         token.mint(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenMinted(_to, _value, "Allocated Tokens To User");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        653
Source: 
>         _value = vestingVault.grant(_to, _value, _start, _duration, _cliff, _scheduleTimes, _scheduleValues, _level);
>         token.mint(address(vestingVault), _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenMinted(_to, _value, "Allocated Vested Tokens To User");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        666
Source: 
>         for (uint i = 0; i < _holders.length; i++) {
>             token.mint(_holders[i], _amounts[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit TokenMinted(_holders[i], _amounts[i], "Allocated Tokens To Users");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        675
Source: 
>     function revokeTokensFromVestedUser(address _from, uint _amount) public onlyOwner {
>         vestingVault.revokeTokens(_from, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit RevokeTokens(_from, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        683
Source: 
>     function transferBackTokenOwnership() public onlyOwner {
>         token.transferOwnership(owner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        690
Source: 
>     function transferBackVestingVaultOwnership() public onlyOwner {
>         vestingVault.transferOwnership(owner);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        697
Source: 
>     function finalize() public onlyOwner {
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         finished = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RewardsToken
Line:        122
Source: 
>     uint256 public constant hardCap = 5 * (10 ** (18 + 8)); //500MM tokens. Max amount of tokens which can be minte10
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    VestingVault
Line:        365
Source: 
> 
>     uint public totalVestedTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // array of vested users addresses

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RewardsToken
Line:        237
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool) {
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RewardsToken
Line:        259
Source: 
>     function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {
>         allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VestingVault
Line:        533
Source: 
> 
>         token.transfer(beneficiary, transferable);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit NewRelease(beneficiary, transferable);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VestingVault
Line:        574
Source: 
>         uint amount = token.balanceOf(address(this));
>         token.transfer(owner, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        634
Source: 
>     function allocNormalUser(address _to, uint _value) public onlyOwner isAllowed {
>         token.mint(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenMinted(_to, _value, "Allocated Tokens To User");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        653
Source: 
>         _value = vestingVault.grant(_to, _value, _start, _duration, _cliff, _scheduleTimes, _scheduleValues, _level);
>         token.mint(address(vestingVault), _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenMinted(_to, _value, "Allocated Vested Tokens To User");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        666
Source: 
>         for (uint i = 0; i < _holders.length; i++) {
>             token.mint(_holders[i], _amounts[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit TokenMinted(_holders[i], _amounts[i], "Allocated Tokens To Users");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RewardsTokenDistribution
Line:        697
Source: 
>     function finalize() public onlyOwner {
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         finished = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RewardsToken
Line:        117
Source: 
> 
>     string public constant symbol = 'RWRD';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant name = 'Rewards Cash';

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RewardsToken
Line:        118
Source: 
>     string public constant symbol = 'RWRD';
>     string public constant name = 'Rewards Cash';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RewardsToken
Line:        119
Source: 
>     string public constant name = 'Rewards Cash';
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
