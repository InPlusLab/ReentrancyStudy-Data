Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibNote
Line:        35
Source: 
>         _;
>         assembly {
>         ^^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Pot
Line:        135
Source: 
>     function rpow(uint x, uint n, uint base) internal pure returns (uint z) {
>         assembly {
>         ^^^^^^^^^^
>             switch x case 0 {switch n case 0 {z := base} default {z := 0}}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Pot
Line:        177
Source: 
>         require(live == 1, "Pot/not-live");
>         require(now == rho, "Pot/rho-not-updated");
>                 ^^^^^^^^^^
>         if (what == "dsr") dsr = data;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Pot
Line:        204
Source: 
>     function join(uint wad) external note {
>         require(now == rho, "Pot/rho-not-updated");
>                 ^^^^^^^^^^
>         pie[msg.sender] = add(pie[msg.sender], wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Pot
Line:        182
Source: 
> 
>     function file(bytes32 what, address addr) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "vow") vow = addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pot
Line:        102
Source: 
>     mapping (address => uint) public wards;
>     function rely(address guy) external note auth { wards[guy] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address guy) external note auth { wards[guy] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pot
Line:        103
Source: 
>     function rely(address guy) external note auth { wards[guy] = 1; }
>     function deny(address guy) external note auth { wards[guy] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pot
Line:        175
Source: 
>     // --- Administration ---
>     function file(bytes32 what, uint256 data) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "Pot/not-live");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pot
Line:        203
Source: 
>     // --- Savings Dai Management ---
>     function join(uint wad) external note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now == rho, "Pot/rho-not-updated");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pot
Line:        210
Source: 
> 
>     function exit(uint wad) external note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pie[msg.sender] = sub(pie[msg.sender], wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Pot
Line:        171
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Pot
Line:        199
Source: 
>         rho = now;
>         vat.suck(address(vow), address(this), mul(Pie, chi_));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Pot
Line:        112
Source: 
> 
>     uint256 public Pie;  // total Savings Dai
>     ^^^^^^^^^^^^^^^^^^
>     uint256 public dsr;  // the Dai Savings Rate

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Pot
Line:        133
Source: 
>     // --- Math ---
>     uint256 constant ONE = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function rpow(uint x, uint n, uint base) internal pure returns (uint z) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pot
Line:        199
Source: 
>         rho = now;
>         vat.suck(address(vow), address(this), mul(Pie, chi_));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pot
Line:        207
Source: 
>         Pie             = add(Pie,             wad);
>         vat.move(msg.sender, address(this), mul(chi, wad));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pot
Line:        213
Source: 
>         Pie             = sub(Pie,             wad);
>         vat.move(address(this), msg.sender, mul(chi, wad));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Pot
Line:        163
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Pot
Line:        167
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Pot
Line:        171
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pot
Line:        112
Source: 
> 
>     uint256 public Pie;  // total Savings Dai
>     ^^^^^^^^^^^^^^^^^^
>     uint256 public dsr;  // the Dai Savings Rate

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pot
Line:        117
Source: 
>     VatLike public vat;  // CDP engine
>     address public vow;  // debt engine
>     ^^^^^^^^^^^^^^^^^^
>     uint256 public rho;  // time of last drip

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Pot
Line:        197
Source: 
>         uint chi_ = sub(tmp, chi);
>         chi = tmp;
>         ^^^^^^^^^
>         rho = now;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Pot
Line:        198
Source: 
>         chi = tmp;
>         rho = now;
>         ^^^^^^^^^
>         vat.suck(address(vow), address(this), mul(Pie, chi_));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Pot
Line:        206
Source: 
>         pie[msg.sender] = add(pie[msg.sender], wad);
>         Pie             = add(Pie,             wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vat.move(msg.sender, address(this), mul(chi, wad));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Pot
Line:        212
Source: 
>         pie[msg.sender] = sub(pie[msg.sender], wad);
>         Pie             = sub(Pie,             wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vat.move(address(this), msg.sender, mul(chi, wad));

[0m
