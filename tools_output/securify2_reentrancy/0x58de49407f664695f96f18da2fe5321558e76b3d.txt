Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        430
Source: 
> 
>         uint256 requestDaiAmount = _cadOracle
>                                    ^^^^^^^^^^
>             .cadToDai(tokenAmount.mul(_fixedPriceCADCent))

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        437
Source: 
> 
>         _wToken.transferFrom(msg.sender, _poolSource, tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _daiContract.transfer(msg.sender, requestDaiAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        438
Source: 
>         _wToken.transferFrom(msg.sender, _poolSource, tokenAmount);
>         _daiContract.transfer(msg.sender, requestDaiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        523
Source: 
>     function fundsAvailable() public view virtual override returns (uint256) {
>         return _daiContract.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        455
Source: 
> 
>         _wToken.transferFrom(msg.sender, address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        494
Source: 
>         if (newIndex == requestLength && daiAmountRemaining > 0) {
>             _daiContract.transferFrom(msg.sender, address(this), daiAmountRemaining);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Capitalized(daiAmountRemaining);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        511
Source: 
> 
>         _daiContract.transfer(_poolSource, daiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        531
Source: 
>     function maxTokenForInstantRedemption() external view virtual override returns (uint256) {
>         return _cadOracle
>                ^^^^^^^^^^
>             .daiToCad(fundsAvailable().mul(100))

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        475
Source: 
> 
>             uint256 requestDaiAmount = _cadOracle
>                                        ^^^^^^^^^^
>                 .cadToDai(request.tokenAmount.mul(_fixedPriceCADCent))

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        487
Source: 
>             _wToken.transfer(_poolSource, request.tokenAmount);
>             _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Conflict
Contract:    ManagedAsyncDaiRedemptionPool
Line:        486
Source: 
> 
>             _wToken.transfer(_poolSource, request.tokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        542
Source: 
>     */
>     function tokensPending(address account) external view virtual override returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 pendingAmount = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        508
Source: 
>     */
>     function withdrawReserve(uint256 daiAmount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _poolSource, "Only designated source can withdraw reserves");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        562
Source: 
>     */
>     function requestAtIndex(uint256 index) external view returns (address, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AsyncRedemptionRequest storage request = _asyncRequests[index];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        475
Source: 
> 
>             uint256 requestDaiAmount = _cadOracle
>                                        ^^^^^^^^^^
>                 .cadToDai(request.tokenAmount.mul(_fixedPriceCADCent))

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        494
Source: 
>         if (newIndex == requestLength && daiAmountRemaining > 0) {
>             _daiContract.transferFrom(msg.sender, address(this), daiAmountRemaining);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Capitalized(daiAmountRemaining);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        486
Source: 
> 
>             _wToken.transfer(_poolSource, request.tokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        487
Source: 
>             _wToken.transfer(_poolSource, request.tokenAmount);
>             _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        372
Source: 
>     // source where the Dai comes from
>     address public _poolSource;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        375
Source: 
>     // address of the wToken
>     IERC20 public _wToken;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        378
Source: 
>     // address of the USD to CAD oracle
>     ICADConversionOracle public _cadOracle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        381
Source: 
>     // wTokens, if fix-priced in CAD, will not require more than 2 decimals
>     uint256 public _fixedPriceCADCent;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        384
Source: 
>     // Dai contract
>     IERC20 public _daiContract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        402
Source: 
>     // index of the first un-fulfilled async redemption request
>     uint256 public _asyncIndex = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        430
Source: 
> 
>         uint256 requestDaiAmount = _cadOracle
>                                    ^^^^^^^^^^
>             .cadToDai(tokenAmount.mul(_fixedPriceCADCent))

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        437
Source: 
> 
>         _wToken.transferFrom(msg.sender, _poolSource, tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _daiContract.transfer(msg.sender, requestDaiAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        438
Source: 
>         _wToken.transferFrom(msg.sender, _poolSource, tokenAmount);
>         _daiContract.transfer(msg.sender, requestDaiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        523
Source: 
>     function fundsAvailable() public view virtual override returns (uint256) {
>         return _daiContract.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        455
Source: 
> 
>         _wToken.transferFrom(msg.sender, address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        475
Source: 
> 
>             uint256 requestDaiAmount = _cadOracle
>                                        ^^^^^^^^^^
>                 .cadToDai(request.tokenAmount.mul(_fixedPriceCADCent))

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        494
Source: 
>         if (newIndex == requestLength && daiAmountRemaining > 0) {
>             _daiContract.transferFrom(msg.sender, address(this), daiAmountRemaining);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Capitalized(daiAmountRemaining);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        486
Source: 
> 
>             _wToken.transfer(_poolSource, request.tokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        487
Source: 
>             _wToken.transfer(_poolSource, request.tokenAmount);
>             _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        511
Source: 
> 
>         _daiContract.transfer(_poolSource, daiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        531
Source: 
>     function maxTokenForInstantRedemption() external view virtual override returns (uint256) {
>         return _cadOracle
>                ^^^^^^^^^^
>             .daiToCad(fundsAvailable().mul(100))

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ManagedAsyncDaiRedemptionPool
Line:        499
Source: 
>         // update redemption index to the latest
>         _asyncIndex = newIndex;
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        453
Source: 
>         AsyncRedemptionRequest memory newRequest = AsyncRedemptionRequest(msg.sender, tokenAmount);
>         _asyncRequests.push(newRequest);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        437
Source: 
> 
>         _wToken.transferFrom(msg.sender, _poolSource, tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _daiContract.transfer(msg.sender, requestDaiAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        438
Source: 
>         _wToken.transferFrom(msg.sender, _poolSource, tokenAmount);
>         _daiContract.transfer(msg.sender, requestDaiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        455
Source: 
> 
>         _wToken.transferFrom(msg.sender, address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        494
Source: 
>         if (newIndex == requestLength && daiAmountRemaining > 0) {
>             _daiContract.transferFrom(msg.sender, address(this), daiAmountRemaining);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Capitalized(daiAmountRemaining);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        486
Source: 
> 
>             _wToken.transfer(_poolSource, request.tokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        487
Source: 
>             _wToken.transfer(_poolSource, request.tokenAmount);
>             _daiContract.transferFrom(msg.sender, request.account, requestDaiAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ManagedAsyncDaiRedemptionPool
Line:        511
Source: 
> 
>         _daiContract.transfer(_poolSource, daiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
