[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ASP
Line:        233
Source: 
> 	
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ASP
Line:        255
Source: 
>     
> 	 function tokenconfigs(address _axiatoken) public onlyCreator returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Axiatoken = _axiatoken;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ASP
Line:        260
Source: 
> 	
> 	function _minStakeAmount(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ASP
Line:        266
Source: 
>     
>     function stakingStatus(bool _status) public onlyCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(Axiatoken != address(0), "Pool address is not yet setup");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ASP
Line:        271
Source: 
>     
>     function unstakeburnrate(uint _rate) public onlyCreator returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         UNSTAKE_FEE = _rate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ASP
Line:        277
Source: 
>     
>     function MIN_DIVIDENDS_DUR_TIME(uint256 _minDuration) public onlyCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ASP
Line:        312
Source: 
> 
> 	function userData(address _user) public view 
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	returns (uint256 totalTokensFrozen, uint256 userFrozen, 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ASP
Line:        255
Source: 
>     
> 	 function tokenconfigs(address _axiatoken) public onlyCreator returns (bool success) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Axiatoken = _axiatoken;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ASP
Line:        260
Source: 
> 	
> 	function _minStakeAmount(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ASP
Line:        266
Source: 
>     
>     function stakingStatus(bool _status) public onlyCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(Axiatoken != address(0), "Pool address is not yet setup");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ASP
Line:        271
Source: 
>     
>     function unstakeburnrate(uint _rate) public onlyCreator returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         UNSTAKE_FEE = _rate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ASP
Line:        277
Source: 
>     
>     function MIN_DIVIDENDS_DUR_TIME(uint256 _minDuration) public onlyCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ASP
Line:        284
Source: 
> 
> 	function StakeAxiaTokens(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_stake(_tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ASP
Line:        288
Source: 
>     
>     function UnstakeAxiaTokens(uint256 _tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_unstake(_tokens);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ASP
Line:        312
Source: 
> 
> 	function userData(address _user) public view 
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	returns (uint256 totalTokensFrozen, uint256 userFrozen, 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ASP
Line:        298
Source: 
> 	
>     function frozenOf(address _user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return info.users[_user].frozen;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ASP
Line:        386
Source: 
> 		
> 	function scaledToken(uint _amount) external onlyAxiaToken returns(bool){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        375
Source: 
> 		require(_dividends >= 0, "you do not have any dividend yet");
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        404
Source: 
>               l /= pow2;
>               l += h * ((-pow2) / pow2 + 1);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>               uint r = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        406
Source: 
>               uint r = 1;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        406
Source: 
>               uint r = 1;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        407
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        407
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        408
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        408
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        409
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        409
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        410
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        410
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        411
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        411
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        412
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        412
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        413
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>                        ^^^^^
>               return l * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        413
Source: 
>               r *= 2 - z * r;
>               r *= 2 - z * r;
>               ^^^^^^^^^^^^^^
>               return l * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        414
Source: 
>               r *= 2 - z * r;
>               return l * r;
>                      ^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ASP
Line:        419
Source: 
>               uint mm = mulmod (x, y, uint (-1));
>               l = x * y;
>                   ^^^^^
>               h = mm - l;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ASP
Line:        355
Source: 
> 		
> 		require(IERC20(Axiatoken).transfer(msg.sender, actualValue), "Transaction failed");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit UnstakeEvent(address(this), msg.sender, actualValue);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ASP
Line:        359
Source: 
> 		
> 		require(IERC20(Axiatoken).transfer(address(0x0), _burnedAmount), "Transaction failed");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  		IERC20(Axiatoken).supplyeffect(_burnedAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ASP
Line:        360
Source: 
> 		require(IERC20(Axiatoken).transfer(address(0x0), _burnedAmount), "Transaction failed");
>  		IERC20(Axiatoken).supplyeffect(_burnedAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  		

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        206
Source: 
>     //======================================STAKING POOL=========================================//
>     address public Axiatoken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        211
Source: 
>     uint256 constant private FLOAT_SCALAR = 2**64;
>     uint256 public MINIMUM_STAKE = 1000000000000000000; // 1000 AXIA Tokens
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public MIN_DIVIDENDS_DUR = 18 hours;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        212
Source: 
>     uint256 public MINIMUM_STAKE = 1000000000000000000; // 1000 AXIA Tokens
> 	uint256 public MIN_DIVIDENDS_DUR = 18 hours;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 private  UNSTAKE_FEE = 1; //1% burns when you unstake

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        213
Source: 
> 	uint256 public MIN_DIVIDENDS_DUR = 18 hours;
> 	uint256 private  UNSTAKE_FEE = 1; //1% burns when you unstake
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public infocheck;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        260
Source: 
> 	
> 	function _minStakeAmount(uint256 _number) onlyCreator public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        277
Source: 
>     
>     function MIN_DIVIDENDS_DUR_TIME(uint256 _minDuration) public onlyCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        284
Source: 
> 
> 	function StakeAxiaTokens(uint256 _tokens) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_stake(_tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        288
Source: 
>     
>     function UnstakeAxiaTokens(uint256 _tokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_unstake(_tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        371
Source: 
> 		
> 	function TakeDividends() public returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        373
Source: 
> 		    
> 		uint256 _dividends = dividendsOf(msg.sender);
>   ^^^^^^^^^^^^^^^^^^
> 		require(_dividends >= 0, "you do not have any dividend yet");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        396
Source: 
>     function mulDiv (uint x, uint y, uint z) public pure returns (uint) {
>               (uint l, uint h) = fullMul (x, y);
>                ^^^^^^
>               assert (h < z);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ASP
Line:        417
Source: 
>         
>     function fullMul (uint x, uint y) private pure returns (uint l, uint h) {
>                                                             ^^^^^^
>               uint mm = mulmod (x, y, uint (-1));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ASP
Line:        215
Source: 
> 	uint public infocheck;
> 	uint _burnedAmount;
>  ^^^^^^^^^^^^^^^^^^
> 	uint actualValue;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ASP
Line:        216
Source: 
> 	uint _burnedAmount;
> 	uint actualValue;
>  ^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ASP
Line:        211
Source: 
>     uint256 constant private FLOAT_SCALAR = 2**64;
>     uint256 public MINIMUM_STAKE = 1000000000000000000; // 1000 AXIA Tokens
>                                    ^^^^^^^^^^^^^^^^^^^
> 	uint256 public MIN_DIVIDENDS_DUR = 18 hours;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ASP
Line:        262
Source: 
> 		
> 		MINIMUM_STAKE = _number*1000000000000000000;
>                           ^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ASP
Line:        328
Source: 
> 	    
> 		require(IERC20(Axiatoken).balanceOf(msg.sender) >= _amount, "Insufficient Axia token balance");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(frozenOf(msg.sender) + _amount >= MINIMUM_STAKE, "Your amount is lower than the minimum amount allowed to stake");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ASP
Line:        330
Source: 
> 		require(frozenOf(msg.sender) + _amount >= MINIMUM_STAKE, "Your amount is lower than the minimum amount allowed to stake");
> 		require(IERC20(Axiatoken).allowance(msg.sender, address(this)) >= _amount, "Not enough allowance given to contract yet to spend by user");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ASP
Line:        355
Source: 
> 		
> 		require(IERC20(Axiatoken).transfer(msg.sender, actualValue), "Transaction failed");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit UnstakeEvent(address(this), msg.sender, actualValue);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ASP
Line:        359
Source: 
> 		
> 		require(IERC20(Axiatoken).transfer(address(0x0), _burnedAmount), "Transaction failed");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  		IERC20(Axiatoken).supplyeffect(_burnedAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ASP
Line:        377
Source: 
> 		
> 		require(IERC20(Axiatoken).transfer(msg.sender, _dividends), "Transaction Failed");    // Transfer dividends to msg.sender
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit RewardEvent(msg.sender, address(this), _dividends);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ASP
Line:        337
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); 
> 		IERC20(Axiatoken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ASP
Line:        360
Source: 
> 		require(IERC20(Axiatoken).transfer(address(0x0), _burnedAmount), "Transaction failed");
>  		IERC20(Axiatoken).supplyeffect(_burnedAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  		

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ASP
Line:        206
Source: 
>     //======================================STAKING POOL=========================================//
>     address public Axiatoken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ASP
Line:        214
Source: 
> 	uint256 private  UNSTAKE_FEE = 1; //1% burns when you unstake
> 	uint public infocheck;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	uint _burnedAmount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ASP
Line:        215
Source: 
> 	uint public infocheck;
> 	uint _burnedAmount;
>  ^^^^^^^^^^^^^^^^^^
> 	uint actualValue;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ASP
Line:        216
Source: 
> 	uint _burnedAmount;
> 	uint actualValue;
>  ^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ASP
Line:        233
Source: 
> 	
> 	Info private info;
>  ^^^^^^^^^^^^^^^^^
> 	

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        332
Source: 
> 		
> 		info.users[msg.sender].staketime = now;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.totalFrozen += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        333
Source: 
> 		info.users[msg.sender].staketime = now;
> 		info.totalFrozen += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].frozen += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        334
Source: 
> 		info.totalFrozen += _amount;
> 		info.users[msg.sender].frozen += _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        336
Source: 
> 		
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); 
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		IERC20(Axiatoken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        348
Source: 
> 		
> 		info.totalFrozen -= _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].frozen -= _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        349
Source: 
> 		info.totalFrozen -= _amount;
> 		info.users[msg.sender].frozen -= _amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        350
Source: 
> 		info.users[msg.sender].frozen -= _amount;
> 		info.users[msg.sender].scaledPayout -= int256(_amount * info.scaledPayoutPerToken);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        352
Source: 
> 		
> 		_burnedAmount = mulDiv(_amount, UNSTAKE_FEE, 100);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		actualValue = _amount.sub(_burnedAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        353
Source: 
> 		_burnedAmount = mulDiv(_amount, UNSTAKE_FEE, 100);
> 		actualValue = _amount.sub(_burnedAmount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ASP
Line:        375
Source: 
> 		require(_dividends >= 0, "you do not have any dividend yet");
> 		info.users[msg.sender].scaledPayout += int256(_dividends * FLOAT_SCALAR);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ASP
Line:        337
Source: 
> 		info.users[msg.sender].scaledPayout += int256(_amount * info.scaledPayoutPerToken); 
> 		IERC20(Axiatoken).transferFrom(msg.sender, address(this), _amount);      // Transfer liquidity tokens from the sender to this contract
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ASP
Line:        360
Source: 
> 		require(IERC20(Axiatoken).transfer(address(0x0), _burnedAmount), "Transaction failed");
>  		IERC20(Axiatoken).supplyeffect(_burnedAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  		

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ASP
Line:        214
Source: 
> 	uint256 private  UNSTAKE_FEE = 1; //1% burns when you unstake
> 	uint public infocheck;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	uint _burnedAmount;

[0m
