Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        253
Source: 
>   function bytesToAddress(bytes memory _addr) private pure returns (address addr) {
>     assembly {
>     ^^^^^^^^^^
>       addr := mload(add(_addr, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        25
Source: 
> 
>   uint MAX_LEVEL = 6;
>   ^^^^^^^^^^^^^^^^^^
>   uint REFERRALS_LIMIT = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        26
Source: 
>   uint MAX_LEVEL = 6;
>   uint REFERRALS_LIMIT = 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint LEVEL_DURATION = 25 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        27
Source: 
>   uint REFERRALS_LIMIT = 2;
>   uint LEVEL_DURATION = 25 days;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoDaysProfi
Line:        111
Source: 
> 
>   function syncWithOldSC(uint limit) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(address(oldSC) != address(0), 'Initialize closed');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoDaysProfi
Line:        239
Source: 
> 
>   function getUserReferrals(address _user) public view returns (address[] memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return users[_user].referrals;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CryptoDaysProfi
Line:        225
Source: 
> 
>     if (addressToPayable(referrer).send(msg.value)) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit GetLevelProfitEvent(referrer, msg.sender, _level, now);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CryptoDaysProfi
Line:        236
Source: 
> 
>     return this.getUserUpline(userAddresses[users[_user].referrerID], height - 1);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        116
Source: 
>       for(uint i = 0; i < limit; i++) {
>           address user = oldSC.userAddresses(oldSCUserId);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           (uint id, uint referrerID) = oldSC.users(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        117
Source: 
>           address user = oldSC.userAddresses(oldSCUserId);
>           (uint id, uint referrerID) = oldSC.users(user);
>                                        ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        122
Source: 
>               
>               address ref = oldSC.userAddresses(referrerID);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        132
Source: 
>                   for(uint j = 1; j <= MAX_LEVEL; j++) {
>                       users[user].levelExpiresAt[j] = oldSC.getUserLevelExpiresAt(user, j);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        239
Source: 
> 
>   function getUserReferrals(address _user) public view returns (address[] memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return users[_user].referrals;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        243
Source: 
> 
>   function getUserLevelExpiresAt(address _user, uint _level) public view returns (uint) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return users[_user].levelExpiresAt[_level];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CryptoDaysProfi
Line:        116
Source: 
>       for(uint i = 0; i < limit; i++) {
>           address user = oldSC.userAddresses(oldSCUserId);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           (uint id, uint referrerID) = oldSC.users(user);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CryptoDaysProfi
Line:        117
Source: 
>           address user = oldSC.userAddresses(oldSCUserId);
>           (uint id, uint referrerID) = oldSC.users(user);
>                                        ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CryptoDaysProfi
Line:        122
Source: 
>               
>               address ref = oldSC.userAddresses(referrerID);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CryptoDaysProfi
Line:        132
Source: 
>                   for(uint j = 1; j <= MAX_LEVEL; j++) {
>                       users[user].levelExpiresAt[j] = oldSC.getUserLevelExpiresAt(user, j);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        25
Source: 
> 
>   uint MAX_LEVEL = 6;
>   ^^^^^^^^^^^^^^^^^^
>   uint REFERRALS_LIMIT = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        26
Source: 
>   uint MAX_LEVEL = 6;
>   uint REFERRALS_LIMIT = 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint LEVEL_DURATION = 25 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        27
Source: 
>   uint REFERRALS_LIMIT = 2;
>   uint LEVEL_DURATION = 25 days;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        167
Source: 
>   function buyLevel(uint _level) public payable userRegistered() validLevel(_level) validLevelAmount(_level) {
>     for (uint l = _level - 1; l > 0; l--) {
>          ^^^^^^
>       require(getUserLevelExpiresAt(msg.sender, l) >= now, 'Buy the previous level');

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        12
Source: 
> 
> pragma solidity ^0.5.11;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoDaysProfi
Line:        19
Source: 
>     CryptoDaysProfi public oldSC = CryptoDaysProfi(0x2Fbd588ddE22A12597A71ad2437BdA3c16C0Cd13);
>     uint oldSCUserId = 1;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoDaysProfi
Line:        25
Source: 
> 
>   uint MAX_LEVEL = 6;
>   ^^^^^^^^^^^^^^^^^^
>   uint REFERRALS_LIMIT = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoDaysProfi
Line:        26
Source: 
>   uint MAX_LEVEL = 6;
>   uint REFERRALS_LIMIT = 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   uint LEVEL_DURATION = 25 days;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoDaysProfi
Line:        27
Source: 
>   uint REFERRALS_LIMIT = 2;
>   uint LEVEL_DURATION = 25 days;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoDaysProfi
Line:        51
Source: 
> 
>   modifier validReferrerID(uint _referrerID) {
>                            ^^^^^^^^^^^^^^^^
>     require(_referrerID > 0 && _referrerID <= currentUserID, 'Invalid referrer ID');

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoDaysProfi
Line:        56
Source: 
> 
>   modifier validLevel(uint _level) {
>                       ^^^^^^^^^^^
>     require(_level > 0 && _level <= MAX_LEVEL, 'Invalid level');

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    CryptoDaysProfi
Line:        61
Source: 
> 
>   modifier validLevelAmount(uint _level) {
>                             ^^^^^^^^^^^
>     require(msg.value == levelPrice[_level], 'Invalid level amount');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoDaysProfi
Line:        225
Source: 
> 
>     if (addressToPayable(referrer).send(msg.value)) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit GetLevelProfitEvent(referrer, msg.sender, _level, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        225
Source: 
> 
>     if (addressToPayable(referrer).send(msg.value)) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit GetLevelProfitEvent(referrer, msg.sender, _level, now);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CryptoDaysProfi
Line:        116
Source: 
>       for(uint i = 0; i < limit; i++) {
>           address user = oldSC.userAddresses(oldSCUserId);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           (uint id, uint referrerID) = oldSC.users(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CryptoDaysProfi
Line:        117
Source: 
>           address user = oldSC.userAddresses(oldSCUserId);
>           (uint id, uint referrerID) = oldSC.users(user);
>                                        ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CryptoDaysProfi
Line:        122
Source: 
>               
>               address ref = oldSC.userAddresses(referrerID);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        236
Source: 
> 
>     return this.getUserUpline(userAddresses[users[_user].referrerID], height - 1);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        132
Source: 
>                   for(uint j = 1; j <= MAX_LEVEL; j++) {
>                       users[user].levelExpiresAt[j] = oldSC.getUserLevelExpiresAt(user, j);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    CryptoDaysProfi
Line:        187
Source: 
>     address[1024] memory referrals;
>     referrals[0] = users[_user].referrals[0];
>     ^^^^^^^^^
>     referrals[1] = users[_user].referrals[1];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoDaysProfi
Line:        225
Source: 
> 
>     if (addressToPayable(referrer).send(msg.value)) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit GetLevelProfitEvent(referrer, msg.sender, _level, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CryptoDaysProfi
Line:        132
Source: 
>                   for(uint j = 1; j <= MAX_LEVEL; j++) {
>                       users[user].levelExpiresAt[j] = oldSC.getUserLevelExpiresAt(user, j);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   }

[0m
