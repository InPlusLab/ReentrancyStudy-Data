Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        163
Source: 
> 		uint chainId;
> 		assembly {
>   ^^^^^^^^^^
> 			chainId := chainid()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        127
Source: 
> 		address recoveredAddress = ecrecover(digest, v, r, s);
> 		require(recoveredAddress != address(0) && recoveredAddress == owner, 'INVALID_SIGNATURE');
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allowed[owner][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        18
Source: 
>         uint c = a / b;
>         require(a == b * c + a % b);
>                 ^^^^^^^^^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        11
Source: 
>         uint c = a * b;
>         require(a == 0 || c / a == b);
>                 ^^^^^^
>         return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        11
Source: 
>         uint c = a * b;
>         require(a == 0 || c / a == b);
>                           ^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        221
Source: 
> 	function shareValue() external view returns (uint) {
> 		if (totalSupply == 0) return 0;
>       ^^^^^^^^^^^^^^^^
> 		return ADXToken.balanceOf(address(this))

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        246
Source: 
> 		// The totalADX == 0 check here should be redudnant; the only way to get totalSupply to a nonzero val is by adding ADX
> 		if (totalSupply == 0 || totalADX == 0) {
>       ^^^^^^^^^^^^^^^^
> 			innerMint(msg.sender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        92
Source: 
> 
> 	function transfer(address to, uint amount) external returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(to != address(this), 'BAD_ADDRESS');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        100
Source: 
> 
> 	function transferFrom(address from, address to, uint amount) external returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		balances[from] = balances[from].sub(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        190
Source: 
> 	// be solved by timelocking the governance
> 	function setIncentive(uint newIncentive) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(governance[msg.sender], 'NOT_GOVERNANCE');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        200
Source: 
> 	}
> 	function setMaxTotalADX(uint newMaxTotalADX) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(governance[msg.sender], 'NOT_GOVERNANCE');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        236
Source: 
> 
> 	function enter(uint256 amount) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// Please note that minting has to be in the beginning so that we take it into account

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        262
Source: 
> 
> 	function leave(uint256 shares) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		mintIncentive();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        268
Source: 
> 	// Guarantees ADX can be taken out even if minting is failing
> 	function emergencyLeave(uint256 shares) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		leaveInner(shares);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        88
Source: 
> 
> 	function balanceOf(address owner) external view returns (uint balance) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        108
Source: 
> 
> 	function approve(address spender, uint amount) external returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allowed[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        114
Source: 
> 
> 	function allowance(address owner, address spender) external view returns (uint remaining) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        181
Source: 
> 	// Governance functions
> 	function setGovernance(address addr, bool hasGovt) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(governance[msg.sender], 'NOT_GOVERNANCE');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        196
Source: 
> 	}
> 	function setSymbol(string calldata newSymbol) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(governance[msg.sender], 'NOT_GOVERNANCE');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        18
Source: 
>         uint c = a / b;
>         require(a == b * c + a % b);
>                      ^^^^^
>         return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        10
Source: 
>     function mul(uint a, uint b) internal pure returns (uint) {
>         uint c = a * b;
>                  ^^^^^
>         require(a == 0 || c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        230
Source: 
> 		if (incentivePerTokenPerAnnum == 0) return;
> 		uint amountToMint = this.toMint();
>                       ^^^^^^^^^^^^^
> 		if (amountToMint == 0) return;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        233
Source: 
> 		lastMintTime = block.timestamp;
> 		ADXToken.supplyController().mint(address(ADXToken), address(this), amountToMint);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        233
Source: 
> 		lastMintTime = block.timestamp;
> 		ADXToken.supplyController().mint(address(ADXToken), address(this), amountToMint);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        69
Source: 
> 	// Constants
> 	string public constant name = "AdEx Loyalty";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        70
Source: 
> 	string public constant name = "AdEx Loyalty";
> 	uint8 public constant decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string public symbol = "ADX-LOYALTY";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        79
Source: 
> 	// EIP 2612
> 	bytes32 public DOMAIN_SEPARATOR;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        150
Source: 
> 
> 	IADXToken public ADXToken;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public incentivePerTokenPerAnnum;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        280
Source: 
> contract ADXLoyaltyPoolIncentiveController {
> 	IChainlinkSimple public constant ADXUSDOracle = IChainlinkSimple(0xA3eAeC3AB66048E6F3Cf23D81881a3fcd9A3D2ED);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	ADXLoyaltyPoolToken public immutable loyaltyPool;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        75
Source: 
> 	uint public totalSupply;
> 	mapping(address => uint) balances;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => mapping(address => uint)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        76
Source: 
> 	mapping(address => uint) balances;
> 	mapping(address => mapping(address => uint)) allowed;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        213
Source: 
> 		if (block.timestamp <= lastMintTime) return 0;
> 		uint totalADX = ADXToken.balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return (block.timestamp - lastMintTime)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        223
Source: 
> 		return ADXToken.balanceOf(address(this))
> 			.add(this.toMint())
>         ^^^^^^^^^^^^^
> 			.mul(10e17)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        222
Source: 
> 		if (totalSupply == 0) return 0;
> 		return ADXToken.balanceOf(address(this))
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			.add(this.toMint())

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        230
Source: 
> 		if (incentivePerTokenPerAnnum == 0) return;
> 		uint amountToMint = this.toMint();
>                       ^^^^^^^^^^^^^
> 		if (amountToMint == 0) return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        242
Source: 
> 
> 		uint totalADX = ADXToken.balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(totalADX.add(amount) <= maxTotalADX, 'REACHED_MAX_TOTAL_ADX');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        252
Source: 
> 		}
> 		require(ADXToken.transferFrom(msg.sender, address(this), amount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        256
Source: 
> 	function leaveInner(uint256 shares) internal {
> 		uint256 totalADX = ADXToken.balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 adxAmount = shares.mul(totalADX).div(totalSupply);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        259
Source: 
> 		innerBurn(msg.sender, shares);
> 		require(ADXToken.transfer(msg.sender, adxAmount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ADXLoyaltyPoolIncentiveController
Line:        297
Source: 
> 		// Reset the rate based on the price from the Chainlink oracle
> 		uint price = ADXUSDOracle.latestAnswer();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(price > 0, 'INVALID_ANSWER');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        233
Source: 
> 		lastMintTime = block.timestamp;
> 		ADXToken.supplyController().mint(address(ADXToken), address(this), amountToMint);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        233
Source: 
> 		lastMintTime = block.timestamp;
> 		ADXToken.supplyController().mint(address(ADXToken), address(this), amountToMint);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        289
Source: 
> 		// otherwise new rate would be applied for the entire period since the last mint
> 		loyaltyPool.mintIncentive();
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        300
Source: 
> 		if (price < 0.05*10**8) {
> 			loyaltyPool.setIncentive(uint(0.10*10**18));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else if (price < 0.10*10**18) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        302
Source: 
> 		} else if (price < 0.10*10**18) {
> 			loyaltyPool.setIncentive(uint(0.15*10**18));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else if (price < 0.20*10**18) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        304
Source: 
> 		} else if (price < 0.20*10**18) {
> 			loyaltyPool.setIncentive(uint(0.25*10**18));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else if (price < 0.30*10**18) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        306
Source: 
> 		} else if (price < 0.30*10**18) {
> 			loyaltyPool.setIncentive(uint(0.30*10**18));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else if (price < 0.50*10**18) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        308
Source: 
> 		} else if (price < 0.50*10**18) {
> 			loyaltyPool.setIncentive(uint(0.35*10**18));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else if (price < 1.00*10**18) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        310
Source: 
> 		} else if (price < 1.00*10**18) {
> 			loyaltyPool.setIncentive(uint(0.40*10**18));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else if (price < 2.00*10**18) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        312
Source: 
> 		} else if (price < 2.00*10**18) {
> 			loyaltyPool.setIncentive(uint(0.45*10**18));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ADXLoyaltyPoolIncentiveController
Line:        314
Source: 
> 		} else {
> 			loyaltyPool.setIncentive(uint(0.50*10**18));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        171
Source: 
> 				keccak256(bytes('1')),
> 				chainId,
>     ^^^^^^^
> 				address(this)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        74
Source: 
> 	// Mutable variables
> 	uint public totalSupply;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) balances;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        134
Source: 
> 	function innerMint(address owner, uint amount) internal {
> 		totalSupply = totalSupply.add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		balances[owner] = balances[owner].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        135
Source: 
> 		totalSupply = totalSupply.add(amount);
> 		balances[owner] = balances[owner].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// Because of https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md#transfer-1

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        140
Source: 
> 	function innerBurn(address owner, uint amount) internal {
> 		totalSupply = totalSupply.sub(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		balances[owner] = balances[owner].sub(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        141
Source: 
> 		totalSupply = totalSupply.sub(amount);
> 		balances[owner] = balances[owner].sub(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(owner, address(0), amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ADXLoyaltyPoolToken
Line:        232
Source: 
> 		if (amountToMint == 0) return;
> 		lastMintTime = block.timestamp;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ADXToken.supplyController().mint(address(ADXToken), address(this), amountToMint);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        95
Source: 
> 		balances[msg.sender] = balances[msg.sender].sub(amount);
> 		balances[to] = balances[to].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(msg.sender, to, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        101
Source: 
> 	function transferFrom(address from, address to, uint amount) external returns (bool success) {
> 		balances[from] = balances[from].sub(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        103
Source: 
> 		allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);
> 		balances[to] = balances[to].add(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Transfer(from, to, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        109
Source: 
> 	function approve(address spender, uint amount) external returns (bool success) {
> 		allowed[msg.sender][spender] = amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, spender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        124
Source: 
> 			DOMAIN_SEPARATOR,
> 			keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline))
>                                                                  ^^^^^^^^^^^^^^^
> 		));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        128
Source: 
> 		require(recoveredAddress != address(0) && recoveredAddress == owner, 'INVALID_SIGNATURE');
> 		allowed[owner][spender] = amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(owner, spender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        233
Source: 
> 		lastMintTime = block.timestamp;
> 		ADXToken.supplyController().mint(address(ADXToken), address(this), amountToMint);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        70
Source: 
> 	string public constant name = "AdEx Loyalty";
> 	uint8 public constant decimals = 18;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string public symbol = "ADX-LOYALTY";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        71
Source: 
> 	uint8 public constant decimals = 18;
> 	string public symbol = "ADX-LOYALTY";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        120
Source: 
> 	function permit(address owner, address spender, uint amount, uint deadline, uint8 v, bytes32 r, bytes32 s) external {
> 		require(deadline >= block.timestamp, 'DEADLINE_EXPIRED');
>                       ^^^^^^^^^^^^^^^
> 		bytes32 digest = keccak256(abi.encodePacked(

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ADXLoyaltyPoolToken
Line:        214
Source: 
> 		uint totalADX = ADXToken.balanceOf(address(this));
> 		return (block.timestamp - lastMintTime)
>           ^^^^^^^^^^^^^^^
> 			.mul(totalADX)

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ADXLoyaltyPoolToken
Line:        160
Source: 
> 		governance[msg.sender] = true;
> 		lastMintTime = block.timestamp;
>                  ^^^^^^^^^^^^^^^
> 		// EIP 2612

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ADXLoyaltyPoolToken
Line:        193
Source: 
> 		incentivePerTokenPerAnnum = newIncentive;
> 		lastMintTime = block.timestamp;
>                  ^^^^^^^^^^^^^^^
> 		emit LogSetIncentive(newIncentive, block.timestamp);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ADXLoyaltyPoolToken
Line:        212
Source: 
> 	function toMint() external view returns (uint) {
> 		if (block.timestamp <= lastMintTime) return 0;
>       ^^^^^^^^^^^^^^^
> 		uint totalADX = ADXToken.balanceOf(address(this));

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    ADXLoyaltyPoolToken
Line:        232
Source: 
> 		if (amountToMint == 0) return;
> 		lastMintTime = block.timestamp;
>                  ^^^^^^^^^^^^^^^
> 		ADXToken.supplyController().mint(address(ADXToken), address(this), amountToMint);

[0m
