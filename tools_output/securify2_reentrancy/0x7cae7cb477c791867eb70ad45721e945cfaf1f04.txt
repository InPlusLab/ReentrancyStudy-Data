Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        203
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) return 0;
>             ^^^^^^
>         uint256 c = a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        205
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenVesting
Line:        364
Source: 
>      */
>     function beneficiary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _beneficiary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenVesting
Line:        371
Source: 
>      */
>     function start() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _start;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenVesting
Line:        378
Source: 
>      */
>     function duration() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _duration;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenVesting
Line:        385
Source: 
>      */
>     function initialRelease() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _initialRelease;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenVesting
Line:        392
Source: 
>      */
>     function released(address token) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _released[token];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenVesting
Line:        400
Source: 
>      */
>     function release(IERC20 token) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == _beneficiary, "The message sender is not beneficiary");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenVesting
Line:        400
Source: 
>      */
>     function release(IERC20 token) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == _beneficiary, "The message sender is not beneficiary");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenVesting
Line:        392
Source: 
>      */
>     function released(address token) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _released[token];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        204
Source: 
>         if (a == 0) return 0;
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenVesting
Line:        409
Source: 
> 
>         token.transfer(_beneficiary, unreleased);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenVesting
Line:        345
Source: 
>      */
>     constructor (address beneficiary, uint256 start, uint256 duration, uint256 initialRelease) public {
>                  ^^^^^^^^^^^^^^^^^^^
>         require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenVesting
Line:        345
Source: 
>      */
>     constructor (address beneficiary, uint256 start, uint256 duration, uint256 initialRelease) public {
>                                       ^^^^^^^^^^^^^
>         require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenVesting
Line:        345
Source: 
>      */
>     constructor (address beneficiary, uint256 start, uint256 duration, uint256 initialRelease) public {
>                                                      ^^^^^^^^^^^^^^^^
>         require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenVesting
Line:        345
Source: 
>      */
>     constructor (address beneficiary, uint256 start, uint256 duration, uint256 initialRelease) public {
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^
>         require(beneficiary != address(0), "TokenVesting: beneficiary is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        89
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenVesting
Line:        427
Source: 
>     function _vestedAmount(IERC20 token) private view returns (uint256) {
>         uint256 currentBalance = token.balanceOf(address(this));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalBalance = currentBalance.add(_released[address(token)]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenVesting
Line:        409
Source: 
> 
>         token.transfer(_beneficiary, unreleased);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenVesting
Line:        409
Source: 
> 
>         token.transfer(_beneficiary, unreleased);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenVesting
Line:        350
Source: 
>         // solhint-disable-next-line max-line-length
>         require(start.add(duration) > block.timestamp, "TokenVesting: final time is before current time");
>                                       ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    TokenVesting
Line:        431
Source: 
> 
>         if (block.timestamp >= _start.add(_duration)) {
>             ^^^^^^^^^^^^^^^
>             return totalBalance;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    TokenVesting
Line:        434
Source: 
>         } else {
>             return totalBalance.mul(block.timestamp.sub(_start)).div(_duration);
>                                     ^^^^^^^^^^^^^^^
>         }

[0m
