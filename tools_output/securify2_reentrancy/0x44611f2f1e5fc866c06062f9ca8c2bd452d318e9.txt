Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.1. Changing pragma version to 0.6.1....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    InstaAccount
Line:        113
Source: 
>         require(_target != address(0), "target-invalid");
>         assembly {
>         ^^^^^^^^^^
>             let succeeded := delegatecall(sub(gas(), 5000), _target, add(_data, 0x20), mload(_data), 0, 32)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Record
Line:        53
Source: 
>      */
>     function isAuth(address user) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return auth[user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Record
Line:        70
Source: 
>     */
>     function enable(address user) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(this) || msg.sender == instaIndex, "not-self-index");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Record
Line:        83
Source: 
>     */
>     function disable(address user) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(this), "not-self");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Record
Line:        70
Source: 
>     */
>     function enable(address user) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(this) || msg.sender == instaIndex, "not-self-index");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Record
Line:        83
Source: 
>     */
>     function disable(address user) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == address(this), "not-self");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Record
Line:        88
Source: 
>         delete auth[user];
>         ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDisable(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Record
Line:        88
Source: 
>         delete auth[user];
>         ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDisable(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InstaAccount
Line:        141
Source: 
>         if (!isShield) {
>             require(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets), "not-connector");
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InstaAccount
Line:        141
Source: 
>         if (!isShield) {
>             require(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets), "not-connector");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InstaAccount
Line:        148
Source: 
>         }
>         address _check = indexContract.check(version);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_check != address(0) && !isShield) require(CheckInterface(_check).isOk(), "not-ok");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InstaAccount
Line:        149
Source: 
>         address _check = indexContract.check(version);
>         if (_check != address(0) && !isShield) require(CheckInterface(_check).isOk(), "not-ok");
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogCast(_origin, msg.sender, msg.value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InstaAccount
Line:        143
Source: 
>         } else {
>             require(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets), "not-static-connector");
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InstaAccount
Line:        143
Source: 
>         } else {
>             require(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets), "not-static-connector");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    InstaAccount
Line:        94
Source: 
> 
> contract InstaAccount is Record {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Record
Line:        53
Source: 
>      */
>     function isAuth(address user) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return auth[user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InstaAccount
Line:        128
Source: 
>     */
>     function cast(
>     ^^^^^^^^^^^^^^
>         address[] calldata _targets,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    InstaAccount
Line:        141
Source: 
>         if (!isShield) {
>             require(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets), "not-connector");
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    InstaAccount
Line:        143
Source: 
>         } else {
>             require(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets), "not-static-connector");
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Record
Line:        41
Source: 
>     // The InstaIndex Address.
>     address public constant instaIndex = 0x1c503F1544500C05da80cd326D97342f2B13a732;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // The Account Module Version.

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Record
Line:        43
Source: 
>     // The Account Module Version.
>     uint public constant version = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Auth Module(Address of Auth => bool).

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    InstaAccount
Line:        148
Source: 
>         }
>         address _check = indexContract.check(version);
>         ^^^^^^^^^^^^^^
>         if (_check != address(0) && !isShield) require(CheckInterface(_check).isOk(), "not-ok");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InstaAccount
Line:        141
Source: 
>         if (!isShield) {
>             require(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets), "not-connector");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InstaAccount
Line:        148
Source: 
>         }
>         address _check = indexContract.check(version);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_check != address(0) && !isShield) require(CheckInterface(_check).isOk(), "not-ok");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InstaAccount
Line:        149
Source: 
>         address _check = indexContract.check(version);
>         if (_check != address(0) && !isShield) require(CheckInterface(_check).isOk(), "not-ok");
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogCast(_origin, msg.sender, msg.value);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    InstaAccount
Line:        143
Source: 
>         } else {
>             require(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets), "not-static-connector");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Record
Line:        88
Source: 
>         delete auth[user];
>         ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDisable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Record
Line:        88
Source: 
>         delete auth[user];
>         ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDisable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Record
Line:        88
Source: 
>         delete auth[user];
>         ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDisable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Record
Line:        88
Source: 
>         delete auth[user];
>         ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDisable(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InstaAccount
Line:        141
Source: 
>         if (!isShield) {
>             require(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets), "not-connector");
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InstaAccount
Line:        143
Source: 
>         } else {
>             require(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets), "not-static-connector");
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Record
Line:        47
Source: 
>     // Is shield true/false.
>     bool public shield;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Record
Line:        88
Source: 
>         delete auth[user];
>         ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDisable(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Record
Line:        75
Source: 
>         auth[user] = true;
>         ListInterface(IndexInterface(instaIndex).list()).addAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogEnable(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Record
Line:        88
Source: 
>         delete auth[user];
>         ListInterface(IndexInterface(instaIndex).list()).removeAuth(user);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDisable(user);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InstaAccount
Line:        141
Source: 
>         if (!isShield) {
>             require(ConnectorsInterface(indexContract.connectors(version)).isConnector(_targets), "not-connector");
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InstaAccount
Line:        143
Source: 
>         } else {
>             require(ConnectorsInterface(indexContract.connectors(version)).isStaticConnector(_targets), "not-static-connector");
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Record
Line:        43
Source: 
>     // The Account Module Version.
>     uint public constant version = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Auth Module(Address of Auth => bool).

[0m
