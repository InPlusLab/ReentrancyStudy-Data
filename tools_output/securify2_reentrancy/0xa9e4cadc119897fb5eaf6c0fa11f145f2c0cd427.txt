[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        92
Source: 
>     
>    uint REGESTRATION_FESS=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        93
Source: 
>    uint REGESTRATION_FESS=0.05 ether;
>    uint pool1_price=0.1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.2 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        94
Source: 
>    uint pool1_price=0.1 ether;
>    uint pool2_price=0.2 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        95
Source: 
>    uint pool2_price=0.2 ether ;
>    uint pool3_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        96
Source: 
>    uint pool3_price=0.5 ether;
>    uint pool4_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        97
Source: 
>    uint pool4_price=1 ether;
>    uint pool5_price=2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        98
Source: 
>    uint pool5_price=2 ether;
>    uint pool6_price=5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=0.2 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        99
Source: 
>    uint pool6_price=5 ether;
>    uint pool7_price=0.2 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        100
Source: 
>    uint pool7_price=0.2 ether ;
>    uint pool8_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool9_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        101
Source: 
>    uint pool8_price=0.5 ether;
>    uint pool9_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool10_price=5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FireBull
Line:        102
Source: 
>    uint pool9_price=1 ether;
>    uint pool10_price=5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FireBull
Line:        253
Source: 
>      
>        function regUser(uint _referrerID) public payable {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FireBull
Line:        319
Source: 
>    
>        function buyPool1() public payable {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FireBull
Line:        392
Source: 
>     
>       function buyPool2() public payable {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FireBull
Line:        461
Source: 
>     
>      function buyPool3() public payable {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FireBull
Line:        527
Source: 
>     
>     function buyPool4() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FireBull
Line:        594
Source: 
>     
>     function buyPool5() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FireBull
Line:        659
Source: 
>     
>     function buyPool6() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(!pool6users[msg.sender].isExist, "Already in AutoPool");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FireBull
Line:        340
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FireBull
Line:        413
Source: 
>        bool sent = false;
>        sent = address(uint160(pool2Currentuser)).send(pool2_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FireBull
Line:        479
Source: 
>        bool sent = false;
>        sent = address(uint160(pool3Currentuser)).send(pool3_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FireBull
Line:        545
Source: 
>        bool sent = false;
>        sent = address(uint160(pool4Currentuser)).send(pool4_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FireBull
Line:        612
Source: 
>        bool sent = false;
>        sent = address(uint160(pool5Currentuser)).send(pool5_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FireBull
Line:        676
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        365
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer1)).send((pool1_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        369
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer1)).send(pool1_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        373
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer1)).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        436
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer2)).send((pool2_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        440
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer2)).send(pool2_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        444
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer2)).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        502
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer3)).send((pool3_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        506
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer3)).send(pool3_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        510
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer3)).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        568
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer4)).send((pool4_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        572
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer4)).send(pool4_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        576
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer4)).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        635
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer5)).send((pool5_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        639
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer5)).send(pool5_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        643
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer5)).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        699
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer6)).send((pool6_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        703
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer6)).send(pool6_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    FireBull
Line:        707
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer6)).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        41
Source: 
>       
>       uint public unlimited_level_price=0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        90
Source: 
>      
>     mapping(uint => uint) public LEVEL_PRICE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        92
Source: 
>     
>    uint REGESTRATION_FESS=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        93
Source: 
>    uint REGESTRATION_FESS=0.05 ether;
>    uint pool1_price=0.1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.2 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        94
Source: 
>    uint pool1_price=0.1 ether;
>    uint pool2_price=0.2 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        95
Source: 
>    uint pool2_price=0.2 ether ;
>    uint pool3_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        96
Source: 
>    uint pool3_price=0.5 ether;
>    uint pool4_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        97
Source: 
>    uint pool4_price=1 ether;
>    uint pool5_price=2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        98
Source: 
>    uint pool5_price=2 ether;
>    uint pool6_price=5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=0.2 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        99
Source: 
>    uint pool6_price=5 ether;
>    uint pool7_price=0.2 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        100
Source: 
>    uint pool7_price=0.2 ether ;
>    uint pool8_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool9_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        101
Source: 
>    uint pool8_price=0.5 ether;
>    uint pool9_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool10_price=5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        102
Source: 
>    uint pool9_price=1 ether;
>    uint pool10_price=5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        106
Source: 
>    
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        107
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>       event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        109
Source: 
>       
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      event getMoneyBuyPool(address indexed _user, address indexed _referral, uint _level, uint _levelpool, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        110
Source: 
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>      event getMoneyBuyPool(address indexed _user, address indexed _referral, uint _level, uint _levelpool, uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        113
Source: 
>      
>     event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FireBull
Line:        288
Source: 
>        
>             uint level_price_local=0;
>             ^^^^^^^^^^^^^^^^^^^^^^
>             if(_level>4){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        92
Source: 
>     
>    uint REGESTRATION_FESS=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        93
Source: 
>    uint REGESTRATION_FESS=0.05 ether;
>    uint pool1_price=0.1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.2 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        94
Source: 
>    uint pool1_price=0.1 ether;
>    uint pool2_price=0.2 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        95
Source: 
>    uint pool2_price=0.2 ether ;
>    uint pool3_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        96
Source: 
>    uint pool3_price=0.5 ether;
>    uint pool4_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        97
Source: 
>    uint pool4_price=1 ether;
>    uint pool5_price=2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        98
Source: 
>    uint pool5_price=2 ether;
>    uint pool6_price=5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=0.2 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        99
Source: 
>    uint pool6_price=5 ether;
>    uint pool7_price=0.2 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        100
Source: 
>    uint pool7_price=0.2 ether ;
>    uint pool8_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool9_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        101
Source: 
>    uint pool8_price=0.5 ether;
>    uint pool9_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool10_price=5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FireBull
Line:        102
Source: 
>    uint pool9_price=1 ether;
>    uint pool10_price=5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        295
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        733
Source: 
>     {
>          if (!address(uint160(ownerWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        340
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        365
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer1)).send((pool1_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        369
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer1)).send(pool1_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        373
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer1)).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        377
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        413
Source: 
>        bool sent = false;
>        sent = address(uint160(pool2Currentuser)).send(pool2_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        436
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer2)).send((pool2_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        440
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer2)).send(pool2_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        444
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer2)).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        448
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        479
Source: 
>        bool sent = false;
>        sent = address(uint160(pool3Currentuser)).send(pool3_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        502
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer3)).send((pool3_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        506
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer3)).send(pool3_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        510
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer3)).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        514
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        545
Source: 
>        bool sent = false;
>        sent = address(uint160(pool4Currentuser)).send(pool4_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        568
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer4)).send((pool4_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        572
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer4)).send(pool4_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        576
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer4)).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        580
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        612
Source: 
>        bool sent = false;
>        sent = address(uint160(pool5Currentuser)).send(pool5_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        635
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer5)).send((pool5_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        639
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer5)).send(pool5_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        643
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer5)).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        647
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        676
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        699
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer6)).send((pool6_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        703
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer6)).send(pool6_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        707
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer6)).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        711
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        295
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        733
Source: 
>     {
>          if (!address(uint160(ownerWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        340
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        365
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer1)).send((pool1_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        369
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer1)).send(pool1_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        373
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer1)).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        377
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        413
Source: 
>        bool sent = false;
>        sent = address(uint160(pool2Currentuser)).send(pool2_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        436
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer2)).send((pool2_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        440
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer2)).send(pool2_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        444
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer2)).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        448
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        479
Source: 
>        bool sent = false;
>        sent = address(uint160(pool3Currentuser)).send(pool3_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        502
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer3)).send((pool3_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        506
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer3)).send(pool3_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        510
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer3)).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        514
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        545
Source: 
>        bool sent = false;
>        sent = address(uint160(pool4Currentuser)).send(pool4_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        568
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer4)).send((pool4_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        572
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer4)).send(pool4_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        576
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer4)).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        580
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        612
Source: 
>        bool sent = false;
>        sent = address(uint160(pool5Currentuser)).send(pool5_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        635
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer5)).send((pool5_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        639
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer5)).send(pool5_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        643
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer5)).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        647
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        676
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        699
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer6)).send((pool6_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        703
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer6)).send(pool6_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        707
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer6)).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FireBull
Line:        711
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        295
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        733
Source: 
>     {
>          if (!address(uint160(ownerWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        340
Source: 
>        bool sent = false;
>        sent = address(uint160(pool1Currentuser)).send(pool1_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        365
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer1)).send((pool1_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        369
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer1)).send(pool1_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        373
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer1)).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        377
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        413
Source: 
>        bool sent = false;
>        sent = address(uint160(pool2Currentuser)).send(pool2_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        436
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer2)).send((pool2_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        440
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer2)).send(pool2_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        444
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer2)).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        448
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        479
Source: 
>        bool sent = false;
>        sent = address(uint160(pool3Currentuser)).send(pool3_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        502
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer3)).send((pool3_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        506
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer3)).send(pool3_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        510
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer3)).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        514
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        545
Source: 
>        bool sent = false;
>        sent = address(uint160(pool4Currentuser)).send(pool4_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        568
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer4)).send((pool4_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        572
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer4)).send(pool4_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        576
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer4)).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        580
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        612
Source: 
>        bool sent = false;
>        sent = address(uint160(pool5Currentuser)).send(pool5_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        635
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer5)).send((pool5_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        639
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer5)).send(pool5_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        643
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer5)).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        647
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        676
Source: 
>        bool sent = false;
>        sent = address(uint160(pool6Currentuser)).send(pool6_price/2);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        699
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer6)).send((pool6_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        703
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer6)).send(pool6_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        707
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer6)).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FireBull
Line:        711
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        365
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer1)).send((pool1_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        369
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer1)).send(pool1_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        373
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer1)).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        377
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        436
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer2)).send((pool2_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        440
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer2)).send(pool2_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        444
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer2)).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        448
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        502
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer3)).send((pool3_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        506
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer3)).send(pool3_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        510
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer3)).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        514
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        568
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer4)).send((pool4_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        572
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer4)).send(pool4_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        576
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer4)).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        580
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        635
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer5)).send((pool5_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        639
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer5)).send(pool5_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        643
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer5)).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        647
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        699
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer6)).send((pool6_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        703
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer6)).send(pool6_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        707
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer6)).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FireBull
Line:        711
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        295
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        733
Source: 
>     {
>          if (!address(uint160(ownerWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        365
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer1)).send((pool1_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        369
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer1)).send(pool1_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        373
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer1)).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer1, msg.sender, _level,1, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        377
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool1_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        436
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer2)).send((pool2_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        440
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer2)).send(pool2_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        444
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer2)).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer2, msg.sender, _level,2, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        448
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool2_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        502
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer3)).send((pool3_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        506
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer3)).send(pool3_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        510
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer3)).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer3, msg.sender, _level,3, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        514
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool3_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        568
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer4)).send((pool4_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        572
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer4)).send(pool4_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        576
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer4)).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer4, msg.sender, _level,4, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        580
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool4_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        635
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer5)).send((pool5_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        639
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer5)).send(pool5_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        643
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer5)).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer5, msg.sender, _level,5, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        647
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool5_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        699
Source: 
>         if(_level == 1){
>         sent = address(uint160(referer6)).send((pool6_price*3)/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        703
Source: 
>         if(_level == 2){
>         sent = address(uint160(referer6)).send(pool6_price/10);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        707
Source: 
>         if(_level == 3){
>         sent = address(uint160(referer6)).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit getMoneyBuyPool(referer6, msg.sender, _level,6, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FireBull
Line:        711
Source: 
>         if(_level == 4){
>         sent = address(0x79507982397aca4E9F4Ce8502761A95FA80aabB7).send(pool6_price/20);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        35
Source: 
>       uint public pool6activeUserID = 0;
>       uint public pool7activeUserID = 0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint public pool8activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        36
Source: 
>       uint public pool7activeUserID = 0;
>       uint public pool8activeUserID = 0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint public pool9activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        37
Source: 
>       uint public pool8activeUserID = 0;
>       uint public pool9activeUserID = 0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint public pool10activeUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        38
Source: 
>       uint public pool9activeUserID = 0;
>       uint public pool10activeUserID = 0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        99
Source: 
>    uint pool6_price=5 ether;
>    uint pool7_price=0.2 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        100
Source: 
>    uint pool7_price=0.2 ether ;
>    uint pool8_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool9_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        101
Source: 
>    uint pool8_price=0.5 ether;
>    uint pool9_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool10_price=5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        102
Source: 
>    uint pool9_price=1 ether;
>    uint pool10_price=5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FireBull
Line:        115
Source: 
>    
>     UserStruct[] public requests;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
