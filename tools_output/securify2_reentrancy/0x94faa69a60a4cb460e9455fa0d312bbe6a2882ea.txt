Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Wallet
Line:        26
Source: 
>     
>     function createNewAccount(string memory _username,string memory _password)public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) ){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Wallet
Line:        35
Source: 
>     
>     function deposit(string memory _username)public payable min{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) ){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Wallet
Line:        45
Source: 
>     
>    function withdraw(string memory _username,string memory _password,address _to)public{
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) && keccak256(abi.encodePacked((collect[_username]))) == keccak256(abi.encodePacked((_password))) ){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Wallet
Line:        26
Source: 
>     
>     function createNewAccount(string memory _username,string memory _password)public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) ){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Wallet
Line:        45
Source: 
>     
>    function withdraw(string memory _username,string memory _password,address _to)public{
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) && keccak256(abi.encodePacked((collect[_username]))) == keccak256(abi.encodePacked((_password))) ){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Wallet
Line:        23
Source: 
>     function perc(uint256 _val,uint256 _perc)private pure returns(uint256){
>         return (_val/100)*_perc;
>                ^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Wallet
Line:        48
Source: 
>             uint256 fee= perc(balances[_username],10);
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(owner)).transfer(fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Wallet
Line:        49
Source: 
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             address(uint160(owner)).transfer(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[_username]=0;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.4;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Wallet
Line:        10
Source: 
>     address private owner;
>     mapping(string => uint256) balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(string=>string) check;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Wallet
Line:        11
Source: 
>     mapping(string => uint256) balances;
>     mapping(string=>string) check;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(string=>string) collect;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Wallet
Line:        12
Source: 
>     mapping(string=>string) check;
>     mapping(string=>string) collect;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Wallet
Line:        19
Source: 
>     modifier min{
>         require(msg.value>=10000000000000000);_;
>                            ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Wallet
Line:        49
Source: 
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             address(uint160(owner)).transfer(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[_username]=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Wallet
Line:        48
Source: 
>             uint256 fee= perc(balances[_username],10);
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(owner)).transfer(fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Wallet
Line:        48
Source: 
>             uint256 fee= perc(balances[_username],10);
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(owner)).transfer(fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Wallet
Line:        49
Source: 
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             address(uint160(owner)).transfer(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[_username]=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Wallet
Line:        48
Source: 
>             uint256 fee= perc(balances[_username],10);
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(owner)).transfer(fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Wallet
Line:        49
Source: 
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             address(uint160(owner)).transfer(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[_username]=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Wallet
Line:        48
Source: 
>             uint256 fee= perc(balances[_username],10);
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(uint160(owner)).transfer(fee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Wallet
Line:        49
Source: 
>             address(uint160(_to)).transfer(balances[_username]-fee);
>             address(uint160(owner)).transfer(fee);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[_username]=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Wallet
Line:        30
Source: 
>         }
>         collect[_username]=_password;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         check[_username]=_username;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Wallet
Line:        31
Source: 
>         collect[_username]=_password;
>         check[_username]=_username;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[_username]=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Wallet
Line:        32
Source: 
>         check[_username]=_username;
>         balances[_username]=0;
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Wallet
Line:        37
Source: 
>        if( keccak256(abi.encodePacked((check[_username]))) == keccak256(abi.encodePacked((_username))) ){
>             balances[_username]+=msg.value;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Wallet
Line:        50
Source: 
>             address(uint160(owner)).transfer(fee);
>             balances[_username]=0;
>             ^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
