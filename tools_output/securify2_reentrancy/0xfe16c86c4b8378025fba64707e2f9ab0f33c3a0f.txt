Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ECDSA
Line:        213
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(signature, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenGovernance
Line:        515
Source: 
>         uint256 chainId;
>         assembly { chainId := chainid() }
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return chainId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    TokenGovernance
Line:        498
Source: 
> 
>         if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGovernance
Line:        460
Source: 
>         address currentDelegate = _delegates[delegator];
>         uint256 delegatorBalance = IERC223(tokenAddress).balanceOf(delegator); // balance of underlying tokens (not scaled);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _delegates[delegator] = delegatee;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenGovernance
Line:        359
Source: 
>                 DOMAIN_TYPEHASH,
>                 keccak256(bytes(IERC223(tokenAddress).name())),
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getChainId(),

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    TokenGovernance
Line:        359
Source: 
>                 DOMAIN_TYPEHASH,
>                 keccak256(bytes(IERC223(tokenAddress).name())),
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getChainId(),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenGovernance
Line:        330
Source: 
>     */
>     function delegate(address delegatee,uint256 time, bytes calldata signature ) external {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenGovernance
Line:        344
Source: 
>      */
>     function delegateBySig(
>        ^^^^^^^^^^^^^^^^^^^^
>         address delegatee,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenGovernance
Line:        523
Source: 
>     */
>     function verifySignature(bytes32 _messageHash, bytes memory _signature) 
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public pure 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenGovernance
Line:        318
Source: 
>     */
>     function delegates(address delegator)
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenGovernance
Line:        535
Source: 
>     */
>     function message(address  _sender , address _deleagtor , uint256 _blockExpirytime)
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenGovernance
Line:        460
Source: 
>         address currentDelegate = _delegates[delegator];
>         uint256 delegatorBalance = IERC223(tokenAddress).balanceOf(delegator); // balance of underlying tokens (not scaled);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _delegates[delegator] = delegatee;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        18
Source: 
> 
> pragma solidity ^0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        264
Source: 
>    // existing token address
>    address public tokenAddress; 
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        267
Source: 
>    // signer address
>    address private signer;
>       ^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        270
Source: 
>    // contract owner address
>    address public owner;
>       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        279
Source: 
>     /// @notice A record of votes checkpoints for each account, by index
>     mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        282
Source: 
>     /// @notice The number of checkpoints for each account
>     mapping (address => uint32) public numCheckpoints;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        285
Source: 
>     /// @notice The EIP-712 typehash for the contract's domain
>     bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        288
Source: 
>     /// @notice The EIP-712 typehash for the delegation struct used by the contract
>     bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        291
Source: 
>     /// @notice A record of states for signing / validating signatures
>     mapping (address => uint) public nonces;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        300
Source: 
>     //Signature Message Hash
>     mapping(bytes32 => bool)public msgHash;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    TokenGovernance
Line:        303
Source: 
>     // @notice A record of each accounts delegate
>     mapping (address => address) internal _delegates;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    TokenGovernance
Line:        359
Source: 
>                 DOMAIN_TYPEHASH,
>                 keccak256(bytes(IERC223(tokenAddress).name())),
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getChainId(),

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenGovernance
Line:        359
Source: 
>                 DOMAIN_TYPEHASH,
>                 keccak256(bytes(IERC223(tokenAddress).name())),
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getChainId(),

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGovernance
Line:        460
Source: 
>         address currentDelegate = _delegates[delegator];
>         uint256 delegatorBalance = IERC223(tokenAddress).balanceOf(delegator); // balance of underlying tokens (not scaled);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _delegates[delegator] = delegatee;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenGovernance
Line:        359
Source: 
>                 DOMAIN_TYPEHASH,
>                 keccak256(bytes(IERC223(tokenAddress).name())),
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getChainId(),

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ECDSA
Line:        228
Source: 
>         // these malleable signatures as well.
>         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
>                        ^
>             revert("ECDSA: invalid signature 's' value");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    TokenGovernance
Line:        359
Source: 
>                 DOMAIN_TYPEHASH,
>                 keccak256(bytes(IERC223(tokenAddress).name())),
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 getChainId(),

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGovernance
Line:        457
Source: 
>         
>         msgHash[messageHash] = true;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGovernance
Line:        461
Source: 
>         uint256 delegatorBalance = IERC223(tokenAddress).balanceOf(delegator); // balance of underlying tokens (not scaled);
>         _delegates[delegator] = delegatee;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGovernance
Line:        499
Source: 
>         if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
>             checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGovernance
Line:        501
Source: 
>         } else {
>             checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             numCheckpoints[delegatee] = nCheckpoints + 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGovernance
Line:        502
Source: 
>             checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
>             numCheckpoints[delegatee] = nCheckpoints + 1;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenGovernance
Line:        384
Source: 
>         require(signatory != address(0), "delegateBySig: invalid signature");
>         require(nonce == nonces[signatory]++, "delegateBySig: invalid nonce");
>                             ^^^^^^^^^^^^^^^^^^^
>         require(now <= expiry, "delegateBySig: signature expired");

[0m
