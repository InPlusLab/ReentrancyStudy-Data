Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MCNStake
Line:        125
Source: 
>         require(msg.sender != _referrer, "Cannot refer self");
>         require(registered[_referrer] || address(0x0) == _referrer, "Referrer must be registered");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        34
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b);
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        34
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b);
>                           ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        62
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        62
Source: 
> 
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MCNStake
Line:        143
Source: 
>     
>     function calculateEarnings(address _stakeholder) public view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 activeDays = (now.sub(lastClock[_stakeholder])).div(86400);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MCNStake
Line:        200
Source: 
>     
>     function setStakingTaxRate(uint256 _stakingTaxRate) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakingTaxRate = _stakingTaxRate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MCNStake
Line:        204
Source: 
> 
>     function setUnstakingTaxRate(uint256 _unstakingTaxRate) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         unstakingTaxRate = _unstakingTaxRate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MCNStake
Line:        208
Source: 
>     
>     function setDailyROI(uint256 _dailyROI) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dailyROI = _dailyROI;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MCNStake
Line:        212
Source: 
>     
>     function setRegistrationTax(uint256 _registrationTax) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registrationTax = _registrationTax;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MCNStake
Line:        216
Source: 
>     
>     function setMinimumStakeValue(uint256 _minimumStakeValue) external onlyOwner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minimumStakeValue = _minimumStakeValue;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        33
Source: 
>     function mul(uint a, uint b) internal pure returns (uint c) {
>         c = a * b;
>             ^^^^^
>         require(a == 0 || c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MCNStake
Line:        126
Source: 
>         require(registered[_referrer] || address(0x0) == _referrer, "Referrer must be registered");
>         require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount >= registrationTax.add(minimumStakeValue), "Must send at least enough LEAD to pay registration fee.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MCNStake
Line:        128
Source: 
>         require(_amount >= registrationTax.add(minimumStakeValue), "Must send at least enough LEAD to pay registration fee.");
>         require(ERC20Interface(mcnToken).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MCNStake
Line:        150
Source: 
>         require(_amount >= minimumStakeValue, "Amount is below minimum stake value.");
>         require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ERC20Interface(mcnToken).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MCNStake
Line:        151
Source: 
>         require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>         require(ERC20Interface(mcnToken).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 stakingTax = (stakingTaxRate.mul(_amount)).div(1000);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MCNStake
Line:        171
Source: 
>         totalStaked = totalStaked.sub(_amount);
>         ERC20Interface(mcnToken).transfer(msg.sender, afterTax);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(stakes[msg.sender] == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MCNStake
Line:        181
Source: 
>         require(totalReward > 0, 'No reward to withdraw');
>         require((ERC20Interface(mcnToken).balanceOf(address(this))).sub(totalStaked) >= totalReward, 'Insufficient LEAD balance in pool');
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakeRewards[msg.sender] = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MCNStake
Line:        187
Source: 
>         lastClock[msg.sender] = now.sub(remainder);
>         ERC20Interface(mcnToken).transfer(msg.sender, totalReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrawal(msg.sender, totalReward);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MCNStake
Line:        126
Source: 
>         require(registered[_referrer] || address(0x0) == _referrer, "Referrer must be registered");
>         require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount >= registrationTax.add(minimumStakeValue), "Must send at least enough LEAD to pay registration fee.");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MCNStake
Line:        128
Source: 
>         require(_amount >= registrationTax.add(minimumStakeValue), "Must send at least enough LEAD to pay registration fee.");
>         require(ERC20Interface(mcnToken).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MCNStake
Line:        150
Source: 
>         require(_amount >= minimumStakeValue, "Amount is below minimum stake value.");
>         require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(ERC20Interface(mcnToken).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MCNStake
Line:        151
Source: 
>         require(ERC20Interface(mcnToken).balanceOf(msg.sender) >= _amount, "Must have enough balance to stake");
>         require(ERC20Interface(mcnToken).transferFrom(msg.sender, address(this), _amount), "Stake failed due to failed amount transfer.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 stakingTax = (stakingTaxRate.mul(_amount)).div(1000);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MCNStake
Line:        181
Source: 
>         require(totalReward > 0, 'No reward to withdraw');
>         require((ERC20Interface(mcnToken).balanceOf(address(this))).sub(totalStaked) >= totalReward, 'Insufficient LEAD balance in pool');
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakeRewards[msg.sender] = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MCNStake
Line:        221
Source: 
>     function filter(uint256 _amount) external onlyOwner returns (bool success) {
>         require((ERC20Interface(mcnToken).balanceOf(address(this))).sub(totalStaked) >= _amount, 'Insufficient LEAD balance in pool');
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20Interface(mcnToken).transfer(msg.sender, _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MCNStake
Line:        171
Source: 
>         totalStaked = totalStaked.sub(_amount);
>         ERC20Interface(mcnToken).transfer(msg.sender, afterTax);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(stakes[msg.sender] == 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MCNStake
Line:        187
Source: 
>         lastClock[msg.sender] = now.sub(remainder);
>         ERC20Interface(mcnToken).transfer(msg.sender, totalReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrawal(msg.sender, totalReward);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MCNStake
Line:        222
Source: 
>         require((ERC20Interface(mcnToken).balanceOf(address(this))).sub(totalStaked) >= _amount, 'Insufficient LEAD balance in pool');
>         ERC20Interface(mcnToken).transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrawal(msg.sender, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MCNStake
Line:        73
Source: 
>     address public mcnToken;
>     uint256 public totalStaked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public stakingTaxRate;                     //10 = 1%

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MCNStake
Line:        171
Source: 
>         totalStaked = totalStaked.sub(_amount);
>         ERC20Interface(mcnToken).transfer(msg.sender, afterTax);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(stakes[msg.sender] == 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MCNStake
Line:        187
Source: 
>         lastClock[msg.sender] = now.sub(remainder);
>         ERC20Interface(mcnToken).transfer(msg.sender, totalReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrawal(msg.sender, totalReward);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MCNStake
Line:        222
Source: 
>         require((ERC20Interface(mcnToken).balanceOf(address(this))).sub(totalStaked) >= _amount, 'Insufficient LEAD balance in pool');
>         ERC20Interface(mcnToken).transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrawal(msg.sender, _amount);

[0m
