[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MGGTokenBox
Line:        625
Source: 
> 
>   uint256 public tokenIdStart = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public tokenIdEnd = 9999;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MGGTokenBox
Line:        626
Source: 
>   uint256 public tokenIdStart = 0;
>   uint256 public tokenIdEnd = 9999;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MGGTokenBox
Line:        687
Source: 
> 
>   function getClaimStatus(uint256 week, uint256 tokenId)public view returns (bool claimed) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return weekClaimedByTokenId[week][tokenId];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MGGTokenBox
Line:        697
Source: 
>       require(
>           msg.sender == hoeContract.ownerOf(tokenId),
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>           "MUST_OWN_TOKEN_ID"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MGGTokenBox
Line:        763
Source: 
>         // Send MGG to the owner of the token ID
>         reward.mint(tokenOwner, rewardPerHOEPerWeek);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MGGTokenBox
Line:        714
Source: 
>     function claimAllForOwner(uint256 week) external {
>         uint256 tokenBalanceOwner = hoeContract.balanceOf(msg.sender);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MGGTokenBox
Line:        724
Source: 
> 
>             if(!weekClaimedByTokenId[week][hoeContract.tokenOfOwnerByIndex(msg.sender, i)]){
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               _claim(

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MGGTokenBox
Line:        726
Source: 
>               _claim(
>                   hoeContract.tokenOfOwnerByIndex(msg.sender, i),
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MGGTokenBox
Line:        674
Source: 
> 
>   function updateRewardRate(uint256 rewardRate) external onlyGovernance {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     rewardPerHOEPerWeek = rewardRate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MGGTokenBox
Line:        687
Source: 
> 
>   function getClaimStatus(uint256 week, uint256 tokenId)public view returns (bool claimed) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return weekClaimedByTokenId[week][tokenId];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MGGTokenBox
Line:        697
Source: 
>       require(
>           msg.sender == hoeContract.ownerOf(tokenId),
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>           "MUST_OWN_TOKEN_ID"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MGGTokenBox
Line:        668
Source: 
> 
>     address _pendingGovernance = pendingGovernance;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     governance = _pendingGovernance;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        11
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        75
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        291
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        370
Source: 
> 
> pragma solidity ^0.6.12;
>    ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        381
Source: 
> 
> pragma solidity ^0.6.12;
>    ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        390
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        416
Source: 
> 
> pragma solidity >=0.6.2 <0.8.0;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        545
Source: 
> 
> pragma solidity >=0.6.2 <0.8.0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        574
Source: 
> 
> pragma solidity ^0.6.12;
>       ^^^^^^^^^^^^^^^^^^
> pragma experimental ABIEncoderV2;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MGGTokenBox
Line:        697
Source: 
>       require(
>           msg.sender == hoeContract.ownerOf(tokenId),
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>           "MUST_OWN_TOKEN_ID"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MGGTokenBox
Line:        714
Source: 
>     function claimAllForOwner(uint256 week) external {
>         uint256 tokenBalanceOwner = hoeContract.balanceOf(msg.sender);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MGGTokenBox
Line:        724
Source: 
> 
>             if(!weekClaimedByTokenId[week][hoeContract.tokenOfOwnerByIndex(msg.sender, i)]){
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               _claim(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MGGTokenBox
Line:        726
Source: 
>               _claim(
>                   hoeContract.tokenOfOwnerByIndex(msg.sender, i),
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MGGTokenBox
Line:        763
Source: 
>         // Send MGG to the owner of the token ID
>         reward.mint(tokenOwner, rewardPerHOEPerWeek);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MGGTokenBox
Line:        613
Source: 
> 
>   address public pendingGovernance;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        62
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _status = _ENTERED;
>          ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MGGTokenBox
Line:        758
Source: 
>         // given tokenId
>         weekClaimedByTokenId[week][tokenId] = true;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        42
Source: 
>     uint256 private constant _NOT_ENTERED = 1;
>     uint256 private constant _ENTERED = 2;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        44
Source: 
> 
>     uint256 private _status;
>      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    MGGTokenBox
Line:        680
Source: 
>   function currentWeek() public view returns (uint256 weekNumber) {
>       return uint256(block.timestamp / SECONDS_PER_WEEK);
>                            ^^^^^^^^^^^^^^^
>   }

[0m
