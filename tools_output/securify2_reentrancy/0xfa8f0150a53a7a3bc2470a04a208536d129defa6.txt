Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetaCoin
Line:        68
Source: 
> 
> 	function buyIndex() public payable {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.value >= price, "price invalid");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetaCoin
Line:        96
Source: 
> 
> 	function ownerOf(uint id) public view returns( address ) { return index2Address[id]; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetaCoin
Line:        98
Source: 
> 
> 	function withdraw(uint256 _amount) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetaCoin
Line:        96
Source: 
> 
> 	function ownerOf(uint id) public view returns( address ) { return index2Address[id]; }
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetaCoin
Line:        98
Source: 
> 
> 	function withdraw(uint256 _amount) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MetaCoin
Line:        74
Source: 
> 		if (_holder != address(0x0)){
> 			uint _reward = (price / 3) * 2;
>                       ^^^^^^^^^^^^
> 			_holder.transfer(_reward);	//send the current owner 2/3 of the value

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    MetaCoin
Line:        75
Source: 
> 			uint _reward = (price / 3) * 2;
> 			_holder.transfer(_reward);	//send the current owner 2/3 of the value
>        ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Reward(_holder, _reward);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MetaCoin
Line:        71
Source: 
> 
> 		address payable _holder = index2Address[currentIndex];
>       ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MetaCoin
Line:        74
Source: 
> 		if (_holder != address(0x0)){
> 			uint _reward = (price / 3) * 2;
>        ^^^^^^^^^^^^
> 			_holder.transfer(_reward);	//send the current owner 2/3 of the value

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        40
Source: 
> 
> pragma solidity >=0.4.25 <0.7.0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MetaCoin
Line:        53
Source: 
> 
> 	mapping (uint => address payable) index2Address;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping (address => uint) address2Index;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MetaCoin
Line:        54
Source: 
> 	mapping (uint => address payable) index2Address;
> 	mapping (address => uint) address2Index;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MetaCoin
Line:        75
Source: 
> 			uint _reward = (price / 3) * 2;
> 			_holder.transfer(_reward);	//send the current owner 2/3 of the value
>        ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Reward(_holder, _reward);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MetaCoin
Line:        75
Source: 
> 			uint _reward = (price / 3) * 2;
> 			_holder.transfer(_reward);	//send the current owner 2/3 of the value
>        ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Reward(_holder, _reward);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MetaCoin
Line:        75
Source: 
> 			uint _reward = (price / 3) * 2;
> 			_holder.transfer(_reward);	//send the current owner 2/3 of the value
>        ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Reward(_holder, _reward);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MetaCoin
Line:        100
Source: 
> 		require(msg.sender == owner);
> 		msg.sender.transfer(_amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MetaCoin
Line:        75
Source: 
> 			uint _reward = (price / 3) * 2;
> 			_holder.transfer(_reward);	//send the current owner 2/3 of the value
>        ^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Reward(_holder, _reward);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetaCoin
Line:        82
Source: 
> 		address2Index[msg.sender] = currentIndex;
> 		index2Address[currentIndex] = msg.sender;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetaCoin
Line:        86
Source: 
> 		if(currentIndex == totalSupply){
> 			currentIndex = 0;
>        ^^^^^^^^^^^^^
> 			round++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetaCoin
Line:        87
Source: 
> 			currentIndex = 0;
> 			round++;
>        ^^^^
> 			price = price * 3;					//new round, new price

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetaCoin
Line:        88
Source: 
> 			round++;
> 			price = price * 3;					//new round, new price
>        ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetaCoin
Line:        92
Source: 
> 		}else{
> 			currentIndex++;						//increase index
>        ^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MetaCoin
Line:        43
Source: 
> contract MetaCoin {
> 	string public name;
>    ^^^^^^^^^^^^^^^^^
> 	string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MetaCoin
Line:        44
Source: 
> 	string public name;
> 	string public symbol;
>    ^^^^^^^^^^^^^^^^^^^
> 	uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    MetaCoin
Line:        45
Source: 
> 	string public symbol;
> 	uint8 public decimals;
>    ^^^^^^^^^^^^^^^^^^^^
> 	uint256 public totalSupply;

[0m
