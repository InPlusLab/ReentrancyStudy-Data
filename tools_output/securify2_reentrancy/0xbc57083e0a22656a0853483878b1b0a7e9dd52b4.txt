Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WETH9
Line:        50
Source: 
> contract WETH9 {
>     string public name     = "Wrapped Ether";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol   = "WETH";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WETH9
Line:        51
Source: 
>     string public name     = "Wrapped Ether";
>     string public symbol   = "WETH";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8  public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WETH9
Line:        52
Source: 
>     string public symbol   = "WETH";
>     uint8  public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WETH9
Line:        69
Source: 
>     }
>     function withdraw(uint wad) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balanceOf[msg.sender] >= wad, "The sender dont have balance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WETH9
Line:        76
Source: 
> 
>     function totalSupply() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WETH9
Line:        80
Source: 
> 
>     function approve(address guy, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WETH9
Line:        86
Source: 
> 
>     function transfer(address dst, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        310
Source: 
> 
> 	function getProfitAmount(uint256 _auctionId) external view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		(IERC20 fromToken,,,,,) = collateralAuction.auctions(_auctionId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        338
Source: 
> 
> 	function take(uint256 _auctionId, bytes calldata _data, uint256 _profit) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		collateralAuction.take(_auctionId, _data, true);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        350
Source: 
> 
> 	function onTake(IERC20 _fromToken, uint256 _amountGet, uint256 _amountReturn) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == address(collateralAuction), "onTake: The sender should be the collateralAuction");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        398
Source: 
> 
> 	function setRouter(IUniswapV2Router02 _router) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		router = _router;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WETH9
Line:        80
Source: 
> 
>     function approve(address guy, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][guy] = wad;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WETH9
Line:        86
Source: 
> 
>     function transfer(address dst, uint wad) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WETH9
Line:        90
Source: 
> 
>     function transferFrom(address src, address dst, uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        390
Source: 
> 
> 	function withdrawERC20(IERC20 _token) external onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_token.transfer(_owner, _token.balanceOf(address(this))), "withdraw: error transfer the tokens");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AuctionTakeHelper
Line:        400
Source: 
> 		router = _router;
> 		WETH = IERC20(router.WETH());
>                  ^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        311
Source: 
> 	function getProfitAmount(uint256 _auctionId) external view returns(uint256) {
> 		(IERC20 fromToken,,,,,) = collateralAuction.auctions(_auctionId);
>     ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Router01
Line:        117
Source: 
>     function factory() external pure returns (address);
>     function WETH() external pure returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        300
Source: 
> 	IUniswapV2Router02 public router;
> 	IERC20 public WETH;
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        311
Source: 
> 	function getProfitAmount(uint256 _auctionId) external view returns(uint256) {
> 		(IERC20 fromToken,,,,,) = collateralAuction.auctions(_auctionId);
>     ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.6.6;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        21
Source: 
> 
> pragma solidity ^0.6.6;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        46
Source: 
> 
> pragma solidity ^0.6.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        112
Source: 
> 
> pragma solidity ^0.6.6;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        253
Source: 
> 
> pragma solidity ^0.6.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        284
Source: 
> 
> pragma solidity ^0.6.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        395
Source: 
> 	function withdrawETH() external onlyOwner {
> 		payable(_owner).transfer(address(this).balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        346
Source: 
> 			WETH9(payable(address(WETH))).withdraw(wethBal);
> 			payable(_owner).transfer(wethBal);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        395
Source: 
> 	function withdrawETH() external onlyOwner {
> 		payable(_owner).transfer(address(this).balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    WETH9
Line:        72
Source: 
>         balanceOf[msg.sender] -= wad;
>         msg.sender.transfer(wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrawal(msg.sender, wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        346
Source: 
> 			WETH9(payable(address(WETH))).withdraw(wethBal);
> 			payable(_owner).transfer(wethBal);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        395
Source: 
> 	function withdrawETH() external onlyOwner {
> 		payable(_owner).transfer(address(this).balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        304
Source: 
> 		collateralAuction = _collateralAuction;
> 		baseToken = collateralAuction.baseToken();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        400
Source: 
> 		router = _router;
> 		WETH = IERC20(router.WETH());
>                  ^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        311
Source: 
> 	function getProfitAmount(uint256 _auctionId) external view returns(uint256) {
> 		(IERC20 fromToken,,,,,) = collateralAuction.auctions(_auctionId);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        316
Source: 
> 
> 		(uint256 amountGet, uint256 amountReturn) = collateralAuction.offer(_auctionId);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        325
Source: 
> 			path[1] = address(WETH);
> 			amounts = router.getAmountsIn(amountGet, path);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amountGet = amounts[1];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        332
Source: 
> 		path[1] = address(baseToken);
> 		amounts = router.getAmountsOut(amountReturn, path);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		amountReturn = amounts[0];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        341
Source: 
> 
> 		uint256 wethBal = WETH.balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(wethBal >= _profit, "take: dont get profit");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        364
Source: 
> 			path[1] = address(WETH);
> 			uint256[] memory amounts = router.swapExactTokensForTokens({
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				amountIn:     _amountGet,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        391
Source: 
> 	function withdrawERC20(IERC20 _token) external onlyOwner {
> 		require(_token.transfer(_owner, _token.balanceOf(address(this))), "withdraw: error transfer the tokens");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        391
Source: 
> 	function withdrawERC20(IERC20 _token) external onlyOwner {
> 		require(_token.transfer(_owner, _token.balanceOf(address(this))), "withdraw: error transfer the tokens");
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        404
Source: 
> 	function reApprove() public onlyOwner {
> 		WETH.approve(address(router), uint(-1));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		baseToken.approve(address(collateralAuction), uint(-1));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        405
Source: 
> 		WETH.approve(address(router), uint(-1));
> 		baseToken.approve(address(collateralAuction), uint(-1));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        339
Source: 
> 	function take(uint256 _auctionId, bytes calldata _data, uint256 _profit) external {
> 		collateralAuction.take(_auctionId, _data, true);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        345
Source: 
> 		if (wethBal != 0) {
> 			WETH9(payable(address(WETH))).withdraw(wethBal);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			payable(_owner).transfer(wethBal);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        359
Source: 
> 		if (_fromToken != WETH) {
> 			_fromToken.approve(address(router), _amountGet);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        377
Source: 
> 		path[1] = address(baseToken);
> 		router.swapTokensForExactTokens({
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amountOut: 	 _amountReturn,

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        297
Source: 
> 	ICollateralAuction public collateralAuction;
> 	IERC20 public baseToken;
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        299
Source: 
> 
> 	IUniswapV2Router02 public router;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	IERC20 public WETH;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AuctionTakeHelper
Line:        300
Source: 
> 	IUniswapV2Router02 public router;
> 	IERC20 public WETH;
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    AuctionTakeHelper
Line:        346
Source: 
> 			WETH9(payable(address(WETH))).withdraw(wethBal);
> 			payable(_owner).transfer(wethBal);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    WETH9
Line:        81
Source: 
>     function approve(address guy, uint wad) public returns (bool) {
>         allowance[msg.sender][guy] = wad;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, guy, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AuctionTakeHelper
Line:        404
Source: 
> 	function reApprove() public onlyOwner {
> 		WETH.approve(address(router), uint(-1));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		baseToken.approve(address(collateralAuction), uint(-1));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AuctionTakeHelper
Line:        405
Source: 
> 		WETH.approve(address(router), uint(-1));
> 		baseToken.approve(address(collateralAuction), uint(-1));
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AuctionTakeHelper
Line:        359
Source: 
> 		if (_fromToken != WETH) {
> 			_fromToken.approve(address(router), _amountGet);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AuctionTakeHelper
Line:        377
Source: 
> 		path[1] = address(baseToken);
> 		router.swapTokensForExactTokens({
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			amountOut: 	 _amountReturn,

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WETH9
Line:        50
Source: 
> contract WETH9 {
>     string public name     = "Wrapped Ether";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol   = "WETH";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WETH9
Line:        51
Source: 
>     string public name     = "Wrapped Ether";
>     string public symbol   = "WETH";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8  public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WETH9
Line:        52
Source: 
>     string public symbol   = "WETH";
>     uint8  public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
