[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        113
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             // Get a location of some free memory and store it in tempBytes as

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        182
Source: 
>     function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {
>         assembly {
>           ^^^^^^^^
>             // Read the first 32 bytes of _preBytes storage, which is the length

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        323
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             switch iszero(_length)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        379
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        390
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             tempUint := mload(add(add(_bytes, 0x1), _start))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        401
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             tempUint := mload(add(add(_bytes, 0x2), _start))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        412
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             tempUint := mload(add(add(_bytes, 0x4), _start))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        423
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             tempUint := mload(add(add(_bytes, 0x20), _start))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        434
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             tempBytes32 := mload(add(add(_bytes, 0x20), _start))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        444
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             let length := mload(_preBytes)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesLib
Line:        487
Source: 
> 
>         assembly {
>           ^^^^^^^^
>             // we know _preBytes_offset is 0

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ECDSA
Line:        672
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly {
>           ^^^^^^^^
>             r := mload(add(signature, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        737
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        17
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        22
Source: 
>         uint256 c = a * b;
>         require(c / a == b);
>                 ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        800
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                        ^^^^^^^^^^^^^^^^^^^^^
>         require(success);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Dinngo
Line:        1275
Source: 
>         emit Withdraw(address(0), msg.sender, amount, balances[address(0)][msg.sender], address(0), 0);
>         msg.sender.transfer(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Dinngo
Line:        1326
Source: 
>         if (token == address(0)) {
>             user.transfer(amount);
>                  ^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Dinngo
Line:        1355
Source: 
>             if (token == address(0)) {
>                 Migratable(target).migrateTo.value(balance)(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Dinngo
Line:        1357
Source: 
>             } else {
>                 IERC20(token).approve(target, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Migratable(target).migrateTo(user, token, balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Dinngo
Line:        1358
Source: 
>                 IERC20(token).approve(target, balance);
>                 Migratable(target).migrateTo(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Dinngo
Line:        1355
Source: 
>             if (token == address(0)) {
>                 Migratable(target).migrateTo.value(balance)(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Dinngo
Line:        1357
Source: 
>             } else {
>                 IERC20(token).approve(target, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Migratable(target).migrateTo(user, token, balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Dinngo
Line:        1358
Source: 
>                 IERC20(token).approve(target, balance);
>                 Migratable(target).migrateTo(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        800
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                        ^^^^^^^^^^^^^^^^^^^^^
>         require(success);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Dinngo
Line:        1300
Source: 
>      */
>     function withdrawByAdmin(bytes calldata withdrawal) external {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable user = userID_Address[_getWithdrawalUserID(withdrawal)];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Dinngo
Line:        1337
Source: 
>      */
>     function migrateByAdmin(bytes calldata migration) external {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address target = _getMigrationTarget(migration);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Dinngo
Line:        1368
Source: 
>      */
>     function settle(bytes calldata orders) external {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Deal with the order list

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        21
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Dinngo
Line:        1275
Source: 
>         emit Withdraw(address(0), msg.sender, amount, balances[address(0)][msg.sender], address(0), 0);
>         msg.sender.transfer(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Dinngo
Line:        1326
Source: 
>         if (token == address(0)) {
>             user.transfer(amount);
>                  ^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Dinngo
Line:        1108
Source: 
>     mapping (bytes32 => uint256) public orderFills;
>     mapping (uint256 => address payable) public userID_Address;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => address) public tokenID_Address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Dinngo
Line:        1109
Source: 
>     mapping (uint256 => address payable) public userID_Address;
>     mapping (uint256 => address) public tokenID_Address;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public userRanks;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableMigration
Line:        561
Source: 
> 
>     uint constant public MIGRATION_1_SIZE = 24;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public TOKENID_SIZE = 2;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableMigration
Line:        562
Source: 
>     uint constant public MIGRATION_1_SIZE = 24;
>     uint constant public TOKENID_SIZE = 2;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public SIGNATURE_SIZE = 65;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableMigration
Line:        563
Source: 
>     uint constant public TOKENID_SIZE = 2;
>     uint constant public SIGNATURE_SIZE = 65;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant internal _MASK_IS_ETH = 0x01;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableMigration
Line:        564
Source: 
>     uint constant public SIGNATURE_SIZE = 65;
>     uint8 constant internal _MASK_IS_ETH = 0x01;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableOrder
Line:        824
Source: 
> 
>     uint constant public ORDER_SIZE = 206;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public UNSIGNED_ORDER_SIZE = 141;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableOrder
Line:        825
Source: 
>     uint constant public ORDER_SIZE = 206;
>     uint constant public UNSIGNED_ORDER_SIZE = 141;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant internal _MASK_IS_BUY = 0x01;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableOrder
Line:        826
Source: 
>     uint constant public UNSIGNED_ORDER_SIZE = 141;
>     uint8 constant internal _MASK_IS_BUY = 0x01;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant internal _MASK_IS_MAIN = 0x02;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableOrder
Line:        827
Source: 
>     uint8 constant internal _MASK_IS_BUY = 0x01;
>     uint8 constant internal _MASK_IS_MAIN = 0x02;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableWithdrawal
Line:        990
Source: 
> 
>     uint constant public WITHDRAWAL_SIZE = 140;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public UNSIGNED_WITHDRAWAL_SIZE = 75;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableWithdrawal
Line:        991
Source: 
>     uint constant public WITHDRAWAL_SIZE = 140;
>     uint constant public UNSIGNED_WITHDRAWAL_SIZE = 75;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant internal _MASK_IS_ETH = 0x01;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableWithdrawal
Line:        992
Source: 
>     uint constant public UNSIGNED_WITHDRAWAL_SIZE = 75;
>     uint8 constant internal _MASK_IS_ETH = 0x01;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableMigration
Line:        561
Source: 
> 
>     uint constant public MIGRATION_1_SIZE = 24;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public TOKENID_SIZE = 2;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableMigration
Line:        562
Source: 
>     uint constant public MIGRATION_1_SIZE = 24;
>     uint constant public TOKENID_SIZE = 2;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public SIGNATURE_SIZE = 65;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableMigration
Line:        563
Source: 
>     uint constant public TOKENID_SIZE = 2;
>     uint constant public SIGNATURE_SIZE = 65;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant internal _MASK_IS_ETH = 0x01;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableMigration
Line:        564
Source: 
>     uint constant public SIGNATURE_SIZE = 65;
>     uint8 constant internal _MASK_IS_ETH = 0x01;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableOrder
Line:        824
Source: 
> 
>     uint constant public ORDER_SIZE = 206;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public UNSIGNED_ORDER_SIZE = 141;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableOrder
Line:        825
Source: 
>     uint constant public ORDER_SIZE = 206;
>     uint constant public UNSIGNED_ORDER_SIZE = 141;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant internal _MASK_IS_BUY = 0x01;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableOrder
Line:        826
Source: 
>     uint constant public UNSIGNED_ORDER_SIZE = 141;
>     uint8 constant internal _MASK_IS_BUY = 0x01;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant internal _MASK_IS_MAIN = 0x02;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableOrder
Line:        827
Source: 
>     uint8 constant internal _MASK_IS_BUY = 0x01;
>     uint8 constant internal _MASK_IS_MAIN = 0x02;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableWithdrawal
Line:        990
Source: 
> 
>     uint constant public WITHDRAWAL_SIZE = 140;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public UNSIGNED_WITHDRAWAL_SIZE = 75;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableWithdrawal
Line:        991
Source: 
>     uint constant public WITHDRAWAL_SIZE = 140;
>     uint constant public UNSIGNED_WITHDRAWAL_SIZE = 75;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant internal _MASK_IS_ETH = 0x01;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SerializableWithdrawal
Line:        992
Source: 
>     uint constant public UNSIGNED_WITHDRAWAL_SIZE = 75;
>     uint8 constant internal _MASK_IS_ETH = 0x01;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1095
Source: 
>     // Storage alignment
>     address private _owner;
>          ^^^^^^^^^^^^^^^^^^
>     mapping (address => bool) private admins;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1096
Source: 
>     address private _owner;
>     mapping (address => bool) private admins;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _nAdmin;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1097
Source: 
>     mapping (address => bool) private admins;
>     uint256 private _nAdmin;
>          ^^^^^^^^^^^^^^^^^^^
>     uint256 private _nLimit;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1098
Source: 
>     uint256 private _nAdmin;
>     uint256 private _nLimit;
>          ^^^^^^^^^^^^^^^^^^^
>     // end

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1104
Source: 
> 
>     uint256 public processTime;
>          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1106
Source: 
> 
>     mapping (address => mapping (address => uint256)) public balances;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (bytes32 => uint256) public orderFills;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1107
Source: 
>     mapping (address => mapping (address => uint256)) public balances;
>     mapping (bytes32 => uint256) public orderFills;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => address payable) public userID_Address;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1108
Source: 
>     mapping (bytes32 => uint256) public orderFills;
>     mapping (uint256 => address payable) public userID_Address;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint256 => address) public tokenID_Address;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1109
Source: 
>     mapping (uint256 => address payable) public userID_Address;
>     mapping (uint256 => address) public tokenID_Address;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public userRanks;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1110
Source: 
>     mapping (uint256 => address) public tokenID_Address;
>     mapping (address => uint256) public userRanks;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public tokenRanks;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1111
Source: 
>     mapping (address => uint256) public userRanks;
>     mapping (address => uint256) public tokenRanks;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public lockTimes;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Dinngo
Line:        1112
Source: 
>     mapping (address => uint256) public tokenRanks;
>     mapping (address => uint256) public lockTimes;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Dinngo
Line:        1275
Source: 
>         emit Withdraw(address(0), msg.sender, amount, balances[address(0)][msg.sender], address(0), 0);
>         msg.sender.transfer(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Dinngo
Line:        1326
Source: 
>         if (token == address(0)) {
>             user.transfer(amount);
>                  ^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Dinngo
Line:        1355
Source: 
>             if (token == address(0)) {
>                 Migratable(target).migrateTo.value(balance)(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SafeERC20
Line:        800
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                        ^^^^^^^^^^^^^^^^^^^^^
>         require(success);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Dinngo
Line:        1326
Source: 
>         if (token == address(0)) {
>             user.transfer(amount);
>                  ^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Dinngo
Line:        1355
Source: 
>             if (token == address(0)) {
>                 Migratable(target).migrateTo.value(balance)(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Dinngo
Line:        1357
Source: 
>             } else {
>                 IERC20(token).approve(target, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Migratable(target).migrateTo(user, token, balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Dinngo
Line:        1358
Source: 
>                 IERC20(token).approve(target, balance);
>                 Migratable(target).migrateTo(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SafeERC20
Line:        800
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                        ^^^^^^^^^^^^^^^^^^^^^
>         require(success);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Dinngo
Line:        1275
Source: 
>         emit Withdraw(address(0), msg.sender, amount, balances[address(0)][msg.sender], address(0), 0);
>         msg.sender.transfer(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Dinngo
Line:        1326
Source: 
>         if (token == address(0)) {
>             user.transfer(amount);
>                  ^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Dinngo
Line:        1355
Source: 
>             if (token == address(0)) {
>                 Migratable(target).migrateTo.value(balance)(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Dinngo
Line:        1357
Source: 
>             } else {
>                 IERC20(token).approve(target, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Migratable(target).migrateTo(user, token, balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Dinngo
Line:        1358
Source: 
>                 IERC20(token).approve(target, balance);
>                 Migratable(target).migrateTo(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dinngo
Line:        1355
Source: 
>             if (token == address(0)) {
>                 Migratable(target).migrateTo.value(balance)(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dinngo
Line:        1357
Source: 
>             } else {
>                 IERC20(token).approve(target, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Migratable(target).migrateTo(user, token, balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dinngo
Line:        1358
Source: 
>                 IERC20(token).approve(target, balance);
>                 Migratable(target).migrateTo(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ECDSA
Line:        687
Source: 
>         // these malleable signatures as well.
>         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
>                          ^
>             return address(0);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        738
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                     ^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Dinngo
Line:        1275
Source: 
>         emit Withdraw(address(0), msg.sender, amount, balances[address(0)][msg.sender], address(0), 0);
>         msg.sender.transfer(amount);
>              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SafeERC20
Line:        800
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                        ^^^^^^^^^^^^^^^^^^^^^
>         require(success);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Dinngo
Line:        1326
Source: 
>         if (token == address(0)) {
>             user.transfer(amount);
>                  ^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Dinngo
Line:        1355
Source: 
>             if (token == address(0)) {
>                 Migratable(target).migrateTo.value(balance)(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Dinngo
Line:        1357
Source: 
>             } else {
>                 IERC20(token).approve(target, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Migratable(target).migrateTo(user, token, balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Dinngo
Line:        1358
Source: 
>                 IERC20(token).approve(target, balance);
>                 Migratable(target).migrateTo(user, token, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dinngo
Line:        1429
Source: 
>         require(processTime != time);
>         processTime = time;
>              ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1159
Source: 
>         if (userID_Address[id] == address(0))
>             userID_Address[id] = user;
>                  ^^^^^^^^^^^^^^^^^^^^^
>         else

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1162
Source: 
>             require(userID_Address[id] == user);
>         userRanks[user] = 1;
>              ^^^^^^^^^^^^^^^
>         emit AddUser(id, user);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1174
Source: 
>         require(userRanks[user] != 0);
>         userRanks[user] = 0;
>              ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1187
Source: 
>         require(userRanks[user] != rank);
>         userRanks[user] = rank;
>              ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1205
Source: 
>         if (tokenID_Address[id] == address(0))
>             tokenID_Address[id] = token;
>                  ^^^^^^^^^^^^^^^^^^^^^^^
>         else

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1208
Source: 
>             require(tokenID_Address[id] == token);
>         tokenRanks[token] = 1;
>              ^^^^^^^^^^^^^^^^^
>         emit AddToken(id, token);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1220
Source: 
>         require(tokenRanks[token] != 0);
>         tokenRanks[token] = 0;
>              ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1233
Source: 
>         require(tokenRanks[token] != rank);
>         tokenRanks[token] = rank;
>              ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1321
Source: 
>         }
>         balances[tokenFee][wallet] =
>              ^^^^^^^^^^^^^^^^^^^^^^^
>             balances[tokenFee][wallet].add(amountFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1323
Source: 
>             balances[tokenFee][wallet].add(amountFee);
>         balances[token][user] = balance;
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(token, user, amount, balance, tokenFee, amountFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1319
Source: 
>         } else {
>             balances[tokenFee][user] = balances[tokenFee][user].sub(amountFee);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1353
Source: 
>             require(balance != 0);
>             balances[token][user] = 0;
>                  ^^^^^^^^^^^^^^^^^^^^^
>             if (token == address(0)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1457
Source: 
>         if (fBuy) {
>             balances[tokenQuote][user] = balances[tokenQuote][user].sub(amountQuote);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_isOrderFeeMain(order)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1460
Source: 
>                 tokenFee = tokenBase;
>                 balances[tokenBase][user] = balances[tokenBase][user].add(amountBase).sub(amountFee);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balances[tokenBase][wallet] = balances[tokenBase][wallet].add(amountFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1461
Source: 
>                 balances[tokenBase][user] = balances[tokenBase][user].add(amountBase).sub(amountFee);
>                 balances[tokenBase][wallet] = balances[tokenBase][wallet].add(amountFee);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1482
Source: 
>         // Order fill
>         orderFills[hash] = orderFills[hash].add(amountBase);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Trade

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1464
Source: 
>                 tokenFee = tokenID_Address[1];
>                 balances[tokenBase][user] = balances[tokenBase][user].add(amountBase);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balances[tokenFee][user] = balances[tokenFee][user].sub(amountFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1465
Source: 
>                 balances[tokenBase][user] = balances[tokenBase][user].add(amountBase);
>                 balances[tokenFee][user] = balances[tokenFee][user].sub(amountFee);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balances[tokenFee][wallet] = balances[tokenFee][wallet].add(amountFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1466
Source: 
>                 balances[tokenFee][user] = balances[tokenFee][user].sub(amountFee);
>                 balances[tokenFee][wallet] = balances[tokenFee][wallet].add(amountFee);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1469
Source: 
>         } else {
>             balances[tokenBase][user] = balances[tokenBase][user].sub(amountBase);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_isOrderFeeMain(order)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1472
Source: 
>                 tokenFee = tokenQuote;
>                 balances[tokenQuote][user] = balances[tokenQuote][user].add(amountQuote).sub(amountFee);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balances[tokenQuote][wallet] = balances[tokenQuote][wallet].add(amountFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1473
Source: 
>                 balances[tokenQuote][user] = balances[tokenQuote][user].add(amountQuote).sub(amountFee);
>                 balances[tokenQuote][wallet] = balances[tokenQuote][wallet].add(amountFee);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1476
Source: 
>                 tokenFee = tokenID_Address[1];
>                 balances[tokenQuote][user] = balances[tokenQuote][user].add(amountQuote);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balances[tokenFee][user] = balances[tokenFee][user].sub(amountFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1477
Source: 
>                 balances[tokenQuote][user] = balances[tokenQuote][user].add(amountQuote);
>                 balances[tokenFee][user] = balances[tokenFee][user].sub(amountFee);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 balances[tokenFee][wallet] = balances[tokenFee][wallet].add(amountFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Dinngo
Line:        1478
Source: 
>                 balances[tokenFee][user] = balances[tokenFee][user].sub(amountFee);
>                 balances[tokenFee][wallet] = balances[tokenFee][wallet].add(amountFee);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        797
Source: 
> 
>         require(address(token).isContract());
>                      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        800
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                        ^^^^^^^^^^^^^^^^^^^^^
>         require(success);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        768
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        773
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        778
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        797
Source: 
> 
>         require(address(token).isContract());
>                      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        800
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                        ^^^^^^^^^^^^^^^^^^^^^
>         require(success);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        768
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        773
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        778
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        797
Source: 
> 
>         require(address(token).isContract());
>                      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        800
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                        ^^^^^^^^^^^^^^^^^^^^^
>         require(success);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        768
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        773
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        778
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Dinngo
Line:        1357
Source: 
>             } else {
>                 IERC20(token).approve(target, balance);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 Migratable(target).migrateTo(user, token, balance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        768
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        773
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        778
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
