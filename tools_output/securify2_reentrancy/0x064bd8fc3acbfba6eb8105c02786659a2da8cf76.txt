Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ETHStvo
Line:        561
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address  addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETHStvo
Line:        80
Source: 
>     mapping (uint => uint) FEE;
>     uint REFERRAL_LIMIT = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        62
Source: 
> 
>   function transferOwnership(address _owner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        163
Source: 
> 
>     function setMainAddress(address _main_address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(userList[_main_address] == 0, 'Address is already in use by another user');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        172
Source: 
> 
>     function setAddress(address _main_address, address _upline_address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       Main_address = _main_address;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        177
Source: 
> 
>     function setPaused(bool _paused) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        181
Source: 
> 
>     function getStats() public view onlyOwner returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return Stats;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        186
Source: 
>     //https://etherconverter.online to Ether
>     function setLevelPrice(uint _price, uint _level) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[_price] = _level;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        190
Source: 
> 
>     function setSponsor(uint _price, uint _sponsor) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         SPONSOR[_price] = _sponsor;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        194
Source: 
> 
>     function setIntroducer(uint _price, uint _introducer) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         INTRODUCER[_price] = _introducer;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        198
Source: 
> 
>     function setUpline(uint _price, uint _upline) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         UPLINE[_price] = _upline;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        202
Source: 
> 
>     function setFee(uint _price, uint _fee) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       FEE[_price] = _fee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        206
Source: 
> 
>     function setCurrentUserID(uint _currentUserID) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currentUserID = _currentUserID;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        210
Source: 
> 
>     function viewStats() public view onlyOwner returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return stats;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        214
Source: 
> 
>     function addManagers(address manager_1, address manager_2, address manager_3, address manager_4, address manager_5, address manager_6, address manager_7, address manager_8, address manager_9, address manager_10) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         managers[manager_1] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        227
Source: 
> 
>     function removeManagers(address manager_1, address manager_2, address manager_3, address manager_4, address manager_5, address manager_6, address manager_7, address manager_8, address manager_9, address manager_10) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         managers[manager_1] = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        240
Source: 
> 
>     function addManager(address manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         managers[manager] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        244
Source: 
> 
>     function removeManager(address manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         managers[manager] = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        248
Source: 
> 
>     function setUserData(uint _userID, address _wallet, uint _referrerID, uint _introducerID, uint _referral1, uint _referral2, uint _referral3, uint _level, uint _introducedTotal) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        548
Source: 
> 
>     function viewUserReferrals(uint _user) public view returns(uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referrals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        552
Source: 
> 
>     function viewUserIntroducers(uint _user) public view returns(uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return users[_user].introducers;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHStvo
Line:        556
Source: 
> 
>     function viewUserLevel(uint _user) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].level;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ETHStvo
Line:        496
Source: 
>                 if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].level >= _level && (users[users[_user].introducers[i]].introducedTotal >= SafeMath.add(i, uint(1)) || users[users[_user].introducers[i]].introducedTotal >= uint(3))){
>                   address(uint160(users[users[_user].introducers[i]].wallet)).transfer(UPLINE[msg.value]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   emit Payment(_user, users[_user].introducers[i], uint(3), _level, UPLINE[msg.value], now);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        62
Source: 
> 
>   function transferOwnership(address _owner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHStvo
Line:        177
Source: 
> 
>     function setPaused(bool _paused) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = _paused;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHStvo
Line:        206
Source: 
> 
>     function setCurrentUserID(uint _currentUserID) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currentUserID = _currentUserID;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETHStvo
Line:        248
Source: 
> 
>     function setUserData(uint _userID, address _wallet, uint _referrerID, uint _introducerID, uint _referral1, uint _referral2, uint _referral3, uint _level, uint _introducedTotal) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        172
Source: 
> 
>     function setAddress(address _main_address, address _upline_address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       Main_address = _main_address;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        186
Source: 
>     //https://etherconverter.online to Ether
>     function setLevelPrice(uint _price, uint _level) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[_price] = _level;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        190
Source: 
> 
>     function setSponsor(uint _price, uint _sponsor) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         SPONSOR[_price] = _sponsor;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        194
Source: 
> 
>     function setIntroducer(uint _price, uint _introducer) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         INTRODUCER[_price] = _introducer;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        198
Source: 
> 
>     function setUpline(uint _price, uint _upline) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         UPLINE[_price] = _upline;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        202
Source: 
> 
>     function setFee(uint _price, uint _fee) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       FEE[_price] = _fee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        214
Source: 
> 
>     function addManagers(address manager_1, address manager_2, address manager_3, address manager_4, address manager_5, address manager_6, address manager_7, address manager_8, address manager_9, address manager_10) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         managers[manager_1] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        227
Source: 
> 
>     function removeManagers(address manager_1, address manager_2, address manager_3, address manager_4, address manager_5, address manager_6, address manager_7, address manager_8, address manager_9, address manager_10) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         managers[manager_1] = false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        240
Source: 
> 
>     function addManager(address manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         managers[manager] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        244
Source: 
> 
>     function removeManager(address manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         managers[manager] = false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        548
Source: 
> 
>     function viewUserReferrals(uint _user) public view returns(uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referrals;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        552
Source: 
> 
>     function viewUserIntroducers(uint _user) public view returns(uint[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return users[_user].introducers;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHStvo
Line:        556
Source: 
> 
>     function viewUserLevel(uint _user) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].level;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ETHStvo
Line:        496
Source: 
>                 if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].level >= _level && (users[users[_user].introducers[i]].introducedTotal >= SafeMath.add(i, uint(1)) || users[users[_user].introducers[i]].introducedTotal >= uint(3))){
>                   address(uint160(users[users[_user].introducers[i]].wallet)).transfer(UPLINE[msg.value]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   emit Payment(_user, users[_user].introducers[i], uint(3), _level, UPLINE[msg.value], now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ETHStvo
Line:        485
Source: 
>             } else {
>                 address(uint160(users[introducer_id].wallet)).transfer(INTRODUCER[msg.value]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,INTRODUCER[msg.value]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ETHStvo
Line:        472
Source: 
>         } else {
>                 address(uint160(users[sponsor_id].wallet)).transfer(SPONSOR[msg.value]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,SPONSOR[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ETHStvo
Line:        450
Source: 
>         if(FEE[msg.value] > 0){
>           address(uint160(Main_address)).transfer(FEE[msg.value]);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           money_left = SafeMath.sub(money_left,FEE[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ETHStvo
Line:        508
Source: 
>         if(money_left > 0){
>             address(uint160(Upline_address)).transfer(money_left);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Stats = SafeMath.add(Stats,money_left);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        45
Source: 
>   address owner;
>   address Main_address;
>   ^^^^^^^^^^^^^^^^^^^^
>   address public main_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        46
Source: 
>   address Main_address;
>   address public main_address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address Upline_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        47
Source: 
>   address public main_address;
>   address Upline_address;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public upline_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        48
Source: 
>   address Upline_address;
>   address public upline_address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => bool) managers;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        75
Source: 
> 
>     mapping (uint => uint) public LEVEL_PRICE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) SPONSOR;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        76
Source: 
>     mapping (uint => uint) public LEVEL_PRICE;
>     mapping (uint => uint) SPONSOR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) INTRODUCER;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        77
Source: 
>     mapping (uint => uint) SPONSOR;
>     mapping (uint => uint) INTRODUCER;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) UPLINE;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        78
Source: 
>     mapping (uint => uint) INTRODUCER;
>     mapping (uint => uint) UPLINE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) FEE;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        79
Source: 
>     mapping (uint => uint) UPLINE;
>     mapping (uint => uint) FEE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint REFERRAL_LIMIT = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        80
Source: 
>     mapping (uint => uint) FEE;
>     uint REFERRAL_LIMIT = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        96
Source: 
>     mapping (address => uint) public userList;
>     mapping (uint => uint) public stats_level;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        99
Source: 
>     uint public currentUserID = 0;
>     uint public stats_total = 0 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint stats = 0 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        101
Source: 
>     uint stats = 0 ether;
>     uint Stats = 0 ether;
>     ^^^^^^^^^^^^^^^^^^^^
>     bool public paused = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        337
Source: 
> 
>         uint _introducerID = _referrerID;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        362
Source: 
> 
>         uint upline_1_id = users[_introducerID].introducerID;
>         ^^^^^^^^^^^^^^^^
>         uint upline_2_id = users[upline_1_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        363
Source: 
>         uint upline_1_id = users[_introducerID].introducerID;
>         uint upline_2_id = users[upline_1_id].introducerID;
>         ^^^^^^^^^^^^^^^^
>         uint upline_3_id = users[upline_2_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        364
Source: 
>         uint upline_2_id = users[upline_1_id].introducerID;
>         uint upline_3_id = users[upline_2_id].introducerID;
>         ^^^^^^^^^^^^^^^^
>         uint upline_4_id = users[upline_3_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        365
Source: 
>         uint upline_3_id = users[upline_2_id].introducerID;
>         uint upline_4_id = users[upline_3_id].introducerID;
>         ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        403
Source: 
> 
>         uint level_previous = SafeMath.sub(_level, uint(1));
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        419
Source: 
> 
>         uint sponsor_id;
>         ^^^^^^^^^^^^^^^
>         uint introducer_id = users[_user].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        420
Source: 
>         uint sponsor_id;
>         uint introducer_id = users[_user].introducerID;
>         ^^^^^^^^^^^^^^^^^^
>         uint money_left = msg.value;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        421
Source: 
>         uint introducer_id = users[_user].introducerID;
>         uint money_left = msg.value;
>         ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        425
Source: 
> 
>             uint upline_2_id = users[users[introducer_id].introducerID].introducerID;
>             ^^^^^^^^^^^^^^^^
>             uint upline_3_id = users[upline_2_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        426
Source: 
>             uint upline_2_id = users[users[introducer_id].introducerID].introducerID;
>             uint upline_3_id = users[upline_2_id].introducerID;
>             ^^^^^^^^^^^^^^^^
>             uint upline_4_id = users[upline_3_id].introducerID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHStvo
Line:        427
Source: 
>             uint upline_3_id = users[upline_2_id].introducerID;
>             uint upline_4_id = users[upline_3_id].introducerID;
>             ^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        14
Source: 
> */
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        44
Source: 
> 
>   address owner;
>   ^^^^^^^^^^^^^
>   address Main_address;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        45
Source: 
>   address owner;
>   address Main_address;
>   ^^^^^^^^^^^^^^^^^^^^
>   address public main_address;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        47
Source: 
>   address public main_address;
>   address Upline_address;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public upline_address;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        49
Source: 
>   address public upline_address;
>   mapping (address => bool) managers;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHStvo
Line:        76
Source: 
>     mapping (uint => uint) public LEVEL_PRICE;
>     mapping (uint => uint) SPONSOR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) INTRODUCER;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHStvo
Line:        77
Source: 
>     mapping (uint => uint) SPONSOR;
>     mapping (uint => uint) INTRODUCER;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) UPLINE;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHStvo
Line:        78
Source: 
>     mapping (uint => uint) INTRODUCER;
>     mapping (uint => uint) UPLINE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (uint => uint) FEE;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHStvo
Line:        79
Source: 
>     mapping (uint => uint) UPLINE;
>     mapping (uint => uint) FEE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint REFERRAL_LIMIT = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHStvo
Line:        80
Source: 
>     mapping (uint => uint) FEE;
>     uint REFERRAL_LIMIT = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHStvo
Line:        100
Source: 
>     uint public stats_total = 0 ether;
>     uint stats = 0 ether;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint Stats = 0 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHStvo
Line:        101
Source: 
>     uint stats = 0 ether;
>     uint Stats = 0 ether;
>     ^^^^^^^^^^^^^^^^^^^^
>     bool public paused = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETHStvo
Line:        508
Source: 
>         if(money_left > 0){
>             address(uint160(Upline_address)).transfer(money_left);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Stats = SafeMath.add(Stats,money_left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        450
Source: 
>         if(FEE[msg.value] > 0){
>           address(uint160(Main_address)).transfer(FEE[msg.value]);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           money_left = SafeMath.sub(money_left,FEE[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        496
Source: 
>                 if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].level >= _level && (users[users[_user].introducers[i]].introducedTotal >= SafeMath.add(i, uint(1)) || users[users[_user].introducers[i]].introducedTotal >= uint(3))){
>                   address(uint160(users[users[_user].introducers[i]].wallet)).transfer(UPLINE[msg.value]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   emit Payment(_user, users[_user].introducers[i], uint(3), _level, UPLINE[msg.value], now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        485
Source: 
>             } else {
>                 address(uint160(users[introducer_id].wallet)).transfer(INTRODUCER[msg.value]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,INTRODUCER[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        472
Source: 
>         } else {
>                 address(uint160(users[sponsor_id].wallet)).transfer(SPONSOR[msg.value]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,SPONSOR[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        450
Source: 
>         if(FEE[msg.value] > 0){
>           address(uint160(Main_address)).transfer(FEE[msg.value]);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           money_left = SafeMath.sub(money_left,FEE[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        496
Source: 
>                 if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].level >= _level && (users[users[_user].introducers[i]].introducedTotal >= SafeMath.add(i, uint(1)) || users[users[_user].introducers[i]].introducedTotal >= uint(3))){
>                   address(uint160(users[users[_user].introducers[i]].wallet)).transfer(UPLINE[msg.value]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   emit Payment(_user, users[_user].introducers[i], uint(3), _level, UPLINE[msg.value], now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        508
Source: 
>         if(money_left > 0){
>             address(uint160(Upline_address)).transfer(money_left);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Stats = SafeMath.add(Stats,money_left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        485
Source: 
>             } else {
>                 address(uint160(users[introducer_id].wallet)).transfer(INTRODUCER[msg.value]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,INTRODUCER[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHStvo
Line:        472
Source: 
>         } else {
>                 address(uint160(users[sponsor_id].wallet)).transfer(SPONSOR[msg.value]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,SPONSOR[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHStvo
Line:        450
Source: 
>         if(FEE[msg.value] > 0){
>           address(uint160(Main_address)).transfer(FEE[msg.value]);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           money_left = SafeMath.sub(money_left,FEE[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHStvo
Line:        496
Source: 
>                 if(users[users[_user].introducers[i]].isExist && users[users[_user].introducers[i]].level >= _level && (users[users[_user].introducers[i]].introducedTotal >= SafeMath.add(i, uint(1)) || users[users[_user].introducers[i]].introducedTotal >= uint(3))){
>                   address(uint160(users[users[_user].introducers[i]].wallet)).transfer(UPLINE[msg.value]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                   emit Payment(_user, users[_user].introducers[i], uint(3), _level, UPLINE[msg.value], now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHStvo
Line:        508
Source: 
>         if(money_left > 0){
>             address(uint160(Upline_address)).transfer(money_left);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Stats = SafeMath.add(Stats,money_left);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHStvo
Line:        485
Source: 
>             } else {
>                 address(uint160(users[introducer_id].wallet)).transfer(INTRODUCER[msg.value]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,INTRODUCER[msg.value]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHStvo
Line:        472
Source: 
>         } else {
>                 address(uint160(users[sponsor_id].wallet)).transfer(SPONSOR[msg.value]);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 money_left = SafeMath.sub(money_left,SPONSOR[msg.value]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        45
Source: 
>   address owner;
>   address Main_address;
>   ^^^^^^^^^^^^^^^^^^^^
>   address public main_address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        47
Source: 
>   address public main_address;
>   address Upline_address;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public upline_address;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ownable
Line:        45
Source: 
>   address owner;
>   address Main_address;
>   ^^^^^^^^^^^^^^^^^^^^
>   address public main_address;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ownable
Line:        47
Source: 
>   address public main_address;
>   address Upline_address;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public upline_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        45
Source: 
>   address owner;
>   address Main_address;
>   ^^^^^^^^^^^^^^^^^^^^
>   address public main_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        46
Source: 
>   address Main_address;
>   address public main_address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address Upline_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        47
Source: 
>   address public main_address;
>   address Upline_address;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public upline_address;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        48
Source: 
>   address Upline_address;
>   address public upline_address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => bool) managers;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        49
Source: 
>   address public upline_address;
>   mapping (address => bool) managers;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        48
Source: 
>   address Upline_address;
>   address public upline_address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => bool) managers;

[0m
