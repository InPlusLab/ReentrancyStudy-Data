Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        151
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        156
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        279
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        298
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        307
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        345
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        298
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        307
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        345
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaoStakeContract
Line:        450
Source: 
>      */
>     function stakeALT(uint256 _altQuantity, uint256 _days)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaoStakeContract
Line:        664
Source: 
>      */
>     function updateRatio(uint256 _rate) public onlyOwner whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ratio = _rate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaoStakeContract
Line:        668
Source: 
> 
>     function updateTime(uint256 _time) public onlyOwner whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ONE_DAY = _time;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaoStakeContract
Line:        672
Source: 
> 
>     function updateQuantity(uint256 _quantity) public onlyOwner whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         maxStakedQuantity = _quantity;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaoStakeContract
Line:        679
Source: 
>      */
>     function updatestakeDays(uint256 _stakeDays) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakeDays = _stakeDays;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaoStakeContract
Line:        684
Source: 
>     /* @dev Funtion to withdraw all PHNX from contract incase of emergency, can only be called by owner.*/
>     function withdrawTokens() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(phnxContractAddress).transfer(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaoStakeContract
Line:        699
Source: 
>      */
>     function setPheonixContractAddress(address _address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         phnxContractAddress = _address;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DaoStakeContract
Line:        709
Source: 
>     /* @dev function which disables the Pause function. */
>     function unPause() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _unpause();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DaoStakeContract
Line:        461
Source: 
> 
>         IERC20(phnxContractAddress).transferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DaoStakeContract
Line:        487
Source: 
> 
>         IERC20(phnxContractAddress).transfer(msg.sender, rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DaoStakeContract
Line:        618
Source: 
>         if (burnAmount > 0) {
>             IERC20(phnxContractAddress).transfer(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0x0000000000000000000000000000000000000001,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DaoStakeContract
Line:        687
Source: 
>             owner(),
>             IERC20(phnxContractAddress).balanceOf(address(this))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DaoStakeContract
Line:        685
Source: 
>     function withdrawTokens() public onlyOwner {
>         IERC20(phnxContractAddress).transfer(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner(),

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DaoStakeContract
Line:        693
Source: 
>     function getTotalrewardTokens() external view returns(uint256){
>         return IERC20(phnxContractAddress).balanceOf(address(this)).sub(totalStakedTokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaoStakeContract
Line:        504
Source: 
>      */
>     function unstakeALT(uint256[] calldata _expiredTimestamps, uint256 _amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaoStakeContract
Line:        672
Source: 
> 
>     function updateQuantity(uint256 _quantity) public onlyOwner whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         maxStakedQuantity = _quantity;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DaoStakeContract
Line:        679
Source: 
>      */
>     function updatestakeDays(uint256 _stakeDays) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakeDays = _stakeDays;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DaoStakeContract
Line:        664
Source: 
>      */
>     function updateRatio(uint256 _rate) public onlyOwner whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ratio = _rate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DaoStakeContract
Line:        668
Source: 
> 
>     function updateTime(uint256 _time) public onlyOwner whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ONE_DAY = _time;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DaoStakeContract
Line:        699
Source: 
>      */
>     function setPheonixContractAddress(address _address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         phnxContractAddress = _address;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        155
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DaoStakeContract
Line:        658
Source: 
>     ) internal pure returns (uint256 burnAmount) {
>         burnAmount = ((_amount * _remainingDays) / _totalDays);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaoStakeContract
Line:        461
Source: 
> 
>         IERC20(phnxContractAddress).transferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DaoStakeContract
Line:        487
Source: 
> 
>         IERC20(phnxContractAddress).transfer(msg.sender, rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaoStakeContract
Line:        402
Source: 
> 
>     uint256 ONE_DAY;
>     ^^^^^^^^^^^^^^^
>     uint256 public stakeDays;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaoStakeContract
Line:        469
Source: 
> 
>         uint256 _timestamp = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaoStakeContract
Line:        522
Source: 
>             ) {
>                 uint256 _remainingDays = (
>                 ^^^^^^^^^^^^^^^^^^^^^^
>                     stakerData[_expiredTimestamps[i]]

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DaoStakeContract
Line:        529
Source: 
>                     .div(ONE_DAY);
>                 uint256 _totalDays = stakerData[_expiredTimestamps[i]]
>                 ^^^^^^^^^^^^^^^^^^
>                     .durationTimestamp

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DaoStakeContract
Line:        402
Source: 
> 
>     uint256 ONE_DAY;
>     ^^^^^^^^^^^^^^^
>     uint256 public stakeDays;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DaoStakeContract
Line:        441
Source: 
>         phnxContractAddress = 0x38A2fDc11f526Ddd5a607C1F251C065f40fBF2f7;
>         maxStakedQuantity = 10000000000000000000000;
>                             ^^^^^^^^^^^^^^^^^^^^^^^
>         stakeDays = 365;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DaoStakeContract
Line:        644
Source: 
>         rewardAmount = (_altQuantity.mul(_ratio).mul(_days)).div(
>             1000000000000000000
>             ^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DaoStakeContract
Line:        687
Source: 
>             owner(),
>             IERC20(phnxContractAddress).balanceOf(address(this))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaoStakeContract
Line:        461
Source: 
> 
>         IERC20(phnxContractAddress).transferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaoStakeContract
Line:        487
Source: 
> 
>         IERC20(phnxContractAddress).transfer(msg.sender, rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaoStakeContract
Line:        618
Source: 
>         if (burnAmount > 0) {
>             IERC20(phnxContractAddress).transfer(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0x0000000000000000000000000000000000000001,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaoStakeContract
Line:        630
Source: 
> 
>         IERC20(phnxContractAddress).transfer(msg.sender, withdrawAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return withdrawAmount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaoStakeContract
Line:        685
Source: 
>     function withdrawTokens() public onlyOwner {
>         IERC20(phnxContractAddress).transfer(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner(),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DaoStakeContract
Line:        693
Source: 
>     function getTotalrewardTokens() external view returns(uint256){
>         return IERC20(phnxContractAddress).balanceOf(address(this)).sub(totalStakedTokens);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DaoStakeContract
Line:        407
Source: 
>     uint256 public ratio;
>     uint256 public totalStakedTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DaoStakeContract
Line:        475
Source: 
> 
>         stakerData[_timestamp] = StakerData(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _altQuantity,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DaoStakeContract
Line:        485
Source: 
> 
>         totalStakedTokens = totalStakedTokens.add(_altQuantity);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DaoStakeContract
Line:        554
Source: 
>                     );
>                     stakerData[_expiredTimestamps[i]].altQuantity = 0;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 } else if (

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DaoStakeContract
Line:        559
Source: 
>                 ) {
>                     stakerData[_expiredTimestamps[i]]
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         .altQuantity = stakerData[_expiredTimestamps[i]]

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DaoStakeContract
Line:        594
Source: 
>                     );
>                     stakerData[_expiredTimestamps[i]].altQuantity = 0;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 } else if (

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DaoStakeContract
Line:        599
Source: 
>                 ) {
>                     stakerData[_expiredTimestamps[i]]
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         .altQuantity = stakerData[_expiredTimestamps[i]]

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DaoStakeContract
Line:        628
Source: 
> 
>         totalStakedTokens = totalStakedTokens.sub(withdrawAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        382
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        394
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        382
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        394
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaoStakeContract
Line:        461
Source: 
> 
>         IERC20(phnxContractAddress).transferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaoStakeContract
Line:        487
Source: 
> 
>         IERC20(phnxContractAddress).transfer(msg.sender, rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaoStakeContract
Line:        618
Source: 
>         if (burnAmount > 0) {
>             IERC20(phnxContractAddress).transfer(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 0x0000000000000000000000000000000000000001,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaoStakeContract
Line:        630
Source: 
> 
>         IERC20(phnxContractAddress).transfer(msg.sender, withdrawAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return withdrawAmount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DaoStakeContract
Line:        685
Source: 
>     function withdrawTokens() public onlyOwner {
>         IERC20(phnxContractAddress).transfer(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner(),

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    DaoStakeContract
Line:        469
Source: 
> 
>         uint256 _timestamp = block.timestamp;
>                              ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    DaoStakeContract
Line:        520
Source: 
>                     stakerData[_expiredTimestamps[i]].durationTimestamp //if timestamp is not expired
>                 ) >= block.timestamp
>                      ^^^^^^^^^^^^^^^
>             ) {

[0m
