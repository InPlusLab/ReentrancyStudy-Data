Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LockAndHold
Line:        88
Source: 
>     
>     string public padding = "0x0909090909";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LockAndHold
Line:        127
Source: 
>     
>     function isAddressLocking(address _address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return lock_registry[_address];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LockAndHold
Line:        131
Source: 
>     
>     function getLockReceiptBySender(address _address) public view returns (bytes memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Lock storage t = locks[_address];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LockAndHold
Line:        136
Source: 
>     
>     function getLockAmountBySender(address _address) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return locks[_address].value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LockAndHold
Line:        140
Source: 
>     
>     function getLockupUntilTimeBySender(address _address) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return locks[_address].withdrawl_time;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LockAndHold
Line:        144
Source: 
>     
>     function getCurrentBlockTime() public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return block.timestamp;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LockAndHold
Line:        127
Source: 
>     
>     function isAddressLocking(address _address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return lock_registry[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LockAndHold
Line:        131
Source: 
>     
>     function getLockReceiptBySender(address _address) public view returns (bytes memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Lock storage t = locks[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LockAndHold
Line:        136
Source: 
>     
>     function getLockAmountBySender(address _address) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return locks[_address].value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LockAndHold
Line:        140
Source: 
>     
>     function getLockupUntilTimeBySender(address _address) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return locks[_address].withdrawl_time;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LockAndHold
Line:        160
Source: 
>     
>     function lockOnTime(int8 _timeIDX) requireNotAlreadyLocked external payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 until = block.timestamp.add(Times[_timeIDX]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LockAndHold
Line:        175
Source: 
>     
>     function customLockByMonth(uint256 _number_of_months) requireNotAlreadyLocked external payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 time_to_lock = _number_of_months.mul(ONE_MONTH);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    LockAndHold
Line:        194
Source: 
>         
>         msg.sender.transfer(locks[msg.sender].value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         locks[msg.sender].value = 0; // Just in case...

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    LockAndHold
Line:        210
Source: 
>     event Receipt(bytes32 id, uint256 amount, uint256 locked_on, uint256 until);
>     event Message(bytes16 status, bytes32 msg);
>                                   ^^^^^^^^^^^
>     event Withdrawl(address to, uint256 on);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LockAndHold
Line:        90
Source: 
>     
>     mapping (int256 => uint256) Times;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LockAndHold
Line:        99
Source: 
>     mapping (address => Lock) locks;
>     mapping (address => bool) lock_registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //mapping (bytes32 => Lock) lookupLockByID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LockAndHold
Line:        152
Source: 
>     
>     function __generateId(address _sender, uint256 _now, uint _salt) private pure returns (bytes32 id){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keccak256(abi.encode(_sender, _now, _salt));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LockAndHold
Line:        176
Source: 
>     function customLockByMonth(uint256 _number_of_months) requireNotAlreadyLocked external payable {
>         uint256 time_to_lock = _number_of_months.mul(ONE_MONTH);
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 until = block.timestamp.add(time_to_lock);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity^0.5.11;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LockAndHold
Line:        83
Source: 
>     
>     uint256 constant ONE_MONTH    = 2629746;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant THREE_MONTHS = 7889238;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LockAndHold
Line:        84
Source: 
>     uint256 constant ONE_MONTH    = 2629746;
>     uint256 constant THREE_MONTHS = 7889238;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant SIX_MONTHS   = 15778476;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LockAndHold
Line:        85
Source: 
>     uint256 constant THREE_MONTHS = 7889238;
>     uint256 constant SIX_MONTHS   = 15778476;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant YEAR         = 31556952;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LockAndHold
Line:        86
Source: 
>     uint256 constant SIX_MONTHS   = 15778476;
>     uint256 constant YEAR         = 31556952;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LockAndHold
Line:        90
Source: 
>     
>     mapping (int256 => uint256) Times;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LockAndHold
Line:        98
Source: 
>     
>     mapping (address => Lock) locks;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => bool) lock_registry;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LockAndHold
Line:        99
Source: 
>     mapping (address => Lock) locks;
>     mapping (address => bool) lock_registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //mapping (bytes32 => Lock) lookupLockByID;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    LockAndHold
Line:        194
Source: 
>         
>         msg.sender.transfer(locks[msg.sender].value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         locks[msg.sender].value = 0; // Just in case...

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LockAndHold
Line:        194
Source: 
>         
>         msg.sender.transfer(locks[msg.sender].value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         locks[msg.sender].value = 0; // Just in case...

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LockAndHold
Line:        77
Source: 
>     
>     address public initializer;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    LockAndHold
Line:        145
Source: 
>     function getCurrentBlockTime() public view returns (uint256){
>         return block.timestamp;
>                ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    LockAndHold
Line:        192
Source: 
>     function withdrawl() requireIsAlreadyLocked external {
>         require(locks[msg.sender].withdrawl_time <= block.timestamp, "Lockup period is still in effect");
>                                                     ^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    LockAndHold
Line:        161
Source: 
>     function lockOnTime(int8 _timeIDX) requireNotAlreadyLocked external payable {
>         uint256 until = block.timestamp.add(Times[_timeIDX]);
>                         ^^^^^^^^^^^^^^^
>         bytes32 id = __generateId(msg.sender, block.timestamp, block.number);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    LockAndHold
Line:        162
Source: 
>         uint256 until = block.timestamp.add(Times[_timeIDX]);
>         bytes32 id = __generateId(msg.sender, block.timestamp, block.number);
>                                               ^^^^^^^^^^^^^^^
>         

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    LockAndHold
Line:        177
Source: 
>         uint256 time_to_lock = _number_of_months.mul(ONE_MONTH);
>         uint256 until = block.timestamp.add(time_to_lock);
>                         ^^^^^^^^^^^^^^^
>         bytes32 id = __generateId(msg.sender, block.timestamp, block.number);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    LockAndHold
Line:        178
Source: 
>         uint256 until = block.timestamp.add(time_to_lock);
>         bytes32 id = __generateId(msg.sender, block.timestamp, block.number);
>                                               ^^^^^^^^^^^^^^^
>         

[0m
