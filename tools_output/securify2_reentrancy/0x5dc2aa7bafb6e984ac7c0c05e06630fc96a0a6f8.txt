Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        325
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) return 0;
>             ^^^^^^
>         uint256 c = a * b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        327
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        83
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        92
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        83
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        92
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KawaPool
Line:        468
Source: 
> 
>     function userStaked(address addrToCheck) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return userList[addrToCheck].staked;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KawaPool
Line:        528
Source: 
> 
>     function claimAndWithdraw() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawReward();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KawaPool
Line:        533
Source: 
> 
>     function stakeTokens(uint256 amountOfTokens) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalStaked = totalStaked.add(amountOfTokens);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KawaPool
Line:        477
Source: 
>     {
>         if (xKawaToken.balanceOf(address(this)) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             withdrawable = calculateStaked(addrToCheck)

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KawaPool
Line:        481
Source: 
>             .sub(userList[msg.sender].withdrawn);
>             if (withdrawable > xKawaToken.balanceOf(address(this))) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 withdrawable = xKawaToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KawaPool
Line:        482
Source: 
>             if (withdrawable > xKawaToken.balanceOf(address(this))) {
>                 withdrawable = xKawaToken.balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KawaPool
Line:        498
Source: 
>                 msg.sender,
>                 xKawaToken.balanceOf(address(this))
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ),

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KawaPool
Line:        496
Source: 
>         require(
>             xKawaToken.transfer(
>             ^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KawaPool
Line:        508
Source: 
>         require(
>             stakeToken.transfer(msg.sender, userList[msg.sender].staked),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake Token Transfer failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KawaPool
Line:        518
Source: 
>         require(
>             xKawaToken.transfer(msg.sender, withdrawable),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Reward Token Transfer failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KawaPool
Line:        536
Source: 
>         require(
>             stakeToken.transferFrom(msg.sender, address(this), amountOfTokens),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake Token Transfer Failed"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KawaPool
Line:        472
Source: 
> 
>     function userClaimable(address addrToCheck)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KawaPool
Line:        533
Source: 
> 
>     function stakeTokens(uint256 amountOfTokens) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalStaked = totalStaked.add(amountOfTokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KawaPool
Line:        468
Source: 
> 
>     function userStaked(address addrToCheck) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return userList[addrToCheck].staked;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KawaPool
Line:        489
Source: 
> 
>     function changeAPY(uint256 newAPY) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         apys.push(newAPY);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        326
Source: 
>         if (a == 0) return 0;
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KawaPool
Line:        508
Source: 
>         require(
>             stakeToken.transfer(msg.sender, userList[msg.sender].staked),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake Token Transfer failed"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KawaPool
Line:        518
Source: 
>         require(
>             xKawaToken.transfer(msg.sender, withdrawable),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Reward Token Transfer failed"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KawaPool
Line:        536
Source: 
>         require(
>             stakeToken.transferFrom(msg.sender, address(this), amountOfTokens),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake Token Transfer Failed"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KawaPool
Line:        439
Source: 
> contract KawaPool is Ownable {
>     struct user {
>     ^^^^^^^^^^^^^
>         uint256 staked;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.6.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KawaPool
Line:        449
Source: 
>     uint256 public totalStaked;
>     uint256[] apys;
>     ^^^^^^^^^^^^^^
>     uint256[] apyTimes;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KawaPool
Line:        450
Source: 
>     uint256[] apys;
>     uint256[] apyTimes;
>     ^^^^^^^^^^^^^^^^^^
>     mapping(address => user) public userList;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KawaPool
Line:        453
Source: 
>     event StakeTokens(address indexed user, uint256 tokensStaked);
>     IERC20 stakeToken;
>     ^^^^^^^^^^^^^^^^^
>     IERC20 xKawaToken;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KawaPool
Line:        454
Source: 
>     IERC20 stakeToken;
>     IERC20 xKawaToken;
>     ^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) earlyUnstake;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KawaPool
Line:        455
Source: 
>     IERC20 xKawaToken;
>     mapping(address => uint256) earlyUnstake;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KawaPool
Line:        477
Source: 
>     {
>         if (xKawaToken.balanceOf(address(this)) > 0) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             withdrawable = calculateStaked(addrToCheck)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KawaPool
Line:        481
Source: 
>             .sub(userList[msg.sender].withdrawn);
>             if (withdrawable > xKawaToken.balanceOf(address(this))) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 withdrawable = xKawaToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KawaPool
Line:        496
Source: 
>         require(
>             xKawaToken.transfer(
>             ^^^^^^^^^^^^^^^^^^^^
>                 msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KawaPool
Line:        508
Source: 
>         require(
>             stakeToken.transfer(msg.sender, userList[msg.sender].staked),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake Token Transfer failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KawaPool
Line:        518
Source: 
>         require(
>             xKawaToken.transfer(msg.sender, withdrawable),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Reward Token Transfer failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KawaPool
Line:        536
Source: 
>         require(
>             stakeToken.transferFrom(msg.sender, address(this), amountOfTokens),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Stake Token Transfer Failed"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KawaPool
Line:        482
Source: 
>             if (withdrawable > xKawaToken.balanceOf(address(this))) {
>                 withdrawable = xKawaToken.balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KawaPool
Line:        498
Source: 
>                 msg.sender,
>                 xKawaToken.balanceOf(address(this))
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ),

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    KawaPool
Line:        447
Source: 
>     using SafeMath for uint256;
>     uint256 public mintedTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalStaked;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    KawaPool
Line:        448
Source: 
>     uint256 public mintedTokens;
>     uint256 public totalStaked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[] apys;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KawaPool
Line:        511
Source: 
>         );
>         totalStaked = totalStaked.sub(userList[msg.sender].staked);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete userList[msg.sender];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KawaPool
Line:        525
Source: 
>         delete earlyUnstake[msg.sender];
>         mintedTokens = mintedTokens.add(withdrawable);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KawaPool
Line:        534
Source: 
>     function stakeTokens(uint256 amountOfTokens) public {
>         totalStaked = totalStaked.add(amountOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KawaPool
Line:        512
Source: 
>         totalStaked = totalStaked.sub(userList[msg.sender].staked);
>         delete userList[msg.sender];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KawaPool
Line:        521
Source: 
>         );
>         userList[msg.sender].withdrawn = userList[msg.sender].withdrawn.add(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             withdrawable

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KawaPool
Line:        539
Source: 
>         );
>         userList[msg.sender].staked = userList[msg.sender].staked.add(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             amountOfTokens

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KawaPool
Line:        542
Source: 
>         );
>         userList[msg.sender].stakeTimes.push(now);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userList[msg.sender].stakeAmounts.push(amountOfTokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KawaPool
Line:        543
Source: 
>         userList[msg.sender].stakeTimes.push(now);
>         userList[msg.sender].stakeAmounts.push(amountOfTokens);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userList[msg.sender].startingAPYLength.push(apys.length - 1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KawaPool
Line:        544
Source: 
>         userList[msg.sender].stakeAmounts.push(amountOfTokens);
>         userList[msg.sender].startingAPYLength.push(apys.length - 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit StakeTokens(msg.sender, amountOfTokens);

[0m
