[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        395
Source: 
>    */
>   function delegateMintingRights(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address newMinter,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        416
Source: 
>    */
>   function removeMintingRights(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address minter

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        439
Source: 
>    */
>   function addSigner(
>   ^^^^^^^^^^^^^^^^^^^
>     address newSigner

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        455
Source: 
>    */
>   function removeSigner(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address signer

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        471
Source: 
>    */
>   function addUpgradeAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address upgradeAddress

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        487
Source: 
>    */
>   function addRoot(
>   ^^^^^^^^^^^^^^^^^
>     bytes32 deviceRootHash,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        637
Source: 
> 
>   function isDeviceMintable(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 hardwareHash

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        659
Source: 
> 
>   function verifyRoot(bytes32 root
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   )

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RegisterMerkleRoot
Line:        395
Source: 
>    */
>   function delegateMintingRights(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address newMinter,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RegisterMerkleRoot
Line:        566
Source: 
>    */
>   function mintKong(
>   ^^^^^^^^^^^^^^^^^^
>     bytes32[] calldata proof,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RegisterMerkleRoot
Line:        674
Source: 
> 
>   function verifyProof(
>   ^^^^^^^^^^^^^^^^^^^^^
>     bytes32[] memory proof, 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        439
Source: 
>    */
>   function addSigner(
>   ^^^^^^^^^^^^^^^^^^^
>     address newSigner

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        455
Source: 
>    */
>   function removeSigner(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address signer

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        471
Source: 
>    */
>   function addUpgradeAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address upgradeAddress

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        487
Source: 
>    */
>   function addRoot(
>   ^^^^^^^^^^^^^^^^^
>     bytes32 deviceRootHash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        614
Source: 
>    */
>   function addAddress(
>   ^^^^^^^^^^^^^^^^^^^^
>     bytes32 primaryPublicKeyHash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        637
Source: 
> 
>   function isDeviceMintable(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 hardwareHash

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        649
Source: 
> 
>   function getDeviceAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 hardwareHash

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        659
Source: 
> 
>   function verifyRoot(bytes32 root
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   )

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        702
Source: 
>    */
>   function getRootDetails(
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 root

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        730
Source: 
>    */
>   function getRootByIndex(
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 rootIndex

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RegisterMerkleRoot
Line:        513
Source: 
> 
>       uint256 _maxMinted = KongERC20Interface(_kongERC20Address).getMintingLimit();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(_totalMintable.add(totalMintableKong) <= _maxMinted, 'Exceeds cumulative limit.');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        232
Source: 
>   // Account with the right to adjust the set of minters.
>   address public _owner;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        235
Source: 
>   // Address of the Kong ERC20 account.
>   address public _kongERC20Address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        238
Source: 
>   // Address of future registry.
>   address public _upgradeContract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        241
Source: 
>   // Sum of Kong amounts marked as mintable for registered devices.
>   uint256 public _totalMintable;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        244
Source: 
>   // Minters.
>   mapping (address => bool) public _minters;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        247
Source: 
>   // Minting caps.
>   mapping (address => uint256) public _mintingCaps;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        259
Source: 
>   // Signers.
>   mapping(address => bool) public _signers;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        275
Source: 
> 
>   uint256 public _deviceRootCount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        513
Source: 
> 
>       uint256 _maxMinted = KongERC20Interface(_kongERC20Address).getMintingLimit();
>       ^^^^^^^^^^^^^^^^^^
>       require(_totalMintable.add(totalMintableKong) <= _maxMinted, 'Exceeds cumulative limit.');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RegisterMerkleRoot
Line:        513
Source: 
> 
>       uint256 _maxMinted = KongERC20Interface(_kongERC20Address).getMintingLimit();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(_totalMintable.add(totalMintableKong) <= _maxMinted, 'Exceeds cumulative limit.');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        603
Source: 
>     // Mint.
>     KongERC20Interface(_kongERC20Address).mint(r.deviceKongAmount, recipient);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        238
Source: 
>   // Address of future registry.
>   address public _upgradeContract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        241
Source: 
>   // Sum of Kong amounts marked as mintable for registered devices.
>   uint256 public _totalMintable;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        275
Source: 
> 
>   uint256 public _deviceRootCount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RegisterMerkleRoot
Line:        238
Source: 
>   // Address of future registry.
>   address public _upgradeContract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    RegisterMerkleRoot
Line:        584
Source: 
>     // Make sure proof time is mintable
>     require(block.timestamp >= r.mintableTime, 'Cannot mint yet.');
>             ^^^^^^^^^^^^^^^
> 

[0m
