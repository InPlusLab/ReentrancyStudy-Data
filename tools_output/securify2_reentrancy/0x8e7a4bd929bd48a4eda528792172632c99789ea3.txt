[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AAAAToken
Line:        250
Source: 
>     // implementation of ERC20 interfaces.
>     string public name = "AAAA Token";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "AAAA";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AAAAToken
Line:        251
Source: 
>     string public name = "AAAA Token";
>     string public symbol = "AAAA";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AAAAToken
Line:        252
Source: 
>     string public symbol = "AAAA";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public totalSupply = 10240000 * (1e18);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AAAAToken
Line:        281
Source: 
> 
>     function transfer(address to, uint value) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AAAAToken
Line:        286
Source: 
> 
>     function transferFrom(address from, address to, uint value) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowance[from][msg.sender] >= value, 'AAAA: INSUFFICIENT_ALLOWANCE');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Configable
Line:        209
Source: 
>     
>     function setupConfig(address _config) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         config = _config;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AAAAToken
Line:        275
Source: 
> 
>     function approve(address spender, uint value) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][spender] = value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Configable
Line:        211
Source: 
>         config = _config;
>         owner = IConfig(config).developer();
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Violation
Contract:    Configable
Line:        211
Source: 
>         config = _config;
>         owner = IConfig(config).developer();
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IConfig
Line:        195
Source: 
>     function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns (uint);
>     function DAY() external view returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function WETH() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IConfig
Line:        196
Source: 
>     function DAY() external view returns (uint);
>     function WETH() external view returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        242
Source: 
> 
> pragma solidity >=0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> // import "contracts/libraries/SafeMath.sol";

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Configable
Line:        211
Source: 
>         config = _config;
>         owner = IConfig(config).developer();
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Configable
Line:        200
Source: 
> contract Configable {
>     address public config;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address public owner;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AAAAToken
Line:        267
Source: 
>         require(balanceOf[from] >= value, 'AAAA: INSUFFICIENT_BALANCE');
>         balanceOf[from] = balanceOf[from].sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceOf[to] = balanceOf[to].add(value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AAAAToken
Line:        268
Source: 
>         balanceOf[from] = balanceOf[from].sub(value);
>         balanceOf[to] = balanceOf[to].add(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (to == address(0)) { // burn

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AAAAToken
Line:        270
Source: 
>         if (to == address(0)) { // burn
>             totalSupply = totalSupply.sub(value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AAAAToken
Line:        276
Source: 
>     function approve(address spender, uint value) external returns (bool) {
>         allowance[msg.sender][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, value);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AAAAToken
Line:        250
Source: 
>     // implementation of ERC20 interfaces.
>     string public name = "AAAA Token";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "AAAA";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AAAAToken
Line:        251
Source: 
>     string public name = "AAAA Token";
>     string public symbol = "AAAA";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AAAAToken
Line:        252
Source: 
>     string public symbol = "AAAA";
>     uint8 public decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public totalSupply = 10240000 * (1e18);

[0m
