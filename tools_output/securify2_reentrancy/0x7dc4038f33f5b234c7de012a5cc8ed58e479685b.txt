Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.4. Changing pragma version to 0.5.4....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SignerRole
Line:        78
Source: 
>         require(isSigner(msg.sender), "SignerRole: caller does not have the Signer role");
>         _;
>       ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        311
Source: 
>         require(isPauser(msg.sender), "PauserRole: caller does not have the Pauser role");
>         _;
>       ^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SignerRole
Line:        93
Source: 
> 
>     function _addSigner(address account) internal {
>                                                    
>         _signers.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SignerRole
Line:        98
Source: 
> 
>     function _removeSigner(address account) internal {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _signers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        141
Source: 
>     modifier onlyOwner() {
>         require(isOwner(), "Ownable: caller is not the owner");
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        165
Source: 
>     /**
>      * @dev Transfers ownership of the contract to a new account (`newOwner`).
>                                                                              ^
>      * Can only be called by the current owner.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
>      */
>     function _transferOwnership(address newOwner) internal {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        326
Source: 
> 
>     function _addPauser(address account) internal {
>                                                    
>         _pausers.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        331
Source: 
> 
>     function _removePauser(address account) internal {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pausers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        326
Source: 
> 
>     function _addPauser(address account) internal {
>                                                    
>         _pausers.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        331
Source: 
> 
>     function _removePauser(address account) internal {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pausers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        383
Source: 
>     modifier whenNotPaused() {
>         require(!_paused, "Pausable: paused");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        406
Source: 
>      */
>     function unpause() public onlyPauser whenPaused {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        417
Source: 
> contract ERC721 {
>     function transferFrom(address _from, address _to, uint _tokenId) public;
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SignerRole
Line:        93
Source: 
> 
>     function _addSigner(address account) internal {
>                                                    
>         _signers.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SignerRole
Line:        98
Source: 
> 
>     function _removeSigner(address account) internal {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _signers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        165
Source: 
>     /**
>      * @dev Transfers ownership of the contract to a new account (`newOwner`).
>                                                                              ^
>      * Can only be called by the current owner.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        175
Source: 
>      */
>     function _transferOwnership(address newOwner) internal {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        326
Source: 
> 
>     function _addPauser(address account) internal {
>                                                    
>         _pausers.add(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        331
Source: 
> 
>     function _removePauser(address account) internal {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pausers.remove(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        383
Source: 
>     modifier whenNotPaused() {
>         require(!_paused, "Pausable: paused");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        406
Source: 
>      */
>     function unpause() public onlyPauser whenPaused {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        417
Source: 
> contract ERC721 {
>     function transferFrom(address _from, address _to, uint _tokenId) public;
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Nftprice
Line:        465
Source: 
>         collect(
>             Order(addrs[0], address(uint160(addrs[1])), addrs[2], uints[0], uints[1], uints[2], uints[3]),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Sig(v, r, s)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SignerRole
Line:        89
Source: 
> 
>     function renounceSigner() public {
>                    ^^^^^^^^^^^^^^^^^^^
>         _removeSigner(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SignerRole
Line:        93
Source: 
> 
>     function _addSigner(address account) internal {
>                                                    
>         _signers.add(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        175
Source: 
>      */
>     function _transferOwnership(address newOwner) internal {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        322
Source: 
> 
>     function renouncePauser() public {
>                    ^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        326
Source: 
> 
>     function _addPauser(address account) internal {
>                                                    
>         _pausers.add(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        322
Source: 
> 
>     function renouncePauser() public {
>                    ^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        326
Source: 
> 
>     function _addPauser(address account) internal {
>                                                    
>         _pausers.add(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SignerRole
Line:        89
Source: 
> 
>     function renounceSigner() public {
>                    ^^^^^^^^^^^^^^^^^^^
>         _removeSigner(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SignerRole
Line:        93
Source: 
> 
>     function _addSigner(address account) internal {
>                                                    
>         _signers.add(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        175
Source: 
>      */
>     function _transferOwnership(address newOwner) internal {
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        322
Source: 
> 
>     function renouncePauser() public {
>                    ^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        326
Source: 
> 
>     function _addPauser(address account) internal {
>                                                    
>         _pausers.add(account);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Nftprice
Line:        458
Source: 
> 
>     function collect_(address[3] memory addrs, uint[4] memory uints, uint8 v, bytes32 r, bytes32 s)
>                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Nftprice
Line:        465
Source: 
>         collect(
>             Order(addrs[0], address(uint160(addrs[1])), addrs[2], uints[0], uints[1], uints[2], uints[3]),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Sig(v, r, s)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Nftprice
Line:        492
Source: 
>         return requireValidOrder(
>             Order(addrs[0], address(uint160(addrs[1])), addrs[2], uints[0], uints[1], uints[2], uints[3]),
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Sig(v, r, s)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Nftprice
Line:        481
Source: 
> 
>     function withdraw(uint amount) external onlySigner {
>                                       ^^^^^^^^^^^^^^^^^^
>         require(amount < address(this).balance, "Not enough balance");

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SignerRole
Line:        78
Source: 
>         require(isSigner(msg.sender), "SignerRole: caller does not have the Signer role");
>         _;
>       ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        125
Source: 
>      */
>     constructor () internal {
>              ^^^^^^^^^^^^^^^^
>         _owner = msg.sender;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PauserRole
Line:        311
Source: 
>         require(isPauser(msg.sender), "PauserRole: caller does not have the Pauser role");
>         _;
>       ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Pausable
Line:        373
Source: 
>     /**
>      * @dev Returns true if the contract is paused, and false otherwise.
>            ^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Nftprice
Line:        455
Source: 
>     {
>         return nonce[maker][asset][id];
>                                   ^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SignerRole
Line:        78
Source: 
>         require(isSigner(msg.sender), "SignerRole: caller does not have the Signer role");
>         _;
>       ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PauserRole
Line:        311
Source: 
>         require(isPauser(msg.sender), "PauserRole: caller does not have the Pauser role");
>         _;
>       ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Pausable
Line:        373
Source: 
>     /**
>      * @dev Returns true if the contract is paused, and false otherwise.
>            ^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Nftprice
Line:        455
Source: 
>     {
>         return nonce[maker][asset][id];
>                                   ^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Nftprice
Line:        481
Source: 
> 
>     function withdraw(uint amount) external onlySigner {
>                                       ^^^^^^^^^^^^^^^^^^
>         require(amount < address(this).balance, "Not enough balance");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Nftprice
Line:        491
Source: 
>     {
>         return requireValidOrder(
>             ^^^^^^^^^^^^^^^^^^^^^
>             Order(addrs[0], address(uint160(addrs[1])), addrs[2], uints[0], uints[1], uints[2], uints[3]),

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Nftprice
Line:        481
Source: 
> 
>     function withdraw(uint amount) external onlySigner {
>                                       ^^^^^^^^^^^^^^^^^^
>         require(amount < address(this).balance, "Not enough balance");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Nftprice
Line:        481
Source: 
> 
>     function withdraw(uint amount) external onlySigner {
>                                       ^^^^^^^^^^^^^^^^^^
>         require(amount < address(this).balance, "Not enough balance");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Nftprice
Line:        491
Source: 
>     {
>         return requireValidOrder(
>             ^^^^^^^^^^^^^^^^^^^^^
>             Order(addrs[0], address(uint160(addrs[1])), addrs[2], uints[0], uints[1], uints[2], uints[3]),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Nftprice
Line:        478
Source: 
>         nonce[order.maker][order.asset][order.tokenId]++;
>         emit OrderMatched(hash, order.maker, msg.sender, order.asset, order.tokenId);
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SignerRole
Line:        78
Source: 
>         require(isSigner(msg.sender), "SignerRole: caller does not have the Signer role");
>         _;
>       ^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        311
Source: 
>         require(isPauser(msg.sender), "PauserRole: caller does not have the Pauser role");
>         _;
>       ^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Nftprice
Line:        481
Source: 
> 
>     function withdraw(uint amount) external onlySigner {
>                                       ^^^^^^^^^^^^^^^^^^
>         require(amount < address(this).balance, "Not enough balance");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Nftprice
Line:        491
Source: 
>     {
>         return requireValidOrder(
>             ^^^^^^^^^^^^^^^^^^^^^
>             Order(addrs[0], address(uint160(addrs[1])), addrs[2], uints[0], uints[1], uints[2], uints[3]),

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        45
Source: 
>     function remove(Role storage role, address account) internal {
>         require(has(role, account), "Roles: account does not have role");
>                                                     ^^^^^^^^^^^^^^^^^^^^^
>         role.bearer[account] = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        54
Source: 
>     function has(Role storage role, address account) internal view returns (bool) {
>         require(account != address(0), "Roles: account is the zero address");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return role.bearer[account];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        45
Source: 
>     function remove(Role storage role, address account) internal {
>         require(has(role, account), "Roles: account does not have role");
>                                                     ^^^^^^^^^^^^^^^^^^^^^
>         role.bearer[account] = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        54
Source: 
>     function has(Role storage role, address account) internal view returns (bool) {
>         require(account != address(0), "Roles: account is the zero address");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return role.bearer[account];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        45
Source: 
>     function remove(Role storage role, address account) internal {
>         require(has(role, account), "Roles: account does not have role");
>                                                     ^^^^^^^^^^^^^^^^^^^^^
>         role.bearer[account] = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        54
Source: 
>     function has(Role storage role, address account) internal view returns (bool) {
>         require(account != address(0), "Roles: account is the zero address");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return role.bearer[account];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        408
Source: 
>         _paused = false;
>         emit Unpaused(msg.sender);
>      ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        420
Source: 
> 
> contract Nftprice is Ownable, SignerRole, Pausable {
>         ^^^^^^^^^^^^^^^
>     using SafeMath for uint;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        45
Source: 
>     function remove(Role storage role, address account) internal {
>         require(has(role, account), "Roles: account does not have role");
>                                                     ^^^^^^^^^^^^^^^^^^^^^
>         role.bearer[account] = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        54
Source: 
>     function has(Role storage role, address account) internal view returns (bool) {
>         require(account != address(0), "Roles: account is the zero address");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return role.bearer[account];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        408
Source: 
>         _paused = false;
>         emit Unpaused(msg.sender);
>      ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        420
Source: 
> 
> contract Nftprice is Ownable, SignerRole, Pausable {
>         ^^^^^^^^^^^^^^^
>     using SafeMath for uint;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Nftprice
Line:        482
Source: 
>     function withdraw(uint amount) external onlySigner {
>         require(amount < address(this).balance, "Not enough balance");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.transfer(amount);

[0m
