Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Unixo
Line:        193
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Unixo
Line:        47
Source: 
>     constructor() public {
>         levels.push(0.1 ether);
>                               ^
>         levels.push(0.3 ether);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Unixo
Line:        171
Source: 
> 
>         for(uint16 i = 0; i < 1023; i++) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(users[refs[i]].referrals.length < 3) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Unixo
Line:        98
Source: 
>     function _send(address _to, uint256 _value) private {
>         if(_to == address(0) || !payable(_to).send(_value - 0.01 ether)) {
>                                                                   ^^^^^^^^
>             root.transfer(_value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Unixo
Line:        47
Source: 
>     constructor() public {
>         levels.push(0.1 ether);
>                               ^
>         levels.push(0.3 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Unixo
Line:        50
Source: 
>         levels.push(0.9 ether);
>         levels.push(1.8 ether);
>              ^^^^^^^^^^^^^^^^^^
>         levels.push(3.6 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Unixo
Line:        53
Source: 
>         levels.push(7.2 ether);
>         levels.push(14.4 ether);
>                    ^^^^^^^^^^^^^
>         levels.push(28.8 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Unixo
Line:        130
Source: 
>                     users[_user].profit = 0;
>                     users[_user].level++;
>                                    ^^^^^^
>                     users[_user].expires[users[_user].level] = uint40(block.timestamp + LEVEL_TIME_LIFE);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Unixo
Line:        131
Source: 
>                     users[_user].level++;
>                     users[_user].expires[users[_user].level] = uint40(block.timestamp + LEVEL_TIME_LIFE);
>                                                           ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Unixo
Line:        47
Source: 
>     constructor() public {
>         levels.push(0.1 ether);
>                               ^
>         levels.push(0.3 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Unixo
Line:        49
Source: 
>         levels.push(0.3 ether);
>         levels.push(0.9 ether);
>             ^^^^^^^^^^^^^^^^^^^
>         levels.push(1.8 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Unixo
Line:        50
Source: 
>         levels.push(0.9 ether);
>         levels.push(1.8 ether);
>              ^^^^^^^^^^^^^^^^^^
>         levels.push(3.6 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Unixo
Line:        51
Source: 
>         levels.push(1.8 ether);
>         levels.push(3.6 ether);
>            ^^^^^^^^^^^^^^^^^^^^
>         levels.push(7.2 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Unixo
Line:        52
Source: 
>         levels.push(3.6 ether);
>         levels.push(7.2 ether);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         levels.push(14.4 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Unixo
Line:        53
Source: 
>         levels.push(7.2 ether);
>         levels.push(14.4 ether);
>                    ^^^^^^^^^^^^^
>         levels.push(28.8 ether);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Unixo
Line:        114
Source: 
>         if(users[_user].level < levels.length - 1) {
>             uint256 next_price = levels[users[_user].level + 1];
>                                                         ^^^^^^^^
>             uint256 max_profit = cap - next_price;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Unixo
Line:        115
Source: 
>             uint256 next_price = levels[users[_user].level + 1];
>             uint256 max_profit = cap - next_price;
>                                              ^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Unixo
Line:        114
Source: 
>         if(users[_user].level < levels.length - 1) {
>             uint256 next_price = levels[users[_user].level + 1];
>                                                         ^^^^^^^^
>             uint256 max_profit = cap - next_price;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Unixo
Line:        115
Source: 
>             uint256 next_price = levels[users[_user].level + 1];
>             uint256 max_profit = cap - next_price;
>                                              ^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Unixo
Line:        117
Source: 
> 
>             if(users[_user].profit < max_profit || _user == root) {
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_user].profit += _value;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Unixo
Line:        114
Source: 
>         if(users[_user].level < levels.length - 1) {
>             uint256 next_price = levels[users[_user].level + 1];
>                                                         ^^^^^^^^
>             uint256 max_profit = cap - next_price;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Unixo
Line:        115
Source: 
>             uint256 next_price = levels[users[_user].level + 1];
>             uint256 max_profit = cap - next_price;
>                                              ^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Unixo
Line:        117
Source: 
> 
>             if(users[_user].profit < max_profit || _user == root) {
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_user].profit += _value;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Unixo
Line:        98
Source: 
>     function _send(address _to, uint256 _value) private {
>         if(_to == address(0) || !payable(_to).send(_value - 0.01 ether)) {
>                                                                   ^^^^^^^^
>             root.transfer(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Unixo
Line:        114
Source: 
>         if(users[_user].level < levels.length - 1) {
>             uint256 next_price = levels[users[_user].level + 1];
>                                                         ^^^^^^^^
>             uint256 max_profit = cap - next_price;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Unixo
Line:        115
Source: 
>             uint256 next_price = levels[users[_user].level + 1];
>             uint256 max_profit = cap - next_price;
>                                              ^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Unixo
Line:        117
Source: 
> 
>             if(users[_user].profit < max_profit || _user == root) {
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 users[_user].profit += _value;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        101
Source: 
>         }
>         else root.transfer(0.01 ether);
>         ^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        100
Source: 
>             root.transfer(_value);
>         }
>  ^^^^^^^^
>         else root.transfer(0.01 ether);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        101
Source: 
>         }
>         else root.transfer(0.01 ether);
>                                 ^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        104
Source: 
>     
>     function _uplinePay(address _user, uint8 _level, uint256 _value) private {
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(users[_user].expires[_level] < block.timestamp && _user != root) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        104
Source: 
>     
>     function _uplinePay(address _user, uint8 _level, uint256 _value) private {
>                                                                              ^
>         if(users[_user].expires[_level] < block.timestamp && _user != root) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        105
Source: 
>     function _uplinePay(address _user, uint8 _level, uint256 _value) private {
>         if(users[_user].expires[_level] < block.timestamp && _user != root) {
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Lost(_user, tx.origin, _level, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        108
Source: 
> 
>             return _uplinePay(users[_user].upline, _level, _value);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        135
Source: 
> 
>                     _uplinePay(users[_user].upline, users[_user].level, b);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        144
Source: 
> 
>                 _send(_user, _value);
>                    ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        146
Source: 
> 
>                 emit Profit(_user, tx.origin, _level, _value);
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        147
Source: 
>                 emit Profit(_user, tx.origin, _level, _value);
>             }
>        ^^^^^^
>             else _uplinePay(users[_user].upline, _level, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        148
Source: 
>             }
>             else _uplinePay(users[_user].upline, _level, _value);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        157
Source: 
>     function destruct() external {
>         require(msg.sender == root, "Access denied");
>                                              ^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Unixo
Line:        163
Source: 
>     function findFreeReferrer(address _user) external view returns(address) {
>         if(users[_user].referrals.length < 3) return _user;
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
