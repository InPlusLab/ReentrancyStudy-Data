Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        31
Source: 
> 
>         uint c = a * b;
>                  ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    kBASEPolicyV0
Line:        152
Source: 
>         
>         uint price0Cumulative = pair.price0CumulativeLast();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint112 reserve0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    kBASEPolicyV0
Line:        156
Source: 
>         uint32 blockTimestamp;
>         (reserve0, reserve1, blockTimestamp) = pair.getReserves();
>                                                ^^^^^^^^^^^^^^^^^^
>         require(reserve0 != 0 && reserve1 != 0, 'NO_RESERVES');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    kBASEPolicyV0
Line:        182
Source: 
>             uint delta = price.sub(100000);
>             token.rebase(epoch, toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))); // rebase using 10% of price delta
>                                              ^^^^^^^^^^^^^^^^^^^
>         } 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    kBASEPolicyV0
Line:        182
Source: 
>             uint delta = price.sub(100000);
>             token.rebase(epoch, toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))); // rebase using 10% of price delta
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    kBASEPolicyV0
Line:        187
Source: 
>             delta = delta.sub(price);
>             token.rebase(epoch, -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))); // get out of "death spiral" ASAP
>                                               ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    kBASEPolicyV0
Line:        187
Source: 
>             delta = delta.sub(price);
>             token.rebase(epoch, -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))); // get out of "death spiral" ASAP
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Violation
Contract:    kBASEPolicyV0
Line:        190
Source: 
>         
>         pair.sync();
>         ^^^^^^^^^^^
>         epoch = epoch.add(1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        63
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        64
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        81
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    kBASEv0
Line:        99
Source: 
> 
> interface kBASEv0 {
> ^^^^^^^^^^^^^^^^^^^
>   function allowance ( address owner, address spender ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        118
Source: 
> 
> contract kBASEPolicyV0 {
> ^^^^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        8
Source: 
> //
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        176
Source: 
>  
>         require(price != 100000, 'NO_NEED_TO_REBASE'); // don't rebase if price = 1.00000
>                          ^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        180
Source: 
>         
>         if (price > 100000) { // positive rebase
>                     ^^^^^^
>             uint delta = price.sub(100000);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        181
Source: 
>         if (price > 100000) { // positive rebase
>             uint delta = price.sub(100000);
>                                    ^^^^^^
>             token.rebase(epoch, toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))); // rebase using 10% of price delta

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        182
Source: 
>             uint delta = price.sub(100000);
>             token.rebase(epoch, toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))); // rebase using 10% of price delta
>                                                                                 ^^^^^^
>         } 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        185
Source: 
>         else { // negative rebase
>             uint delta = 100000;
>                          ^^^^^^
>             delta = delta.sub(price);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        187
Source: 
>             delta = delta.sub(price);
>             token.rebase(epoch, -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))); // get out of "death spiral" ASAP
>                                                                                  ^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    kBASEPolicyV0
Line:        135
Source: 
>         token = kBASEv0(pair.token0());
>         price0CumulativeLast = pair.price0CumulativeLast();
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint112 reserve0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    kBASEPolicyV0
Line:        138
Source: 
>         uint112 reserve1;
>         (reserve0, reserve1, blockTimestampLast) = pair.getReserves();
>                                                    ^^^^^^^^^^^^^^^^^^
>         require(reserve0 != 0 && reserve1 != 0, 'NO_RESERVES');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    kBASEPolicyV0
Line:        152
Source: 
>         
>         uint price0Cumulative = pair.price0CumulativeLast();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint112 reserve0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    kBASEPolicyV0
Line:        156
Source: 
>         uint32 blockTimestamp;
>         (reserve0, reserve1, blockTimestamp) = pair.getReserves();
>                                                ^^^^^^^^^^^^^^^^^^
>         require(reserve0 != 0 && reserve1 != 0, 'NO_RESERVES');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    kBASEPolicyV0
Line:        182
Source: 
>             uint delta = price.sub(100000);
>             token.rebase(epoch, toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))); // rebase using 10% of price delta
>                                              ^^^^^^^^^^^^^^^^^^^
>         } 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    kBASEPolicyV0
Line:        187
Source: 
>             delta = delta.sub(price);
>             token.rebase(epoch, -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))); // get out of "death spiral" ASAP
>                                               ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        134
Source: 
>         pair = IUniswapV2Pair(_pair);
>         token = kBASEv0(pair.token0());
>                         ^^^^^^^^^^^^^
>         price0CumulativeLast = pair.price0CumulativeLast();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        182
Source: 
>             uint delta = price.sub(100000);
>             token.rebase(epoch, toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))); // rebase using 10% of price delta
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        190
Source: 
>         
>         pair.sync();
>         ^^^^^^^^^^^
>         epoch = epoch.add(1);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        187
Source: 
>             delta = delta.sub(price);
>             token.rebase(epoch, -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))); // get out of "death spiral" ASAP
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        166
Source: 
>         // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed
>         price0RawAverage = uint224((price0Cumulative - price0CumulativeLast) / timeElapsed);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        168
Source: 
> 
>         price0CumulativeLast = price0Cumulative;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blockTimestampLast = blockTimestamp;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        169
Source: 
>         price0CumulativeLast = price0Cumulative;
>         blockTimestampLast = blockTimestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        191
Source: 
>         pair.sync();
>         epoch = epoch.add(1);
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    kBASEPolicyV0
Line:        134
Source: 
>         pair = IUniswapV2Pair(_pair);
>         token = kBASEv0(pair.token0());
>                         ^^^^^^^^^^^^^
>         price0CumulativeLast = pair.price0CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    kBASEPolicyV0
Line:        182
Source: 
>             uint delta = price.sub(100000);
>             token.rebase(epoch, toInt256Safe(token.totalSupply().mul(delta).div(100000 * 10))); // rebase using 10% of price delta
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    kBASEPolicyV0
Line:        187
Source: 
>             delta = delta.sub(price);
>             token.rebase(epoch, -toInt256Safe(token.totalSupply().mul(delta).div(100000 * 2))); // get out of "death spiral" ASAP
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    kBASEPolicyV0
Line:        149
Source: 
>     function rebase() external {
>         uint timestamp = block.timestamp;
>                          ^^^^^^^^^^^^^^^
>         require(timestamp % 3600 < 3 * 60); // rebase can only happen between XX:00:00 ~ XX:02:59 of every hour

[0m
