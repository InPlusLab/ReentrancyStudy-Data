Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.10. Changing pragma version to 0.5.10....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        359
Source: 
>         buf.capacity = capacity;
>         assembly {
>         ^^^^^^^^^^
>             let ptr := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        400
Source: 
>     function truncate(buffer memory buf) internal pure returns (buffer memory) {
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(buf)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        425
Source: 
>         uint src;
>         assembly {
>         ^^^^^^^^^^
>             // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        441
Source: 
>         for (; len >= 32; len -= 32) {
>             assembly {
>             ^^^^^^^^^^
>                 mstore(dest, mload(src))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        450
Source: 
>         uint mask = 256 ** (32 - len) - 1;
>         assembly {
>         ^^^^^^^^^^
>             let srcpart := and(mload(src), not(mask))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        495
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        539
Source: 
>         data = data >> (8 * (32 - len));
>         assembly {
>         ^^^^^^^^^^
>             // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        602
Source: 
>         uint mask = 256 ** len - 1;
>         assembly {
>         ^^^^^^^^^^
>             // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        642
Source: 
>         require(offset + len <= self.length);
>         assembly {
>         ^^^^^^^^^^
>             ret := keccak256(add(add(self, 32), offset), len)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        681
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             selfptr := add(self, add(offset, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        688
Source: 
>             uint b;
>             assembly {
>             ^^^^^^^^^^
>                 a := mload(selfptr)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        776
Source: 
>         require(idx + 2 <= self.length);
>         assembly {
>         ^^^^^^^^^^
>             ret := and(mload(add(add(self, 2), idx)), 0xFFFF)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        789
Source: 
>         require(idx + 4 <= self.length);
>         assembly {
>         ^^^^^^^^^^
>             ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        802
Source: 
>         require(idx + 32 <= self.length);
>         assembly {
>         ^^^^^^^^^^
>             ret := mload(add(add(self, 32), idx))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        815
Source: 
>         require(idx + 20 <= self.length);
>         assembly {
>         ^^^^^^^^^^
>             ret := and(mload(add(add(self, 32), idx)), 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        830
Source: 
>         require(idx + len <= self.length);
>         assembly {
>         ^^^^^^^^^^
>             let mask := not(sub(exp(256, sub(32, len)), 1))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        839
Source: 
>         for (; len >= 32; len -= 32) {
>             assembly {
>             ^^^^^^^^^^
>                 mstore(dest, mload(src))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        848
Source: 
>         uint mask = 256 ** (32 - len) - 1;
>         assembly {
>         ^^^^^^^^^^
>             let srcpart := and(mload(src), not(mask))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BytesUtils
Line:        868
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             dest := add(ret, 32)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ShortNameClaims
Line:        1031
Source: 
> 
>     Roles.Role owners;
>     ^^^^^^^^^^^^^^^^^
>     Roles.Role ratifiers;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ShortNameClaims
Line:        1032
Source: 
>     Roles.Role owners;
>     Roles.Role ratifiers;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    ENS
Line:        15
Source: 
>     // Logged when the owner of a node transfers ownership to a new account.
>     event Transfer(bytes32 indexed node, address owner);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        159
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        184
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        193
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShortNameClaims
Line:        1117
Source: 
>      */
>     function submitExactClaim(bytes memory name, address claimant, string memory email) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory claimed = getLabel(name, 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShortNameClaims
Line:        1133
Source: 
>      */
>     function submitCombinedClaim(bytes memory name, address claimant, string memory email) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory firstLabel = bytes(getLabel(name, 0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ShortNameClaims
Line:        1155
Source: 
>      */
>     function submitPrefixClaim(bytes memory name, address claimant, string memory email) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory firstLabel = bytes(getLabel(name, 0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShortNameClaims
Line:        1103
Source: 
>     function getClaimCost(string memory claimed) public view returns(uint) {
>         return priceOracle.price(claimed, 0, REGISTRATION_PERIOD);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShortNameClaims
Line:        1308
Source: 
>         if(msg.value > price) {
>             msg.sender.transfer(msg.value - price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShortNameClaims
Line:        1249
Source: 
>         if(claim.status == Status.APPROVED) {
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toPayable(registrar.owner()).transfer(claim.paid);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShortNameClaims
Line:        1250
Source: 
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             toPayable(registrar.owner()).transfer(claim.paid);
>                       ^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.DECLINED) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShortNameClaims
Line:        1250
Source: 
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             toPayable(registrar.owner()).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.DECLINED) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShortNameClaims
Line:        1252
Source: 
>         } else if(claim.status == Status.DECLINED) {
>             toPayable(claim.claimant).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ShortNameClaims
Line:        1290
Source: 
> 
>         toPayable(claim.claimant).transfer(claim.paid);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimStatusChanged(claimId, Status.WITHDRAWN);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        193
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShortNameClaims
Line:        1069
Source: 
> 
>     function addOwner(address owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owners.add(owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShortNameClaims
Line:        1073
Source: 
> 
>     function removeOwner(address owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owners.remove(owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShortNameClaims
Line:        1077
Source: 
> 
>     function addRatifier(address ratifier) external onlyRatifier {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ratifiers.add(ratifier);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShortNameClaims
Line:        1081
Source: 
> 
>     function removeRatifier(address ratifier) external onlyRatifier {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ratifiers.remove(ratifier);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShortNameClaims
Line:        1102
Source: 
>      */
>     function getClaimCost(string memory claimed) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return priceOracle.price(claimed, 0, REGISTRATION_PERIOD);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShortNameClaims
Line:        1117
Source: 
>      */
>     function submitExactClaim(bytes memory name, address claimant, string memory email) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory claimed = getLabel(name, 0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShortNameClaims
Line:        1133
Source: 
>      */
>     function submitCombinedClaim(bytes memory name, address claimant, string memory email) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory firstLabel = bytes(getLabel(name, 0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ShortNameClaims
Line:        1155
Source: 
>      */
>     function submitPrefixClaim(bytes memory name, address claimant, string memory email) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory firstLabel = bytes(getLabel(name, 0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ShortNameClaims
Line:        1093
Source: 
>      */
>     function computeClaimId(string memory claimed, bytes memory dnsname, address claimant, string memory email) public pure returns(bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keccak256(abi.encodePacked(keccak256(bytes(claimed)), keccak256(dnsname), claimant, keccak256(bytes(email))));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ShortNameClaims
Line:        1308
Source: 
>         if(msg.value > price) {
>             msg.sender.transfer(msg.value - price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ShortNameClaims
Line:        1250
Source: 
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             toPayable(registrar.owner()).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.DECLINED) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ShortNameClaims
Line:        1252
Source: 
>         } else if(claim.status == Status.DECLINED) {
>             toPayable(claim.claimant).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ShortNameClaims
Line:        1290
Source: 
> 
>         toPayable(claim.claimant).transfer(claim.paid);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimStatusChanged(claimId, Status.WITHDRAWN);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ENS
Line:        24
Source: 
> 
>     function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;
>                                                           ^^^^^^^^^^^^^
>     function setResolver(bytes32 node, address resolver) external;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ENS
Line:        25
Source: 
>     function setSubnodeOwner(bytes32 node, bytes32 label, address owner) external;
>     function setResolver(bytes32 node, address resolver) external;
>                                        ^^^^^^^^^^^^^^^^
>     function setOwner(bytes32 node, address owner) external;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ENS
Line:        26
Source: 
>     function setResolver(bytes32 node, address resolver) external;
>     function setOwner(bytes32 node, address owner) external;
>                                     ^^^^^^^^^^^^^
>     function setTTL(bytes32 node, uint64 ttl) external;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ENS
Line:        27
Source: 
>     function setOwner(bytes32 node, address owner) external;
>     function setTTL(bytes32 node, uint64 ttl) external;
>                                   ^^^^^^^^^^
>     function owner(bytes32 node) external view returns (address);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BaseRegistrar
Line:        258
Source: 
>      */
>     function register(uint256 id, address owner, uint duration) external returns(uint);
>                                   ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BaseRegistrar
Line:        265
Source: 
>      */
>     function reclaim(uint256 id, address owner) external;
>                                  ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Buffer
Line:        342
Source: 
>     */
>     struct buffer {
>     ^^^^^^^^^^^^^^^
>         bytes buf;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BytesUtils
Line:        879
Source: 
>     // 0xFF represents invalid characters in that range.
>     bytes constant base32HexTable = hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.4.24;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        36
Source: 
> 
> pragma solidity >=0.4.24;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        55
Source: 
> 
> pragma solidity >=0.4.24;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        210
Source: 
> 
> pragma solidity >=0.4.24;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        276
Source: 
> 
> pragma solidity >=0.4.24;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        311
Source: 
> 
> pragma solidity >=0.4.24;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        326
Source: 
> 
> pragma solidity >0.4.18;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        630
Source: 
> 
> pragma solidity >0.4.23;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BytesUtils
Line:        879
Source: 
>     // 0xFF represents invalid characters in that range.
>     bytes constant base32HexTable = hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShortNameClaims
Line:        1031
Source: 
> 
>     Roles.Role owners;
>     ^^^^^^^^^^^^^^^^^
>     Roles.Role ratifiers;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShortNameClaims
Line:        1032
Source: 
>     Roles.Role owners;
>     Roles.Role ratifiers;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShortNameClaims
Line:        1037
Source: 
>     mapping(bytes32=>Claim) public claims;
>     mapping(bytes32=>bool) approvedNames;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public pendingClaims;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ShortNameClaims
Line:        1064
Source: 
> 
>     modifier inPhase(Phase p) {
>                      ^^^^^^^
>         require(phase == p, "Not in required phase");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ShortNameClaims
Line:        1308
Source: 
>         if(msg.value > price) {
>             msg.sender.transfer(msg.value - price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ShortNameClaims
Line:        1250
Source: 
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             toPayable(registrar.owner()).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.DECLINED) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ShortNameClaims
Line:        1252
Source: 
>         } else if(claim.status == Status.DECLINED) {
>             toPayable(claim.claimant).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ShortNameClaims
Line:        1290
Source: 
> 
>         toPayable(claim.claimant).transfer(claim.paid);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimStatusChanged(claimId, Status.WITHDRAWN);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    ShortNameClaims
Line:        1290
Source: 
> 
>         toPayable(claim.claimant).transfer(claim.paid);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimStatusChanged(claimId, Status.WITHDRAWN);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ShortNameClaims
Line:        1250
Source: 
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             toPayable(registrar.owner()).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.DECLINED) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ShortNameClaims
Line:        1252
Source: 
>         } else if(claim.status == Status.DECLINED) {
>             toPayable(claim.claimant).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ShortNameClaims
Line:        1308
Source: 
>         if(msg.value > price) {
>             msg.sender.transfer(msg.value - price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ShortNameClaims
Line:        1250
Source: 
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             toPayable(registrar.owner()).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.DECLINED) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ShortNameClaims
Line:        1252
Source: 
>         } else if(claim.status == Status.DECLINED) {
>             toPayable(claim.claimant).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ShortNameClaims
Line:        1290
Source: 
> 
>         toPayable(claim.claimant).transfer(claim.paid);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimStatusChanged(claimId, Status.WITHDRAWN);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShortNameClaims
Line:        1103
Source: 
>     function getClaimCost(string memory claimed) public view returns(uint) {
>         return priceOracle.price(claimed, 0, REGISTRATION_PERIOD);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShortNameClaims
Line:        1249
Source: 
>         if(claim.status == Status.APPROVED) {
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toPayable(registrar.owner()).transfer(claim.paid);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ShortNameClaims
Line:        1250
Source: 
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             toPayable(registrar.owner()).transfer(claim.paid);
>                       ^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.DECLINED) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Buffer
Line:        376
Source: 
>         buffer memory buf;
>         buf.buf = b;
>         ^^^
>         buf.capacity = b.length;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    BytesUtils
Line:        692
Source: 
>             }
>             if (a != b) {
>                 ^
>                 // Mask out irrelevant bytes and check again

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    BytesUtils
Line:        872
Source: 
>         }
>         memcpy(dest, src, len);
>                ^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ShortNameClaims
Line:        1137
Source: 
>         Buffer.buffer memory buf;
>         buf.init(firstLabel.length + secondLabel.length);
>         ^^^
>         buf.append(firstLabel);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShortNameClaims
Line:        1038
Source: 
>     mapping(bytes32=>bool) approvedNames;
>     uint public pendingClaims;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public unresolvedClaims;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ShortNameClaims
Line:        1039
Source: 
>     uint public pendingClaims;
>     uint public unresolvedClaims;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Phase public phase;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ShortNameClaims
Line:        1031
Source: 
> 
>     Roles.Role owners;
>     ^^^^^^^^^^^^^^^^^
>     Roles.Role ratifiers;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ShortNameClaims
Line:        1032
Source: 
>     Roles.Role owners;
>     Roles.Role ratifiers;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    BytesUtils
Line:        879
Source: 
>     // 0xFF represents invalid characters in that range.
>     bytes constant base32HexTable = hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ShortNameClaims
Line:        1308
Source: 
>         if(msg.value > price) {
>             msg.sender.transfer(msg.value - price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ShortNameClaims
Line:        1250
Source: 
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             toPayable(registrar.owner()).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.DECLINED) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ShortNameClaims
Line:        1252
Source: 
>         } else if(claim.status == Status.DECLINED) {
>             toPayable(claim.claimant).transfer(claim.paid);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted call to selfdestruct
Description: Calls to selfdestruct that can be triggered by any user
             must be inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1186
Source: 
>         require(unresolvedClaims == 0);
>         selfdestruct(toPayable(msg.sender));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        952
Source: 
> 
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        962
Source: 
> 
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1311
Source: 
> 
>         claims[claimId] = Claim(keccak256(bytes(claimed)), claimant, price, Status.PENDING);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pendingClaims++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1312
Source: 
>         claims[claimId] = Claim(keccak256(bytes(claimed)), claimant, price, Status.PENDING);
>         pendingClaims++;
>         ^^^^^^^^^^^^^^^
>         emit ClaimSubmitted(claimed, name, price, claimant, email);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1166
Source: 
>     function closeClaims() external onlyOwner inPhase(Phase.OPEN) {
>         phase = Phase.REVIEW;
>         ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1177
Source: 
>         require(pendingClaims == 0);
>         phase = Phase.FINAL;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1205
Source: 
>           // Claim went from pending -> approved/declined; update counters
>           pendingClaims--;
>           ^^^^^^^^^^^^^^^
>           unresolvedClaims++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1206
Source: 
>           pendingClaims--;
>           unresolvedClaims++;
>           ^^^^^^^^^^^^^^^^^^
>         } else if(claim.status == Status.APPROVED) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1216
Source: 
>           require(!approvedNames[claim.labelHash]);
>           approvedNames[claim.labelHash] = true;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1220
Source: 
>         Status status = approved?Status.APPROVED:Status.DECLINED;
>         claims[claimId].status = status;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimStatusChanged(claimId, status);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1209
Source: 
>           // Claim was previously approved; remove from approved map
>           approvedNames[claim.labelHash] = false;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1259
Source: 
> 
>         unresolvedClaims--;
>         ^^^^^^^^^^^^^^^^^^
>         delete claims[claimId];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ShortNameClaims
Line:        1260
Source: 
>         unresolvedClaims--;
>         delete claims[claimId];
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ShortNameClaims
Line:        1249
Source: 
>         if(claim.status == Status.APPROVED) {
>             registrar.register(uint256(claim.labelHash), claim.claimant, REGISTRATION_PERIOD);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toPayable(registrar.owner()).transfer(claim.paid);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BytesUtils
Line:        879
Source: 
>     // 0xFF represents invalid characters in that range.
>     bytes constant base32HexTable = hex'00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F';
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
