Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiSigWalletWithTimelock
Line:        347
Source: 
>             transaction.executed = true;
>             (bool success, ) = transaction.destination.call.value(transaction.value)(transaction.data);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        347
Source: 
>             transaction.executed = true;
>             (bool success, ) = transaction.destination.call.value(transaction.value)(transaction.data);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        347
Source: 
>             transaction.executed = true;
>             (bool success, ) = transaction.destination.call.value(transaction.value)(transaction.data);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultiSigWalletWithTimelock
Line:        387
Source: 
>       */
>     function getConfirmationCount(uint256 transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultiSigWalletWithTimelock
Line:        404
Source: 
>       */
>     function getTransactionCount(bool pending, bool executed)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        242
Source: 
>       */
>     function changeLockSeconds(uint256 _lockSeconds)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        256
Source: 
>       */
>     function submitTransaction(address destination, uint256 value, bytes calldata data)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        361
Source: 
>       */
>     function isConfirmed(uint256 transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        431
Source: 
>       */
>     function getConfirmations(uint256 transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        347
Source: 
>             transaction.executed = true;
>             (bool success, ) = transaction.destination.call.value(transaction.value)(transaction.data);
>              ^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        73
Source: 
> 
>     modifier ownerDoesNotExist(address owner) {
>                                ^^^^^^^^^^^^^
>         if (isOwner[owner])

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        79
Source: 
> 
>     modifier ownerExists(address owner) {
>                          ^^^^^^^^^^^^^
>         if (!isOwner[owner])

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        85
Source: 
> 
>     modifier transactionExists(uint256 transactionId) {
>                                ^^^^^^^^^^^^^^^^^^^^^
>         if (transactions[transactionId].destination == address(0))

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        91
Source: 
> 
>     modifier confirmed(uint256 transactionId, address owner) {
>                        ^^^^^^^^^^^^^^^^^^^^^
>         if (!confirmations[transactionId][owner])

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        91
Source: 
> 
>     modifier confirmed(uint256 transactionId, address owner) {
>                                               ^^^^^^^^^^^^^
>         if (!confirmations[transactionId][owner])

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        97
Source: 
> 
>     modifier notConfirmed(uint256 transactionId, address owner) {
>                           ^^^^^^^^^^^^^^^^^^^^^
>         if (confirmations[transactionId][owner])

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        97
Source: 
> 
>     modifier notConfirmed(uint256 transactionId, address owner) {
>                                                  ^^^^^^^^^^^^^
>         if (confirmations[transactionId][owner])

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        103
Source: 
> 
>     modifier notExecuted(uint256 transactionId) {
>                          ^^^^^^^^^^^^^^^^^^^^^
>         if (transactions[transactionId].executed)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        109
Source: 
> 
>     modifier notNull(address _address) {
>                      ^^^^^^^^^^^^^^^^
>         if (_address == address(0))

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        115
Source: 
> 
>     modifier validRequirement(uint256 ownerCount, uint256 _required) {
>                               ^^^^^^^^^^^^^^^^^^
>         if (ownerCount > MAX_OWNER_COUNT || _required > ownerCount || _required == 0 || ownerCount == 0)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        115
Source: 
> 
>     modifier validRequirement(uint256 ownerCount, uint256 _required) {
>                                                   ^^^^^^^^^^^^^^^^^
>         if (ownerCount > MAX_OWNER_COUNT || _required > ownerCount || _required == 0 || ownerCount == 0)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        347
Source: 
>             transaction.executed = true;
>             (bool success, ) = transaction.destination.call.value(transaction.value)(transaction.data);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        347
Source: 
>             transaction.executed = true;
>             (bool success, ) = transaction.destination.call.value(transaction.value)(transaction.data);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        347
Source: 
>             transaction.executed = true;
>             (bool success, ) = transaction.destination.call.value(transaction.value)(transaction.data);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MultiSigWalletWithTimelock
Line:        50
Source: 
>     uint256 public required;
>     uint256 public transactionCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    MultiSigWalletWithTimelock
Line:        340
Source: 
>         require(
>             block.timestamp >= unlockTimes[transactionId],
>             ^^^^^^^^^^^^^^^
>             "TRANSACTION_NEED_TO_UNLOCK"

[0m
