Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BDAMX
Line:        260
Source: 
>         uint256 length;
>         assembly {
>         ^^^^^^^^^^
>             length := mload(message)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BDAMX
Line:        281
Source: 
>             lengthOffset++;
>             assembly {
>             ^^^^^^^^^^
>                 mstore8(lengthOffset, digit)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BDAMX
Line:        290
Source: 
>         }
>         assembly {
>         ^^^^^^^^^^
>             mstore(header, lengthLength)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BDAMX
Line:        114
Source: 
> 
>     function updateBytes(bytes memory newCode) public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==admin);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BDAMX
Line:        123
Source: 
>     
>     function addToken(address tokenAddress,string memory symbol,uint256 decimals) public  returns(bool){ //add token 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == feeAddress && tokenStatus[tokenAddress].status == false);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BDAMX
Line:        136
Source: 
> 
>     function deposit() public payable returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BDAMX
Line:        147
Source: 
>     
>     function tokenDeposit(address fromaddr,uint256 tokenType,uint256 tokenAmount) public returns(bool)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BDAMX
Line:        162
Source: 
>     
>      function withdraw(string memory message,uint8  v,bytes32 r,bytes32 s,uint8 type_,uint8 tokenType,address payable withdrawaddr,uint256 amount) public  returns(bool) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(hashComformation[message] != true); 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BDAMX
Line:        181
Source: 
> 
>     function matchOrder(uint256[]memory orderid,uint256[]memory pairId,uint256[]memory price,uint256[]memory fee,uint256[]memory total,uint256[]memory time,uint256[]memory userId,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[]memory orderType,uint256[] memory tokenType,uint256[]memory amount)public returns(bool){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BDAMX
Line:        209
Source: 
>         
>    function profitWithdraw(uint256 type_,uint256 tokentype,uint256 amount)public returns(bool){
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == admin);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BDAMX
Line:        240
Source: 
>     
>     function showContractBalance()public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BDAMX
Line:        156
Source: 
>         }
>         Token(tokendetails[tokenType].tokenAddress).transferFrom(fromaddr,address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit userTokenTransfer(msg.sender,tokendetails[tokenType].tokenSymbol, 0,tokenAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BDAMX
Line:        235
Source: 
>     function showTokenAllowance(uint256 tokenType,address owner) public view returns(uint256){
>         return Token(tokendetails[tokenType].tokenAddress).allowance(owner,address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BDAMX
Line:        169
Source: 
>              require(amount<=address(this).balance && amount>0);
>                 withdrawaddr.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit userTokenTransfer(withdrawaddr, "ETH", 1,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BDAMX
Line:        174
Source: 
>             require(tokenType > 0 && amount>0 && amount <=showTokenBalance(tokenType,address(this)) ) ;
>             Token(tokendetails[tokenType].tokenAddress).transfer(withdrawaddr, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit userTokenTransfer(withdrawaddr,tokendetails[tokenType].tokenSymbol, 1,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BDAMX
Line:        216
Source: 
>         require(amount< address(this).balance);
>         msg.sender.transfer(amount);    
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BDAMX
Line:        220
Source: 
>         require(tokentype>0 && amount<=showTokenBalance(tokentype,address(this)));
>         Token(tokendetails[tokentype].tokenAddress).transfer(admin, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    BDAMX
Line:        229
Source: 
>     function showTokenBalance(uint256 tokenType,address baladdr)public view returns(uint256){
>         return Token(tokendetails[tokenType].tokenAddress).balanceOf(baladdr);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BDAMX
Line:        147
Source: 
>     
>     function tokenDeposit(address fromaddr,uint256 tokenType,uint256 tokenAmount) public returns(bool)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BDAMX
Line:        162
Source: 
>     
>      function withdraw(string memory message,uint8  v,bytes32 r,bytes32 s,uint8 type_,uint8 tokenType,address payable withdrawaddr,uint256 amount) public  returns(bool) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(hashComformation[message] != true); 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BDAMX
Line:        114
Source: 
> 
>     function updateBytes(bytes memory newCode) public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==admin);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BDAMX
Line:        123
Source: 
>     
>     function addToken(address tokenAddress,string memory symbol,uint256 decimals) public  returns(bool){ //add token 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == feeAddress && tokenStatus[tokenAddress].status == false);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BDAMX
Line:        181
Source: 
> 
>     function matchOrder(uint256[]memory orderid,uint256[]memory pairId,uint256[]memory price,uint256[]memory fee,uint256[]memory total,uint256[]memory time,uint256[]memory userId,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[]memory orderType,uint256[] memory tokenType,uint256[]memory amount)public returns(bool){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BDAMX
Line:        228
Source: 
>     
>     function showTokenBalance(uint256 tokenType,address baladdr)public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Token(tokendetails[tokenType].tokenAddress).balanceOf(baladdr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BDAMX
Line:        234
Source: 
>     
>     function showTokenAllowance(uint256 tokenType,address owner) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Token(tokendetails[tokenType].tokenAddress).allowance(owner,address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    BDAMX
Line:        277
Source: 
>             lengthLength++;
>             length -= digit * divisor;
>                       ^^^^^^^^^^^^^^^
>             divisor /= 10;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BDAMX
Line:        174
Source: 
>             require(tokenType > 0 && amount>0 && amount <=showTokenBalance(tokenType,address(this)) ) ;
>             Token(tokendetails[tokenType].tokenAddress).transfer(withdrawaddr, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit userTokenTransfer(withdrawaddr,tokendetails[tokenType].tokenSymbol, 1,amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    BDAMX
Line:        169
Source: 
>              require(amount<=address(this).balance && amount>0);
>                 withdrawaddr.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit userTokenTransfer(withdrawaddr, "ETH", 1,amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BDAMX
Line:        31
Source: 
>     
>     event userTokenTransfer(address userAddress,string symbol,uint256 transferType,uint256 amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BDAMX
Line:        63
Source: 
>     
>     struct tokens{
>     ^^^^^^^^^^^^^^
>         address tokenAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BDAMX
Line:        70
Source: 
>     
>     struct orders{
>     ^^^^^^^^^^^^^^
>         uint256 pairOrderID;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BDAMX
Line:        83
Source: 
> 
>      struct token_stat{
>      ^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BDAMX
Line:        99
Source: 
>     
>     mapping(uint256=>orders) public Order; //place order by passing userID and orderID as argument;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BDAMX
Line:        245
Source: 
>     function strConcat(string memory _a, string memory _b) private pure returns (bytes memory){
>         bytes memory _ba = bytes(_a);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bb = bytes(_b);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BDAMX
Line:        246
Source: 
>         bytes memory _ba = bytes(_a);
>         bytes memory _bb = bytes(_b);
>         ^^^^^^^^^^^^^^^^
>         string memory ab = new string(_ba.length + _bb.length);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        17
Source: 
> 
> pragma solidity ^0.5.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        35
Source: 
>     
>     address public admin;
>     ^^^^^^^^^^^^^^^^^^^^
>     address public feeAddress;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        36
Source: 
>     address public admin;
>     address public feeAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        38
Source: 
>     
>     uint256 public user=0;
>     ^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        40
Source: 
>     
>     uint256 public tokenId=0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        44
Source: 
>     
>     bytes private deploycode;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        46
Source: 
>     
>     bytes private code;
>     ^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        48
Source: 
>     
>     uint private codelen;
>     ^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        91
Source: 
>     
>     mapping(address=>uint256) public getUserId; // argument user address returns user ID; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        93
Source: 
>     
>     mapping(uint256=>address)public getUserAddressByID; // argument user id returns user address; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        95
Source: 
>     
>     mapping(uint256=>tokens) public tokendetails; //argument user id  return user address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        97
Source: 
>     
>     mapping (address=>token_stat) public tokenStatus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        99
Source: 
>     
>     mapping(uint256=>orders) public Order; //place order by passing userID and orderID as argument;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        101
Source: 
>     
>     mapping(string=>bool)private hashComformation;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BDAMX
Line:        103
Source: 
>     
>     mapping(uint256=>bool)public orderStat;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BDAMX
Line:        266
Source: 
>         uint256 lengthLength = 0;
>         uint256 divisor = 100000; 
>                           ^^^^^^
>         while (divisor != 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BDAMX
Line:        169
Source: 
>              require(amount<=address(this).balance && amount>0);
>                 withdrawaddr.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit userTokenTransfer(withdrawaddr, "ETH", 1,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BDAMX
Line:        216
Source: 
>         require(amount< address(this).balance);
>         msg.sender.transfer(amount);    
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BDAMX
Line:        220
Source: 
>         require(tokentype>0 && amount<=showTokenBalance(tokentype,address(this)));
>         Token(tokendetails[tokentype].tokenAddress).transfer(admin, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BDAMX
Line:        169
Source: 
>              require(amount<=address(this).balance && amount>0);
>                 withdrawaddr.transfer(amount);    
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit userTokenTransfer(withdrawaddr, "ETH", 1,amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BDAMX
Line:        216
Source: 
>         require(amount< address(this).balance);
>         msg.sender.transfer(amount);    
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BDAMX
Line:        220
Source: 
>         require(tokentype>0 && amount<=showTokenBalance(tokentype,address(this)));
>         Token(tokendetails[tokentype].tokenAddress).transfer(admin, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BDAMX
Line:        156
Source: 
>         }
>         Token(tokendetails[tokenType].tokenAddress).transferFrom(fromaddr,address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit userTokenTransfer(msg.sender,tokendetails[tokenType].tokenSymbol, 0,tokenAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BDAMX
Line:        235
Source: 
>     function showTokenAllowance(uint256 tokenType,address owner) public view returns(uint256){
>         return Token(tokendetails[tokenType].tokenAddress).allowance(owner,address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BDAMX
Line:        174
Source: 
>             require(tokenType > 0 && amount>0 && amount <=showTokenBalance(tokenType,address(this)) ) ;
>             Token(tokendetails[tokenType].tokenAddress).transfer(withdrawaddr, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit userTokenTransfer(withdrawaddr,tokendetails[tokenType].tokenSymbol, 1,amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BDAMX
Line:        229
Source: 
>     function showTokenBalance(uint256 tokenType,address baladdr)public view returns(uint256){
>         return Token(tokendetails[tokenType].tokenAddress).balanceOf(baladdr);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BDAMX
Line:        220
Source: 
>         require(tokentype>0 && amount<=showTokenBalance(tokentype,address(this)));
>         Token(tokendetails[tokentype].tokenAddress).transfer(admin, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    BDAMX
Line:        264
Source: 
>         }
>         require(length <= 999999);
>                 ^^^^^^
>         uint256 lengthLength = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BDAMX
Line:        156
Source: 
>         }
>         Token(tokendetails[tokenType].tokenAddress).transferFrom(fromaddr,address(this), tokenAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit userTokenTransfer(msg.sender,tokendetails[tokenType].tokenSymbol, 0,tokenAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BDAMX
Line:        174
Source: 
>             require(tokenType > 0 && amount>0 && amount <=showTokenBalance(tokenType,address(this)) ) ;
>             Token(tokendetails[tokenType].tokenAddress).transfer(withdrawaddr, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit userTokenTransfer(withdrawaddr,tokendetails[tokenType].tokenSymbol, 1,amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BDAMX
Line:        220
Source: 
>         require(tokentype>0 && amount<=showTokenBalance(tokentype,address(this)));
>         Token(tokendetails[tokentype].tokenAddress).transfer(admin, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
