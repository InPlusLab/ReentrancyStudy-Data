Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TimelockExtend
Line:        37
Source: 
> 
>     uint private part1Time = 777600;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private Part1Qty = 50000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TimelockExtend
Line:        38
Source: 
>     uint private part1Time = 777600;
>     uint private Part1Qty = 50000000000000000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool private part1Statue = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TimelockExtend
Line:        42
Source: 
>     uint256 private releaseCount = 0; // 
>     uint private releaseQty = 4500000000000000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private stepTime = 2592000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    TimelockExtend
Line:        43
Source: 
>     uint private releaseQty = 4500000000000000000000000;
>     uint private stepTime = 2592000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimelockExtend
Line:        58
Source: 
>      */
>     function token() public view returns (IERC20) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _token;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimelockExtend
Line:        65
Source: 
>      */
>     function beneficiary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (_beneficiary);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimelockExtend
Line:        72
Source: 
>      */
>     function releaseTime() public view returns (uint256,uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (_releaseTime, _deployeTime);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimelockExtend
Line:        79
Source: 
>      */
>     function getReleaseCount() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return releaseCount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimelockExtend
Line:        86
Source: 
>      */
>     function balance() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimelockExtend
Line:        94
Source: 
>      */
>     function releasePartOne() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TimelockExtend
Line:        108
Source: 
>      */
>     function release() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimelockExtend
Line:        97
Source: 
>         require(block.timestamp >= _deployeTime + part1Time, 'before release time');
>         require(_token.balanceOf(address(this)) > 0, 'release done');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(part1Statue == true, 'release done');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimelockExtend
Line:        100
Source: 
>         
>         _token.transfer(_beneficiary, Part1Qty);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimelockExtend
Line:        112
Source: 
>         
>         uint thisBalance = _token.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(thisBalance > 0, 'release done');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimelockExtend
Line:        117
Source: 
>         
>             _token.transfer(_beneficiary, releaseQty);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TimelockExtend
Line:        120
Source: 
>             
>             _token.transfer(_beneficiary, thisBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TimelockExtend
Line:        46
Source: 
> 
>     constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {
>                  ^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TimelockExtend
Line:        46
Source: 
> 
>     constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {
>                                ^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TimelockExtend
Line:        46
Source: 
> 
>     constructor (IERC20 token, address beneficiary, uint256 releaseTime) public {
>                                                     ^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TimelockExtend
Line:        38
Source: 
>     uint private part1Time = 777600;
>     uint private Part1Qty = 50000000000000000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool private part1Statue = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TimelockExtend
Line:        38
Source: 
>     uint private part1Time = 777600;
>     uint private Part1Qty = 50000000000000000000000000;
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool private part1Statue = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TimelockExtend
Line:        42
Source: 
>     uint256 private releaseCount = 0; // 
>     uint private releaseQty = 4500000000000000000000000;
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private stepTime = 2592000;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimelockExtend
Line:        97
Source: 
>         require(block.timestamp >= _deployeTime + part1Time, 'before release time');
>         require(_token.balanceOf(address(this)) > 0, 'release done');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(part1Statue == true, 'release done');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TimelockExtend
Line:        112
Source: 
>         
>         uint thisBalance = _token.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(thisBalance > 0, 'release done');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimelockExtend
Line:        88
Source: 
>         
>         return _token.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimelockExtend
Line:        100
Source: 
>         
>         _token.transfer(_beneficiary, Part1Qty);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimelockExtend
Line:        117
Source: 
>         
>             _token.transfer(_beneficiary, releaseQty);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TimelockExtend
Line:        120
Source: 
>             
>             _token.transfer(_beneficiary, thisBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimelockExtend
Line:        102
Source: 
>         
>         part1Statue = false;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TimelockExtend
Line:        123
Source: 
> 
>         releaseCount++;
>         ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimelockExtend
Line:        100
Source: 
>         
>         _token.transfer(_beneficiary, Part1Qty);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimelockExtend
Line:        117
Source: 
>         
>             _token.transfer(_beneficiary, releaseQty);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TimelockExtend
Line:        120
Source: 
>             
>             _token.transfer(_beneficiary, thisBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TimelockExtend
Line:        48
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(releaseTime > block.timestamp, 'release time is before');
>                               ^^^^^^^^^^^^^^^
>         _token = token;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TimelockExtend
Line:        51
Source: 
>         _beneficiary = beneficiary;
>         _deployeTime = block.timestamp;
>                        ^^^^^^^^^^^^^^^
>         _releaseTime = releaseTime;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TimelockExtend
Line:        96
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(block.timestamp >= _deployeTime + part1Time, 'before release time');
>                 ^^^^^^^^^^^^^^^
>         require(_token.balanceOf(address(this)) > 0, 'release done');

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TimelockExtend
Line:        110
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(block.timestamp >= _releaseTime + (stepTime * releaseCount), 'before release time');
>                 ^^^^^^^^^^^^^^^
>         

[0m
