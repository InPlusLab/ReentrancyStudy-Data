[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Repaintedglyphs
Line:        322
Source: 
>         uint256 size;
>         assembly { size := extcodesize(_addr) } // solhint-disable-line
>                                                                 ^^^^^^^
>         addressCheck = size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Repaintedglyphs
Line:        160
Source: 
> 
>     bytes prefix = "data:text/plain;charset=utf-8,";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Repaintedglyphs
Line:        162
Source: 
> 
>     string internal nftName = "Paintglyphs V2";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string internal nftSymbol = "pâ˜µ2";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Repaintedglyphs
Line:        163
Source: 
>     string internal nftName = "Paintglyphs V2";
>     string internal nftSymbol = "pâ˜µ2";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public paintglyphsAddress = 0x2E8b45D550E4bb8c7986EE98879C1740519E0A1A;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Repaintedglyphs
Line:        164
Source: 
>     string internal nftSymbol = "pâ˜µ2";
>     address public paintglyphsAddress = 0x2E8b45D550E4bb8c7986EE98879C1740519E0A1A;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public allSymbols = "0 - â–‘; 1 - â–’; 2 - â– ; 3 - â”¼; 4 - â–“; 5 - â–„; 6 - â–€; 7 - â‰¡";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Repaintedglyphs
Line:        165
Source: 
>     address public paintglyphsAddress = 0x2E8b45D550E4bb8c7986EE98879C1740519E0A1A;
>     string public allSymbols = "0 - â–‘; 1 - â–’; 2 - â– ; 3 - â”¼; 4 - â–“; 5 - â–„; 6 - â–€; 7 - â‰¡";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Repaintedglyphs
Line:        581
Source: 
>             if (symbolToUpdate == 2) {
>                 symbolToUpdate = 4;
>                                 ^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Repaintedglyphs
Line:        587
Source: 
>             if (symbolToUpdate == 1) {
>                 symbolToUpdate = 5;
>                                 ^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Repaintedglyphs
Line:        590
Source: 
>             else if (symbolToUpdate == 2) {
>                 symbolToUpdate = 6;
>                                 ^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Repaintedglyphs
Line:        596
Source: 
>             if (symbolToUpdate == 0) {
>                 symbolToUpdate = 3;
>                                 ^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Repaintedglyphs
Line:        599
Source: 
>             else if (symbolToUpdate == 2) {
>                 symbolToUpdate = 7;
>                                 ^^^
>             }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Repaintedglyphs
Line:        215
Source: 
> 
>     function draw(uint id) public view returns (string memory) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint a = uint((keccak256(abi.encodePacked(idToSeed[id]))));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Repaintedglyphs
Line:        304
Source: 
>     
>     function updateProcessingCode(string memory newProcessingCode, uint256 version) public {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         processingCode[version] = newProcessingCode;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Repaintedglyphs
Line:        554
Source: 
>     
>     function updateColor(uint id, uint symbolToUpdate, uint newColor) public {
>                                                             ^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf(id));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Repaintedglyphs
Line:        729
Source: 
>     function totalSupply() public view returns (uint256) {
>         return numTokens;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Repaintedglyphs
Line:        732
Source: 
> 
>     function tokenByIndex(uint256 index) public view returns (uint256) {
>                                                             ^^^^^^^^^^^^
>         require(index < numTokens);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Repaintedglyphs
Line:        711
Source: 
>         if (isContract(_to)) {
>             bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
>             require(retval == MAGIC_ON_ERC721_RECEIVED);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Repaintedglyphs
Line:        508
Source: 
>         }
>         if (amount > 0) {
>    ^^^^^^^^^^^^^^^^^^^^^^
>             BENEFICIARY.transfer(address(this).balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Repaintedglyphs
Line:        510
Source: 
>             BENEFICIARY.transfer(address(this).balance);
>         }
>           
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Repaintedglyphs
Line:        520
Source: 
>         require(address(uint160(paintglyphsV1.ownerOf(v1GlyphID))) == msg.sender);
>         
>     ^^^^
>         paintglyphsV1.transferFrom(msg.sender,address(this),v1GlyphID);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Repaintedglyphs
Line:        521
Source: 
>         
>         paintglyphsV1.transferFrom(msg.sender,address(this),v1GlyphID);
>                                                                 ^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Repaintedglyphs
Line:        362
Source: 
>      */
>     function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _safeTransferFrom(_from, _to, _tokenId, "");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Repaintedglyphs
Line:        467
Source: 
>     function createPiece(uint seed) external payable {
>         return _mint(msg.sender, seed);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Repaintedglyphs
Line:        517
Source: 
> 
>     function createWithV1(uint seed, uint v1GlyphID) external {
>                                                             ^^^
>         require(v1GlyphID < 103);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Repaintedglyphs
Line:        554
Source: 
>     
>     function updateColor(uint id, uint symbolToUpdate, uint newColor) public {
>                                                             ^^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerOf(id));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Repaintedglyphs
Line:        612
Source: 
>     
>     function checkValidSymbol(uint id, uint symbolToCheck) public view returns (bool isValid){
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (idToSymbolScheme[id] == 1) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Repaintedglyphs
Line:        767
Source: 
>      */
>     function tokenURI(uint256 id) external view returns (string memory) {
>                                                             ^^^^^^^^^^^^^
>         return string(abi.encodePacked(URI, integerToString(uint256(id))));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        215
Source: 
> 
>     function draw(uint id) public view returns (string memory) {
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint a = uint((keccak256(abi.encodePacked(idToSeed[id]))));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        281
Source: 
>     
>     function creator(uint _id) external view returns (address) {
>                                                             ^^^^
>         return idToCreator[_id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        285
Source: 
> 
>     function symbolScheme(uint _id) external view returns (uint8) {
>                                                             ^^^^^^^
>         return idToSymbolScheme[_id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        289
Source: 
> 
>     function backgroundScheme(uint _id) external view returns (uint256) {
>                                                             ^^^^^^^^^^^^^
>         return idToBackgroundColor[_id];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        293
Source: 
> 
>     function colorScheme(uint _id) external view returns (uint256 color0, uint256 color1, uint color2, uint color3, uint color4, uint color5, uint color6, uint color7) {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         color0 = idToColorScheme[_id][0];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        304
Source: 
>     
>     function updateProcessingCode(string memory newProcessingCode, uint256 version) public {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         processingCode[version] = newProcessingCode;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        308
Source: 
>     
>     function showProcessingCode(uint version) external view returns (string memory) {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return processingCode[version];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        331
Source: 
>      */
>     function supportsInterface(bytes4 _interfaceID) external view returns (bool) {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^
>         return supportedInterfaces[_interfaceID];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        349
Source: 
>      */
>     function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _safeTransferFrom(_from, _to, _tokenId, _data);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        376
Source: 
>      */
>     function transferFrom(address _from, address _to, uint256 _tokenId) external canTransfer(_tokenId) validNFToken(_tokenId) {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address tokenOwner = idToOwner[_tokenId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        404
Source: 
>      */
>     function setApprovalForAll(address _operator, bool _approved) external {
>                                                             ^^^^^^^^^^^^^^^^
>         ownerToOperators[msg.sender][_operator] = _approved;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        445
Source: 
>      */
>     function isApprovedForAll(address _owner, address _operator) external view returns (bool) {
>                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ownerToOperators[_owner][_operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Repaintedglyphs
Line:        772
Source: 
>     function setURI(string memory newURI) public isOwner {
>         URI = newURI;
> ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Repaintedglyphs
Line:        247
Source: 
>             y = (2 * (i - HALF_SIZE) + 1);
>             if (a % 3 == 1) {
>                              
>                 y = -y;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Repaintedglyphs
Line:        253
Source: 
>             y = y * int(a);
>             for (int j = int(0); j < SIZE; j++) {
>                                            ^^^^^^
>                 x = (2 * (j - HALF_SIZE) + 1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Repaintedglyphs
Line:        255
Source: 
>                 x = (2 * (j - HALF_SIZE) + 1);
>                 if (a % 2 == 1) {
>                              ^^^^
>                     x = abs(x);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Repaintedglyphs
Line:        259
Source: 
>                 x = x * int(a);
>                 v = uint(x * y / ONE) % mod;
>                                            ^
>                 if (v < 10) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Repaintedglyphs
Line:        261
Source: 
>                 if (v < 10) {
>                     value = uint(uint8(symbols[v]));
>     ^^^^^
>                 } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Repaintedglyphs
Line:        508
Source: 
>         }
>         if (amount > 0) {
>    ^^^^^^^^^^^^^^^^^^^^^^
>             BENEFICIARY.transfer(address(this).balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Repaintedglyphs
Line:        510
Source: 
>             BENEFICIARY.transfer(address(this).balance);
>         }
>           
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    paintglyphsV1Contract
Line:        7
Source: 
> 
> interface paintglyphsV1Contract {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function ownerOf(uint256 tokenId) external view returns (address owner);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Repaintedglyphs
Line:        155
Source: 
>     address public owner;
>     string URI;
>     ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        98
Source: 
>      */
>     modifier canOperate(uint256 _tokenId) {
>                         ^^^^^^^^^^^^^^^^
>         address tokenOwner = idToOwner[_tokenId];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        99
Source: 
>     modifier canOperate(uint256 _tokenId) {
>         address tokenOwner = idToOwner[_tokenId];
>         ^^^^^^^^^^^^^^^^^^
>         require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        108
Source: 
>      */
>     modifier canTransfer(uint256 _tokenId) {
>                          ^^^^^^^^^^^^^^^^
>         address tokenOwner = idToOwner[_tokenId];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        109
Source: 
>     modifier canTransfer(uint256 _tokenId) {
>         address tokenOwner = idToOwner[_tokenId];
>         ^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        122
Source: 
>      */
>     modifier validNFToken(uint256 _tokenId) {
>                           ^^^^^^^^^^^^^^^^
>         require(idToOwner[_tokenId] != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        150
Source: 
> 
>     int constant ONE = int(0x100000000);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant USIZE = 32;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        151
Source: 
>     int constant ONE = int(0x100000000);
>     uint constant USIZE = 32;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     int constant SIZE = int(USIZE);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        152
Source: 
>     uint constant USIZE = 32;
>     int constant SIZE = int(USIZE);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int constant HALF_SIZE = SIZE / int(2);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        153
Source: 
>     int constant SIZE = int(USIZE);
>     int constant HALF_SIZE = SIZE / int(2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        155
Source: 
>     address public owner;
>     string URI;
>     ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        157
Source: 
> 
>     int constant SCALE = int(0x1b81a81ab1a81a823);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     int constant HALF_SCALE = SCALE / int(2);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        158
Source: 
>     int constant SCALE = int(0x1b81a81ab1a81a823);
>     int constant HALF_SCALE = SCALE / int(2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        160
Source: 
> 
>     bytes prefix = "data:text/plain;charset=utf-8,";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Repaintedglyphs
Line:        167
Source: 
>     
>     paintglyphsV1Contract paintglyphsV1;
>                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Repaintedglyphs
Line:        508
Source: 
>         }
>         if (amount > 0) {
>    ^^^^^^^^^^^^^^^^^^^^^^
>             BENEFICIARY.transfer(address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Repaintedglyphs
Line:        510
Source: 
>             BENEFICIARY.transfer(address(this).balance);
>         }
>           
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Repaintedglyphs
Line:        508
Source: 
>         }
>         if (amount > 0) {
>    ^^^^^^^^^^^^^^^^^^^^^^
>             BENEFICIARY.transfer(address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Repaintedglyphs
Line:        510
Source: 
>             BENEFICIARY.transfer(address(this).balance);
>         }
>           
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Repaintedglyphs
Line:        508
Source: 
>         }
>         if (amount > 0) {
>    ^^^^^^^^^^^^^^^^^^^^^^
>             BENEFICIARY.transfer(address(this).balance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Repaintedglyphs
Line:        510
Source: 
>             BENEFICIARY.transfer(address(this).balance);
>         }
>           
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Repaintedglyphs
Line:        711
Source: 
>         if (isContract(_to)) {
>             bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^
>             require(retval == MAGIC_ON_ERC721_RECEIVED);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Repaintedglyphs
Line:        520
Source: 
>         require(address(uint160(paintglyphsV1.ownerOf(v1GlyphID))) == msg.sender);
>         
>     ^^^^
>         paintglyphsV1.transferFrom(msg.sender,address(this),v1GlyphID);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Repaintedglyphs
Line:        521
Source: 
>         
>         paintglyphsV1.transferFrom(msg.sender,address(this),v1GlyphID);
>                                                                 ^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Repaintedglyphs
Line:        327
Source: 
>     /**
>      * @dev Function to check which interfaces are suported by this contract.
>                            ^^^^
>      * @param _interfaceID Id of the interface.

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Repaintedglyphs
Line:        572
Source: 
>             }
>         else if (idToSymbolScheme[id] == 2) { //if scheme 2, then update symbol 0 or 1
>                    ^^^^^^^^^^^^^^
>             symbolToUpdate = seed % 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Repaintedglyphs
Line:        786
Source: 
>       }
>       bytes memory bstr = new bytes(len);
>                     ^^^
>       uint k = len - 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Repaintedglyphs
Line:        508
Source: 
>         }
>         if (amount > 0) {
>    ^^^^^^^^^^^^^^^^^^^^^^
>             BENEFICIARY.transfer(address(this).balance);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Repaintedglyphs
Line:        510
Source: 
>             BENEFICIARY.transfer(address(this).balance);
>         }
>           
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        660
Source: 
> 
>         uint256 length = ownerToIds[_to].push(_tokenId);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^
>         idToOwnerIndex[_tokenId] = length - 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        661
Source: 
>         uint256 length = ownerToIds[_to].push(_tokenId);
>         idToOwnerIndex[_tokenId] = length - 1;
>                        ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        664
Source: 
> 
>     /**
>        
>      * @dev Removes a NFT from an address.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        680
Source: 
>             ownerToIds[_from][tokenToRemoveIndex] = lastToken;
>             idToOwnerIndex[lastToken] = tokenToRemoveIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        681
Source: 
>             idToOwnerIndex[lastToken] = tokenToRemoveIndex;
>         }
>        ^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        687
Source: 
>     /**
>      * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * extension to remove double storage (gas optimization) of owner nft count.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        491
Source: 
>         idToSeed[id] = seed;
>         seedToId[seed] = id;
>   ^^^^^^^^^^^^^^^^^^^^^
>         uint a = uint((keccak256(abi.encodePacked(seed,id))));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        492
Source: 
>         seedToId[seed] = id;
>         uint a = uint((keccak256(abi.encodePacked(seed,id))));
>     ^^^^^^^^^^^^^^^^^^^
>         idToBackgroundColor[id] = getBackgroundColor(a);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        492
Source: 
>         seedToId[seed] = id;
>         uint a = uint((keccak256(abi.encodePacked(seed,id))));
>                                   ^^^^^^^^^^^^^^^^^^^
>         idToBackgroundColor[id] = getBackgroundColor(a);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        494
Source: 
>         idToBackgroundColor[id] = getBackgroundColor(a);
>         idToSymbolScheme[id] = getScheme(a);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint randomColor;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        495
Source: 
>         idToSymbolScheme[id] = getScheme(a);
>         uint randomColor;
>                   ^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        502
Source: 
> 
>         numTokens = numTokens + 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addNFToken(_to, id);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Repaintedglyphs
Line:        503
Source: 
>         numTokens = numTokens + 1;
>         _addNFToken(_to, id);
>                             ^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Repaintedglyphs
Line:        307
Source: 
>     }
>     
>    ^
>     function showProcessingCode(uint version) external view returns (string memory) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Repaintedglyphs
Line:        406
Source: 
>         ownerToOperators[msg.sender][_operator] = _approved;
>         emit ApprovalForAll(msg.sender, _operator, _approved);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Repaintedglyphs
Line:        158
Source: 
>     int constant SCALE = int(0x1b81a81ab1a81a823);
>     int constant HALF_SCALE = SCALE / int(2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Repaintedglyphs
Line:        165
Source: 
>     address public paintglyphsAddress = 0x2E8b45D550E4bb8c7986EE98879C1740519E0A1A;
>     string public allSymbols = "0 - â–‘; 1 - â–’; 2 - â– ; 3 - â”¼; 4 - â–“; 5 - â–„; 6 - â–€; 7 - â‰¡";
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
