Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ECAVault
Line:        27
Source: 
>     
>     address owner = msg.sender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //uniswap

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ECAVault
Line:        80
Source: 
>     
>     function getOwner() public view returns (address){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ECAVault
Line:        83
Source: 
>     }
>     function getLiquidityBalance() public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return liquidityToken.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ECAVault
Line:        86
Source: 
>     }
>     function getEcaBalance() public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ecaToken.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ECAVault
Line:        35
Source: 
>  
>     function distributeWeekly(address recipient) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //liquidityBalance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ECAVault
Line:        54
Source: 
>  //start the lock for six months minimum
>     function startLiquiditySixMonthLock(address recipient) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ECAVault
Line:        37
Source: 
>         //liquidityBalance
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //ecaBalance

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ECAVault
Line:        39
Source: 
>         //ecaBalance
>         uint256 ecaBalance = ecaToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ECAVault
Line:        44
Source: 
>         //1% of liquidity
>         liquidityToken.transfer(recipient, (liquidityBalance / 100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //1% of eca

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ECAVault
Line:        46
Source: 
>         //1% of eca
>         ecaToken.transfer(recipient, (ecaBalance / 100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ECAVault
Line:        21
Source: 
>     //eca token. this vault holds team and excess supply. Starts with 300K and releases 1% per week for a minimum of 6 months 
>     ERC20 constant ecaToken = ERC20(0xfab25D4469444f28023075Db5932497D70094601);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	//uniswap

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ECAVault
Line:        23
Source: 
> 	//uniswap
>     ERC20 constant liquidityToken = ERC20(0x240c7C1E5bB1F9BD9DEE988BB1611E56872dc7d9);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ECAVault
Line:        21
Source: 
>     //eca token. this vault holds team and excess supply. Starts with 300K and releases 1% per week for a minimum of 6 months 
>     ERC20 constant ecaToken = ERC20(0xfab25D4469444f28023075Db5932497D70094601);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	//uniswap

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ECAVault
Line:        23
Source: 
> 	//uniswap
>     ERC20 constant liquidityToken = ERC20(0x240c7C1E5bB1F9BD9DEE988BB1611E56872dc7d9);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ECAVault
Line:        27
Source: 
>     
>     address owner = msg.sender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //uniswap

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        37
Source: 
>         //liquidityBalance
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //ecaBalance

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        39
Source: 
>         //ecaBalance
>         uint256 ecaBalance = ecaToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        44
Source: 
>         //1% of liquidity
>         liquidityToken.transfer(recipient, (liquidityBalance / 100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //1% of eca

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        46
Source: 
>         //1% of eca
>         ecaToken.transfer(recipient, (ecaBalance / 100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        69
Source: 
>         //liquidity
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityToken.transfer(tokenRecipient, liquidityBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        70
Source: 
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>         liquidityToken.transfer(tokenRecipient, liquidityBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        73
Source: 
>         //eca
>         uint256 ecaBalance = ecaToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ecaToken.transfer(tokenRecipient, ecaBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        74
Source: 
>         uint256 ecaBalance = ecaToken.balanceOf(address(this));
>         ecaToken.transfer(tokenRecipient, ecaBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        84
Source: 
>     function getLiquidityBalance() public view returns (uint256){
>         return liquidityToken.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ECAVault
Line:        87
Source: 
>     function getEcaBalance() public view returns (uint256){
>         return ecaToken.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ECAVault
Line:        29
Source: 
>     //uniswap
>     uint256 public lastTradingFeeDistribution;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public sixMonthLock;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ECAVault
Line:        30
Source: 
>     uint256 public lastTradingFeeDistribution;
>     uint256 public sixMonthLock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public tokenRecipient;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ECAVault
Line:        31
Source: 
>     uint256 public sixMonthLock;
>     address public tokenRecipient;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ECAVault
Line:        44
Source: 
>         //1% of liquidity
>         liquidityToken.transfer(recipient, (liquidityBalance / 100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //1% of eca

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ECAVault
Line:        46
Source: 
>         //1% of eca
>         ecaToken.transfer(recipient, (ecaBalance / 100));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ECAVault
Line:        70
Source: 
>         uint256 liquidityBalance = liquidityToken.balanceOf(address(this));
>         liquidityToken.transfer(tokenRecipient, liquidityBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ECAVault
Line:        74
Source: 
>         uint256 ecaBalance = ecaToken.balanceOf(address(this));
>         ecaToken.transfer(tokenRecipient, ecaBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
