[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        530
Source: 
>     uint256 blocksToAccrueInterest = block.number - _blockLastUpdated;
>     fullyAccrued = (blocksToAccrueInterest == 0);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        161
Source: 
>     _dUSDCExchangeRate = 1e16; // 1 USDC == 1 dUSDC to start
>     _cUSDCExchangeRate = _CUSDC.exchangeRateCurrent();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        180
Source: 
>     require(
>       _USDC.transferFrom(msg.sender, address(this), usdcToSupply),
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "USDC transfer failed."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        185
Source: 
>     // Use the USDC to mint cUSDC (TODO: include error code in revert reason)
>     require(_CUSDC.mint(usdcToSupply) == _COMPOUND_SUCCESS, "cUSDC mint failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        541
Source: 
>       // Retrieve the latest exchange rate for cUSDC
>       cUSDCExchangeRate = _CUSDC.exchangeRateCurrent();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        208
Source: 
>     require(
>       _CUSDC.redeemUnderlying(usdcReceived) == _COMPOUND_SUCCESS,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "cUSDC redeem failed."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        213
Source: 
>     // Send the USDC to the redeemer
>     require(_USDC.transfer(msg.sender, usdcReceived), "USDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        235
Source: 
>     require(
>       _CUSDC.redeemUnderlying(usdcToReceive) == _COMPOUND_SUCCESS,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "cUSDC redeem failed."

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        240
Source: 
>     // Send the USDC to the redeemer
>     require(_USDC.transfer(msg.sender, usdcToReceive), "USDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        253
Source: 
>     // Send the cUSDC surplus to the vault
>     require(_CUSDC.transfer(_VAULT, cUSDCSurplus), "cUSDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        568
Source: 
>     uint256 usdcSurplus = (
>       _CUSDC.balanceOfUnderlying(address(this)).sub(dUSDCUnderlying)
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     );

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        584
Source: 
>     uint256 defaultSupplyRate = _RATE_PER_BLOCK.sub(_SCALING_FACTOR);
>     cUSDCSupplyRate = _CUSDC.supplyRatePerBlock(); // NOTE: accrue on Compound first?
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     dUSDCSupplyRate = (

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        172
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     uint256 usdcToSupply

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        197
Source: 
>    */
>   function redeem(
>   ^^^^^^^^^^^^^^^^
>     uint256 dUSDCToBurn

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        224
Source: 
>    */
>   function redeemUnderlying(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 usdcToReceive

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        270
Source: 
>    */
>   function transfer(address recipient, uint256 amount) external returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transfer(msg.sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        295
Source: 
>    */
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address sender, address recipient, uint256 amount

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        312
Source: 
>    */
>   function increaseAllowance(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address spender, uint256 addedValue

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        327
Source: 
>    */
>   function decreaseAllowance(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address spender, uint256 subtractedValue

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        342
Source: 
>    */
>   function balanceOfUnderlying(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address account

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        282
Source: 
>    */
>   function approve(address spender, uint256 value) external returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        404
Source: 
>    */
>   function balanceOf(address account) external view returns (uint256 dUSDC) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     dUSDC = _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        415
Source: 
>    */
>   function allowance(address owner, address spender) external view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        87
Source: 
> 
>     uint256 c = a * b;
>                 ^^^^^
>     require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        180
Source: 
>     require(
>       _USDC.transferFrom(msg.sender, address(this), usdcToSupply),
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "USDC transfer failed."

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        185
Source: 
>     // Use the USDC to mint cUSDC (TODO: include error code in revert reason)
>     require(_CUSDC.mint(usdcToSupply) == _COMPOUND_SUCCESS, "cUSDC mint failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        208
Source: 
>     require(
>       _CUSDC.redeemUnderlying(usdcReceived) == _COMPOUND_SUCCESS,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "cUSDC redeem failed."

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        213
Source: 
>     // Send the USDC to the redeemer
>     require(_USDC.transfer(msg.sender, usdcReceived), "USDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        235
Source: 
>     require(
>       _CUSDC.redeemUnderlying(usdcToReceive) == _COMPOUND_SUCCESS,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "cUSDC redeem failed."

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        240
Source: 
>     // Send the USDC to the redeemer
>     require(_USDC.transfer(msg.sender, usdcToReceive), "USDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        253
Source: 
>     // Send the cUSDC surplus to the vault
>     require(_CUSDC.transfer(_VAULT, cUSDCSurplus), "cUSDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        299
Source: 
>     _transfer(sender, recipient, amount);
>     uint256 allowance = _allowances[sender][msg.sender];
>     ^^^^^^^^^^^^^^^^^
>     if (allowance != uint256(-1)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        346
Source: 
>     // Get most recent dUSDC exchange rate by determining accrued interest
>     (uint256 dUSDCExchangeRate,,) = _getAccruedInterest();
>      ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        346
Source: 
>     // Get most recent dUSDC exchange rate by determining accrued interest
>     (uint256 dUSDCExchangeRate,,) = _getAccruedInterest();
>      ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        618
Source: 
>     (
>       uint256 dUSDCExchangeRate, uint256 cUSDCExchangeRate, bool fullyAccrued
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>     ) = _getAccruedInterest();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        618
Source: 
>     (
>       uint256 dUSDCExchangeRate, uint256 cUSDCExchangeRate, bool fullyAccrued
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>     ) = _getAccruedInterest();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        618
Source: 
>     (
>       uint256 dUSDCExchangeRate, uint256 cUSDCExchangeRate, bool fullyAccrued
>                                                             ^^^^^^^^^^^^^^^^^
>     ) = _getAccruedInterest();

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        123
Source: 
>   // 4% APR interest assuming 15 second block time & 2,102,400 blocks per year
>   uint256 internal constant _RATE_PER_BLOCK = 1000000019025875275;
>                                               ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        157
Source: 
>     // Approve cUSDC to transfer USDC on behalf of this contract in order to mint.
>     require(_USDC.approve(address(_CUSDC), uint256(-1)));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        161
Source: 
>     _dUSDCExchangeRate = 1e16; // 1 USDC == 1 dUSDC to start
>     _cUSDCExchangeRate = _CUSDC.exchangeRateCurrent();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        180
Source: 
>     require(
>       _USDC.transferFrom(msg.sender, address(this), usdcToSupply),
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "USDC transfer failed."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        185
Source: 
>     // Use the USDC to mint cUSDC (TODO: include error code in revert reason)
>     require(_CUSDC.mint(usdcToSupply) == _COMPOUND_SUCCESS, "cUSDC mint failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        541
Source: 
>       // Retrieve the latest exchange rate for cUSDC
>       cUSDCExchangeRate = _CUSDC.exchangeRateCurrent();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        208
Source: 
>     require(
>       _CUSDC.redeemUnderlying(usdcReceived) == _COMPOUND_SUCCESS,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "cUSDC redeem failed."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        213
Source: 
>     // Send the USDC to the redeemer
>     require(_USDC.transfer(msg.sender, usdcReceived), "USDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        235
Source: 
>     require(
>       _CUSDC.redeemUnderlying(usdcToReceive) == _COMPOUND_SUCCESS,
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       "cUSDC redeem failed."

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        240
Source: 
>     // Send the USDC to the redeemer
>     require(_USDC.transfer(msg.sender, usdcToReceive), "USDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        253
Source: 
>     // Send the cUSDC surplus to the vault
>     require(_CUSDC.transfer(_VAULT, cUSDCSurplus), "cUSDC transfer failed.");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        568
Source: 
>     uint256 usdcSurplus = (
>       _CUSDC.balanceOfUnderlying(address(this)).sub(dUSDCUnderlying)
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     );

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        584
Source: 
>     uint256 defaultSupplyRate = _RATE_PER_BLOCK.sub(_SCALING_FACTOR);
>     cUSDCSupplyRate = _CUSDC.supplyRatePerBlock(); // NOTE: accrue on Compound first?
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     dUSDCSupplyRate = (

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        148
Source: 
> 
>   uint256 private _totalSupply;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        151
Source: 
>   // TODO: pack these more tightly in storage
>   uint256 private _blockLastUpdated;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private _dUSDCExchangeRate;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        152
Source: 
>   uint256 private _blockLastUpdated;
>   uint256 private _dUSDCExchangeRate;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private _cUSDCExchangeRate;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        624
Source: 
>       _blockLastUpdated = block.number;
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _cUSDCExchangeRate = cUSDCExchangeRate;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        459
Source: 
>   function _mint(address account, uint256 exchanged, uint256 amount) internal {
>     _totalSupply = _totalSupply.add(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _balances[account] = _balances[account].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        460
Source: 
>     _totalSupply = _totalSupply.add(amount);
>     _balances[account] = _balances[account].add(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        624
Source: 
>       _blockLastUpdated = block.number;
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _cUSDCExchangeRate = cUSDCExchangeRate;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        479
Source: 
> 
>     _totalSupply = _totalSupply.sub(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _balances[account] = balancePriorToBurn - amount; // overflow checked above

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        480
Source: 
>     _totalSupply = _totalSupply.sub(amount);
>     _balances[account] = balancePriorToBurn - amount; // overflow checked above
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        624
Source: 
>       _blockLastUpdated = block.number;
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _cUSDCExchangeRate = cUSDCExchangeRate;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        513
Source: 
> 
>     _allowances[owner][spender] = value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(owner, spender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DharmaUSDCPrototype0
Line:        624
Source: 
>       _blockLastUpdated = block.number;
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _cUSDCExchangeRate = cUSDCExchangeRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        623
Source: 
>       // Update storage with dUSDC + cUSDC exchange rates as of the current block
>       _blockLastUpdated = block.number;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _dUSDCExchangeRate = dUSDCExchangeRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        625
Source: 
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       _cUSDCExchangeRate = cUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        623
Source: 
>       // Update storage with dUSDC + cUSDC exchange rates as of the current block
>       _blockLastUpdated = block.number;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _dUSDCExchangeRate = dUSDCExchangeRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        625
Source: 
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       _cUSDCExchangeRate = cUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        623
Source: 
>       // Update storage with dUSDC + cUSDC exchange rates as of the current block
>       _blockLastUpdated = block.number;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _dUSDCExchangeRate = dUSDCExchangeRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        625
Source: 
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       _cUSDCExchangeRate = cUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        623
Source: 
>       // Update storage with dUSDC + cUSDC exchange rates as of the current block
>       _blockLastUpdated = block.number;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _dUSDCExchangeRate = dUSDCExchangeRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        625
Source: 
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       _cUSDCExchangeRate = cUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        623
Source: 
>       // Update storage with dUSDC + cUSDC exchange rates as of the current block
>       _blockLastUpdated = block.number;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _dUSDCExchangeRate = dUSDCExchangeRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        625
Source: 
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       _cUSDCExchangeRate = cUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        497
Source: 
> 
>     _balances[sender] = _balances[sender].sub(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        498
Source: 
>     _balances[sender] = _balances[sender].sub(amount);
>     _balances[recipient] = _balances[recipient].add(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        623
Source: 
>       // Update storage with dUSDC + cUSDC exchange rates as of the current block
>       _blockLastUpdated = block.number;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _dUSDCExchangeRate = dUSDCExchangeRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DharmaUSDCPrototype0
Line:        625
Source: 
>       _dUSDCExchangeRate = dUSDCExchangeRate;
>       _cUSDCExchangeRate = cUSDCExchangeRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
