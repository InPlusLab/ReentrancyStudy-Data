Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        102
Source: 
>         _buf.capacity = capacity; // Allocate space for the buffer data
>         assembly {
>         ^^^^^^^^^^
>             let ptr := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        137
Source: 
>         uint len = _data.length;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        145
Source: 
>         for(; len >= 32; len -= 32) { // Copy word-length chunks while possible
>             assembly {
>             ^^^^^^^^^^
>                 mstore(dest, mload(src))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        152
Source: 
>         uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes
>         assembly {
>         ^^^^^^^^^^
>             let srcpart := and(mload(src), not(mask))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        172
Source: 
>         }
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        194
Source: 
>         uint mask = 256 ** _len - 1;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        865
Source: 
>     function getCodeSize(address _addr) view internal returns (uint _size) {
>         assembly {
>         ^^^^^^^^^^
>             _size := extcodesize(_addr)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1102
Source: 
>         bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
>         assembly {
>         ^^^^^^^^^^
>             mstore(unonce, 0x20)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1114
Source: 
>         bytes memory delay = new bytes(32);
>         assembly {
>         ^^^^^^^^^^
>             mstore(add(delay, 0x20), _delay)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1122
Source: 
>         bytes memory delay_bytes8_left = new bytes(8);
>         assembly {
>         ^^^^^^^^^^
>             let x := mload(add(delay_bytes8, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1152
Source: 
>         sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);
>         assembly {
>         ^^^^^^^^^^
>             sigr := mload(add(sigr_, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1261
Source: 
>         while (i < (32 + _fromOffset + _length)) {
>             assembly {
>             ^^^^^^^^^^
>                 let tmp := mload(add(_from, i))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1285
Source: 
>         address addr;
>         assembly {
>         ^^^^^^^^^^
>             let size := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1311
Source: 
>         */
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(_sig, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1343
Source: 
>     function safeMemoryCleaner() internal pure {
>         assembly {
>         ^^^^^^^^^^
>             let fmem := mload(0x40)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    usingOraclize
Line:        386
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YoutubeViews
Line:        1368
Source: 
> 
>     function __callback(
>     ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _myid,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    usingOraclize
Line:        404
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        382
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        386
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        382
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        386
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YoutubeViews
Line:        1368
Source: 
> 
>     function __callback(
>     ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _myid,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        400
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        861
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    solcChecker
Line:        36
Source: 
> // Dummy contract only used to emit to end-user they are using wrong solc
> contract solcChecker {
> ^^^^^^^^^^^^^^^^^^^^^^
> /* INCOMPATIBLE SOLC: import the following instead: "github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol" */ function f(bytes calldata x) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        47
Source: 
>     function getPrice(string memory _datasource) public returns (uint _dsprice);
>     function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getPrice(string memory _datasource, uint _gasLimit) public returns (uint _dsprice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        52
Source: 
>     function query2(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) public payable returns (bytes32 _id);
>     function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        53
Source: 
>     function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        54
Source: 
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);
>     function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Buffer
Line:        91
Source: 
> 
>     struct buffer {
>     ^^^^^^^^^^^^^^^
>         bytes buf;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        278
Source: 
> */
> contract usingOraclize {
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        283
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        286
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        287
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        289
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        290
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        291
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        292
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        294
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        297
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        299
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        300
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        303
Source: 
> 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        304
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        316
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        324
Source: 
> 
>     function oraclize_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _networkID; // NOTE: Silence the warning and remain backwards compatible

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        329
Source: 
> 
>     function oraclize_setNetworkName(string memory _network_name) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oraclize_network_name = _network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        333
Source: 
> 
>     function oraclize_getNetworkName() internal view returns (string memory _networkName) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize_network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        337
Source: 
> 
>     function oraclize_setNetwork() internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        382
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        386
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        391
Source: 
> 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        395
Source: 
> 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        399
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        407
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        415
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource,_gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        423
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        431
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        439
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        447
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        455
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        463
Source: 
> 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        472
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        481
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        490
Source: 
> 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        499
Source: 
> 
>     function oraclize_query(string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        505
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        511
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        517
Source: 
> 
>     function oraclize_query(string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        523
Source: 
> 
>     function oraclize_query(string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        530
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        537
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        544
Source: 
> 
>     function oraclize_query(string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        551
Source: 
> 
>     function oraclize_query(string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        559
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        567
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        575
Source: 
> 
>     function oraclize_query(string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        583
Source: 
> 
>     function oraclize_query(string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        592
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        601
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        610
Source: 
> 
>     function oraclize_query(string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        619
Source: 
> 
>     function oraclize_query(string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        629
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        639
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        649
Source: 
> 
>     function oraclize_query(string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        659
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        668
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        677
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        686
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        695
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        701
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        707
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        713
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        719
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        726
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        733
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        740
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        747
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        755
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        763
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        771
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        779
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        788
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        797
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        806
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        815
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        825
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        835
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        845
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        855
Source: 
> 
>     function oraclize_setProof(byte _proofP) oraclizeAPI internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.setProofType(_proofP);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        860
Source: 
> 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.cbAddress();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        870
Source: 
> 
>     function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.setCustomGasPrice(_gasPrice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        874
Source: 
> 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.randomDS_getSessionPubKeyHash();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        966
Source: 
>     function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {
>         bytes memory _ba = bytes(_a);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bb = bytes(_b);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        967
Source: 
>         bytes memory _ba = bytes(_a);
>         bytes memory _bb = bytes(_b);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bc = bytes(_c);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        968
Source: 
>         bytes memory _bb = bytes(_b);
>         bytes memory _bc = bytes(_c);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bd = bytes(_d);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        969
Source: 
>         bytes memory _bc = bytes(_c);
>         bytes memory _bd = bytes(_d);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _be = bytes(_e);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        970
Source: 
>         bytes memory _bd = bytes(_d);
>         bytes memory _be = bytes(_e);
>         ^^^^^^^^^^^^^^^^
>         string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1094
Source: 
> 
>     function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((_nbytes > 0) && (_nbytes <= 32));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1101
Source: 
>         bytes memory sessionKeyHash = new bytes(32);
>         bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1117
Source: 
>         }
>         bytes memory delay_bytes8 = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(delay, 24, 8, delay_bytes8, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1121
Source: 
>         bytes32 queryId = oraclize_query("random", args, _customGasLimit);
>         bytes memory delay_bytes8_left = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1137
Source: 
> 
>     function oraclize_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oraclize_randomDS_args[_queryId] = _commitment;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1165
Source: 
> 
>     function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool sigok;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1170
Source: 
>         copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);
>         bytes memory appkey1_pubkey = new bytes(64);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1175
Source: 
>         copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);
>         bytes memory CODEHASH = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";
>         ^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1182
Source: 
>         // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)
>         bytes memory LEDGERKEY = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";
>         ^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory tosign3 = new bytes(1 + 65);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1192
Source: 
> 
>     function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Random DS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1215
Source: 
> 
>     function oraclize_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1274
Source: 
>     */
>     function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         /*

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YoutubeViews
Line:        1368
Source: 
> 
>     function __callback(
>     ^^^^^^^^^^^^^^^^^^^^
>         bytes32 _myid,

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >= 0.5.0 < 0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        33
Source: 
> */
> pragma solidity >= 0.5.0 < 0.6.0; // Incompatible compiler version - please select a compiler within the stated pragma range, or use a different version of the oraclizeAPI!
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        282
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        283
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        286
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        287
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        289
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        290
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        291
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        292
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        294
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        297
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        299
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        300
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        303
Source: 
> 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        304
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        316
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                            ^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        316
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                                              ^^^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        316
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                                                                     ^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        319
Source: 
>         require((_proof[0] == "L") && (_proof[1] == "P") && (uint8(_proof[2]) == uint8(1)));
>         bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
>         ^^^^^^^^^^^^^^^^^^
>         require(proofVerified);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        401
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        409
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        433
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        441
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        465
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        474
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        661
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        670
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    usingOraclize
Line:        404
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    usingOraclize
Line:        404
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        400
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        861
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    usingOraclize
Line:        404
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1058
Source: 
>         while (j != 0) {
>             len++;
>             ^^^
>             j /= 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1073
Source: 
>         Buffer.buffer memory buf;
>         Buffer.init(buf, 1024);
>                     ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1085
Source: 
>         Buffer.buffer memory buf;
>         Buffer.init(buf, 1024);
>                     ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1156
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                                                         ^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1333
Source: 
>         */
>         if (v < 27) {
>             ^
>             v += 27;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    usingOraclize
Line:        282
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    YoutubeViews
Line:        1357
Source: 
> 
>     string public viewsCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        282
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        283
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        283
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        209
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        210
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        209
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        210
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    usingOraclize
Line:        404
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingOraclize
Line:        388
Source: 
>       _myid; _result; _proof;
>       oraclize_randomDS_args[bytes32(0)] = bytes32(0);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        392
Source: 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        396
Source: 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        400
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        404
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        408
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        412
Source: 
>         }
>         return oraclize.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        416
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource,_gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        420
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        424
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        428
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        432
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        436
Source: 
>         }
>         return oraclize.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        440
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        444
Source: 
>         }
>         return oraclize.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        448
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        452
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        456
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        460
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        464
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        469
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        473
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        478
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        482
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        487
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        491
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        496
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        660
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        665
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        669
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        674
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        678
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        683
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        687
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        692
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        861
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        875
Source: 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>         return oraclize.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        338
Source: 
>     function oraclize_setNetwork() internal returns (bool _networkSet) {
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        343
Source: 
>         }
>         if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        348
Source: 
>         }
>         if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        353
Source: 
>         }
>         if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        358
Source: 
>         }
>         if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) > 0) { //goerli testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        363
Source: 
>         }
>         if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        367
Source: 
>         }
>         if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        371
Source: 
>         }
>         if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        392
Source: 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        396
Source: 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        408
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        412
Source: 
>         }
>         return oraclize.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        416
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource,_gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        420
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        424
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        428
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        432
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        436
Source: 
>         }
>         return oraclize.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        440
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        444
Source: 
>         }
>         return oraclize.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        448
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        452
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        456
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        460
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        464
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        469
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        473
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        478
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        482
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        487
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        491
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        496
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        660
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        665
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        669
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        674
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        678
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        683
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        687
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        692
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        310
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        311
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        875
Source: 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>         return oraclize.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1156
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1160
Source: 
>         } else {
>             (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (address(uint160(uint256(keccak256(_pubkey)))) == signer);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1197
Source: 
>         }
>         bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
>                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!proofVerified) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1339
Source: 
>         }
>         return safer_ecrecover(_hash, v, r, s);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        282
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        283
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        286
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        287
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        289
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        290
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        291
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        292
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        294
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        297
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        299
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        300
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        304
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        209
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        210
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        286
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        287
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        289
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        290
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        291
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        292
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        294
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        299
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        300
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        304
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        209
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        210
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
