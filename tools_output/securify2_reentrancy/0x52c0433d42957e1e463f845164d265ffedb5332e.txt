Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SZORewardPools
Line:        82
Source: 
>     
>     uint256 public version = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public lastTimeClaim;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        27
Source: 
>   function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{
>     require(owners[_newOwner] == false);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owners[_newOwner] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SZORewardPools
Line:        158
Source: 
>     function setPoolRewardAddr(address _addr)public onlyOwners{
>             if(poolsRewardIdx[_addr] == 0){
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 uint256 idx = pools.push(_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SZORewardPools
Line:        171
Source: 
>     function getReward(address _contract,address _wallet) public view returns(uint256){
>         if(poolsRewardActive[_contract] == false) return 0;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SZORewardPools
Line:        201
Source: 
>     function getRewardSP(address _contract,address _wallet) public view returns(uint256){
>         if(poolsRewardActive[_contract] == false) return 0;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SZORewardPools
Line:        241
Source: 
>     function claimWSZOReward(address _wallet) public returns(uint256 _claim){
>         require(msg.sender == _wallet || owners[msg.sender] == true,"No permission to claim reward");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         require(pauseReward == false,"REWARD PAUSE TO CLAIM");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SZORewardPools
Line:        252
Source: 
>     function claimReward(address _wallet) public  returns(uint256 _claim){
>         require(msg.sender == _wallet || owners[msg.sender] == true,"No permission to claim reward");
>                 ^^^^^^^^^^^^^^^^^^^^^
>         require(pauseReward == false,"REWARD PAUSE TO CLAIM");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        26
Source: 
> 
>   function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(owners[_newOwner] == false);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        33
Source: 
> 
>   function removeOwner(address _owner) public onlyOwners{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_owner != msg.sender);  // can't remove your self

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        39
Source: 
> 
>   function isOwner(address _owner) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return owners[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        26
Source: 
> 
>   function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(owners[_newOwner] == false);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        33
Source: 
> 
>   function removeOwner(address _owner) public onlyOwners{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_owner != msg.sender);  // can't remove your self

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        39
Source: 
> 
>   function isOwner(address _owner) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return owners[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        116
Source: 
>     
>     function setRewardCal(address _addr) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         calReward = SZOCalcReward(_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        120
Source: 
>     
>     function setSPRewardCal(address _addr) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         SPReward = SZOCalcReward(_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        124
Source: 
>     
>     function addWSZO(uint256 _amount) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          wszoToken.deposit(_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        128
Source: 
>     
>     function removeWSZO(uint256 _amount) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wszoToken.withdraw(_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        132
Source: 
>     
>     function setPauseReward() public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pauseReward = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        136
Source: 
>     
>     function moveToNewRewardPools(address _newAddr) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pauseReward == true,"Please Pause before move to new pools");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        165
Source: 
>     
>     function setActivePools(address _addr,bool _act) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolsRewardActive[_addr] =  _act;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        240
Source: 
> 
>     function claimWSZOReward(address _wallet) public returns(uint256 _claim){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _wallet || owners[msg.sender] == true,"No permission to claim reward");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SZORewardPools
Line:        251
Source: 
>     
>     function claimReward(address _wallet) public  returns(uint256 _claim){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _wallet || owners[msg.sender] == true,"No permission to claim reward");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        125
Source: 
>     function addWSZO(uint256 _amount) public onlyOwners{
>          wszoToken.deposit(_amount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        129
Source: 
>     function removeWSZO(uint256 _amount) public onlyOwners{
>         wszoToken.withdraw(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        142
Source: 
>         
>         (_data1,_data2) = szoToken.getKYCData(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        144
Source: 
>         
>         if(szoToken.haveKYC(_newAddr)  == false){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>           szoToken.createKYCData(_data1,_data2,_newAddr);    

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        145
Source: 
>         if(szoToken.haveKYC(_newAddr)  == false){
>           szoToken.createKYCData(_data1,_data2,_newAddr);    
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        148
Source: 
>         
>         uint256 amount = szoToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         newPools = _newAddr;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        150
Source: 
>         newPools = _newAddr;
>         szoToken.transfer(_newAddr,amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         amount = wszoToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        151
Source: 
>         szoToken.transfer(_newAddr,amount);
>         amount = wszoToken.balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wszoToken.transfer(_newAddr,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        152
Source: 
>         amount = wszoToken.balanceOf(address(this));
>         wszoToken.transfer(_newAddr,amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        174
Source: 
>         POOLS  pool = POOLS(_contract);
>         uint256 maxIdx = pool.getMaxDepositContract(_wallet);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory idxs = new uint256[](maxIdx);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        176
Source: 
>         uint256[] memory idxs = new uint256[](maxIdx);
>         idxs = pool.getAllDepositIdx(_wallet);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalReward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        204
Source: 
>         POOLS  pool = POOLS(_contract);
>         uint256 maxIdx = pool.getMaxDepositContract(_wallet);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory idxs = new uint256[](maxIdx);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        206
Source: 
>         uint256[] memory idxs = new uint256[](maxIdx);
>         idxs = pool.getAllDepositIdx(_wallet);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalReward;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        246
Source: 
>         lastTimeClaim[_wallet] = now;
>         if(_claim > wszoToken.balanceOf(address(this))) _claim = wszoToken.balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        246
Source: 
>         lastTimeClaim[_wallet] = now;
>         if(_claim > wszoToken.balanceOf(address(this))) _claim = wszoToken.balanceOf(address(this));
>                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        248
Source: 
>         
>         wszoToken.transfer(_wallet,_claim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        258
Source: 
> 
>         if(_claim > szoToken.balanceOf(address(this))) _claim = szoToken.balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        258
Source: 
> 
>         if(_claim > szoToken.balanceOf(address(this))) _claim = szoToken.balanceOf(address(this));
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SZORewardPools
Line:        260
Source: 
> 
>         szoToken.transfer(_wallet,_claim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SZORewardPools
Line:        183
Source: 
>         for(uint256 i=0;i<maxIdx;i++){
>             _data = pool.getDepositDataIdx(idxs[i]-1);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(_data[0] > 0){

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SZORewardPools
Line:        186
Source: 
>                 if(_data[1] > lastClaim){
>                     _reward =  calReward.getReward(now - _data[1],_data[0]); 
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SZORewardPools
Line:        190
Source: 
>                 {
>                     _reward =  calReward.getReward(now - lastClaim,_data[0]); 
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SZORewardPools
Line:        215
Source: 
>         for(uint256 i=0;i<maxIdx;i++){
>             _data = pool.getDepositDataIdx(idxs[i]-1);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(_data[0] > 0){

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SZORewardPools
Line:        218
Source: 
>                 if(_data[1] > lastClaim )
>                     _reward =  SPReward.getReward(_data[1],_data[0]); 
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 else

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SZORewardPools
Line:        220
Source: 
>                 else
>                     _reward =  SPReward.getReward(lastClaim,_data[0]); 
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 totalReward += _reward;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SZORewardPools
Line:        124
Source: 
>     
>     function addWSZO(uint256 _amount) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          wszoToken.deposit(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SZORewardPools
Line:        128
Source: 
>     
>     function removeWSZO(uint256 _amount) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wszoToken.withdraw(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SZORewardPools
Line:        136
Source: 
>     
>     function moveToNewRewardPools(address _newAddr) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pauseReward == true,"Please Pause before move to new pools");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SZORewardPools
Line:        228
Source: 
>     
>     function summarySZOReward(address _addr) public view returns(uint256 sumBalance,uint256[] memory _pool,uint256[] memory _poolSP){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          _pool = new uint256[](pools.length);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SZORewardPools
Line:        240
Source: 
> 
>     function claimWSZOReward(address _wallet) public returns(uint256 _claim){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _wallet || owners[msg.sender] == true,"No permission to claim reward");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SZORewardPools
Line:        251
Source: 
>     
>     function claimReward(address _wallet) public  returns(uint256 _claim){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _wallet || owners[msg.sender] == true,"No permission to claim reward");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownable
Line:        26
Source: 
> 
>   function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(owners[_newOwner] == false);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownable
Line:        39
Source: 
> 
>   function isOwner(address _owner) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return owners[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownable
Line:        26
Source: 
> 
>   function addOwner(address _newOwner,string memory newOwnerName) public onlyOwners{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(owners[_newOwner] == false);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownable
Line:        39
Source: 
> 
>   function isOwner(address _owner) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return owners[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SZORewardPools
Line:        116
Source: 
>     
>     function setRewardCal(address _addr) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         calReward = SZOCalcReward(_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SZORewardPools
Line:        120
Source: 
>     
>     function setSPRewardCal(address _addr) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         SPReward = SZOCalcReward(_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SZORewardPools
Line:        165
Source: 
>     
>     function setActivePools(address _addr,bool _act) public onlyOwners{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         poolsRewardActive[_addr] =  _act;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SZORewardPools
Line:        246
Source: 
>         lastTimeClaim[_wallet] = now;
>         if(_claim > wszoToken.balanceOf(address(this))) _claim = wszoToken.balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SZORewardPools
Line:        246
Source: 
>         lastTimeClaim[_wallet] = now;
>         if(_claim > wszoToken.balanceOf(address(this))) _claim = wszoToken.balanceOf(address(this));
>                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SZORewardPools
Line:        248
Source: 
>         
>         wszoToken.transfer(_wallet,_claim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SZORewardPools
Line:        258
Source: 
> 
>         if(_claim > szoToken.balanceOf(address(this))) _claim = szoToken.balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SZORewardPools
Line:        258
Source: 
> 
>         if(_claim > szoToken.balanceOf(address(this))) _claim = szoToken.balanceOf(address(this));
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SZORewardPools
Line:        260
Source: 
> 
>         szoToken.transfer(_wallet,_claim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SZORewardPools
Line:        97
Source: 
>     SZOCalcReward public calReward;
>     SZOCalcReward public SPReward;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SZORewardPools
Line:        139
Source: 
>         
>         bytes32 _data1;
>         ^^^^^^^^^^^^^^
>         bytes32 _data2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SZORewardPools
Line:        140
Source: 
>         bytes32 _data1;
>         bytes32 _data2;
>         ^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SZORewardPools
Line:        179
Source: 
>         uint256 lastClaim = lastTimeClaim[_wallet];
>         uint256[] memory _data = new uint256[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _reward;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SZORewardPools
Line:        180
Source: 
>         uint256[] memory _data = new uint256[](2);
>         uint256 _reward;
>         ^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SZORewardPools
Line:        208
Source: 
>         uint256 totalReward;
>         uint256[] memory _data = new uint256[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _reward;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SZORewardPools
Line:        209
Source: 
>         uint256[] memory _data = new uint256[](2);
>         uint256 _reward;
>         ^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        11
Source: 
> 
>   mapping (address=>bool) owners;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SZORewardPools
Line:        89
Source: 
>     
>     ERC20 szoToken;
>     ^^^^^^^^^^^^^^
>     ERC20 wszoToken;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SZORewardPools
Line:        90
Source: 
>     ERC20 szoToken;
>     ERC20 wszoToken;
>     ^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SZORewardPools
Line:        111
Source: 
>         
>         szoToken.approve(0x5538Ac3ce36e73bB851921f2a804b4657b5307bf,30000000 ether);
>                                                                     ^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        142
Source: 
>         
>         (_data1,_data2) = szoToken.getKYCData(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        144
Source: 
>         
>         if(szoToken.haveKYC(_newAddr)  == false){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>           szoToken.createKYCData(_data1,_data2,_newAddr);    

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        148
Source: 
>         
>         uint256 amount = szoToken.balanceOf(address(this));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         newPools = _newAddr;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        151
Source: 
>         szoToken.transfer(_newAddr,amount);
>         amount = wszoToken.balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wszoToken.transfer(_newAddr,amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        174
Source: 
>         POOLS  pool = POOLS(_contract);
>         uint256 maxIdx = pool.getMaxDepositContract(_wallet);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory idxs = new uint256[](maxIdx);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        176
Source: 
>         uint256[] memory idxs = new uint256[](maxIdx);
>         idxs = pool.getAllDepositIdx(_wallet);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalReward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        183
Source: 
>         for(uint256 i=0;i<maxIdx;i++){
>             _data = pool.getDepositDataIdx(idxs[i]-1);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(_data[0] > 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        204
Source: 
>         POOLS  pool = POOLS(_contract);
>         uint256 maxIdx = pool.getMaxDepositContract(_wallet);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory idxs = new uint256[](maxIdx);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        206
Source: 
>         uint256[] memory idxs = new uint256[](maxIdx);
>         idxs = pool.getAllDepositIdx(_wallet);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalReward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        215
Source: 
>         for(uint256 i=0;i<maxIdx;i++){
>             _data = pool.getDepositDataIdx(idxs[i]-1);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(_data[0] > 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        246
Source: 
>         lastTimeClaim[_wallet] = now;
>         if(_claim > wszoToken.balanceOf(address(this))) _claim = wszoToken.balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        246
Source: 
>         lastTimeClaim[_wallet] = now;
>         if(_claim > wszoToken.balanceOf(address(this))) _claim = wszoToken.balanceOf(address(this));
>                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        258
Source: 
> 
>         if(_claim > szoToken.balanceOf(address(this))) _claim = szoToken.balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SZORewardPools
Line:        258
Source: 
> 
>         if(_claim > szoToken.balanceOf(address(this))) _claim = szoToken.balanceOf(address(this));
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        111
Source: 
>         
>         szoToken.approve(0x5538Ac3ce36e73bB851921f2a804b4657b5307bf,30000000 ether);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        125
Source: 
>     function addWSZO(uint256 _amount) public onlyOwners{
>          wszoToken.deposit(_amount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        129
Source: 
>     function removeWSZO(uint256 _amount) public onlyOwners{
>         wszoToken.withdraw(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        145
Source: 
>         if(szoToken.haveKYC(_newAddr)  == false){
>           szoToken.createKYCData(_data1,_data2,_newAddr);    
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        150
Source: 
>         newPools = _newAddr;
>         szoToken.transfer(_newAddr,amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         amount = wszoToken.balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        152
Source: 
>         amount = wszoToken.balanceOf(address(this));
>         wszoToken.transfer(_newAddr,amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        186
Source: 
>                 if(_data[1] > lastClaim){
>                     _reward =  calReward.getReward(now - _data[1],_data[0]); 
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        190
Source: 
>                 {
>                     _reward =  calReward.getReward(now - lastClaim,_data[0]); 
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        218
Source: 
>                 if(_data[1] > lastClaim )
>                     _reward =  SPReward.getReward(_data[1],_data[0]); 
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 else

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        220
Source: 
>                 else
>                     _reward =  SPReward.getReward(lastClaim,_data[0]); 
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 totalReward += _reward;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        248
Source: 
>         
>         wszoToken.transfer(_wallet,_claim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SZORewardPools
Line:        260
Source: 
> 
>         szoToken.transfer(_wallet,_claim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SZORewardPools
Line:        93
Source: 
>  
>     bool  public  pauseReward;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public newPools;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SZORewardPools
Line:        94
Source: 
>     bool  public  pauseReward;
>     address public newPools;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SZORewardPools
Line:        111
Source: 
>         
>         szoToken.approve(0x5538Ac3ce36e73bB851921f2a804b4657b5307bf,30000000 ether);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SZORewardPools
Line:        145
Source: 
>         if(szoToken.haveKYC(_newAddr)  == false){
>           szoToken.createKYCData(_data1,_data2,_newAddr);    
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SZORewardPools
Line:        150
Source: 
>         newPools = _newAddr;
>         szoToken.transfer(_newAddr,amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         amount = wszoToken.balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SZORewardPools
Line:        152
Source: 
>         amount = wszoToken.balanceOf(address(this));
>         wszoToken.transfer(_newAddr,amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SZORewardPools
Line:        248
Source: 
>         
>         wszoToken.transfer(_wallet,_claim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SZORewardPools
Line:        260
Source: 
> 
>         szoToken.transfer(_wallet,_claim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SZORewardPools
Line:        82
Source: 
>     
>     uint256 public version = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) public lastTimeClaim;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SZORewardPools
Line:        94
Source: 
>     bool  public  pauseReward;
>     address public newPools;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
