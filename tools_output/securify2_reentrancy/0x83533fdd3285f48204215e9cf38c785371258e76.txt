Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        217
Source: 
>     function either(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := or(x, y)}
>          ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        220
Source: 
>     function both(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := and(x, y)}
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        240
Source: 
>     // --- Getters ---
>     function getAllowance(address account) public view returns (uint256, uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (allowance[account].total, allowance[account].perBlock);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        293
Source: 
>      */
>     function takeFunds(address account, uint256 rad) external isAuthorized accountNotTreasury(account) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         safeEngine.transferInternalCoins(account, address(this), rad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        50
Source: 
>      */
>     function addAuthorization(address account) external isAuthorized {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        58
Source: 
>      */
>     function removeAuthorization(address account) external isAuthorized {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        240
Source: 
>     // --- Getters ---
>     function getAllowance(address account) public view returns (uint256, uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (allowance[account].total, allowance[account].perBlock);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        250
Source: 
>      */
>     function setTotalAllowance(address account, uint256 rad) external isAuthorized accountNotTreasury(account) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(account != address(0), "StabilityFeeTreasury/null-account");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        260
Source: 
>      */
>     function setPerBlockAllowance(address account, uint256 rad) external isAuthorized accountNotTreasury(account) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(account != address(0), "StabilityFeeTreasury/null-account");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        211
Source: 
>         joinAllCoins();
>         safeEngine.transferInternalCoins(address(this), extraSurplusReceiver, safeEngine.coinBalance(address(this)));
>                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DisableContract();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        211
Source: 
>         joinAllCoins();
>         safeEngine.transferInternalCoins(address(this), extraSurplusReceiver, safeEngine.coinBalance(address(this)));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DisableContract();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        278
Source: 
> 
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(safeEngine.coinBalance(address(this)) >= rad, "StabilityFeeTreasury/not-enough-funds");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        279
Source: 
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>         require(safeEngine.coinBalance(address(this)) >= rad, "StabilityFeeTreasury/not-enough-funds");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        285
Source: 
> 
>         safeEngine.transferInternalCoins(address(this), account, rad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit GiveFunds(account, rad, expensesAccumulator);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        323
Source: 
> 
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(safeEngine.coinBalance(address(this)) >= multiply(wad, RAY), "StabilityFeeTreasury/not-enough-funds");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        324
Source: 
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>         require(safeEngine.coinBalance(address(this)) >= multiply(wad, RAY), "StabilityFeeTreasury/not-enough-funds");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(safeEngine.coinBalance(address(this)) >= pullFundsMinThreshold, "StabilityFeeTreasury/below-pullFunds-min-threshold");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        325
Source: 
>         require(safeEngine.coinBalance(address(this)) >= multiply(wad, RAY), "StabilityFeeTreasury/not-enough-funds");
>         require(safeEngine.coinBalance(address(this)) >= pullFundsMinThreshold, "StabilityFeeTreasury/below-pullFunds-min-threshold");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        332
Source: 
>         // Transfer money
>         safeEngine.transferInternalCoins(address(this), dstAccount, multiply(wad, RAY));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        363
Source: 
>         // Check that there's no bad debt left
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Check if we have too much money

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        365
Source: 
>         // Check if we have too much money
>         if (safeEngine.coinBalance(address(this)) > remainingFunds) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           // Make sure that we still keep min SF in treasury

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        367
Source: 
>           // Make sure that we still keep min SF in treasury
>           uint256 fundsToTransfer = subtract(safeEngine.coinBalance(address(this)), remainingFunds);
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           // Transfer surplus to accounting engine

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        369
Source: 
>           // Transfer surplus to accounting engine
>           safeEngine.transferInternalCoins(address(this), extraSurplusReceiver, fundsToTransfer);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           // Emit event

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        108
Source: 
> 
>     modifier accountNotTreasury(address account) {
>                                  ^^^^^^^^^^^^^^^
>         require(account != address(this), "StabilityFeeTreasury/account-cannot-be-treasury");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        133
Source: 
>     // --- Math ---
>     uint256 constant HUNDRED = 10 ** 2;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAY     = 10 ** 27;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        134
Source: 
>     uint256 constant HUNDRED = 10 ** 2;
>     uint256 constant RAY     = 10 ** 27;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        118
Source: 
>     ) public {
>         require(address(CoinJoinLike(coinJoin_).systemCoin()) != address(0), "StabilityFeeTreasury/null-system-coin");
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(extraSurplusReceiver_ != address(0), "StabilityFeeTreasury/null-surplus-receiver");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        124
Source: 
>         coinJoin                  = CoinJoinLike(coinJoin_);
>         systemCoin                = SystemCoinLike(coinJoin.systemCoin());
>                                                     ^^^^^^^^^^^^^^^^^^^^^
>         latestSurplusTransferTime = now;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        211
Source: 
>         joinAllCoins();
>         safeEngine.transferInternalCoins(address(this), extraSurplusReceiver, safeEngine.coinBalance(address(this)));
>                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DisableContract();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        226
Source: 
>     function joinAllCoins() internal {
>         if (systemCoin.balanceOf(address(this)) > 0) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           coinJoin.join(address(this), systemCoin.balanceOf(address(this)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        227
Source: 
>         if (systemCoin.balanceOf(address(this)) > 0) {
>           coinJoin.join(address(this), systemCoin.balanceOf(address(this)));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        231
Source: 
>     function settleDebt() public {
>         uint256 coinBalanceSelf = safeEngine.coinBalance(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 debtBalanceSelf = safeEngine.debtBalance(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        232
Source: 
>         uint256 coinBalanceSelf = safeEngine.coinBalance(address(this));
>         uint256 debtBalanceSelf = safeEngine.debtBalance(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        278
Source: 
> 
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(safeEngine.coinBalance(address(this)) >= rad, "StabilityFeeTreasury/not-enough-funds");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        279
Source: 
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>         require(safeEngine.coinBalance(address(this)) >= rad, "StabilityFeeTreasury/not-enough-funds");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        323
Source: 
> 
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(safeEngine.coinBalance(address(this)) >= multiply(wad, RAY), "StabilityFeeTreasury/not-enough-funds");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        324
Source: 
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>         require(safeEngine.coinBalance(address(this)) >= multiply(wad, RAY), "StabilityFeeTreasury/not-enough-funds");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(safeEngine.coinBalance(address(this)) >= pullFundsMinThreshold, "StabilityFeeTreasury/below-pullFunds-min-threshold");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        325
Source: 
>         require(safeEngine.coinBalance(address(this)) >= multiply(wad, RAY), "StabilityFeeTreasury/not-enough-funds");
>         require(safeEngine.coinBalance(address(this)) >= pullFundsMinThreshold, "StabilityFeeTreasury/below-pullFunds-min-threshold");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        363
Source: 
>         // Check that there's no bad debt left
>         require(safeEngine.debtBalance(address(this)) == 0, "StabilityFeeTreasury/outstanding-bad-debt");
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Check if we have too much money

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        365
Source: 
>         // Check if we have too much money
>         if (safeEngine.coinBalance(address(this)) > remainingFunds) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           // Make sure that we still keep min SF in treasury

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        367
Source: 
>           // Make sure that we still keep min SF in treasury
>           uint256 fundsToTransfer = subtract(safeEngine.coinBalance(address(this)), remainingFunds);
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           // Transfer surplus to accounting engine

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        128
Source: 
>         contractEnabled           = 1;
>         systemCoin.approve(address(coinJoin), uint256(-1));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit AddAuthorization(msg.sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        211
Source: 
>         joinAllCoins();
>         safeEngine.transferInternalCoins(address(this), extraSurplusReceiver, safeEngine.coinBalance(address(this)));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DisableContract();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        227
Source: 
>         if (systemCoin.balanceOf(address(this)) > 0) {
>           coinJoin.join(address(this), systemCoin.balanceOf(address(this)));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        235
Source: 
>         if (debtBalanceSelf > 0) {
>           safeEngine.settleDebt(minimum(coinBalanceSelf, debtBalanceSelf));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        285
Source: 
> 
>         safeEngine.transferInternalCoins(address(this), account, rad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit GiveFunds(account, rad, expensesAccumulator);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        294
Source: 
>     function takeFunds(address account, uint256 rad) external isAuthorized accountNotTreasury(account) {
>         safeEngine.transferInternalCoins(account, address(this), rad);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TakeFunds(account, rad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        332
Source: 
>         // Transfer money
>         safeEngine.transferInternalCoins(address(this), dstAccount, multiply(wad, RAY));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        369
Source: 
>           // Transfer surplus to accounting engine
>           safeEngine.transferInternalCoins(address(this), extraSurplusReceiver, fundsToTransfer);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           // Emit event

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        146
Source: 
>     function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x, "StabilityFeeTreasury/sub-uint-uint-underflow");
>                   ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        154
Source: 
>     function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x, "StabilityFeeTreasury/mul-uint-uint-overflow");
>                             ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        92
Source: 
> 
>     SAFEEngineLike  public safeEngine;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     SystemCoinLike  public systemCoin;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        93
Source: 
>     SAFEEngineLike  public safeEngine;
>     SystemCoinLike  public systemCoin;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     CoinJoinLike    public coinJoin;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        94
Source: 
>     SystemCoinLike  public systemCoin;
>     CoinJoinLike    public coinJoin;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        96
Source: 
> 
>     address public extraSurplusReceiver;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        98
Source: 
> 
>     uint256 public treasuryCapacity;           // max amount of SF that can be kept in treasury                            [rad]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public minimumFundsRequired;       // minimum amount of SF that must be kept in the treasury at all times      [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        99
Source: 
>     uint256 public treasuryCapacity;           // max amount of SF that can be kept in treasury                            [rad]
>     uint256 public minimumFundsRequired;       // minimum amount of SF that must be kept in the treasury at all times      [rad]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public expensesMultiplier;         // multiplier for expenses                                                  [hundred]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        100
Source: 
>     uint256 public minimumFundsRequired;       // minimum amount of SF that must be kept in the treasury at all times      [rad]
>     uint256 public expensesMultiplier;         // multiplier for expenses                                                  [hundred]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public surplusTransferDelay;       // minimum time between transferSurplusFunds calls                          [seconds]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        101
Source: 
>     uint256 public expensesMultiplier;         // multiplier for expenses                                                  [hundred]
>     uint256 public surplusTransferDelay;       // minimum time between transferSurplusFunds calls                          [seconds]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public expensesAccumulator;        // expenses accumulator                                                     [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        102
Source: 
>     uint256 public surplusTransferDelay;       // minimum time between transferSurplusFunds calls                          [seconds]
>     uint256 public expensesAccumulator;        // expenses accumulator                                                     [rad]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public accumulatorTag;             // latest tagged accumulator price                                          [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        103
Source: 
>     uint256 public expensesAccumulator;        // expenses accumulator                                                     [rad]
>     uint256 public accumulatorTag;             // latest tagged accumulator price                                          [rad]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pullFundsMinThreshold;      // minimum funds that must be in the treasury so that someone can pullFunds [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        104
Source: 
>     uint256 public accumulatorTag;             // latest tagged accumulator price                                          [rad]
>     uint256 public pullFundsMinThreshold;      // minimum funds that must be in the treasury so that someone can pullFunds [rad]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public latestSurplusTransferTime;  // latest timestamp when transferSurplusFunds was called                    [seconds]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        105
Source: 
>     uint256 public pullFundsMinThreshold;      // minimum funds that must be in the treasury so that someone can pullFunds [rad]
>     uint256 public latestSurplusTransferTime;  // latest timestamp when transferSurplusFunds was called                    [seconds]
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public contractEnabled;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        106
Source: 
>     uint256 public latestSurplusTransferTime;  // latest timestamp when transferSurplusFunds was called                    [seconds]
>     uint256 public contractEnabled;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        356
Source: 
>         // Set internal vars
>         accumulatorTag            = expensesAccumulator;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         latestSurplusTransferTime = now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabilityFeeTreasury
Line:        357
Source: 
>         accumulatorTag            = expensesAccumulator;
>         latestSurplusTransferTime = now;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Join all coins in system

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StabilityFeeTreasury
Line:        128
Source: 
>         contractEnabled           = 1;
>         systemCoin.approve(address(coinJoin), uint256(-1));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit AddAuthorization(msg.sender);

[0m
