[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherHash
Line:        21
Source: 
>     
>     function newAccount(bytes32 _proof)public payable minDeposit{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(proof[_proof] >=1){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherHash
Line:        30
Source: 
>     
>     function deposit(bytes32 _proof)public payable minDeposit{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(proof[_proof]>1){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherHash
Line:        39
Source: 
>     
>     function withdraw(string memory _value,address _to)public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if( proof[sha256(abi.encodePacked((_value)))]>10000000000000){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherHash
Line:        39
Source: 
>     
>     function withdraw(string memory _value,address _to)public{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if( proof[sha256(abi.encodePacked((_value)))]>10000000000000){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherHash
Line:        13
Source: 
>     function perc(uint8 _perc,uint256 sum)private pure returns(uint256){
>         return (sum/100)*_perc;
>                ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherHash
Line:        41
Source: 
>       if( proof[sha256(abi.encodePacked((_value)))]>10000000000000){
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherHash
Line:        42
Source: 
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           proof[sha256(abi.encodePacked((_value)))]=1;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.4;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EtherHash
Line:        18
Source: 
>     modifier minDeposit{
>         assert(msg.value>10000000000000);_;
>                          ^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EtherHash
Line:        40
Source: 
>     function withdraw(string memory _value,address _to)public{
>       if( proof[sha256(abi.encodePacked((_value)))]>10000000000000){
>                                                     ^^^^^^^^^^^^^^
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherHash
Line:        42
Source: 
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           proof[sha256(abi.encodePacked((_value)))]=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherHash
Line:        41
Source: 
>       if( proof[sha256(abi.encodePacked((_value)))]>10000000000000){
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherHash
Line:        41
Source: 
>       if( proof[sha256(abi.encodePacked((_value)))]>10000000000000){
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherHash
Line:        42
Source: 
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           proof[sha256(abi.encodePacked((_value)))]=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherHash
Line:        41
Source: 
>       if( proof[sha256(abi.encodePacked((_value)))]>10000000000000){
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherHash
Line:        42
Source: 
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           proof[sha256(abi.encodePacked((_value)))]=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EtherHash
Line:        41
Source: 
>       if( proof[sha256(abi.encodePacked((_value)))]>10000000000000){
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EtherHash
Line:        42
Source: 
>           address(uint160(_to)).transfer(proof[sha256(abi.encodePacked((_value)))]-perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           proof[sha256(abi.encodePacked((_value)))]=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherHash
Line:        25
Source: 
>         }else{
>              proof[_proof]=msg.value;
>              ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherHash
Line:        32
Source: 
>         if(proof[_proof]>1){
>             proof[_proof]+=msg.value;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherHash
Line:        43
Source: 
>           address(uint160(owner)).transfer(perc(10,proof[sha256(abi.encodePacked((_value)))]));
>           proof[sha256(abi.encodePacked((_value)))]=1;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }else{

[0m
