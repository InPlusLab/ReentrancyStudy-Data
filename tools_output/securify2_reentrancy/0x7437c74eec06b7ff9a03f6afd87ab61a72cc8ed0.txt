[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        56
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _governor;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        75
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_governor, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Governance: new Governor is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        124
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        75
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_governor, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Governance: new Governor is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        124
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        75
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_governor, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Governance: new Governor is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        124
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    spartanx4
Line:        484
Source: 
> 
>         payable(msg.sender).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Destructible
Line:        187
Source: 
> 
>     function transferGrandOwnership(address payable _to) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == grand_owner, "Access denied (only grand owner)");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    spartanx4
Line:        415
Source: 
> 
>     function deposit(address _upline) payable external whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setUpline(msg.sender, _upline);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Destructible
Line:        187
Source: 
> 
>     function transferGrandOwnership(address payable _to) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == grand_owner, "Access denied (only grand owner)");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    spartanx4
Line:        415
Source: 
> 
>     function deposit(address _upline) payable external whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _setUpline(msg.sender, _upline);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    spartanx4
Line:        505
Source: 
> 
>     function maxPayoutOf(uint256 _amount) pure external returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    spartanx4
Line:        529
Source: 
>     */
>     function userInfo(address _addr) view external returns(address upline, uint40 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus, uint256 pool_bonus, uint256 match_bonus) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_addr].upline, users[_addr].deposit_time, users[_addr].deposit_amount, users[_addr].payouts, users[_addr].direct_bonus, users[_addr].pool_bonus, users[_addr].match_bonus);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    spartanx4
Line:        533
Source: 
> 
>     function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    spartanx4
Line:        505
Source: 
> 
>     function maxPayoutOf(uint256 _amount) pure external returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    spartanx4
Line:        529
Source: 
>     */
>     function userInfo(address _addr) view external returns(address upline, uint40 deposit_time, uint256 deposit_amount, uint256 payouts, uint256 direct_bonus, uint256 pool_bonus, uint256 match_bonus) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_addr].upline, users[_addr].deposit_time, users[_addr].deposit_amount, users[_addr].payouts, users[_addr].direct_bonus, users[_addr].pool_bonus, users[_addr].match_bonus);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    spartanx4
Line:        533
Source: 
> 
>     function userInfoTotals(address _addr) view external returns(uint256 referrals, uint256 total_deposits, uint256 total_payouts, uint256 total_structure) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_addr].referrals, users[_addr].total_deposits, users[_addr].total_payouts, users[_addr].total_structure);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Sync
Line:        556
Source: 
> 
>        function sync(address[] calldata _users, address[] calldata _uplines, uint256[] calldata _data) external onlyOwner {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(!sync_close, "Sync already closed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Sync
Line:        588
Source: 
> 
>     function syncGlobal(uint40 _pool_last_draw, uint256 _pool_cycle, uint256 _pool_balance, uint256 _total_withdraw, address[] calldata _pool_top) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!sync_close, "Sync already close");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    spartanx4
Line:        400
Source: 
>             if(pool_top[i] == address(0)) break; 
>             uint256 win = draw_amount * pool_bonuses[i] / 100; 
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    spartanx4
Line:        516
Source: 
>             
>             payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days) / 50) - users[_addr].deposit_payouts;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    spartanx4
Line:        400
Source: 
>             if(pool_top[i] == address(0)) break; 
>             uint256 win = draw_amount * pool_bonuses[i] / 100; 
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    spartanx4
Line:        516
Source: 
>             
>             payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days) / 50) - users[_addr].deposit_payouts;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    spartanx4
Line:        484
Source: 
> 
>         payable(msg.sender).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Destructible
Line:        179
Source: 
> contract Destructible {
>     address payable public grand_owner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        200
Source: 
> 
> contract spartanx4 is Ownable, Destructible, Pausable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        221
Source: 
>     uint256[] public cycles;                        
>     uint8[] public ref_bonuses;                    
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        223
Source: 
> 
>     uint8[] public pool_bonuses;                   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint40 public pool_last_draw = uint40(block.timestamp);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        224
Source: 
>     uint8[] public pool_bonuses;                   
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pool_cycle;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        225
Source: 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     uint256 public pool_cycle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pool_balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        226
Source: 
>     uint256 public pool_cycle;
>     uint256 public pool_balance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        227
Source: 
>     uint256 public pool_balance;
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint8 => address) public pool_top;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        228
Source: 
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;
>     mapping(uint8 => address) public pool_top;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        230
Source: 
> 
>     uint256 public total_withdraw;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_participants;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        231
Source: 
>     uint256 public total_withdraw;
>     uint256 public total_participants;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        268
Source: 
> 
>     function _setUpline(address _addr, address _upline) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        396
Source: 
> 
>         uint256 draw_amount = pool_balance / 10; 
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        422
Source: 
>         
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>          ^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        422
Source: 
>         
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                             ^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        442
Source: 
>         if(users[msg.sender].payouts < max_payout && users[msg.sender].direct_bonus > 0) {
>             uint256 direct_bonus = users[msg.sender].direct_bonus;
>             ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        455
Source: 
>         if(users[msg.sender].payouts < max_payout && users[msg.sender].pool_bonus > 0) {
>             uint256 pool_bonus = users[msg.sender].pool_bonus;
>             ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    spartanx4
Line:        468
Source: 
>         if(users[msg.sender].payouts < max_payout && users[msg.sender].match_bonus > 0) {
>             uint256 match_bonus = users[msg.sender].match_bonus;
>             ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Sync
Line:        552
Source: 
> contract Sync is spartanx4 {
>     bool public sync_close = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    spartanx4
Line:        328
Source: 
> 
>         payable(owner()).transfer(_amount / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    spartanx4
Line:        484
Source: 
> 
>         payable(msg.sender).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    spartanx4
Line:        328
Source: 
> 
>         payable(owner()).transfer(_amount / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    spartanx4
Line:        328
Source: 
> 
>         payable(owner()).transfer(_amount / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    spartanx4
Line:        484
Source: 
> 
>         payable(msg.sender).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    spartanx4
Line:        328
Source: 
> 
>         payable(owner()).transfer(_amount / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    spartanx4
Line:        484
Source: 
> 
>         payable(msg.sender).transfer(to_payout);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    spartanx4
Line:        422
Source: 
>         
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    spartanx4
Line:        511
Source: 
>     function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {
>         max_payout = this.maxPayoutOf(users[_addr].deposit_amount);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    spartanx4
Line:        422
Source: 
>         
>         (uint256 to_payout, uint256 max_payout) = this.payoutOf(msg.sender);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    spartanx4
Line:        511
Source: 
>     function payoutOf(address _addr) view external returns(uint256 payout, uint256 max_payout) {
>         max_payout = this.maxPayoutOf(users[_addr].deposit_amount);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    spartanx4
Line:        545
Source: 
> 
>             addrs[i] = pool_top[i];
>             ^^^^^
>             deps[i] = pool_users_refs_deposits_sum[pool_cycle][pool_top[i]];

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    spartanx4
Line:        225
Source: 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     uint256 public pool_cycle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pool_balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    spartanx4
Line:        226
Source: 
>     uint256 public pool_cycle;
>     uint256 public pool_balance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    spartanx4
Line:        230
Source: 
> 
>     uint256 public total_withdraw;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_participants;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    spartanx4
Line:        231
Source: 
>     uint256 public total_withdraw;
>     uint256 public total_participants;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    spartanx4
Line:        225
Source: 
>     uint40 public pool_last_draw = uint40(block.timestamp);
>     uint256 public pool_cycle;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pool_balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    spartanx4
Line:        226
Source: 
>     uint256 public pool_cycle;
>     uint256 public pool_balance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => uint256)) public pool_users_refs_deposits_sum;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    spartanx4
Line:        230
Source: 
> 
>     uint256 public total_withdraw;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public total_participants;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    spartanx4
Line:        231
Source: 
>     uint256 public total_withdraw;
>     uint256 public total_participants;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    spartanx4
Line:        328
Source: 
> 
>         payable(owner()).transfer(_amount / 100);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        296
Source: 
>         
>         if(users[_addr].deposit_time == 0) { total_participants += 1; }
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        299
Source: 
>         if(users[_addr].deposit_time > 0) { 
>             users[_addr].cycle++;
>             ^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        307
Source: 
>         
>         users[_addr].payouts = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_amount = _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        308
Source: 
>         users[_addr].payouts = 0;
>         users[_addr].deposit_amount = _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_payouts = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        309
Source: 
>         users[_addr].deposit_amount = _amount;
>         users[_addr].deposit_payouts = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_time = uint40(block.timestamp);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        310
Source: 
>         users[_addr].deposit_payouts = 0;
>         users[_addr].deposit_time = uint40(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].total_deposits += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        311
Source: 
>         users[_addr].deposit_time = uint40(block.timestamp);
>         users[_addr].total_deposits += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        317
Source: 
>             
>             users[users[_addr].upline].direct_bonus += _amount / 10; 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        393
Source: 
>     function _drawPool() private {
>         pool_last_draw = uint40(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pool_cycle++; // increase pool_cycle by 1

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        394
Source: 
>         pool_last_draw = uint40(block.timestamp);
>         pool_cycle++; // increase pool_cycle by 1
>         ^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        411
Source: 
>         
>             pool_top[i] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        402
Source: 
>            
>             users[pool_top[i]].pool_bonus += win; 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             pool_balance -= win;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        403
Source: 
>             users[pool_top[i]].pool_bonus += win; 
>             pool_balance -= win;
>             ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        333
Source: 
>         
>         pool_balance += _amount / 20;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        339
Source: 
>         
>         pool_users_refs_deposits_sum[pool_cycle][upline] += _amount; 
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        346
Source: 
>             if(pool_top[i] == address(0)) {  
>                 pool_top[i] = upline;
>                 ^^^^^^^^^^^^^^^^^^^^
>                 break;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        357
Source: 
>                         for(uint8 k = j; k <= pool_bonuses.length; k++) {
>                             pool_top[k] = pool_top[k + 1];
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        364
Source: 
>                 for(uint8 j = uint8(pool_bonuses.length - 1); j > i; j--) {
>                     pool_top[j] = pool_top[j - 1];
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        367
Source: 
> 
>                 pool_top[i] = upline;
>                 ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        272
Source: 
>        
>             users[_addr].upline = _upline; 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_upline].referrals++; 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        273
Source: 
>             users[_addr].upline = _upline; 
>             users[_upline].referrals++; 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        281
Source: 
> 
>                 users[_upline].total_structure++;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        296
Source: 
>         
>         if(users[_addr].deposit_time == 0) { total_participants += 1; }
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        299
Source: 
>         if(users[_addr].deposit_time > 0) { 
>             users[_addr].cycle++;
>             ^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        307
Source: 
>         
>         users[_addr].payouts = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_amount = _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        308
Source: 
>         users[_addr].payouts = 0;
>         users[_addr].deposit_amount = _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_payouts = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        309
Source: 
>         users[_addr].deposit_amount = _amount;
>         users[_addr].deposit_payouts = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].deposit_time = uint40(block.timestamp);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        310
Source: 
>         users[_addr].deposit_payouts = 0;
>         users[_addr].deposit_time = uint40(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_addr].total_deposits += _amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        311
Source: 
>         users[_addr].deposit_time = uint40(block.timestamp);
>         users[_addr].total_deposits += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        317
Source: 
>             
>             users[users[_addr].upline].direct_bonus += _amount / 10; 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        393
Source: 
>     function _drawPool() private {
>         pool_last_draw = uint40(block.timestamp);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pool_cycle++; // increase pool_cycle by 1

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        394
Source: 
>         pool_last_draw = uint40(block.timestamp);
>         pool_cycle++; // increase pool_cycle by 1
>         ^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        411
Source: 
>         
>             pool_top[i] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        402
Source: 
>            
>             users[pool_top[i]].pool_bonus += win; 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             pool_balance -= win;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        403
Source: 
>             users[pool_top[i]].pool_bonus += win; 
>             pool_balance -= win;
>             ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        333
Source: 
>         
>         pool_balance += _amount / 20;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        339
Source: 
>         
>         pool_users_refs_deposits_sum[pool_cycle][upline] += _amount; 
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        346
Source: 
>             if(pool_top[i] == address(0)) {  
>                 pool_top[i] = upline;
>                 ^^^^^^^^^^^^^^^^^^^^
>                 break;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        357
Source: 
>                         for(uint8 k = j; k <= pool_bonuses.length; k++) {
>                             pool_top[k] = pool_top[k + 1];
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        364
Source: 
>                 for(uint8 j = uint8(pool_bonuses.length - 1); j > i; j--) {
>                     pool_top[j] = pool_top[j - 1];
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        367
Source: 
> 
>                 pool_top[i] = upline;
>                 ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        272
Source: 
>        
>             users[_addr].upline = _upline; 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_upline].referrals++; 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        273
Source: 
>             users[_addr].upline = _upline; 
>             users[_upline].referrals++; 
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    spartanx4
Line:        281
Source: 
> 
>                 users[_upline].total_structure++;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        161
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        173
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        161
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        173
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    spartanx4
Line:        328
Source: 
> 
>         payable(owner()).transfer(_amount / 100);
>                 ^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        161
Source: 
>         _paused = true;
>         emit Paused(_msgSender());
>                     ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        173
Source: 
>         _paused = false;
>         emit Unpaused(_msgSender());
>                       ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    spartanx4
Line:        328
Source: 
> 
>         payable(owner()).transfer(_amount / 100);
>                 ^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    spartanx4
Line:        393
Source: 
>     function _drawPool() private {
>         pool_last_draw = uint40(block.timestamp);
>                                 ^^^^^^^^^^^^^^^
>         pool_cycle++; // increase pool_cycle by 1

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    spartanx4
Line:        516
Source: 
>             
>             payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days) / 50) - users[_addr].deposit_payouts;
>                                                       ^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    spartanx4
Line:        224
Source: 
>     uint8[] public pool_bonuses;                   
>     uint40 public pool_last_draw = uint40(block.timestamp);
>                                           ^^^^^^^^^^^^^^^
>     uint256 public pool_cycle;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    spartanx4
Line:        393
Source: 
>     function _drawPool() private {
>         pool_last_draw = uint40(block.timestamp);
>                                 ^^^^^^^^^^^^^^^
>         pool_cycle++; // increase pool_cycle by 1

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    spartanx4
Line:        516
Source: 
>             
>             payout = (users[_addr].deposit_amount * ((block.timestamp - users[_addr].deposit_time) / 1 days) / 50) - users[_addr].deposit_payouts;
>                                                       ^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    spartanx4
Line:        224
Source: 
>     uint8[] public pool_bonuses;                   
>     uint40 public pool_last_draw = uint40(block.timestamp);
>                                           ^^^^^^^^^^^^^^^
>     uint256 public pool_cycle;

[0m
