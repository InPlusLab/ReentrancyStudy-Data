[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ERC20
Line:        126
Source: 
>         address a = msg.sender;
>         assembly {
>         ^^^^^^^^^^
>               size := extcodesize(a)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20
Line:        114
Source: 
> 
>     address private hitler = 0x21C959046Fd2f229165B4770DF478708666a0181;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private _totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20
Line:        116
Source: 
>     uint256 private _totalSupply;
>     address private saleAddress = 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private sold = 1_000*(10**18);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20
Line:        118
Source: 
>     uint256 private sold = 1_000*(10**18);
>     uint256 private priceMultiplier = 100_000_000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private price = 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20
Line:        120
Source: 
>     uint256 private price = 100;
>     uint256 private start = now;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier noBolsheviks (){

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Hm
Line:        301
Source: 
> 
>     string private _name = "HitlerMoon";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string private _symbol = "HITLERMOON";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Hm
Line:        302
Source: 
>     string private _name = "HitlerMoon";
>     string private _symbol = "HITLERMOON";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private _decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Hm
Line:        303
Source: 
>     string private _symbol = "HITLERMOON";
>     uint8 private _decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20
Line:        194
Source: 
>         uint8 b = 8;
>         if(blockhash(block.number)[31]==byte(b)&&blockhash(block.number)[30]==byte(b)){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             freeTicketToSeeHitler[msg.sender]=true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20
Line:        194
Source: 
>         uint8 b = 8;
>         if(blockhash(block.number)[31]==byte(b)&&blockhash(block.number)[30]==byte(b)){
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             freeTicketToSeeHitler[msg.sender]=true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20
Line:        194
Source: 
>         uint8 b = 8;
>         if(blockhash(block.number)[31]==byte(b)&&blockhash(block.number)[30]==byte(b)){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             freeTicketToSeeHitler[msg.sender]=true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20
Line:        194
Source: 
>         uint8 b = 8;
>         if(blockhash(block.number)[31]==byte(b)&&blockhash(block.number)[30]==byte(b)){
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             freeTicketToSeeHitler[msg.sender]=true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        134
Source: 
>     
>     function totalSupply() public  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        143
Source: 
> 
>     function hasAFreeTicket(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return freeTicketToSeeHitler[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        147
Source: 
>     
>     function transfer(address recipient, uint256 amount) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender!=saleAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        154
Source: 
>     
>     function allowance(address owner, address spender) public  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        159
Source: 
>     
>     function approve(address spender, uint256 value) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        165
Source: 
>     
>     function transferFrom(address sender, address recipient, uint256 amount) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(sender!=saleAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        173
Source: 
>     
>     function increaseAllowance(address spender, uint256 addedValue) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        179
Source: 
>     
>     function decreaseAllowance(address spender, uint256 subtractedValue) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        191
Source: 
>     
>     function sell(uint256 amount) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now < start + 365 days, "richalready");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        218
Source: 
>     event NewPrice(uint256 newPrice);
>     function buy() noBolsheviks public  payable returns (bool)  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now < start + 365 days, "richalready");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        264
Source: 
> 
>     function getPrice()  public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return price;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        267
Source: 
>     }
>      function getMyBuyPrice(address account)  public view returns (uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return salePrices[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        134
Source: 
>     
>     function totalSupply() public  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        143
Source: 
> 
>     function hasAFreeTicket(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return freeTicketToSeeHitler[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        147
Source: 
>     
>     function transfer(address recipient, uint256 amount) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender!=saleAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        154
Source: 
>     
>     function allowance(address owner, address spender) public  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        159
Source: 
>     
>     function approve(address spender, uint256 value) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        165
Source: 
>     
>     function transferFrom(address sender, address recipient, uint256 amount) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(sender!=saleAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        173
Source: 
>     
>     function increaseAllowance(address spender, uint256 addedValue) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        179
Source: 
>     
>     function decreaseAllowance(address spender, uint256 subtractedValue) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        191
Source: 
>     
>     function sell(uint256 amount) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now < start + 365 days, "richalready");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        218
Source: 
>     event NewPrice(uint256 newPrice);
>     function buy() noBolsheviks public  payable returns (bool)  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now < start + 365 days, "richalready");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        264
Source: 
> 
>     function getPrice()  public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return price;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        267
Source: 
>     }
>      function getMyBuyPrice(address account)  public view returns (uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return salePrices[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Hm
Line:        311
Source: 
>     
>     function burn(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _burn(msg.sender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Hm
Line:        316
Source: 
>     
>     function name() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Hm
Line:        321
Source: 
>     
>     function symbol() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Hm
Line:        326
Source: 
>     
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _decimals;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        147
Source: 
>     
>     function transfer(address recipient, uint256 amount) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender!=saleAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        165
Source: 
>     
>     function transferFrom(address sender, address recipient, uint256 amount) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(sender!=saleAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        173
Source: 
>     
>     function increaseAllowance(address spender, uint256 addedValue) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        179
Source: 
>     
>     function decreaseAllowance(address spender, uint256 subtractedValue) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        147
Source: 
>     
>     function transfer(address recipient, uint256 amount) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender!=saleAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        165
Source: 
>     
>     function transferFrom(address sender, address recipient, uint256 amount) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(sender!=saleAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        173
Source: 
>     
>     function increaseAllowance(address spender, uint256 addedValue) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        179
Source: 
>     
>     function decreaseAllowance(address spender, uint256 subtractedValue) noBolsheviks public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Hm
Line:        311
Source: 
>     
>     function burn(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _burn(msg.sender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        139
Source: 
>     
>     function balanceOf(address account) public  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        143
Source: 
> 
>     function hasAFreeTicket(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return freeTicketToSeeHitler[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        154
Source: 
>     
>     function allowance(address owner, address spender) public  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        159
Source: 
>     
>     function approve(address spender, uint256 value) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        267
Source: 
>     }
>      function getMyBuyPrice(address account)  public view returns (uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return salePrices[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        139
Source: 
>     
>     function balanceOf(address account) public  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        143
Source: 
> 
>     function hasAFreeTicket(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return freeTicketToSeeHitler[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        154
Source: 
>     
>     function allowance(address owner, address spender) public  view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        159
Source: 
>     
>     function approve(address spender, uint256 value) noBolsheviks public  returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        267
Source: 
>     }
>      function getMyBuyPrice(address account)  public view returns (uint256) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return salePrices[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        76
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "muloverflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20
Line:        242
Source: 
> 		         	// HITLERS WEALTH FORMULA #11
>         uint256 priceIncrease = (1_000_000+((1_000_000*amount)/sold));
>                                              ^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #12

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20
Line:        248
Source: 
>         } else if (priceIncrease <= 2_000_000){
>             uint256 newPrice=(price * priceIncrease) / 1_000_000;
>                               ^^^^^^^^^^^^^^^^^^^^^
>             if(newPrice == 0 || newPrice==price || newPrice < price) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        76
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "muloverflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20
Line:        242
Source: 
> 		         	// HITLERS WEALTH FORMULA #11
>         uint256 priceIncrease = (1_000_000+((1_000_000*amount)/sold));
>                                              ^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #12

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ERC20
Line:        248
Source: 
>         } else if (priceIncrease <= 2_000_000){
>             uint256 newPrice=(price * priceIncrease) / 1_000_000;
>                               ^^^^^^^^^^^^^^^^^^^^^
>             if(newPrice == 0 || newPrice==price || newPrice < price) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>   ^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>   ^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>   ^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        25
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        124
Source: 
>         require(tx.origin==msg.sender, "bol");
>         uint32 size;
>         ^^^^^^^^^^^
>         address a = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20
Line:        125
Source: 
>         uint32 size;
>         address a = msg.sender;
>         ^^^^^^^^^
>         assembly {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20
Line:        206
Source: 
> 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20
Line:        207
Source: 
> 	(bool success, ) = hitler.call.value(hitlersCut)("");
> 	(bool success2, ) = msg.sender.call.value(transferAmt-hitlersCut)("");
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	require(success&&success2, "fail");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20
Line:        223
Source: 
>          	// HITLERS WEALTH FORMULA #2
> 	(bool success, ) = hitler.call.value(msg.value/6)("");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	         	// HITLERS WEALTH FORMULA #3

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        115
Source: 
>     address private hitler = 0x21C959046Fd2f229165B4770DF478708666a0181;
>     uint256 private _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address private saleAddress = 0xAb5801a7D398351b8bE11C439e05C5B3259aeC9B;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        186
Source: 
>     function _transfer(address sender, address recipient, uint256 amount) internal {
>         _balances[sender] = _balances[sender].sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        187
Source: 
>         _balances[sender] = _balances[sender].sub(amount);
>         _balances[recipient] = _balances[recipient].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        287
Source: 
>     function _approve(address owner, address spender, uint256 value) internal {
>         _allowances[owner][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        186
Source: 
>     function _transfer(address sender, address recipient, uint256 amount) internal {
>         _balances[sender] = _balances[sender].sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        187
Source: 
>         _balances[sender] = _balances[sender].sub(amount);
>         _balances[recipient] = _balances[recipient].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        287
Source: 
>     function _approve(address owner, address spender, uint256 value) internal {
>         _allowances[owner][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        280
Source: 
>     function _burn(address account, uint256 value)  internal {
>         _totalSupply = _totalSupply.sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[account] = _balances[account].sub(value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        281
Source: 
>         _totalSupply = _totalSupply.sub(value);
>         _balances[account] = _balances[account].sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(account, address(0), value);

[0m
