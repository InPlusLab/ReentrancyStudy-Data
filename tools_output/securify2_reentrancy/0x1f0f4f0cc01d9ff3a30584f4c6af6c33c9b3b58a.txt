Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetQueue
Line:        46
Source: 
>     /// @param amount value of the player's bet
>     function enqueue(address payable player, uint amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, 'Access Denied');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetQueue
Line:        57
Source: 
>     /// @return amount the original value of hte player's bet.
>     function dequeue() public returns (address payable player, uint amount) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, 'Access Denied');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetQueue
Line:        71
Source: 
>     /// @return the number of records in the queue.
>     function count() public view returns (uint total) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, 'Access Denied');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetQueue
Line:        81
Source: 
>     /// within this queue.
>     function totalAmount() public view returns (uint total)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RockPaperScissors
Line:        215
Source: 
>     /// play does not win, or is an opening move.
>     function play(Move move) public payable returns (bool isWinner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        224
Source: 
>             openingMove = move;
>             openingMovers.enqueue(msg.sender,msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OpeningMove(openingMove, false);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        229
Source: 
>         {
>             require(openingMovers.count() < maxQueueCount, "Too Many Bets of the same type.");
>                     ^^^^^^^^^^^^^^^^^^^^^
>             openingMovers.enqueue(msg.sender,msg.value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        230
Source: 
>             require(openingMovers.count() < maxQueueCount, "Too Many Bets of the same type.");
>             openingMovers.enqueue(msg.sender,msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OpeningMove(openingMove, openingMovers.count() >= maxQueueCount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        231
Source: 
>             openingMovers.enqueue(msg.sender,msg.value);
>             emit OpeningMove(openingMove, openingMovers.count() >= maxQueueCount);
>                                           ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        235
Source: 
>         {
>             (address payable otherPlayer, uint otherBet) = openingMovers.dequeue();
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^
>             Move otherMove = openingMove;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        237
Source: 
>             Move otherMove = openingMove;
>             if(openingMovers.isEmpty()) {
>                ^^^^^^^^^^^^^^^^^^^^^^^
>                 openingMove = Move.None;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        240
Source: 
>             }
>             uint payout = (address(this).balance - msg.value - otherBet - openingMovers.totalAmount())/2;
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if((move == Move.Rock && otherMove == Move.Scissors) || (move == Move.Paper && otherMove == Move.Rock) || (move == Move.Scissors && otherMove == Move.Paper))

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        247
Source: 
>                 // If transfer fails, whole play reverts.
>                 msg.sender.transfer(payout);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        252
Source: 
>                 payout = payout + msg.value/2 + otherBet;
>                 if(otherPlayer.send(payout)) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit WinnerPayout(otherPlayer, otherMove, msg.sender, payout);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RockPaperScissors
Line:        310
Source: 
>         if(balance > 0) {
>             owner.transfer(balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    RockPaperScissors
Line:        288
Source: 
>         openingMove = Move.None;
>         while(!openingMovers.isEmpty())
>                ^^^^^^^^^^^^^^^^^^^^^^^
>         {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    RockPaperScissors
Line:        290
Source: 
>         {
>             (address payable player, uint bet) = openingMovers.dequeue();
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^
>             if(!player.send(bet))

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    RockPaperScissors
Line:        291
Source: 
>             (address payable player, uint bet) = openingMovers.dequeue();
>             if(!player.send(bet))
>                 ^^^^^^^^^^^^^^^^
>             {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BetQueue
Line:        46
Source: 
>     /// @param amount value of the player's bet
>     function enqueue(address payable player, uint amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, 'Access Denied');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        224
Source: 
>             openingMove = move;
>             openingMovers.enqueue(msg.sender,msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OpeningMove(openingMove, false);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        229
Source: 
>         {
>             require(openingMovers.count() < maxQueueCount, "Too Many Bets of the same type.");
>                     ^^^^^^^^^^^^^^^^^^^^^
>             openingMovers.enqueue(msg.sender,msg.value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        230
Source: 
>             require(openingMovers.count() < maxQueueCount, "Too Many Bets of the same type.");
>             openingMovers.enqueue(msg.sender,msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OpeningMove(openingMove, openingMovers.count() >= maxQueueCount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        231
Source: 
>             openingMovers.enqueue(msg.sender,msg.value);
>             emit OpeningMove(openingMove, openingMovers.count() >= maxQueueCount);
>                                           ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        235
Source: 
>         {
>             (address payable otherPlayer, uint otherBet) = openingMovers.dequeue();
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^
>             Move otherMove = openingMove;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        237
Source: 
>             Move otherMove = openingMove;
>             if(openingMovers.isEmpty()) {
>                ^^^^^^^^^^^^^^^^^^^^^^^
>                 openingMove = Move.None;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        240
Source: 
>             }
>             uint payout = (address(this).balance - msg.value - otherBet - openingMovers.totalAmount())/2;
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if((move == Move.Rock && otherMove == Move.Scissors) || (move == Move.Paper && otherMove == Move.Rock) || (move == Move.Scissors && otherMove == Move.Paper))

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        288
Source: 
>         openingMove = Move.None;
>         while(!openingMovers.isEmpty())
>                ^^^^^^^^^^^^^^^^^^^^^^^
>         {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RockPaperScissors
Line:        290
Source: 
>         {
>             (address payable player, uint bet) = openingMovers.dequeue();
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^
>             if(!player.send(bet))

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RockPaperScissors
Line:        247
Source: 
>                 // If transfer fails, whole play reverts.
>                 msg.sender.transfer(payout);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RockPaperScissors
Line:        252
Source: 
>                 payout = payout + msg.value/2 + otherBet;
>                 if(otherPlayer.send(payout)) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit WinnerPayout(otherPlayer, otherMove, msg.sender, payout);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RockPaperScissors
Line:        291
Source: 
>             (address payable player, uint bet) = openingMovers.dequeue();
>             if(!player.send(bet))
>                 ^^^^^^^^^^^^^^^^
>             {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BetQueue
Line:        34
Source: 
>     /// @notice Only the owner of the contract is allowed to change state.
>     address owner;
>     ^^^^^^^^^^^^^
>     /// @title Queue Constructor

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    RockPaperScissors
Line:        291
Source: 
>             (address payable player, uint bet) = openingMovers.dequeue();
>             if(!player.send(bet))
>                 ^^^^^^^^^^^^^^^^
>             {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    RockPaperScissors
Line:        247
Source: 
>                 // If transfer fails, whole play reverts.
>                 msg.sender.transfer(payout);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    RockPaperScissors
Line:        252
Source: 
>                 payout = payout + msg.value/2 + otherBet;
>                 if(otherPlayer.send(payout)) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit WinnerPayout(otherPlayer, otherMove, msg.sender, payout);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    RockPaperScissors
Line:        310
Source: 
>         if(balance > 0) {
>             owner.transfer(balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RockPaperScissors
Line:        247
Source: 
>                 // If transfer fails, whole play reverts.
>                 msg.sender.transfer(payout);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RockPaperScissors
Line:        252
Source: 
>                 payout = payout + msg.value/2 + otherBet;
>                 if(otherPlayer.send(payout)) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit WinnerPayout(otherPlayer, otherMove, msg.sender, payout);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RockPaperScissors
Line:        291
Source: 
>             (address payable player, uint bet) = openingMovers.dequeue();
>             if(!player.send(bet))
>                 ^^^^^^^^^^^^^^^^
>             {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RockPaperScissors
Line:        310
Source: 
>         if(balance > 0) {
>             owner.transfer(balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RockPaperScissors
Line:        247
Source: 
>                 // If transfer fails, whole play reverts.
>                 msg.sender.transfer(payout);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RockPaperScissors
Line:        252
Source: 
>                 payout = payout + msg.value/2 + otherBet;
>                 if(otherPlayer.send(payout)) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit WinnerPayout(otherPlayer, otherMove, msg.sender, payout);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RockPaperScissors
Line:        291
Source: 
>             (address payable player, uint bet) = openingMovers.dequeue();
>             if(!player.send(bet))
>                 ^^^^^^^^^^^^^^^^
>             {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RockPaperScissors
Line:        310
Source: 
>         if(balance > 0) {
>             owner.transfer(balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RockPaperScissors
Line:        229
Source: 
>         {
>             require(openingMovers.count() < maxQueueCount, "Too Many Bets of the same type.");
>                     ^^^^^^^^^^^^^^^^^^^^^
>             openingMovers.enqueue(msg.sender,msg.value);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RockPaperScissors
Line:        237
Source: 
>             Move otherMove = openingMove;
>             if(openingMovers.isEmpty()) {
>                ^^^^^^^^^^^^^^^^^^^^^^^
>                 openingMove = Move.None;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RockPaperScissors
Line:        288
Source: 
>         openingMove = Move.None;
>         while(!openingMovers.isEmpty())
>                ^^^^^^^^^^^^^^^^^^^^^^^
>         {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RockPaperScissors
Line:        224
Source: 
>             openingMove = move;
>             openingMovers.enqueue(msg.sender,msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OpeningMove(openingMove, false);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RockPaperScissors
Line:        230
Source: 
>             require(openingMovers.count() < maxQueueCount, "Too Many Bets of the same type.");
>             openingMovers.enqueue(msg.sender,msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit OpeningMove(openingMove, openingMovers.count() >= maxQueueCount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RockPaperScissors
Line:        231
Source: 
>             openingMovers.enqueue(msg.sender,msg.value);
>             emit OpeningMove(openingMove, openingMovers.count() >= maxQueueCount);
>                                           ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RockPaperScissors
Line:        235
Source: 
>         {
>             (address payable otherPlayer, uint otherBet) = openingMovers.dequeue();
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^
>             Move otherMove = openingMove;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RockPaperScissors
Line:        240
Source: 
>             }
>             uint payout = (address(this).balance - msg.value - otherBet - openingMovers.totalAmount())/2;
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if((move == Move.Rock && otherMove == Move.Scissors) || (move == Move.Paper && otherMove == Move.Rock) || (move == Move.Scissors && otherMove == Move.Paper))

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RockPaperScissors
Line:        290
Source: 
>         {
>             (address payable player, uint bet) = openingMovers.dequeue();
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^
>             if(!player.send(bet))

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    RockPaperScissors
Line:        247
Source: 
>                 // If transfer fails, whole play reverts.
>                 msg.sender.transfer(payout);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    RockPaperScissors
Line:        252
Source: 
>                 payout = payout + msg.value/2 + otherBet;
>                 if(otherPlayer.send(payout)) {
>                    ^^^^^^^^^^^^^^^^^^^^^^^^
>                     emit WinnerPayout(otherPlayer, otherMove, msg.sender, payout);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RockPaperScissors
Line:        223
Source: 
>         {
>             openingMove = move;
>             ^^^^^^^^^^^^^^^^^^
>             openingMovers.enqueue(msg.sender,msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RockPaperScissors
Line:        238
Source: 
>             if(openingMovers.isEmpty()) {
>                 openingMove = Move.None;
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RockPaperScissors
Line:        231
Source: 
>             openingMovers.enqueue(msg.sender,msg.value);
>             emit OpeningMove(openingMove, openingMovers.count() >= maxQueueCount);
>                                           ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
