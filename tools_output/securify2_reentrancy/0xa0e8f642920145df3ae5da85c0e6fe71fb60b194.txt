pragma directive defines a prior version to 0.5.5. Changing pragma version to 0.5.5....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        267
Source: 
>      */
>     function toPayable(address account) internal pure returns (address payable) {
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(uint160(account));

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC721
Line:        77
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256 balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC721
Line:        80
Source: 
>     /**
>      * @dev Returns the owner of the NFT specified by `tokenId`.
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        225
Source: 
> 
> // File: @openzeppelin/contracts/utils/Address.sol
>                                    ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        238
Source: 
>      * ====
>      * It is unsafe to assume that an address for which this function returns
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * false is an externally-owned account (EOA) and not a contract.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AuctionHub
Line:        622
Source: 
>         emit eveNFTReceived(operator, from, tokenId, data);
>         return bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    AuctionHub
Line:        555
Source: 
>     IERC20 public weth;
>     bool public hasEnd;
>                     ^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        535
Source: 
> 
> // File: contracts/market/AuctionHub.sol
>                    ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        306
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AuctionHub
Line:        585
Source: 
>     function cancelOrder_ (uint256 orderId) external {
>         require(hasEnd == false, "have end");
>                                           ^^^
>         address sender = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AuctionHub
Line:        601
Source: 
> 
>     function setTokenId(uint256 _tokenId) external onlyGovernance {
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenId = _tokenId;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AuctionHub
Line:        618
Source: 
>             return 0;
>         }
>        ^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AuctionHub
Line:        613
Source: 
> 
>     function onERC721Received(address operator, address from, uint256 tokenId, bytes memory data) public returns (bytes4) {
>                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //only receive the _nft staff

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AuctionHub
Line:        615
Source: 
>         //only receive the _nft staff
>         if(address(this) != operator) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             //invalid from nft

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AuctionHub
Line:        622
Source: 
>         emit eveNFTReceived(operator, from, tokenId, data);
>         return bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AuctionHub
Line:        606
Source: 
>     function setNFT(IERC721 _nft) external onlyGovernance {
>         nft = _nft;
>         ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AuctionHub
Line:        584
Source: 
>     
>     function cancelOrder_ (uint256 orderId) external {
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(hasEnd == false, "have end");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AuctionHub
Line:        622
Source: 
>         emit eveNFTReceived(operator, from, tokenId, data);
>         return bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"));
>                                                                   ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        306
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>                               ^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AuctionHub
Line:        559
Source: 
>     event eveCancelOrder(address sender, uint256 orderId);
>     event eveNFTReceived(address operator, address from, uint256 tokenId, bytes data);
>                                                                             ^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AuctionHub
Line:        565
Source: 
>         nft = _nft;
>         weth = _weth;
>         ^^^^^^^^^^^^^
>         ownerWallet = _ownerWallet;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AuctionHub
Line:        567
Source: 
>         ownerWallet = _ownerWallet;
>         _governance = tx.origin;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AuctionHub
Line:        570
Source: 
> 
>     modifier onlyGovernance {
>                      ^^^^^^^^
>         require(msg.sender == _governance, "not governance");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AuctionHub
Line:        558
Source: 
>     event eveTurnEnd(address buyer, uint256 value);
>     event eveCancelOrder(address sender, uint256 orderId);
>                                                         ^^
>     event eveNFTReceived(address operator, address from, uint256 tokenId, bytes data);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AuctionHub
Line:        559
Source: 
>     event eveCancelOrder(address sender, uint256 orderId);
>     event eveNFTReceived(address operator, address from, uint256 tokenId, bytes data);
>                                                                             ^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AuctionHub
Line:        562
Source: 
> 
>     constructor(uint256 _tokenId, IERC721 _nft, IERC20 _weth,address _ownerWallet) public {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenId = _tokenId;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AuctionHub
Line:        562
Source: 
> 
>     constructor(uint256 _tokenId, IERC721 _nft, IERC20 _weth,address _ownerWallet) public {
>                                                ^^^^^^^^^^^^^^^^^^^^^^
>         tokenId = _tokenId;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AuctionHub
Line:        563
Source: 
>     constructor(uint256 _tokenId, IERC721 _nft, IERC20 _weth,address _ownerWallet) public {
>         tokenId = _tokenId;
>        ^^^^^^^^^^^^^^^^^^
>         nft = _nft;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AuctionHub
Line:        564
Source: 
>         tokenId = _tokenId;
>         nft = _nft;
>    ^^^^^^^^^^^^^^^^
>         weth = _weth;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AuctionHub
Line:        587
Source: 
>         address sender = msg.sender;
>         bool cancelStatus = cancelledOrFinalized[sender][orderId];
>                                                           ^^^^^^^^
>         require(cancelStatus == false, "have cancel");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AuctionHub
Line:        606
Source: 
>     function setNFT(IERC721 _nft) external onlyGovernance {
>         nft = _nft;
>         ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        268
Source: 
>     function toPayable(address account) internal pure returns (address payable) {
>         return address(uint160(account));
>            ^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AuctionHub
Line:        564
Source: 
>         tokenId = _tokenId;
>         nft = _nft;
>    ^^^^^^^^^^^^^^^^
>         weth = _weth;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        306
Source: 
>  *
>  * Arithmetic operations in Solidity wrap on overflow. This can easily result
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * in bugs, because programmers usually assume that an overflow raises an

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        498
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        503
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        509
Source: 
>      * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement
>      * on the return value: the return value is optional (but if data is returned, it must not be false).
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * @param token The token targeted by the call.

[0m
