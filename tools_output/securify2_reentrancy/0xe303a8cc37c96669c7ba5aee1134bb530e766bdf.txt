[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ERC20Base
Line:        160
Source: 
>     string public symbol;              //An identifier: e.g. REP
>     string public version = "AET_0.1"; //An arbitrary versioning scheme
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20Base
Line:        282
Source: 
>     function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {
>         if (_amount == 0) {
>             ^^^^^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20Base
Line:        504
Source: 
>     function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {
>         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^
>             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20Base
Line:        384
Source: 
>         //  this token
>         if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (address(parentToken) != address(0)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20Base
Line:        476
Source: 
>     function getValueAt(Checkpoint[] storage checkpoints, uint _block) internal view returns (uint) {
>         if (checkpoints.length == 0)
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20Base
Line:        326
Source: 
>         //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
>         require((_amount == 0) || (allowed[msg.sender][_spender] == 0));
>                  ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ERC20Base
Line:        326
Source: 
>         //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729
>         require((_amount == 0) || (allowed[msg.sender][_spender] == 0));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    AddressArray
Line:        122
Source: 
>     for (uint i = 0; i< self.length;i++){
>       if (self[i]==addr){
>           ^^^^^^^^^^^^^
>         return i;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        75
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b, "mul");
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        75
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b, "mul");
>                           ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    AddressArray
Line:        113
Source: 
>     for (uint i = 0; i< self.length;i++){
>       if (self[i]==addr){
>           ^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        34
Source: 
>     modifier onlyOwner() {
>         require(_contract_owner == msg.sender, "Ownable: caller is not the owner");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    CFETHVaultV2
Line:        798
Source: 
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());
>     if(v2 == 0){
>        ^^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        75
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b, "mul");
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        75
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b, "mul");
>                           ^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        34
Source: 
>     modifier onlyOwner() {
>         require(_contract_owner == msg.sender, "Ownable: caller is not the owner");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    AddressArray
Line:        113
Source: 
>     for (uint i = 0; i< self.length;i++){
>       if (self[i]==addr){
>           ^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    AddressArray
Line:        122
Source: 
>     for (uint i = 0; i< self.length;i++){
>       if (self[i]==addr){
>           ^^^^^^^^^^^^^
>         return i;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        26
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _contract_owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        61
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        69
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        73
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        129
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        61
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        69
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        73
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        129
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Base
Line:        254
Source: 
>     /// @return Whether the transfer was successful or not
>     function transfer(address _to, uint256 _amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(transfersEnabled);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Base
Line:        265
Source: 
>     /// @return True if the transfer was successful
>     function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(transfersEnabled);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Base
Line:        338
Source: 
>     ///  to spend
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Base
Line:        349
Source: 
>     /// @return True if the function call was successful
>     function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes memory _extraData) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(approve(address(_spender), _amount));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        61
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        69
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        73
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        61
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        69
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        73
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        129
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        26
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _contract_owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2
Line:        658
Source: 
>   event ChangeMaxAmount(uint256 old, uint256 _new);
>   function set_max_amount(uint _amount) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 old = max_amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2
Line:        665
Source: 
>   event ChangeSlippage(uint256 old, uint256 _new);
>   function set_slippage(uint256 _slip) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 old = slip;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2
Line:        674
Source: 
>   //@_amount: USDC amount
>   function deposit() public payable nonReentrant{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(controller != CFETHControllerInterface(0x0) && controller.get_current_pool() != ICurvePoolForETH(0x0), "paused");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2
Line:        730
Source: 
>   //@_amount: CFLPToken amount
>   function withdraw(uint256 _amount) public nonReentrant{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(controller != CFETHControllerInterface(0x0) && controller.get_current_pool() != ICurvePoolForETH(0x0), "paused");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2
Line:        765
Source: 
>   event ChangeWithdrawFee(uint256 old, uint256 _new);
>   function changeWithdrawFee(uint256 _fee) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_fee < ratio_base, "invalid fee");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2
Line:        773
Source: 
>   event ChangeDepositFee(uint256 old, uint256 _new);
>   function changeDepositFee(uint256 _fee) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_fee < ratio_base, "invalid fee");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2
Line:        781
Source: 
>   event ChangeController(address old, address _new);
>   function changeController(address _ctrl) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address old = address(controller);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2
Line:        788
Source: 
>   event ChangeFeePool(address old, address _new);
>   function changeFeePool(address payable _fp) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable old = fee_pool;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        61
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        129
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CFETHVaultV2Factory
Line:        812
Source: 
> 
>   function createCFETHVault(address _lp_token, address _controller) public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     CFETHVaultV2 cf = new CFETHVaultV2(_lp_token, _controller);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        61
Source: 
> library SafeMath {
>     function safeAdd(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a + b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        69
Source: 
>     }
>     function safeSub(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, "sub");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        73
Source: 
>     }
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         c = a * b;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        129
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Base
Line:        386
Source: 
>             if (address(parentToken) != address(0)) {
>                 return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Base
Line:        352
Source: 
> 
>         _spender.receiveApproval(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Base
Line:        410
Source: 
>             if (address(parentToken) != address(0)) {
>                 return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        675
Source: 
>   function deposit() public payable nonReentrant{
>     require(controller != CFETHControllerInterface(0x0) && controller.get_current_pool() != ICurvePoolForETH(0x0), "paused");
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value > 0, "CFVault: zero amount");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        688
Source: 
>       if(f != 0){
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        693
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(uint(1e14)).safeMul(slip).safeDiv(vir);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        693
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(uint(1e14)).safeMul(slip).safeDiv(vir);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        696
Source: 
> 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     controller.get_current_pool().deposit.value(_amount)();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        696
Source: 
> 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     controller.get_current_pool().deposit.value(_amount)();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        705
Source: 
>     if(_amount != actual_deposit){
>       msg.sender.call.value(_amount - actual_deposit)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        709
Source: 
> 
>     uint lp_after = controller.get_current_pool().get_lp_token_balance();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 lp_amount = lp_after.safeSub(lp_before);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        709
Source: 
> 
>     uint lp_after = controller.get_current_pool().get_lp_token_balance();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 lp_amount = lp_after.safeSub(lp_before);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        714
Source: 
> 
>     uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(d <= 18, "invalid decimal");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        714
Source: 
> 
>     uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(d <= 18, "invalid decimal");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        714
Source: 
> 
>     uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(d <= 18, "invalid decimal");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        723
Source: 
>     }
>     TokenInterfaceETH(lp_token).generateTokens(msg.sender, cff_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit CFFDeposit(msg.sender, actual_deposit, cff_amount, get_virtual_price());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        795
Source: 
>   function get_virtual_price() public view returns(uint256){
>     ICurvePoolForETH cp = controller.get_current_pool();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        796
Source: 
>     ICurvePoolForETH cp = controller.get_current_pool();
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        796
Source: 
>     ICurvePoolForETH cp = controller.get_current_pool();
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        797
Source: 
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());
>                                                                                  ^^^^^^^^^^^^^^^^^^^^^^
>     if(v2 == 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        797
Source: 
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if(v2 == 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        797
Source: 
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if(v2 == 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        801
Source: 
>     }
>     return v1.safeMul(cp.get_virtual_price()).safeDiv(v2);
>                       ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        721
Source: 
>     else{
>       cff_amount = lp_amount.safeMul(IERC20(lp_token).totalSupply()).safeDiv(lp_before);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        731
Source: 
>   function withdraw(uint256 _amount) public nonReentrant{
>     require(controller != CFETHControllerInterface(0x0) && controller.get_current_pool() != ICurvePoolForETH(0x0), "paused");
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(slip != 0, "Slippage not set");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        733
Source: 
>     require(slip != 0, "Slippage not set");
>     uint256 amount = IERC20(lp_token).balanceOf(msg.sender);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(amount >= _amount, "no enough LP tokens");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        736
Source: 
> 
>     uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());
>                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        736
Source: 
> 
>     uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        736
Source: 
> 
>     uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        738
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(vir).safeMul(slip).safeDiv(uint(1e22));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        738
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(vir).safeMul(slip).safeDiv(uint(1e22));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        742
Source: 
>     uint256 _before = address(this).balance;
>     controller.get_current_pool().withdraw(LP_token_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _after = address(this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        742
Source: 
>     uint256 _before = address(this).balance;
>     controller.get_current_pool().withdraw(LP_token_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _after = address(this).balance;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        752
Source: 
>         uint256 r = eth_amount.safeSub(f);
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.call.value(r)("");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        753
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(r)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fee_pool.call.value(f)("");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        754
Source: 
>         msg.sender.call.value(r)("");
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        758
Source: 
>     }else{
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.call.value(eth_amount)("");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CFETHVaultV2
Line:        759
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(eth_amount)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CFFWithdraw(msg.sender, eth_amount, _amount, 0, get_virtual_price());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    CFETHVaultV2
Line:        688
Source: 
>       if(f != 0){
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    CFETHVaultV2
Line:        705
Source: 
>     if(_amount != actual_deposit){
>       msg.sender.call.value(_amount - actual_deposit)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    CFETHVaultV2
Line:        753
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(r)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fee_pool.call.value(f)("");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    CFETHVaultV2
Line:        754
Source: 
>         msg.sender.call.value(r)("");
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    CFETHVaultV2
Line:        759
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(eth_amount)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CFFWithdraw(msg.sender, eth_amount, _amount, 0, get_virtual_price());

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TokenClaimer
Line:        610
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CFETHVaultV2
Line:        688
Source: 
>       if(f != 0){
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CFETHVaultV2
Line:        705
Source: 
>     if(_amount != actual_deposit){
>       msg.sender.call.value(_amount - actual_deposit)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CFETHVaultV2
Line:        753
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(r)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fee_pool.call.value(f)("");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CFETHVaultV2
Line:        754
Source: 
>         msg.sender.call.value(r)("");
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CFETHVaultV2
Line:        759
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(eth_amount)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CFFWithdraw(msg.sender, eth_amount, _amount, 0, get_virtual_price());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        42
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressArray
Line:        129
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Base
Line:        254
Source: 
>     /// @return Whether the transfer was successful or not
>     function transfer(address _to, uint256 _amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(transfersEnabled);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Base
Line:        265
Source: 
>     /// @return True if the transfer was successful
>     function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(transfersEnabled);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Base
Line:        309
Source: 
>     /// @return The balance of `_owner` at the current block
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balanceOfAt(_owner, block.number);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressArray
Line:        129
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        42
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CFETHVaultV2
Line:        658
Source: 
>   event ChangeMaxAmount(uint256 old, uint256 _new);
>   function set_max_amount(uint _amount) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 old = max_amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CFETHVaultV2
Line:        665
Source: 
>   event ChangeSlippage(uint256 old, uint256 _new);
>   function set_slippage(uint256 _slip) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 old = slip;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CFETHVaultV2
Line:        781
Source: 
>   event ChangeController(address old, address _new);
>   function changeController(address _ctrl) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address old = address(controller);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CFETHVaultV2
Line:        788
Source: 
>   event ChangeFeePool(address old, address _new);
>   function changeFeePool(address payable _fp) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable old = fee_pool;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressArray
Line:        129
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Base
Line:        338
Source: 
>     ///  to spend
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Base
Line:        349
Source: 
>     /// @return True if the function call was successful
>     function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes memory _extraData) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(approve(address(_spender), _amount));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CFETHVaultV2Factory
Line:        812
Source: 
> 
>   function createCFETHVault(address _lp_token, address _controller) public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     CFETHVaultV2 cf = new CFETHVaultV2(_lp_token, _controller);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        65
Source: 
>     }
>     function safeSubR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b <= a, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        77
Source: 
>     }
>     function safeDiv(uint a, uint b) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, "div");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SafeMath
Line:        81
Source: 
>     }
>     function safeDivR(uint a, uint b, string memory s) public pure returns (uint c) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0, s);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        111
Source: 
> library AddressArray{
>   function exists(address[] memory self, address addr) public pure returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        74
Source: 
>     function safeMul(uint a, uint b) public pure returns (uint c) {
>         c = a * b;
>             ^^^^^
>         require(a == 0 || c / a == b, "mul");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Base
Line:        486
Source: 
>         // Binary search of the value in the array
>         uint min = 0;
>         ^^^^^^^^
>         uint max = checkpoints.length-1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        10
Source: 
> contract Ownable {
>     address private _contract_owner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressArray
Line:        120
Source: 
> 
>   function index_of(address[] memory self, address addr) public pure returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        548
Source: 
> 
>   function get_virtual_price() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        550
Source: 
> 
>   function get_lp_token_balance() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        552
Source: 
> 
>   function get_lp_token_addr() public view returns(address);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        554
Source: 
> 
>   function earn_crv() public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePoolForETH
Line:        563
Source: 
> 
>   function get_virtual_price() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePoolForETH
Line:        565
Source: 
> 
>   function get_lp_token_balance() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePoolForETH
Line:        567
Source: 
> 
>   function get_lp_token_addr() public view returns(address);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePoolForETH
Line:        569
Source: 
> 
>   function earn_crv() public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenClaimer
Line:        610
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>          ^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHControllerInterface
Line:        627
Source: 
> contract CFETHControllerInterface{
>   function get_current_pool() public view returns(ICurvePoolForETH);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        641
Source: 
> 
>   uint256 public ratio_base;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public withdraw_fee_ratio;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        642
Source: 
>   uint256 public ratio_base;
>   uint256 public withdraw_fee_ratio;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public deposit_fee_ratio;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        643
Source: 
>   uint256 public withdraw_fee_ratio;
>   uint256 public deposit_fee_ratio;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address payable public fee_pool;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        644
Source: 
>   uint256 public deposit_fee_ratio;
>   address payable public fee_pool;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public lp_token;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        645
Source: 
>   address payable public fee_pool;
>   address public lp_token;
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public max_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        646
Source: 
>   address public lp_token;
>   uint256 public max_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public slip;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        658
Source: 
>   event ChangeMaxAmount(uint256 old, uint256 _new);
>   function set_max_amount(uint _amount) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 old = max_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        665
Source: 
>   event ChangeSlippage(uint256 old, uint256 _new);
>   function set_slippage(uint256 _slip) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 old = slip;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        679
Source: 
> 
>     uint _amount = msg.value;
>     ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        691
Source: 
>     }
>     uint eth_before = address(this).balance;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        694
Source: 
>     uint vir = controller.get_current_pool().get_virtual_price();
>     uint min_amount = _amount.safeMul(uint(1e14)).safeMul(slip).safeDiv(vir);
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        696
Source: 
> 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     ^^^^^^^^^^^^^^
>     controller.get_current_pool().deposit.value(_amount)();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        700
Source: 
>     //check exchanges
>     uint eth_after = address(this).balance;
>     ^^^^^^^^^^^^^^
>     uint actual_deposit =  eth_before - eth_after;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        701
Source: 
>     uint eth_after = address(this).balance;
>     uint actual_deposit =  eth_before - eth_after;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        709
Source: 
> 
>     uint lp_after = controller.get_current_pool().get_lp_token_balance();
>     ^^^^^^^^^^^^^
>     uint256 lp_amount = lp_after.safeSub(lp_before);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        710
Source: 
>     uint lp_after = controller.get_current_pool().get_lp_token_balance();
>     uint256 lp_amount = lp_after.safeSub(lp_before);
>     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        716
Source: 
>     require(d <= 18, "invalid decimal");
>     uint cff_amount = 0;
>     ^^^^^^^^^^^^^^^
>     if (lp_before == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        736
Source: 
> 
>     uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        739
Source: 
>     uint vir = controller.get_current_pool().get_virtual_price();
>     uint min_amount = _amount.safeMul(vir).safeMul(slip).safeDiv(uint(1e22));
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        741
Source: 
> 
>     uint256 _before = address(this).balance;
>     ^^^^^^^^^^^^^^^
>     controller.get_current_pool().withdraw(LP_token_amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        743
Source: 
>     controller.get_current_pool().withdraw(LP_token_amount);
>     uint256 _after = address(this).balance;
>     ^^^^^^^^^^^^^^
>     uint256 eth_amount = _after.safeSub(_before);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        744
Source: 
>     uint256 _after = address(this).balance;
>     uint256 eth_amount = _after.safeSub(_before);
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CFETHVaultV2
Line:        794
Source: 
> 
>   function get_virtual_price() public view returns(uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ICurvePoolForETH cp = controller.get_current_pool();

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        58
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        89
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        108
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        141
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        542
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        576
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        591
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        618
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuard
Line:        100
Source: 
>         _guardCounter += 1;
>         uint256 localCounter = _guardCounter;
>         ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20Base
Line:        202
Source: 
>     //  occurred is also included in the map
>     mapping (address => Checkpoint[]) balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20Base
Line:        205
Source: 
>     // `allowed` tracks any extra transfer rights as in all ERC20 tokens
>     mapping (address => mapping (address => uint256)) allowed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ERC20Base
Line:        208
Source: 
>     // Tracks the history of the `totalSupply` of the token
>     Checkpoint[] totalSupplyHistory;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CFETHVaultV2
Line:        688
Source: 
>       if(f != 0){
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CFETHVaultV2
Line:        753
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(r)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fee_pool.call.value(f)("");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CFETHVaultV2
Line:        754
Source: 
>         msg.sender.call.value(r)("");
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CFETHVaultV2
Line:        759
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(eth_amount)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CFFWithdraw(msg.sender, eth_amount, _amount, 0, get_virtual_price());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    CFETHVaultV2
Line:        705
Source: 
>     if(_amount != actual_deposit){
>       msg.sender.call.value(_amount - actual_deposit)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CFETHVaultV2
Line:        688
Source: 
>       if(f != 0){
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CFETHVaultV2
Line:        705
Source: 
>     if(_amount != actual_deposit){
>       msg.sender.call.value(_amount - actual_deposit)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CFETHVaultV2
Line:        753
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(r)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fee_pool.call.value(f)("");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CFETHVaultV2
Line:        754
Source: 
>         msg.sender.call.value(r)("");
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CFETHVaultV2
Line:        759
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(eth_amount)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CFFWithdraw(msg.sender, eth_amount, _amount, 0, get_virtual_price());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CFETHVaultV2
Line:        688
Source: 
>       if(f != 0){
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CFETHVaultV2
Line:        705
Source: 
>     if(_amount != actual_deposit){
>       msg.sender.call.value(_amount - actual_deposit)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CFETHVaultV2
Line:        753
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(r)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fee_pool.call.value(f)("");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CFETHVaultV2
Line:        754
Source: 
>         msg.sender.call.value(r)("");
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CFETHVaultV2
Line:        759
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(eth_amount)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CFFWithdraw(msg.sender, eth_amount, _amount, 0, get_virtual_price());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        675
Source: 
>   function deposit() public payable nonReentrant{
>     require(controller != CFETHControllerInterface(0x0) && controller.get_current_pool() != ICurvePoolForETH(0x0), "paused");
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value > 0, "CFVault: zero amount");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        693
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(uint(1e14)).safeMul(slip).safeDiv(vir);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        696
Source: 
> 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     controller.get_current_pool().deposit.value(_amount)();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        709
Source: 
> 
>     uint lp_after = controller.get_current_pool().get_lp_token_balance();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 lp_amount = lp_after.safeSub(lp_before);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        714
Source: 
> 
>     uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(d <= 18, "invalid decimal");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        796
Source: 
>     ICurvePoolForETH cp = controller.get_current_pool();
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        796
Source: 
>     ICurvePoolForETH cp = controller.get_current_pool();
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        797
Source: 
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());
>                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if(v2 == 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        797
Source: 
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if(v2 == 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        801
Source: 
>     }
>     return v1.safeMul(cp.get_virtual_price()).safeDiv(v2);
>                       ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        721
Source: 
>     else{
>       cff_amount = lp_amount.safeMul(IERC20(lp_token).totalSupply()).safeDiv(lp_before);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        731
Source: 
>   function withdraw(uint256 _amount) public nonReentrant{
>     require(controller != CFETHControllerInterface(0x0) && controller.get_current_pool() != ICurvePoolForETH(0x0), "paused");
>                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(slip != 0, "Slippage not set");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        733
Source: 
>     require(slip != 0, "Slippage not set");
>     uint256 amount = IERC20(lp_token).balanceOf(msg.sender);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(amount >= _amount, "no enough LP tokens");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        736
Source: 
> 
>     uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());
>                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        736
Source: 
> 
>     uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CFETHVaultV2
Line:        738
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(vir).safeMul(slip).safeDiv(uint(1e22));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Base
Line:        386
Source: 
>             if (address(parentToken) != address(0)) {
>                 return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Base
Line:        352
Source: 
> 
>         _spender.receiveApproval(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Base
Line:        410
Source: 
>             if (address(parentToken) != address(0)) {
>                 return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        693
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(uint(1e14)).safeMul(slip).safeDiv(vir);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        696
Source: 
> 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     controller.get_current_pool().deposit.value(_amount)();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        709
Source: 
> 
>     uint lp_after = controller.get_current_pool().get_lp_token_balance();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 lp_amount = lp_after.safeSub(lp_before);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        714
Source: 
> 
>     uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(d <= 18, "invalid decimal");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        714
Source: 
> 
>     uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(d <= 18, "invalid decimal");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        723
Source: 
>     }
>     TokenInterfaceETH(lp_token).generateTokens(msg.sender, cff_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit CFFDeposit(msg.sender, actual_deposit, cff_amount, get_virtual_price());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        795
Source: 
>   function get_virtual_price() public view returns(uint256){
>     ICurvePoolForETH cp = controller.get_current_pool();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        797
Source: 
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());
>                                                                                  ^^^^^^^^^^^^^^^^^^^^^^
>     if(v2 == 0){

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        736
Source: 
> 
>     uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        738
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(vir).safeMul(slip).safeDiv(uint(1e22));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        742
Source: 
>     uint256 _before = address(this).balance;
>     controller.get_current_pool().withdraw(LP_token_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _after = address(this).balance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        742
Source: 
>     uint256 _before = address(this).balance;
>     controller.get_current_pool().withdraw(LP_token_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _after = address(this).balance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        752
Source: 
>         uint256 r = eth_amount.safeSub(f);
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.call.value(r)("");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2
Line:        758
Source: 
>     }else{
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.call.value(eth_amount)("");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CFETHVaultV2Factory
Line:        814
Source: 
>     CFETHVaultV2 cf = new CFETHVaultV2(_lp_token, _controller);
>     cf.transferOwnership(msg.sender);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit NewCFETHVault(address(cf));

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CFETHVaultV2
Line:        642
Source: 
>   uint256 public ratio_base;
>   uint256 public withdraw_fee_ratio;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public deposit_fee_ratio;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CFETHVaultV2
Line:        643
Source: 
>   uint256 public withdraw_fee_ratio;
>   uint256 public deposit_fee_ratio;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address payable public fee_pool;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CFETHVaultV2
Line:        644
Source: 
>   uint256 public deposit_fee_ratio;
>   address payable public fee_pool;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public lp_token;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CFETHVaultV2
Line:        646
Source: 
>   address public lp_token;
>   uint256 public max_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public slip;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CFETHVaultV2
Line:        647
Source: 
>   uint256 public max_amount;
>   uint256 public slip;
>   ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CFETHVaultV2
Line:        688
Source: 
>       if(f != 0){
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CFETHVaultV2
Line:        705
Source: 
>     if(_amount != actual_deposit){
>       msg.sender.call.value(_amount - actual_deposit)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CFETHVaultV2
Line:        753
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(r)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fee_pool.call.value(f)("");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CFETHVaultV2
Line:        754
Source: 
>         msg.sender.call.value(r)("");
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CFETHVaultV2
Line:        759
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(eth_amount)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CFFWithdraw(msg.sender, eth_amount, _amount, 0, get_virtual_price());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20Base
Line:        505
Source: 
>         if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {
>             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
>                                                            ^^^^^^^^^^^^^^^^^^^^
>             newCheckPoint.fromBlock = uint128(block.number);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20Base
Line:        506
Source: 
>             Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];
>             newCheckPoint.fromBlock = uint128(block.number);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             newCheckPoint.value = uint128(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20Base
Line:        507
Source: 
>             newCheckPoint.fromBlock = uint128(block.number);
>             newCheckPoint.value = uint128(_value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20Base
Line:        510
Source: 
>             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];
>             oldCheckPoint.value = uint128(_value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        131
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        134
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        131
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        134
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        131
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        134
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        131
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        134
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReentrancyGuard
Line:        99
Source: 
>     modifier nonReentrant() {
>         _guardCounter += 1;
>         ^^^^^^^^^^^^^^^^^^
>         uint256 localCounter = _guardCounter;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        131
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        134
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        131
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        134
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>     return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        608
Source: 
>         IERC20 token = IERC20(_token);
>         uint balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        610
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        608
Source: 
>         IERC20 token = IERC20(_token);
>         uint balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        610
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        688
Source: 
>       if(f != 0){
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        693
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(uint(1e14)).safeMul(slip).safeDiv(vir);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        696
Source: 
> 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     controller.get_current_pool().deposit.value(_amount)();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        697
Source: 
>     uint lp_before = controller.get_current_pool().get_lp_token_balance();
>     controller.get_current_pool().deposit.value(_amount)();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        705
Source: 
>     if(_amount != actual_deposit){
>       msg.sender.call.value(_amount - actual_deposit)("");
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        709
Source: 
> 
>     uint lp_after = controller.get_current_pool().get_lp_token_balance();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 lp_amount = lp_after.safeSub(lp_before);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        714
Source: 
> 
>     uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(d <= 18, "invalid decimal");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        714
Source: 
> 
>     uint256 d = ERC20Base(controller.get_current_pool().get_lp_token_addr()).decimals();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(d <= 18, "invalid decimal");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        723
Source: 
>     }
>     TokenInterfaceETH(lp_token).generateTokens(msg.sender, cff_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit CFFDeposit(msg.sender, actual_deposit, cff_amount, get_virtual_price());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        797
Source: 
>     uint256 v1 = cp.get_lp_token_balance().safeMul(uint256(10)**ERC20Base(lp_token).decimals());
>     uint256 v2 = IERC20(lp_token).totalSupply().safeMul(uint256(10) ** ERC20Base(cp.get_lp_token_addr()).decimals());
>                                                                                  ^^^^^^^^^^^^^^^^^^^^^^
>     if(v2 == 0){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        736
Source: 
> 
>     uint LP_token_amount = _amount.safeMul(controller.get_current_pool().get_lp_token_balance()).safeDiv(IERC20(lp_token).totalSupply());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        738
Source: 
> 
>     uint vir = controller.get_current_pool().get_virtual_price();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint min_amount = _amount.safeMul(vir).safeMul(slip).safeDiv(uint(1e22));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        742
Source: 
>     uint256 _before = address(this).balance;
>     controller.get_current_pool().withdraw(LP_token_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 _after = address(this).balance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        752
Source: 
>         uint256 r = eth_amount.safeSub(f);
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.call.value(r)("");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        753
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(r)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         fee_pool.call.value(f)("");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        754
Source: 
>         msg.sender.call.value(r)("");
>         fee_pool.call.value(f)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        758
Source: 
>     }else{
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         msg.sender.call.value(eth_amount)("");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CFETHVaultV2
Line:        759
Source: 
>         TokenInterfaceETH(lp_token).destroyTokens(msg.sender, _amount);
>         msg.sender.call.value(eth_amount)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit CFFWithdraw(msg.sender, eth_amount, _amount, 0, get_virtual_price());

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        92
Source: 
> contract ReentrancyGuard {
>     uint256 private _guardCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Base
Line:        157
Source: 
> contract ERC20Base {
>     string public name;                //The Token's name: e.g. GTToken
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;             //Number of decimals of the smallest unit

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Base
Line:        158
Source: 
>     string public name;                //The Token's name: e.g. GTToken
>     uint8 public decimals;             //Number of decimals of the smallest unit
>     ^^^^^^^^^^^^^^^^^^^^^
>     string public symbol;              //An identifier: e.g. REP

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Base
Line:        159
Source: 
>     uint8 public decimals;             //Number of decimals of the smallest unit
>     string public symbol;              //An identifier: e.g. REP
>     ^^^^^^^^^^^^^^^^^^^^
>     string public version = "AET_0.1"; //An arbitrary versioning scheme

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Base
Line:        160
Source: 
>     string public symbol;              //An identifier: e.g. REP
>     string public version = "AET_0.1"; //An arbitrary versioning scheme
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Base
Line:        163
Source: 
>     using AddressArray for address[];
>     address[] public transferListeners;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ERC20Base
Line:        197
Source: 
>     // `creationBlock` is the block number that the Clone Token was created
>     uint public creationBlock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
