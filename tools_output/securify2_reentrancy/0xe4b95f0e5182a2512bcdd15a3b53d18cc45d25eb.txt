pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PreSale
Line:        220
Source: 
>     
>     function SetTokenAddress(address _tokenAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenAddress = _tokenAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PreSale
Line:        252
Source: 
>         investor[msg.sender] = 0;
>         require(IERC20(tokenAddress).transfer(msg.sender, tokens));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PreSale
Line:        233
Source: 
>         purchasedTokens = purchasedTokens + tokens;
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PreSale
Line:        209
Source: 
>     address public tokenAddress;
>     uint256 public constant startSale = 1613502000; // 16 Feb 2021, 7pm GMT
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant endSale =   1614106800; // 23 Feb 2021, 7pm GMT

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PreSale
Line:        210
Source: 
>     uint256 public constant startSale = 1613502000; // 16 Feb 2021, 7pm GMT
>     uint256 public constant endSale =   1614106800; // 23 Feb 2021, 7pm GMT
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant claimDate = 1614110400; // 23 Feb 2021, 8pm GMT

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PreSale
Line:        211
Source: 
>     uint256 public constant endSale =   1614106800; // 23 Feb 2021, 7pm GMT
>     uint256 public constant claimDate = 1614110400; // 23 Feb 2021, 8pm GMT
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public purchasedTokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PreSale
Line:        220
Source: 
>     
>     function SetTokenAddress(address _tokenAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenAddress = _tokenAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PreSale
Line:        228
Source: 
>     
>     function Invest() public payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( now > startSale && now < endSale , "Sale is closed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PreSale
Line:        237
Source: 
>     function getTokenAmount(uint256 amount) internal view returns(uint256){
>         uint256 _tokens = 0;
>         ^^^^^^^^^^^^^^^
>         if (now <= startSale + 3 days){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PreSale
Line:        247
Source: 
> 
>     function ClaimTokens() external returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now >= claimDate, "Token claim date not reached");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PreSale
Line:        233
Source: 
>         purchasedTokens = purchasedTokens + tokens;
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PreSale
Line:        233
Source: 
>         purchasedTokens = purchasedTokens + tokens;
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PreSale
Line:        252
Source: 
>         investor[msg.sender] = 0;
>         require(IERC20(tokenAddress).transfer(msg.sender, tokens));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PreSale
Line:        259
Source: 
>         // check unsold tokens
>         uint256 tokensInContract = IERC20(tokenAddress).balanceOf(address(this));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokensInContract > 0, "no unsold tokens in contract");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PreSale
Line:        261
Source: 
>         require(tokensInContract > 0, "no unsold tokens in contract");
>         require(IERC20(tokenAddress).transfer(owner, tokensInContract), "transfer of token failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PreSale
Line:        208
Source: 
>     
>     address public tokenAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public constant startSale = 1613502000; // 16 Feb 2021, 7pm GMT

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PreSale
Line:        212
Source: 
>     uint256 public constant claimDate = 1614110400; // 23 Feb 2021, 8pm GMT
>     uint256 public purchasedTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    PreSale
Line:        233
Source: 
>         purchasedTokens = purchasedTokens + tokens;
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PreSale
Line:        232
Source: 
>         investor[msg.sender] += tokens;
>         purchasedTokens = purchasedTokens + tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(msg.value);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    PreSale
Line:        257
Source: 
>     function getUnSoldTokens() onlyOwner external{
>         require(block.timestamp > endSale, "sale is not closed");
>                 ^^^^^^^^^^^^^^^
>         // check unsold tokens

[0m
