Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DividendManager
Line:        519
Source: 
> 
>     uint256 public RECYCLE_TIME = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public minHolderAmount = 20000 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DividendManager
Line:        520
Source: 
>     uint256 public RECYCLE_TIME = 365 days;
>     uint public minHolderAmount = 20000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        55
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == owner);
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DividendManager
Line:        585
Source: 
> 
>         require(dividend.claimed[msg.sender] == false);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dividend.recycled == false);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DividendManager
Line:        586
Source: 
>         require(dividend.claimed[msg.sender] == false);
>         require(dividend.recycled == false);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        14
Source: 
>         uint256 c = a * b;
>         assert(c / a == b);
>                ^^^^^^^^^^
>         return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        55
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == owner);
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DividendManager
Line:        616
Source: 
>         Dividend storage dividend = dividends[_dividendIndex];
>         require(dividend.recycled == false);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dividend.timestamp < SafeMath.sub(getNow(), RECYCLE_TIME));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Ownable
Line:        55
Source: 
>     modifier onlyOwner() {
>         require(msg.sender == owner);
>                 ^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WINSToken
Line:        393
Source: 
> 
>     function destroyTokens(uint _amount) onlyOwner public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint curTotalSupply = totalSupplyAt(block.number);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WINSToken
Line:        425
Source: 
>     /// @param _transfersEnabled True if transfers are allowed in the clone
>     function enableTransfers(bool _transfersEnabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transfersEnabled = _transfersEnabled;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        553
Source: 
> 
>     function depositDividend() payable public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 currentSupply = token.totalSupplyHoldersAt(block.number);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        601
Source: 
> 
>     function claimDividendAll() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(dividendsClaimed[msg.sender] < dividends.length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        611
Source: 
> 
>     function recycleDividend(uint256 _dividendIndex) public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     onlyOwner

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        646
Source: 
> 
>     function registerNotClaimed(address _notClaimed) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_notClaimed != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DividendManager
Line:        658
Source: 
> 
>     function unregisterNotClaimed(address _notClaimed) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(notClaimed[_notClaimed].exists && notClaimedList.length > 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WINSToken
Line:        329
Source: 
> 
>         ApproveAndCallFallBack(_spender).receiveApproval(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WINSToken
Line:        493
Source: 
>         if (_token == address(0)) {
>             owner.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WINSToken
Line:        498
Source: 
>         WINSToken token = WINSToken(_token);
>         uint balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(owner, balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    WINSToken
Line:        499
Source: 
>         uint balance = token.balanceOf(address(this));
>         token.transfer(owner, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimedTokens(_token, owner, balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        554
Source: 
>     function depositDividend() payable public {
>         uint256 currentSupply = token.totalSupplyHoldersAt(block.number);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        588
Source: 
> 
>         uint256 balance = token.balanceOfAt(msg.sender, dividend.blockNumber);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= minHolderAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        596
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        619
Source: 
>         dividends[_dividendIndex].recycled = true;
>         uint256 currentSupply = token.totalSupplyAt(block.number);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainingAmount = SafeMath.sub(dividend.amount, dividend.claimedAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        678
Source: 
>         WINSToken claimToken = WINSToken(_token);
>         uint balance = claimToken.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimToken.transfer(owner, balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DividendManager
Line:        679
Source: 
>         uint balance = claimToken.balanceOf(address(this));
>         claimToken.transfer(owner, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DividendManager
Line:        558
Source: 
>         for( i = 0; i < notClaimedList.length; i++) {
>             if (token.isHolder(notClaimedList[i])) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 currentSupply = currentSupply.sub(token.balanceOf(notClaimedList[i]));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DividendManager
Line:        559
Source: 
>             if (token.isHolder(notClaimedList[i])) {
>                 currentSupply = currentSupply.sub(token.balanceOf(notClaimedList[i]));
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WINSToken
Line:        160
Source: 
>     /// @return Whether the transfer was successful or not
>     function transfer(address _to, uint256 _amount) whenTransfersEnabled external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         doTransfer(msg.sender, _to, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WINSToken
Line:        171
Source: 
>     /// @return True if the transfer was successful
>     function transferFrom(address _from, address _to, uint256 _amount) whenTransfersEnabled external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // The standard ERC 20 transferFrom functionality

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WINSToken
Line:        248
Source: 
>     /// @return The balance of `_owner` at the current block
>     function balanceOf(address _owner) external view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balanceOfAt(_owner, block.number);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WINSToken
Line:        425
Source: 
>     /// @param _transfersEnabled True if transfers are allowed in the clone
>     function enableTransfers(bool _transfersEnabled) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         transfersEnabled = _transfersEnabled;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WINSToken
Line:        504
Source: 
> 
>     function setMinHolderAmount(uint _minHolderAmount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minHolderAmount = _minHolderAmount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WINSToken
Line:        315
Source: 
>     ///  to spend
>     function allowance(address _owner, address _spender) external view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WINSToken
Line:        326
Source: 
>     /// @return True if the function call was successful
>     function approveAndCall(address _spender, uint256 _amount, bytes calldata _extraData) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(approve(_spender, _amount));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    WINSToken
Line:        388
Source: 
> 
>     function isHolder(address _holder) external view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return holders[_holder];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DividendManager
Line:        671
Source: 
>     ///  set to 0 in case you want to extract ether.
>     function claimTokens(address payable _token) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //        if (_token == 0x0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DividendManager
Line:        596
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    WINSToken
Line:        446
Source: 
>         // Binary search of the value in the array
>         uint min = 0;
>         ^^^^^^^^
>         uint max = checkpoints.length-1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    WINSToken
Line:        139
Source: 
>         //initial emission
>         uint _amount = 77777777 * (10 ** uint256(decimals));
>         ^^^^^^^^^^^^
>         updateValueAtNow(totalSupplyHistory, _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DividendManager
Line:        519
Source: 
> 
>     uint256 public RECYCLE_TIME = 365 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public minHolderAmount = 20000 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WINSToken
Line:        102
Source: 
>     //  occurred is also included in the map
>     mapping (address => Checkpoint[]) balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WINSToken
Line:        105
Source: 
>     // `allowed` tracks any extra transfer rights as in all ERC20 tokens
>     mapping (address => mapping (address => uint256)) allowed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WINSToken
Line:        108
Source: 
>     // Tracks the history of the `totalSupply` of the token
>     Checkpoint[] totalSupplyHistory;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Checkpoint[] totalSupplyHolders;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    WINSToken
Line:        109
Source: 
>     Checkpoint[] totalSupplyHistory;
>     Checkpoint[] totalSupplyHolders;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => bool) public holders;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DividendManager
Line:        534
Source: 
> 
>     mapping (address => uint256) dividendsClaimed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DividendManager
Line:        544
Source: 
> 
>     modifier validDividendIndex(uint256 _dividendIndex) {
>                                 ^^^^^^^^^^^^^^^^^^^^^^
>         require(_dividendIndex < dividends.length);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DividendManager
Line:        596
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    WINSToken
Line:        493
Source: 
>         if (_token == address(0)) {
>             owner.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    WINSToken
Line:        493
Source: 
>         if (_token == address(0)) {
>             owner.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DividendManager
Line:        596
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    WINSToken
Line:        493
Source: 
>         if (_token == address(0)) {
>             owner.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DividendManager
Line:        596
Source: 
>         if (claim > 0) {
>             msg.sender.transfer(claim);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit DividendClaimed(msg.sender, _dividendIndex, claim);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    WINSToken
Line:        498
Source: 
>         WINSToken token = WINSToken(_token);
>         uint balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transfer(owner, balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DividendManager
Line:        554
Source: 
>     function depositDividend() payable public {
>         uint256 currentSupply = token.totalSupplyHoldersAt(block.number);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DividendManager
Line:        558
Source: 
>         for( i = 0; i < notClaimedList.length; i++) {
>             if (token.isHolder(notClaimedList[i])) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 currentSupply = currentSupply.sub(token.balanceOf(notClaimedList[i]));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DividendManager
Line:        559
Source: 
>             if (token.isHolder(notClaimedList[i])) {
>                 currentSupply = currentSupply.sub(token.balanceOf(notClaimedList[i]));
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DividendManager
Line:        588
Source: 
> 
>         uint256 balance = token.balanceOfAt(msg.sender, dividend.blockNumber);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= minHolderAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WINSToken
Line:        329
Source: 
> 
>         ApproveAndCallFallBack(_spender).receiveApproval(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    WINSToken
Line:        499
Source: 
>         uint balance = token.balanceOf(address(this));
>         token.transfer(owner, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimedTokens(_token, owner, balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DividendManager
Line:        619
Source: 
>         dividends[_dividendIndex].recycled = true;
>         uint256 currentSupply = token.totalSupplyAt(block.number);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 remainingAmount = SafeMath.sub(dividend.amount, dividend.claimedAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DividendManager
Line:        678
Source: 
>         WINSToken claimToken = WINSToken(_token);
>         uint balance = claimToken.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         claimToken.transfer(owner, balance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DividendManager
Line:        679
Source: 
>         uint balance = claimToken.balanceOf(address(this));
>         claimToken.transfer(owner, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WINSToken
Line:        466
Source: 
>             || (checkpoints[checkpoints.length -1].fromBlock < block.number)) {
>             Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];
>                                                             ^^^^^^^^^^^^^^^^^^^^
>             newCheckPoint.fromBlock =  uint128(block.number);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WINSToken
Line:        467
Source: 
>             Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];
>             newCheckPoint.fromBlock =  uint128(block.number);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             newCheckPoint.value = uint128(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WINSToken
Line:        468
Source: 
>             newCheckPoint.fromBlock =  uint128(block.number);
>             newCheckPoint.value = uint128(_value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WINSToken
Line:        471
Source: 
>             Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];
>             oldCheckPoint.value = uint128(_value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    WINSToken
Line:        237
Source: 
>             if (!holders[_to]) {
>                 holders[_to] = true;
>                 ^^^^^^^^^^^^^^^^^^^
>                 require(curTotalSupplyHolders + previousBalanceTo + _amount >= curTotalSupplyHolders); // Check for overflow

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DividendManager
Line:        565
Source: 
>         uint256 blockNumber = SafeMath.sub(block.number, 1);
>         dividends.push(
>         ^^^^^^^^^^^^^^^
>             Dividend(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    WINSToken
Line:        499
Source: 
>         uint balance = token.balanceOf(address(this));
>         token.transfer(owner, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ClaimedTokens(_token, owner, balance);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DividendManager
Line:        679
Source: 
>         uint balance = claimToken.balanceOf(address(this));
>         claimToken.transfer(owner, balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WINSToken
Line:        77
Source: 
> 
>     string public name;                //The Token's name: e.g. DigixDAO Tokens
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;             //Number of decimals of the smallest unit

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WINSToken
Line:        79
Source: 
>     uint8 public decimals;             //Number of decimals of the smallest unit
>     string public symbol;              //An identifier: e.g. REP
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WINSToken
Line:        94
Source: 
>     // `creationBlock` is the block number that the Clone Token was created
>     uint public creationBlock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
