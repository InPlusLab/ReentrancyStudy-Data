Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        276
Source: 
>     function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {
>         require(raffleContract.balanceOf(msg.sender) >= initialAmount, "Amount to sell is higher than balance!");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, "Allowance is to small (increase allowance)!");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        277
Source: 
>         require(raffleContract.balanceOf(msg.sender) >= initialAmount, "Amount to sell is higher than balance!");
>         require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, "Allowance is to small (increase allowance)!");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 id = nextListingId++;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        307
Source: 
>     function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
>         owner.transfer(withdrawAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        259
Source: 
>             uint256 amountToPay = listing.pricePerToken * amount;
>             listing.seller.transfer(amountToPay);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalAmountPayed = totalAmountPayed.add(amountToPay);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        262
Source: 
>             totalAmount = totalAmount.add(amount);
>             require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        246
Source: 
>     //
>     function buyRaffle(uint256[] calldata amounts, uint256[] calldata listingIds) payable external onlyUnpaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amounts.length == listingIds.length, "You have to provide amounts for every single listing!");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        300
Source: 
>     //
>     function setPaused(bool value) external onlyContractOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         paused = value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        275
Source: 
>     //
>     function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(raffleContract.balanceOf(msg.sender) >= initialAmount, "Amount to sell is higher than balance!");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        306
Source: 
>     //
>     function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(withdrawAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        259
Source: 
>             uint256 amountToPay = listing.pricePerToken * amount;
>             listing.seller.transfer(amountToPay);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalAmountPayed = totalAmountPayed.add(amountToPay);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        139
Source: 
>     //
>     RaffleToken constant public raffleContract = RaffleToken(0x0C8cDC16973E88FAb31DD0FCB844DdF0e1056dE2);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        307
Source: 
>     function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
>         owner.transfer(withdrawAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        259
Source: 
>             uint256 amountToPay = listing.pricePerToken * amount;
>             listing.seller.transfer(amountToPay);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalAmountPayed = totalAmountPayed.add(amountToPay);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        259
Source: 
>             uint256 amountToPay = listing.pricePerToken * amount;
>             listing.seller.transfer(amountToPay);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalAmountPayed = totalAmountPayed.add(amountToPay);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        307
Source: 
>     function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
>         owner.transfer(withdrawAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        259
Source: 
>             uint256 amountToPay = listing.pricePerToken * amount;
>             listing.seller.transfer(amountToPay);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalAmountPayed = totalAmountPayed.add(amountToPay);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        307
Source: 
>     function withdrawFunds(uint256 withdrawAmount) external onlyContractOwner {
>         owner.transfer(withdrawAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        262
Source: 
>             totalAmount = totalAmount.add(amount);
>             require(raffleContract.transferFrom(listing.seller, msg.sender, amount), 'Token transfer failed!');
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        276
Source: 
>     function addListing(uint256 initialAmount, uint256 pricePerToken) external onlyUnpaused {
>         require(raffleContract.balanceOf(msg.sender) >= initialAmount, "Amount to sell is higher than balance!");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, "Allowance is to small (increase allowance)!");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        277
Source: 
>         require(raffleContract.balanceOf(msg.sender) >= initialAmount, "Amount to sell is higher than balance!");
>         require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, "Allowance is to small (increase allowance)!");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 id = nextListingId++;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RaffleTokenExchange
Line:        143
Source: 
>     //
>     bool public paused;
>     ^^^^^^^^^^^^^^^^^^
>     //

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        259
Source: 
>             uint256 amountToPay = listing.pricePerToken * amount;
>             listing.seller.transfer(amountToPay);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalAmountPayed = totalAmountPayed.add(amountToPay);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        255
Source: 
>             require(listing.active, "Listing is not active anymore!");
>             listing.amountLeft = listing.amountLeft.sub(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(listing.amountLeft >= 0, "Amount left needs to be higher than 0.");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        257
Source: 
>             require(listing.amountLeft >= 0, "Amount left needs to be higher than 0.");
>             if(listing.amountLeft == 0) { listing.active = false; }
>                                           ^^^^^^^^^^^^^^^^^^^^^^
>             uint256 amountToPay = listing.pricePerToken * amount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        265
Source: 
>         require(totalAmountPayed <= msg.value, 'Overpayed!');
>         uint256 id = nextPurchaseId++;
>                      ^^^^^^^^^^^^^^^^
>         Purchase storage purchase = purchasesById[id];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        267
Source: 
>         Purchase storage purchase = purchasesById[id];
>         purchase.totalAmount = totalAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         purchase.totalAmountPayed = totalAmountPayed;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        268
Source: 
>         purchase.totalAmount = totalAmount;
>         purchase.totalAmountPayed = totalAmountPayed;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         purchase.timestamp = now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        269
Source: 
>         purchase.totalAmountPayed = totalAmountPayed;
>         purchase.timestamp = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Purchased(id, totalAmount, totalAmountPayed, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        278
Source: 
>         require(raffleContract.allowance(msg.sender, address(this)) >= initialAmount, "Allowance is to small (increase allowance)!");
>         uint256 id = nextListingId++;
>                      ^^^^^^^^^^^^^^^
>         Listing storage listing = listingsById[id];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        280
Source: 
>         Listing storage listing = listingsById[id];
>         listing.initialAmount = initialAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         listing.amountLeft = initialAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        281
Source: 
>         listing.initialAmount = initialAmount;
>         listing.amountLeft = initialAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         listing.pricePerToken = pricePerToken;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        282
Source: 
>         listing.amountLeft = initialAmount;
>         listing.pricePerToken = pricePerToken;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         listing.seller = msg.sender;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        283
Source: 
>         listing.pricePerToken = pricePerToken;
>         listing.seller = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         listing.active = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RaffleTokenExchange
Line:        284
Source: 
>         listing.seller = msg.sender;
>         listing.active = true;
>         ^^^^^^^^^^^^^^^^^^^^^
>         emit Listed(id, listing.pricePerToken, listing.initialAmount, listing.seller);

[0m
