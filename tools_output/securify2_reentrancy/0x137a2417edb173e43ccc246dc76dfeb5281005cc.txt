Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.10. Changing pragma version to 0.5.10....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Proxiable
Line:        149
Source: 
>         );
>         assembly { // solium-disable-line
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SafeTransfer
Line:        170
Source: 
>         _token.transfer(_to, _value);
>         assembly {
>         ^^^^^^^^^^
>         switch returndatasize()

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    SafeTransfer
Line:        194
Source: 
>         _token.transferFrom(_from, _to, _value);
>         assembly {
>         ^^^^^^^^^^
>         switch returndatasize()

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    License
Line:        364
Source: 
>     function _abiDecodeBuy(bytes memory _data) internal pure returns(bytes4 sig) {
>         assembly {
>         ^^^^^^^^^^
>             sig := mload(add(_data, add(0x20, 0)))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MessageSigned
Line:        652
Source: 
>         // Compact means, uint8 is not padded to 32 bytes.
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(_signature, 32))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Proxiable
Line:        154
Source: 
>     }
>     function proxiableUUID() public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Proxiable
Line:        154
Source: 
>     }
>     function proxiableUUID() public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        276
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        285
Source: 
>      */
>     function isLicenseOwner(address _address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return licenseDetails[_address].price != 0 && licenseDetails[_address].creationTime != 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        347
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Proxiable
Line:        154
Source: 
>     }
>     function proxiableUUID() public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        276
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    License
Line:        347
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        447
Source: 
>      */
>     function changeAcceptAny(bool _acceptAny) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Message sender should have a valid arbitrator license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        459
Source: 
>      */
>     function requestArbitrator(address _arbitrator) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(isLicenseOwner(_arbitrator), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        496
Source: 
>      */
>     function acceptRequest(bytes32 _id) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        514
Source: 
>      */
>     function rejectRequest(bytes32 _id) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        534
Source: 
>      */
>     function cancelRequest(bytes32 _id) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(requests[_id].seller == msg.sender,  "This request id does not belong to the message sender");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        553
Source: 
>      */
>     function blacklistSeller(address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        565
Source: 
>      */
>     function unBlacklistSeller(address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        578
Source: 
>      */
>     function isAllowed(address _seller, address _arbitrator) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (arbitratorlicenseDetails[_arbitrator].acceptAny && !blacklist[_arbitrator][_seller]) || permissions[_arbitrator][_seller];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ArbitrationLicense
Line:        589
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SecuredFunctions
Line:        687
Source: 
>      */
>     function setAllowedContract (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _contract,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stakable
Line:        775
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        82
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Proxiable
Line:        154
Source: 
>     }
>     function proxiableUUID() public pure returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SecuredFunctions
Line:        687
Source: 
>      */
>     function setAllowedContract (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _contract,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Stakable
Line:        775
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetadataStore
Line:        928
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetadataStore
Line:        939
Source: 
>      */
>     function setLicenses(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address _sellingLicenses,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MetadataStore
Line:        1095
Source: 
>     */
>     function addOffer(
>     ^^^^^^^^^^^^^^^^^^
>         address _asset,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Stakable
Line:        792
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Stakable
Line:        832
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    MetadataStore
Line:        1110
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        792
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        811
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        832
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        792
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        811
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Stakable
Line:        832
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        125
Source: 
>      */
>     function transferOwnership(address _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    License
Line:        327
Source: 
>     */
>     function setPrice(uint256 _price) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price = _price;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        125
Source: 
>      */
>     function transferOwnership(address _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    License
Line:        260
Source: 
>      */
>     function init(
>     ^^^^^^^^^^^^^^
>         address _tokenAddress,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    License
Line:        327
Source: 
>     */
>     function setPrice(uint256 _price) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price = _price;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ArbitrationLicense
Line:        589
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        125
Source: 
>      */
>     function transferOwnership(address _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Stakable
Line:        732
Source: 
>      */
>     function setBurnAddress(address payable _burnAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BurnAddressChanged(msg.sender, burnAddress, _burnAddress);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetadataStore
Line:        1174
Source: 
>      */
>     function offer(uint256 _id) external view returns (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address asset,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetadataStore
Line:        1257
Source: 
>      */
>     function slashStake(uint _offerId) external onlyAllowedContracts {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _slash(_offerId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetadataStore
Line:        1265
Source: 
>      */
>     function refundStake(uint _offerId) external onlyAllowedContracts {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _refundStake(_offerId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        260
Source: 
>      */
>     function init(
>     ^^^^^^^^^^^^^^
>         address _tokenAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        276
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        285
Source: 
>      */
>     function isLicenseOwner(address _address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return licenseDetails[_address].price != 0 && licenseDetails[_address].creationTime != 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        347
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        276
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        285
Source: 
>      */
>     function isLicenseOwner(address _address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return licenseDetails[_address].price != 0 && licenseDetails[_address].creationTime != 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    License
Line:        347
Source: 
>      */
>     function receiveApproval(address _from, uint256 _amount, address _token, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount == price, "Wrong value");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        428
Source: 
>      */
>     function buy(bool _acceptAny) external returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _buy(msg.sender, _acceptAny);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        488
Source: 
>      */
>     function getId(address _arbitrator, address _account) external pure returns(bytes32){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keccak256(abi.encodePacked(_arbitrator,_account));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        553
Source: 
>      */
>     function blacklistSeller(address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        565
Source: 
>      */
>     function unBlacklistSeller(address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isLicenseOwner(msg.sender), "Arbitrator should have a valid license");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ArbitrationLicense
Line:        578
Source: 
>      */
>     function isAllowed(address _seller, address _arbitrator) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (arbitratorlicenseDetails[_arbitrator].acceptAny && !blacklist[_arbitrator][_seller]) || permissions[_arbitrator][_seller];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SecuredFunctions
Line:        687
Source: 
>      */
>     function setAllowedContract (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _contract,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        732
Source: 
>      */
>     function setBurnAddress(address payable _burnAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BurnAddressChanged(msg.sender, burnAddress, _burnAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        741
Source: 
>      */
>     function setBasePrice(uint _basePrice) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BasePriceChanged(msg.sender, basePrice, _basePrice);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        775
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SecuredFunctions
Line:        687
Source: 
>      */
>     function setAllowedContract (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _contract,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        741
Source: 
>      */
>     function setBasePrice(uint _basePrice) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit BasePriceChanged(msg.sender, basePrice, _basePrice);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Stakable
Line:        775
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        911
Source: 
>      */
>     function init(
>     ^^^^^^^^^^^^^^
>         address _sellingLicenses,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        928
Source: 
> 
>     function updateCode(address newCode) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateCodeAddress(newCode);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        939
Source: 
>      */
>     function setLicenses(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address _sellingLicenses,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        966
Source: 
>      */
>     function getDataHash(string calldata _username, string calldata _contactData) external view returns (bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _dataHash(_username, _contactData, user_nonce[msg.sender]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        996
Source: 
>      */
>     function getMessageSigner(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string calldata _username,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1032
Source: 
>      */
>     function addOrUpdateUser(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes calldata _signature,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1056
Source: 
>      */
>     function addOrUpdateUser(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         string calldata _contactData,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1073
Source: 
>      */
>     function addOrUpdateUser(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1095
Source: 
>     */
>     function addOffer(
>     ^^^^^^^^^^^^^^^^^^
>         address _asset,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1212
Source: 
>      */
>     function getOfferOwner(uint256 _id) external view returns (address payable) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (offers[_id].owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1222
Source: 
>      */
>     function getAsset(uint256 _id) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (offers[_id].asset);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1232
Source: 
>      */
>     function getArbitrator(uint256 _id) external view returns (address payable) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (offers[_id].arbitrator);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetadataStore
Line:        1249
Source: 
>      */
>     function getOfferIds(address _address) external view returns (uint256[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return addressToOffers[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Stakable
Line:        746
Source: 
> 
>     function _stake(uint _itemId, address payable _owner, address _tokenAddress) internal {
>                                   ^^^^^^^^^^^^^^^^^^^^^^
>         require(stakes[_itemId].owner == address(0), "Already has/had a stake");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Stakable
Line:        775
Source: 
> 
>     function getAmountToStake(address _owner) public view returns(uint){
>                               ^^^^^^^^^^^^^^
>         uint stakeCnt = stakeCounter[_owner] + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MetadataStore
Line:        1181
Source: 
>         uint limitH,
>         address payable owner,
>         ^^^^^^^^^^^^^^^^^^^^^
>         address payable arbitrator,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        463
Source: 
> 
>        bytes32 _id = keccak256(abi.encodePacked(_arbitrator, msg.sender));
>        ^^^^^^^^^^^
>        RequestStatus _status = requests[_id].status;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        464
Source: 
>        bytes32 _id = keccak256(abi.encodePacked(_arbitrator, msg.sender));
>        RequestStatus _status = requests[_id].status;
>        ^^^^^^^^^^^^^^^^^^^^^
>        require(_status != RequestStatus.AWAIT && _status != RequestStatus.ACCEPTED, "Invalid request status");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        504
Source: 
> 
>         address _seller = requests[_id].seller;
>         ^^^^^^^^^^^^^^^
>         permissions[msg.sender][_seller] = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        524
Source: 
> 
>         address _seller = requests[_id].seller;
>         ^^^^^^^^^^^^^^^
>         permissions[msg.sender][_seller] = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ArbitrationLicense
Line:        543
Source: 
> 
>         address _arbitrator = requests[_id].arbitrator;
>         ^^^^^^^^^^^^^^^^^^^
>         permissions[_arbitrator][msg.sender] = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stakable
Line:        792
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>              ^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stakable
Line:        811
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>              ^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Stakable
Line:        832
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                  ^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MetadataStore
Line:        872
Source: 
>     mapping(address => User) public users;
>     mapping(address => uint) public user_nonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        65
Source: 
> contract Ownable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SecuredFunctions
Line:        674
Source: 
> 
>     mapping(address => bool) public allowedContracts;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        65
Source: 
> contract Ownable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        704
Source: 
> 
>     uint public basePrice = 0.01 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        706
Source: 
> 
>     address payable public burnAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        714
Source: 
> 
>     mapping(uint => Stake) public stakes;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint) public stakeCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        715
Source: 
>     mapping(uint => Stake) public stakes;
>     mapping(address => uint) public stakeCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Ownable
Line:        65
Source: 
> contract Ownable {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    SecuredFunctions
Line:        674
Source: 
> 
>     mapping(address => bool) public allowedContracts;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        704
Source: 
> 
>     uint public basePrice = 0.01 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        706
Source: 
> 
>     address payable public burnAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        714
Source: 
> 
>     mapping(uint => Stake) public stakes;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint) public stakeCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Stakable
Line:        715
Source: 
>     mapping(uint => Stake) public stakes;
>     mapping(address => uint) public stakeCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        868
Source: 
> 
>     License public sellingLicenses;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ArbitrationLicense public arbitrationLicenses;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        869
Source: 
>     License public sellingLicenses;
>     ArbitrationLicense public arbitrationLicenses;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        871
Source: 
> 
>     mapping(address => User) public users;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint) public user_nonce;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        872
Source: 
>     mapping(address => User) public users;
>     mapping(address => uint) public user_nonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        874
Source: 
> 
>     Offer[] public offers;
>     ^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256[]) public addressToOffers;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        875
Source: 
>     Offer[] public offers;
>     mapping(address => uint256[]) public addressToOffers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => mapping (uint256 => bool)) public offerWhitelist;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        876
Source: 
>     mapping(address => uint256[]) public addressToOffers;
>     mapping(address => mapping (uint256 => bool)) public offerWhitelist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    MetadataStore
Line:        878
Source: 
> 
>     bool internal _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    License
Line:        228
Source: 
> 
>     ERC20Token token;
>     ^^^^^^^^^^^^^^^^
>     address burnAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    License
Line:        229
Source: 
>     ERC20Token token;
>     address burnAddress;
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        792
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        811
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        832
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Proxiable
Line:        146
Source: 
>         require(
>             bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Not compatible"

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        792
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        811
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Stakable
Line:        832
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MetadataStore
Line:        1110
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MetadataStore
Line:        1189
Source: 
>         address payable offerArbitrator = theOffer.arbitrator;
>         if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             offerArbitrator = address(0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Proxiable
Line:        146
Source: 
>         require(
>             bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Not compatible"

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Stakable
Line:        792
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Stakable
Line:        811
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Stakable
Line:        832
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MetadataStore
Line:        1110
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MetadataStore
Line:        1189
Source: 
>         address payable offerArbitrator = theOffer.arbitrator;
>         if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             offerArbitrator = address(0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Proxiable
Line:        146
Source: 
>         require(
>             bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Not compatible"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MetadataStore
Line:        1110
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MetadataStore
Line:        1189
Source: 
>         address payable offerArbitrator = theOffer.arbitrator;
>         if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             offerArbitrator = address(0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeTransfer
Line:        183
Source: 
>         }
>         require(result, "Unsuccessful token transfer");
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeTransfer
Line:        207
Source: 
>         }
>         require(result, "Unsuccessful token transfer");
>                 ^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    MessageSigned
Line:        662
Source: 
>         }
>         if (v < 27) {
>             ^
>             v += 27;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MetadataStore
Line:        1110
Source: 
> 
>         require(arbitrationLicenses.isAllowed(msg.sender, _arbitrator), "Arbitrator does not allow this transaction");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MetadataStore
Line:        1189
Source: 
>         address payable offerArbitrator = theOffer.arbitrator;
>         if(!arbitrationLicenses.isAllowed(theOffer.owner, offerArbitrator)){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             offerArbitrator = address(0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        307
Source: 
> 
>         licenseDetails[_licenseOwner] = LicenseDetails({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             price: price,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        312
Source: 
> 
>         uint idx = licenseOwners.push(_licenseOwner);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         idxLicenseOwners[_licenseOwner] = idx;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        313
Source: 
>         uint idx = licenseOwners.push(_licenseOwner);
>         idxLicenseOwners[_licenseOwner] = idx;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        307
Source: 
> 
>         licenseDetails[_licenseOwner] = LicenseDetails({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             price: price,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        312
Source: 
> 
>         uint idx = licenseOwners.push(_licenseOwner);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         idxLicenseOwners[_licenseOwner] = idx;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    License
Line:        313
Source: 
>         uint idx = licenseOwners.push(_licenseOwner);
>         idxLicenseOwners[_licenseOwner] = idx;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ArbitrationLicense
Line:        556
Source: 
> 
>         blacklist[msg.sender][_seller] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ArbitrationLicense
Line:        568
Source: 
> 
>         blacklist[msg.sender][_seller] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        99
Source: 
>     function _setOwner(address _newOwner) internal {
>         _owner = _newOwner;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        267
Source: 
> 
>         _initialized = true;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        269
Source: 
> 
>         price = _price;
>         ^^^^^^^^^^^^^^
>         token = ERC20Token(_tokenAddress);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        270
Source: 
>         price = _price;
>         token = ERC20Token(_tokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         burnAddress = _burnAddress;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        271
Source: 
>         token = ERC20Token(_tokenAddress);
>         burnAddress = _burnAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        99
Source: 
>     function _setOwner(address _newOwner) internal {
>         _owner = _newOwner;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        267
Source: 
> 
>         _initialized = true;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        269
Source: 
> 
>         price = _price;
>         ^^^^^^^^^^^^^^
>         token = ERC20Token(_tokenAddress);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        270
Source: 
>         price = _price;
>         token = ERC20Token(_tokenAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         burnAddress = _burnAddress;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    License
Line:        271
Source: 
>         token = ERC20Token(_tokenAddress);
>         burnAddress = _burnAddress;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ArbitrationLicense
Line:        439
Source: 
>         id = _buyFrom(_sender);
>         arbitratorlicenseDetails[_sender].id = id;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         arbitratorlicenseDetails[_sender].acceptAny = _acceptAny;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ArbitrationLicense
Line:        440
Source: 
>         arbitratorlicenseDetails[_sender].id = id;
>         arbitratorlicenseDetails[_sender].acceptAny = _acceptAny;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        99
Source: 
>     function _setOwner(address _newOwner) internal {
>         _owner = _newOwner;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        917
Source: 
> 
>         _initialized = true;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        919
Source: 
> 
>         sellingLicenses = License(_sellingLicenses);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         arbitrationLicenses = ArbitrationLicense(_arbitrationLicenses);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        920
Source: 
>         sellingLicenses = License(_sellingLicenses);
>         arbitrationLicenses = ArbitrationLicense(_arbitrationLicenses);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        922
Source: 
> 
>         basePrice = 0.01 ether;
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MetadataStore
Line:        1043
Source: 
> 
>         user_nonce[_user]++;
>         ^^^^^^^^^^^^^^^^^^^
>         _addOrUpdateUser(_user, _contactData, _location, _username);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Proxiable
Line:        146
Source: 
>         require(
>             bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Not compatible"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Stakable
Line:        792
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = s.owner.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Stakable
Line:        811
Source: 
>         if (s.token == address(0)) {
>             (bool success, ) = burnAddress.call.value(amount)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(success, "Transfer failed.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Stakable
Line:        832
Source: 
>             if (s.token == address(0)) {
>                 (bool success, ) = s.owner.call.value(amount)("");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(success, "Transfer failed.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        169
Source: 
>     function _safeTransfer(ERC20Token _token, address _to, uint256 _value) internal returns (bool result) {
>         _token.transfer(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeTransfer
Line:        193
Source: 
>     {
>         _token.transferFrom(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    ArbitrationLicense
Line:        468
Source: 
>        if(_status == RequestStatus.REJECTED || _status == RequestStatus.CLOSED){
>            require(requests[_id].date + 3 days < block.timestamp,
>                                                  ^^^^^^^^^^^^^^^
>             "Must wait 3 days before requesting the arbitrator again");

[0m
