Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Dog
Line:        135
Source: 
>     }
>     function file(bytes32 what, uint256 data) external auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "Hole") Hole = data;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Dog
Line:        60
Source: 
>     mapping (address => uint256) public wards;
>     function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Dog
Line:        61
Source: 
>     function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }
>     function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Dog
Line:        130
Source: 
>     // --- Administration ---
>     function file(bytes32 what, address data) external auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "vow") vow = VowLike(data);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Dog
Line:        140
Source: 
>     }
>     function file(bytes32 ilk, bytes32 what, uint256 data) external auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "chop") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Dog
Line:        148
Source: 
>     }
>     function file(bytes32 ilk, bytes32 what, address clip) external auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "clip") {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Dog
Line:        156
Source: 
> 
>     function chop(bytes32 ilk) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ilks[ilk].chop;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Dog
Line:        174
Source: 
>     // more detail is desired.
>     function bark(bytes32 ilk, address urn, address kpr) external returns (uint256 id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "Dog/not-live");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Dog
Line:        243
Source: 
> 
>     function digs(bytes32 ilk, uint256 rad) external auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Dirt = sub(Dirt, rad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Dog
Line:        126
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Dog
Line:        177
Source: 
> 
>         (uint256 ink, uint256 art) = vat.urns(ilk, urn);
>                                      ^^^^^^^^^^^^^^^^^^
>         Ilk memory milk = ilks[ilk];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Dog
Line:        184
Source: 
>             uint256 spot;
>             (,rate, spot,, dust) = vat.ilks(ilk);
>                                    ^^^^^^^^^^^^^
>             require(spot > 0 && mul(ink, spot) < mul(art, rate), "Dog/not-unsafe");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Dog
Line:        219
Source: 
> 
>         vat.grab(
>         ^^^^^^^^^
>             ilk, urn, milk.clip, address(vow), -int256(dink), -int256(dart)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Dog
Line:        224
Source: 
>         uint256 due = mul(dart, rate);
>         vow.fess(due);
>         ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Dog
Line:        232
Source: 
> 
>             id = ClipperLike(milk.clip).kick({
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 tab: tab,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Dog
Line:        81
Source: 
>     uint256 public live;  // Active Flag
>     uint256 public Hole;  // Max DAI needed to cover debt+fees of active auctions [rad]
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public Dirt;  // Amt DAI needed to cover debt+fees of active auctions [rad]

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Dog
Line:        82
Source: 
>     uint256 public Hole;  // Max DAI needed to cover debt+fees of active auctions [rad]
>     uint256 public Dirt;  // Amt DAI needed to cover debt+fees of active auctions [rad]
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        24
Source: 
> 
> pragma solidity >=0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Dog
Line:        114
Source: 
>     // --- Math ---
>     uint256 constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Dog
Line:        150
Source: 
>         if (what == "clip") {
>             require(ilk == ClipperLike(clip).ilk(), "Dog/file-ilk-neq-clip.ilk");
>                            ^^^^^^^^^^^^^^^^^^^^^^^
>             ilks[ilk].clip = clip;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Dog
Line:        177
Source: 
> 
>         (uint256 ink, uint256 art) = vat.urns(ilk, urn);
>                                      ^^^^^^^^^^^^^^^^^^
>         Ilk memory milk = ilks[ilk];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Dog
Line:        184
Source: 
>             uint256 spot;
>             (,rate, spot,, dust) = vat.ilks(ilk);
>                                    ^^^^^^^^^^^^^
>             require(spot > 0 && mul(ink, spot) < mul(art, rate), "Dog/not-unsafe");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dog
Line:        219
Source: 
> 
>         vat.grab(
>         ^^^^^^^^^
>             ilk, urn, milk.clip, address(vow), -int256(dink), -int256(dart)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dog
Line:        224
Source: 
>         uint256 due = mul(dart, rate);
>         vow.fess(due);
>         ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Dog
Line:        232
Source: 
> 
>             id = ClipperLike(milk.clip).kick({
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 tab: tab,

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Dog
Line:        120
Source: 
>     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Dog
Line:        123
Source: 
>     function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Dog
Line:        126
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Dog
Line:        79
Source: 
> 
>     VowLike public vow;   // Debt Engine
>     ^^^^^^^^^^^^^^^^^^
>     uint256 public live;  // Active Flag

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Dog
Line:        81
Source: 
>     uint256 public live;  // Active Flag
>     uint256 public Hole;  // Max DAI needed to cover debt+fees of active auctions [rad]
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public Dirt;  // Amt DAI needed to cover debt+fees of active auctions [rad]

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Dog
Line:        82
Source: 
>     uint256 public Hole;  // Max DAI needed to cover debt+fees of active auctions [rad]
>     uint256 public Dirt;  // Amt DAI needed to cover debt+fees of active auctions [rad]
>     ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dog
Line:        229
Source: 
>             uint256 tab = mul(due, milk.chop) / WAD;
>             Dirt = add(Dirt, tab);
>             ^^^^^^^^^^^^^^^^^^^^^
>             ilks[ilk].dirt = add(milk.dirt, tab);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Dog
Line:        230
Source: 
>             Dirt = add(Dirt, tab);
>             ilks[ilk].dirt = add(milk.dirt, tab);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
