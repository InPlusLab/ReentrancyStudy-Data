Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MinereumStakingPayout
Line:        270
Source: 
> 	{
> 	    if (daysParticipated[_sender][daysParticipated[_sender].length -1] == currentPeriod)
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MinereumStakingPayout
Line:        380
Source: 
> 		uint lasti = daysParticipated[_address][daysParticipated[_address].length - 1];
> 		if (lasti == currentDay)
>       ^^^^^^^^^^^^^^^^^^^
> 			return mneSentPerDay[_address][lasti];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MinereumStakingPayout
Line:        389
Source: 
> 		{
> 			if ((daysParticipated[_address][j] == currentDay) && _excludeCurrent) continue;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MinereumStakingPayout
Line:        408
Source: 
> 		uint lasti = daysParticipated[_address][daysParticipated[_address].length - 1];
> 		if (lasti == currentDay)
>       ^^^^^^^^^^^^^^^^^^^
> 		{			

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MinereumStakingPayout
Line:        433
Source: 
> 		{
> 			if ((daysParticipated[_address][j] == currentDay) && _excludeCurrent) continue;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			if (!StakingPaid[_address][j])

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        161
Source: 
> 
> function updateStartDate(uint _startDate) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        173
Source: 
> 
> function updateVars(bool _blockPayouts, bool _blockStaking, uint256 _referralRate, uint256 _referrerRateNormal, uint256 _referrerRateLevel2, uint256 _referrerRateLevel3, uint256 _referrerRateShare, uint256 _contingency) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        192
Source: 
> function setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        193
Source: 
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        194
Source: 
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        195
Source: 
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}
> function updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        197
Source: 
> 
> function daysParticipatedGet(address _address) public view returns (uint256[] memory) { return daysParticipated[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mneSentPerDayGet(address _address) public view returns (uint256[] memory) { return mneSentPerDay[_address]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        198
Source: 
> function daysParticipatedGet(address _address) public view returns (uint256[] memory) { return daysParticipated[_address]; }
> function mneSentPerDayGet(address _address) public view returns (uint256[] memory) { return mneSentPerDay[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        199
Source: 
> function mneSentPerDayGet(address _address) public view returns (uint256[] memory) { return mneSentPerDay[_address]; }
> function BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        200
Source: 
> function BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        201
Source: 
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        202
Source: 
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        203
Source: 
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        204
Source: 
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusPaidGet(address _address) public view returns (bool) { return BonusPaid[_address]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        205
Source: 
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }
> function BonusPaidGet(address _address) public view returns (bool) { return BonusPaid[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        207
Source: 
> 
> function daysParticipatedGetAt(address _address, uint i) public view returns (uint256) { return daysParticipated[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mneSentPerDayGetAt(address _address, uint i) public view returns (uint256) { return mneSentPerDay[_address][i]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        208
Source: 
> function daysParticipatedGetAt(address _address, uint i) public view returns (uint256) { return daysParticipated[_address][i]; }
> function mneSentPerDayGetAt(address _address, uint i) public view returns (uint256) { return mneSentPerDay[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        209
Source: 
> function mneSentPerDayGetAt(address _address, uint i) public view returns (uint256) { return mneSentPerDay[_address][i]; }
> function BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        210
Source: 
> function BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        211
Source: 
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        212
Source: 
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidGetAt(address _address, uint i) public view returns (bool) { return StakingPaid[_address][i]; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        213
Source: 
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }
> function StakingPaidGetAt(address _address, uint i) public view returns (bool) { return StakingPaid[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        215
Source: 
> 
> function daysParticipatedLength(address _address) public view returns (uint256) { return daysParticipated[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mneSentPerDayLength(address _address) public view returns (uint256) { return mneSentPerDay[_address].length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        216
Source: 
> function daysParticipatedLength(address _address) public view returns (uint256) { return daysParticipated[_address].length; }
> function mneSentPerDayLength(address _address) public view returns (uint256) { return mneSentPerDay[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        217
Source: 
> function mneSentPerDayLength(address _address) public view returns (uint256) { return mneSentPerDay[_address].length; }
> function BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        218
Source: 
> function BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        219
Source: 
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        220
Source: 
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidLength(address _address) public view returns (uint256) { return StakingPaid[_address].length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        221
Source: 
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }
> function StakingPaidLength(address _address) public view returns (uint256) { return StakingPaid[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mnePerDayLength() public view returns (uint256) { return mnePerDay.length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        222
Source: 
> function StakingPaidLength(address _address) public view returns (uint256) { return StakingPaid[_address].length; }
> function mnePerDayLength() public view returns (uint256) { return mnePerDay.length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function maxInterestRateLength() public view returns (uint256) { return maxInterestRate.length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        223
Source: 
> function mnePerDayLength() public view returns (uint256) { return mnePerDay.length; }
> function maxInterestRateLength() public view returns (uint256) { return maxInterestRate.length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function participatedAddressLength() public view returns (uint256) { return participatedAddress.length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        224
Source: 
> function maxInterestRateLength() public view returns (uint256) { return maxInterestRate.length; }
> function participatedAddressLength() public view returns (uint256) { return participatedAddress.length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function bonusAddressLength() public view returns (uint256) { return bonusAddress.length; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        225
Source: 
> function participatedAddressLength() public view returns (uint256) { return participatedAddress.length; }
> function bonusAddressLength() public view returns (uint256) { return bonusAddress.length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        240
Source: 
> 
> function TransferAllFundsOut(address _address, uint256 _amount) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {		

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        252
Source: 
> 	
> function startStaking(address _sender, uint256 _amountToStake, address[] memory _addressList, uint256[] memory uintList) public {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	if (blockStaking) revert('not active'); //in case of migration to another contract

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        336
Source: 
> 
> function PayoutAllStaking(address _address) public {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint i = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        371
Source: 
> }
> function AmountMNESent(address _address, bool _excludeCurrent, bool _currentOnly) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        400
Source: 
> 
> function AmountToPayStaking(address _address, bool _checkID, uint i, bool _excludeCurrent, bool _currentOnly) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        447
Source: 
> 
> function AmountToPayBonus(address _address) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        455
Source: 
> 
> function DateStakingPayoutPossible(address _address) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        463
Source: 
> 
> function DateBonusPayoutPossible(address _address) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MinereumStakingPayout
Line:        471
Source: 
> 
> function PayoutBonus(address _address) public {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	if (blockPayouts) revert('payouts blocked'); //in case of migration to another contract

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        192
Source: 
> function setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
>                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        244
Source: 
> 	{
> 		mneContract.transfer(_address, _amount); //in case of migration to another contract	
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        299
Source: 
> 		
> 		if (pc.stakeBalances(_addressList[1]) > 0)
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateShare;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        301
Source: 
> 			referrerRateFinal = referrerRateShare;
> 		else if (!gn.isAnyGenesisAddress(_addressList[1]))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateNormal;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        303
Source: 
> 			referrerRateFinal = referrerRateNormal;
> 		else if (gn.isGenesisAddressLevel1(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateNormal;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        305
Source: 
> 			referrerRateFinal = referrerRateNormal;
> 		else if (gn.isGenesisAddressLevel2(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateLevel2;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        307
Source: 
> 			referrerRateFinal = referrerRateLevel2;
> 		else if (gn.isGenesisAddressLevel3(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateLevel3;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        349
Source: 
> 	
> 	if (mainStk.daysParticipatedLength(msg.sender) == 0) revert('No Staking');
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                         ^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        354
Source: 
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint amountToPay = mainStk.mneSentPerDay(msg.sender, i) + coinsToMint;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        355
Source: 
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;
> 		uint amountToPay = mainStk.mneSentPerDay(msg.sender, i) + coinsToMint;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        358
Source: 
> 		if (_address != 0x0000000000000000000000000000000000000000)			
> 			mneContract.transfer(_address, amountToPay);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		else

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        360
Source: 
> 		else
> 			mneContract.transfer(msg.sender, amountToPay);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        480
Source: 
> 		
> 		external1.mintNewCoins(AddressBonus[msg.sender]);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        483
Source: 
> 		if (_address != 0x0000000000000000000000000000000000000000)			
> 			mneContract.transfer(_address, AddressBonus[msg.sender]);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		else

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        485
Source: 
> 		else
> 			mneContract.transfer(msg.sender, AddressBonus[msg.sender]);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        339
Source: 
> 	if (RealStakingPaid[msg.sender]) revert('Stake already paid');
> 	while (i < mainStk.StakingPaidLength(_address))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        161
Source: 
> 
> function updateStartDate(uint _startDate) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        195
Source: 
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}
> function updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        240
Source: 
> 
> function TransferAllFundsOut(address _address, uint256 _amount) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        336
Source: 
> 
> function PayoutAllStaking(address _address) public {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint i = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        371
Source: 
> }
> function AmountMNESent(address _address, bool _excludeCurrent, bool _currentOnly) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        173
Source: 
> 
> function updateVars(bool _blockPayouts, bool _blockStaking, uint256 _referralRate, uint256 _referrerRateNormal, uint256 _referrerRateLevel2, uint256 _referrerRateLevel3, uint256 _referrerRateShare, uint256 _contingency) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        192
Source: 
> function setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        193
Source: 
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        194
Source: 
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        197
Source: 
> 
> function daysParticipatedGet(address _address) public view returns (uint256[] memory) { return daysParticipated[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mneSentPerDayGet(address _address) public view returns (uint256[] memory) { return mneSentPerDay[_address]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        198
Source: 
> function daysParticipatedGet(address _address) public view returns (uint256[] memory) { return daysParticipated[_address]; }
> function mneSentPerDayGet(address _address) public view returns (uint256[] memory) { return mneSentPerDay[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        199
Source: 
> function mneSentPerDayGet(address _address) public view returns (uint256[] memory) { return mneSentPerDay[_address]; }
> function BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        200
Source: 
> function BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        201
Source: 
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        202
Source: 
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        203
Source: 
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        204
Source: 
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusPaidGet(address _address) public view returns (bool) { return BonusPaid[_address]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        205
Source: 
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }
> function BonusPaidGet(address _address) public view returns (bool) { return BonusPaid[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        207
Source: 
> 
> function daysParticipatedGetAt(address _address, uint i) public view returns (uint256) { return daysParticipated[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mneSentPerDayGetAt(address _address, uint i) public view returns (uint256) { return mneSentPerDay[_address][i]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        208
Source: 
> function daysParticipatedGetAt(address _address, uint i) public view returns (uint256) { return daysParticipated[_address][i]; }
> function mneSentPerDayGetAt(address _address, uint i) public view returns (uint256) { return mneSentPerDay[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        209
Source: 
> function mneSentPerDayGetAt(address _address, uint i) public view returns (uint256) { return mneSentPerDay[_address][i]; }
> function BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        210
Source: 
> function BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        211
Source: 
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        212
Source: 
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidGetAt(address _address, uint i) public view returns (bool) { return StakingPaid[_address][i]; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        213
Source: 
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }
> function StakingPaidGetAt(address _address, uint i) public view returns (bool) { return StakingPaid[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        215
Source: 
> 
> function daysParticipatedLength(address _address) public view returns (uint256) { return daysParticipated[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mneSentPerDayLength(address _address) public view returns (uint256) { return mneSentPerDay[_address].length; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        216
Source: 
> function daysParticipatedLength(address _address) public view returns (uint256) { return daysParticipated[_address].length; }
> function mneSentPerDayLength(address _address) public view returns (uint256) { return mneSentPerDay[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        217
Source: 
> function mneSentPerDayLength(address _address) public view returns (uint256) { return mneSentPerDay[_address].length; }
> function BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        218
Source: 
> function BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        219
Source: 
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        220
Source: 
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidLength(address _address) public view returns (uint256) { return StakingPaid[_address].length; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        221
Source: 
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }
> function StakingPaidLength(address _address) public view returns (uint256) { return StakingPaid[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mnePerDayLength() public view returns (uint256) { return mnePerDay.length; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        252
Source: 
> 	
> function startStaking(address _sender, uint256 _amountToStake, address[] memory _addressList, uint256[] memory uintList) public {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	if (blockStaking) revert('not active'); //in case of migration to another contract

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        400
Source: 
> 
> function AmountToPayStaking(address _address, bool _checkID, uint i, bool _excludeCurrent, bool _currentOnly) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MinereumStakingPayout
Line:        295
Source: 
> 		
> 		uint bonusAmountReferral = _amountToStake * referralRate / 100;	
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MinereumStakingPayout
Line:        310
Source: 
> 		
> 		uint bonusAmountReferrer = _amountToStake * referrerRateFinal / 100;
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MinereumStakingPayout
Line:        354
Source: 
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint amountToPay = mainStk.mneSentPerDay(msg.sender, i) + coinsToMint;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MinereumStakingPayout
Line:        411
Source: 
> 			uint interestRateToPay = mneSentPerDay[_address][lasti] * maxInterestRate[daysParticipated[_address][lasti]] * 1000000000000000 / mnePerDay[daysParticipated[_address][lasti]];
> 			uint coinsToMint = mneSentPerDay[_address][lasti] * interestRateToPay / 1000000000000000 / 100;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			uint amountToPay = mneSentPerDay[_address][lasti] + coinsToMint;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MinereumStakingPayout
Line:        423
Source: 
> 		uint interestRateToPay = mneSentPerDay[_address][i] * maxInterestRate[daysParticipated[_address][i]] * 1000000000000000 / mnePerDay[daysParticipated[_address][i]];
> 		uint coinsToMint = mneSentPerDay[_address][i] * interestRateToPay / 1000000000000000 / 100;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint amountToPay = mneSentPerDay[_address][i] + coinsToMint;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MinereumStakingPayout
Line:        437
Source: 
> 				uint interestRateToPay = mneSentPerDay[_address][j] * maxInterestRate[daysParticipated[_address][j]] * 1000000000000000 / mnePerDay[daysParticipated[_address][j]];
> 				uint coinsToMint = mneSentPerDay[_address][j] * interestRateToPay / 1000000000000000 / 100;
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				uint amountToPay = mneSentPerDay[_address][j] + coinsToMint;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        299
Source: 
> 		
> 		if (pc.stakeBalances(_addressList[1]) > 0)
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateShare;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        301
Source: 
> 			referrerRateFinal = referrerRateShare;
> 		else if (!gn.isAnyGenesisAddress(_addressList[1]))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateNormal;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        303
Source: 
> 			referrerRateFinal = referrerRateNormal;
> 		else if (gn.isGenesisAddressLevel1(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateNormal;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        305
Source: 
> 			referrerRateFinal = referrerRateNormal;
> 		else if (gn.isGenesisAddressLevel2(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateLevel2;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        307
Source: 
> 			referrerRateFinal = referrerRateLevel2;
> 		else if (gn.isGenesisAddressLevel3(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateLevel3;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        349
Source: 
> 	
> 	if (mainStk.daysParticipatedLength(msg.sender) == 0) revert('No Staking');
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                         ^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        354
Source: 
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint amountToPay = mainStk.mneSentPerDay(msg.sender, i) + coinsToMint;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        355
Source: 
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;
> 		uint amountToPay = mainStk.mneSentPerDay(msg.sender, i) + coinsToMint;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        358
Source: 
> 		if (_address != 0x0000000000000000000000000000000000000000)			
> 			mneContract.transfer(_address, amountToPay);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		else

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        360
Source: 
> 		else
> 			mneContract.transfer(msg.sender, amountToPay);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        480
Source: 
> 		
> 		external1.mintNewCoins(AddressBonus[msg.sender]);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        483
Source: 
> 		if (_address != 0x0000000000000000000000000000000000000000)			
> 			mneContract.transfer(_address, AddressBonus[msg.sender]);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		else

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MinereumStakingPayout
Line:        485
Source: 
> 		else
> 			mneContract.transfer(msg.sender, AddressBonus[msg.sender]);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        192
Source: 
> function setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        193
Source: 
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        194
Source: 
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}
>                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        195
Source: 
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}
> function updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}
>                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        12
Source: 
> interface MainStaking {
>   function AddressBonus ( address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function AddressBonusGet ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        13
Source: 
>   function AddressBonus ( address ) external view returns ( uint256 );
>   function AddressBonusGet ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function AmountMNESent ( address _address, bool _excludeCurrent, bool _currentOnly ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        14
Source: 
>   function AddressBonusGet ( address _address ) external view returns ( uint256 );
>   function AmountMNESent ( address _address, bool _excludeCurrent, bool _currentOnly ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function AmountToPayBonus ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        15
Source: 
>   function AmountMNESent ( address _address, bool _excludeCurrent, bool _currentOnly ) external view returns ( uint256 );
>   function AmountToPayBonus ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function AmountToPayStaking ( address _address, bool _checkID, uint256 i, bool _excludeCurrent, bool _currentOnly ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        16
Source: 
>   function AmountToPayBonus ( address _address ) external view returns ( uint256 );
>   function AmountToPayStaking ( address _address, bool _checkID, uint256 i, bool _excludeCurrent, bool _currentOnly ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function Bonus ( address, uint256 ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        17
Source: 
>   function AmountToPayStaking ( address _address, bool _checkID, uint256 i, bool _excludeCurrent, bool _currentOnly ) external view returns ( uint256 );
>   function Bonus ( address, uint256 ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusAmount ( address, uint256 ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        18
Source: 
>   function Bonus ( address, uint256 ) external view returns ( uint256 );
>   function BonusAmount ( address, uint256 ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusAmountGet ( address _address ) external view returns ( uint256[] memory);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        19
Source: 
>   function BonusAmount ( address, uint256 ) external view returns ( uint256 );
>   function BonusAmountGet ( address _address ) external view returns ( uint256[] memory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusAmountGetAt ( address _address, uint256 i ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        20
Source: 
>   function BonusAmountGet ( address _address ) external view returns ( uint256[] memory);
>   function BonusAmountGetAt ( address _address, uint256 i ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusAmountLength ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        21
Source: 
>   function BonusAmountGetAt ( address _address, uint256 i ) external view returns ( uint256 );
>   function BonusAmountLength ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusDay ( address, uint256 ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        22
Source: 
>   function BonusAmountLength ( address _address ) external view returns ( uint256 );
>   function BonusDay ( address, uint256 ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusDayGet ( address _address ) external view returns ( uint256[] memory);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        23
Source: 
>   function BonusDay ( address, uint256 ) external view returns ( uint256 );
>   function BonusDayGet ( address _address ) external view returns ( uint256[] memory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusDayGetAt ( address _address, uint256 i ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        24
Source: 
>   function BonusDayGet ( address _address ) external view returns ( uint256[] memory);
>   function BonusDayGetAt ( address _address, uint256 i ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusDayLength ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        25
Source: 
>   function BonusDayGetAt ( address _address, uint256 i ) external view returns ( uint256 );
>   function BonusDayLength ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusFrom ( address, uint256 ) external view returns ( address );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        26
Source: 
>   function BonusDayLength ( address _address ) external view returns ( uint256 );
>   function BonusFrom ( address, uint256 ) external view returns ( address );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusFromGet ( address _address ) external view returns ( address[] memory);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        27
Source: 
>   function BonusFrom ( address, uint256 ) external view returns ( address );
>   function BonusFromGet ( address _address ) external view returns ( address[] memory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusFromGetAt ( address _address, uint256 i ) external view returns ( address );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        28
Source: 
>   function BonusFromGet ( address _address ) external view returns ( address[] memory);
>   function BonusFromGetAt ( address _address, uint256 i ) external view returns ( address );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusFromLength ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        29
Source: 
>   function BonusFromGetAt ( address _address, uint256 i ) external view returns ( address );
>   function BonusFromLength ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusGet ( address _address ) external view returns ( uint256[] memory);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        30
Source: 
>   function BonusFromLength ( address _address ) external view returns ( uint256 );
>   function BonusGet ( address _address ) external view returns ( uint256[] memory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusGetAt ( address _address, uint256 i ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        31
Source: 
>   function BonusGet ( address _address ) external view returns ( uint256[] memory);
>   function BonusGetAt ( address _address, uint256 i ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusLength ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        32
Source: 
>   function BonusGetAt ( address _address, uint256 i ) external view returns ( uint256 );
>   function BonusLength ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusPaid ( address ) external view returns ( bool );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        33
Source: 
>   function BonusLength ( address _address ) external view returns ( uint256 );
>   function BonusPaid ( address ) external view returns ( bool );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function BonusPaidGet ( address _address ) external view returns ( bool );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        34
Source: 
>   function BonusPaid ( address ) external view returns ( bool );
>   function BonusPaidGet ( address _address ) external view returns ( bool );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function DateBonusPayoutPossible ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        35
Source: 
>   function BonusPaidGet ( address _address ) external view returns ( bool );
>   function DateBonusPayoutPossible ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function DateStakingPayoutPossible ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        36
Source: 
>   function DateBonusPayoutPossible ( address _address ) external view returns ( uint256 );
>   function DateStakingPayoutPossible ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function FillMaxInterestRate1 (  ) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        37
Source: 
>   function DateStakingPayoutPossible ( address _address ) external view returns ( uint256 );
>   function FillMaxInterestRate1 (  ) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function FillMaxInterestRate2 (  ) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        38
Source: 
>   function FillMaxInterestRate1 (  ) external;
>   function FillMaxInterestRate2 (  ) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function GetCurrentDay (  ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        39
Source: 
>   function FillMaxInterestRate2 (  ) external;
>   function GetCurrentDay (  ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function PayoutAllStaking ( address _address ) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        40
Source: 
>   function GetCurrentDay (  ) external view returns ( uint256 );
>   function PayoutAllStaking ( address _address ) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function PayoutBonus ( address _address ) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        41
Source: 
>   function PayoutAllStaking ( address _address ) external;
>   function PayoutBonus ( address _address ) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function PayoutStaking ( uint256 i, address _address ) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        42
Source: 
>   function PayoutBonus ( address _address ) external;
>   function PayoutStaking ( uint256 i, address _address ) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function StakingPaid ( address, uint256 ) external view returns ( bool );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        43
Source: 
>   function PayoutStaking ( uint256 i, address _address ) external;
>   function StakingPaid ( address, uint256 ) external view returns ( bool );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function StakingPaidGet ( address _address ) external view returns ( bool[] memory);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        44
Source: 
>   function StakingPaid ( address, uint256 ) external view returns ( bool );
>   function StakingPaidGet ( address _address ) external view returns ( bool[] memory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function StakingPaidGetAt ( address _address, uint256 i ) external view returns ( bool );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        45
Source: 
>   function StakingPaidGet ( address _address ) external view returns ( bool[] memory);
>   function StakingPaidGetAt ( address _address, uint256 i ) external view returns ( bool );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function StakingPaidLength ( address _address ) external view returns ( uint256 );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        46
Source: 
>   function StakingPaidGetAt ( address _address, uint256 i ) external view returns ( bool );
>   function StakingPaidLength ( address _address ) external view returns ( uint256 );
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function TransferAllFundsOut ( address _address, uint256 _amount ) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MainStaking
Line:        47
Source: 
>   function StakingPaidLength ( address _address ) external view returns ( uint256 );
>   function TransferAllFundsOut ( address _address, uint256 _amount ) external;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function blockPayouts (  ) external view returns ( bool );

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        121
Source: 
> mapping (address => uint256[]) public mneSentPerDay;
> mapping (address => uint256[]) public Bonus;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> mapping (address => uint256[]) public BonusDay;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        122
Source: 
> mapping (address => uint256[]) public Bonus;
> mapping (address => uint256[]) public BonusDay;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> mapping (address => address[]) public BonusFrom;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        123
Source: 
> mapping (address => uint256[]) public BonusDay;
> mapping (address => address[]) public BonusFrom;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> mapping (address => uint256[]) public BonusAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        124
Source: 
> mapping (address => address[]) public BonusFrom;
> mapping (address => uint256[]) public BonusAmount;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> mapping (address => uint256) public AddressBonus;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        125
Source: 
> mapping (address => uint256[]) public BonusAmount;
> mapping (address => uint256) public AddressBonus;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> mapping (address => bool[]) public StakingPaid;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        126
Source: 
> mapping (address => uint256) public AddressBonus;
> mapping (address => bool[]) public StakingPaid;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> mapping (address => bool) public RealStakingPaid;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        127
Source: 
> mapping (address => bool[]) public StakingPaid;
> mapping (address => bool) public RealStakingPaid;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> mapping (address => bool) public BonusPaid;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        128
Source: 
> mapping (address => bool) public RealStakingPaid;
> mapping (address => bool) public BonusPaid;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> uint256 public startDate = 1594512000;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        199
Source: 
> function mneSentPerDayGet(address _address) public view returns (uint256[] memory) { return mneSentPerDay[_address]; }
> function BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        200
Source: 
> function BonusGet(address _address) public view returns (uint256[] memory) { return Bonus[_address]; }
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        201
Source: 
> function BonusDayGet(address _address) public view returns (uint256[] memory) { return BonusDay[_address]; }
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        202
Source: 
> function BonusFromGet(address _address) public view returns (address[] memory) { return BonusFrom[_address]; }
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        203
Source: 
> function BonusAmountGet(address _address) public view returns (uint256[] memory) { return BonusAmount[_address]; }
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        204
Source: 
> function AddressBonusGet(address _address) public view returns (uint256) { return AddressBonus[_address]; }
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusPaidGet(address _address) public view returns (bool) { return BonusPaid[_address]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        205
Source: 
> function StakingPaidGet(address _address) public view returns (bool[] memory) { return StakingPaid[_address]; }
> function BonusPaidGet(address _address) public view returns (bool) { return BonusPaid[_address]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        209
Source: 
> function mneSentPerDayGetAt(address _address, uint i) public view returns (uint256) { return mneSentPerDay[_address][i]; }
> function BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        210
Source: 
> function BonusGetAt(address _address, uint i) public view returns (uint256) { return Bonus[_address][i]; }
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        211
Source: 
> function BonusDayGetAt(address _address, uint i) public view returns (uint256) { return BonusDay[_address][i]; }
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        212
Source: 
> function BonusFromGetAt(address _address, uint i) public view returns (address) { return BonusFrom[_address][i]; }
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidGetAt(address _address, uint i) public view returns (bool) { return StakingPaid[_address][i]; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        213
Source: 
> function BonusAmountGetAt(address _address, uint i) public view returns (uint256) { return BonusAmount[_address][i]; }
> function StakingPaidGetAt(address _address, uint i) public view returns (bool) { return StakingPaid[_address][i]; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        217
Source: 
> function mneSentPerDayLength(address _address) public view returns (uint256) { return mneSentPerDay[_address].length; }
> function BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        218
Source: 
> function BonusLength(address _address) public view returns (uint256) { return Bonus[_address].length; }
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        219
Source: 
> function BonusDayLength(address _address) public view returns (uint256) { return BonusDay[_address].length; }
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        220
Source: 
> function BonusFromLength(address _address) public view returns (uint256) { return BonusFrom[_address].length; }
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function StakingPaidLength(address _address) public view returns (uint256) { return StakingPaid[_address].length; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        221
Source: 
> function BonusAmountLength(address _address) public view returns (uint256) { return BonusAmount[_address].length; }
> function StakingPaidLength(address _address) public view returns (uint256) { return StakingPaid[_address].length; }
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function mnePerDayLength() public view returns (uint256) { return mnePerDay.length; }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        227
Source: 
> 
> function GetCurrentDay() public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        240
Source: 
> 
> function TransferAllFundsOut(address _address, uint256 _amount) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {		

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        336
Source: 
> 
> function PayoutAllStaking(address _address) public {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint i = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        346
Source: 
> 
> function PayoutStaking(uint i, address _address) private {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	if (blockPayouts) revert('payouts blocked'); //in case of migration to another contract

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        371
Source: 
> }
> function AmountMNESent(address _address, bool _excludeCurrent, bool _currentOnly) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        400
Source: 
> 
> function AmountToPayStaking(address _address, bool _checkID, uint i, bool _excludeCurrent, bool _currentOnly) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        447
Source: 
> 
> function AmountToPayBonus(address _address) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        455
Source: 
> 
> function DateStakingPayoutPossible(address _address) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        463
Source: 
> 
> function DateBonusPayoutPossible(address _address) public view returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        471
Source: 
> 
> function PayoutBonus(address _address) public {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	if (blockPayouts) revert('payouts blocked'); //in case of migration to another contract

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                                                                               ^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        354
Source: 
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;
>                                                                                      ^^^^^^^^^^^^^^^^
> 		uint amountToPay = mainStk.mneSentPerDay(msg.sender, i) + coinsToMint;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        410
Source: 
> 		{			
> 			uint interestRateToPay = mneSentPerDay[_address][lasti] * maxInterestRate[daysParticipated[_address][lasti]] * 1000000000000000 / mnePerDay[daysParticipated[_address][lasti]];
>                                                                                                                   ^^^^^^^^^^^^^^^^
> 			uint coinsToMint = mneSentPerDay[_address][lasti] * interestRateToPay / 1000000000000000 / 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        411
Source: 
> 			uint interestRateToPay = mneSentPerDay[_address][lasti] * maxInterestRate[daysParticipated[_address][lasti]] * 1000000000000000 / mnePerDay[daysParticipated[_address][lasti]];
> 			uint coinsToMint = mneSentPerDay[_address][lasti] * interestRateToPay / 1000000000000000 / 100;
>                                                                            ^^^^^^^^^^^^^^^^
> 			uint amountToPay = mneSentPerDay[_address][lasti] + coinsToMint;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        422
Source: 
> 	{
> 		uint interestRateToPay = mneSentPerDay[_address][i] * maxInterestRate[daysParticipated[_address][i]] * 1000000000000000 / mnePerDay[daysParticipated[_address][i]];
>                                                                                                          ^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mneSentPerDay[_address][i] * interestRateToPay / 1000000000000000 / 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        423
Source: 
> 		uint interestRateToPay = mneSentPerDay[_address][i] * maxInterestRate[daysParticipated[_address][i]] * 1000000000000000 / mnePerDay[daysParticipated[_address][i]];
> 		uint coinsToMint = mneSentPerDay[_address][i] * interestRateToPay / 1000000000000000 / 100;
>                                                                       ^^^^^^^^^^^^^^^^
> 		uint amountToPay = mneSentPerDay[_address][i] + coinsToMint;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        436
Source: 
> 			{
> 				uint interestRateToPay = mneSentPerDay[_address][j] * maxInterestRate[daysParticipated[_address][j]] * 1000000000000000 / mnePerDay[daysParticipated[_address][j]];
>                                                                                                            ^^^^^^^^^^^^^^^^
> 				uint coinsToMint = mneSentPerDay[_address][j] * interestRateToPay / 1000000000000000 / 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        437
Source: 
> 				uint interestRateToPay = mneSentPerDay[_address][j] * maxInterestRate[daysParticipated[_address][j]] * 1000000000000000 / mnePerDay[daysParticipated[_address][j]];
> 				uint coinsToMint = mneSentPerDay[_address][j] * interestRateToPay / 1000000000000000 / 100;
>                                                                         ^^^^^^^^^^^^^^^^
> 				uint amountToPay = mneSentPerDay[_address][j] + coinsToMint;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        299
Source: 
> 		
> 		if (pc.stakeBalances(_addressList[1]) > 0)
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateShare;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        301
Source: 
> 			referrerRateFinal = referrerRateShare;
> 		else if (!gn.isAnyGenesisAddress(_addressList[1]))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateNormal;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        303
Source: 
> 			referrerRateFinal = referrerRateNormal;
> 		else if (gn.isGenesisAddressLevel1(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateNormal;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        305
Source: 
> 			referrerRateFinal = referrerRateNormal;
> 		else if (gn.isGenesisAddressLevel2(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateLevel2;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        307
Source: 
> 			referrerRateFinal = referrerRateLevel2;
> 		else if (gn.isGenesisAddressLevel3(_addressList[1]))		
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			referrerRateFinal = referrerRateLevel3;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        339
Source: 
> 	if (RealStakingPaid[msg.sender]) revert('Stake already paid');
> 	while (i < mainStk.StakingPaidLength(_address))
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        349
Source: 
> 	
> 	if (mainStk.daysParticipatedLength(msg.sender) == 0) revert('No Staking');
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                         ^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^
> 	{

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        353
Source: 
> 	{
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
>                                                                                                                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        354
Source: 
> 		uint interestRateToPay = mainStk.mneSentPerDayGetAt(msg.sender,i) * mainStk.maxInterestRate(mainStk.daysParticipatedGetAt(msg.sender, i)) * 1000000000000000 / mainStk.mnePerDay(mainStk.daysParticipatedGetAt(msg.sender, i));
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint amountToPay = mainStk.mneSentPerDay(msg.sender, i) + coinsToMint;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        355
Source: 
> 		uint coinsToMint = mainStk.mneSentPerDayGetAt(msg.sender, i) * interestRateToPay / 1000000000000000 / 100;
> 		uint amountToPay = mainStk.mneSentPerDay(msg.sender, i) + coinsToMint;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        192
Source: 
> function setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
>                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        244
Source: 
> 	{
> 		mneContract.transfer(_address, _amount); //in case of migration to another contract	
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        358
Source: 
> 		if (_address != 0x0000000000000000000000000000000000000000)			
> 			mneContract.transfer(_address, amountToPay);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		else

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        360
Source: 
> 		else
> 			mneContract.transfer(msg.sender, amountToPay);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        480
Source: 
> 		
> 		external1.mintNewCoins(AddressBonus[msg.sender]);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        483
Source: 
> 		if (_address != 0x0000000000000000000000000000000000000000)			
> 			mneContract.transfer(_address, AddressBonus[msg.sender]);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		else

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        485
Source: 
> 		else
> 			mneContract.transfer(msg.sender, AddressBonus[msg.sender]);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        138
Source: 
> uint256 public referrerRateShare = 60;
> uint256 public newStakingCoins;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> uint256 public newBonusCoins;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        139
Source: 
> uint256 public newStakingCoins;
> uint256 public newBonusCoins;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> uint256 public paidStakingCoins;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        140
Source: 
> uint256 public newBonusCoins;
> uint256 public paidStakingCoins;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> MinereumContract public mneContract;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        143
Source: 
> MainStaking public mainStk;
> External1 public external1;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^
> Genesis public gn;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        191
Source: 
> }
> function setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}
>                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        192
Source: 
> function setUpdater() public {if (updaterAddress == 0x0000000000000000000000000000000000000000) updaterAddress = msg.sender; else revert();}
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
>                                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        193
Source: 
> function updateExternal1(address _address) public {if (tx.origin == updaterAddress) {external1 = External1(_address); external1.setStakingOwner(); } else revert();}
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}
>                                                                                    ^^^^^^^^^^^^^^^^^^^^^^
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        194
Source: 
> function updateGenesis(address _address) public {if (tx.origin == updaterAddress) {gn = Genesis(_address); } else revert();}
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
> function updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MinereumStakingPayout
Line:        195
Source: 
> function updatePublicCalls(address _address) public {if (tx.origin == updaterAddress) {pc = PublicCalls(_address); } else revert();}
> function updateMneContract(address _address) public {if (tx.origin == updaterAddress) {mneContract = MinereumContract(_address); } else revert();}
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        231
Source: 
> 	
> 	if (block.timestamp < startDate)	
>      ^^^^^^^^^^^^^^^
> 		currentPeriod = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        234
Source: 
> 	else
> 		currentPeriod = (block.timestamp - startDate) / 86400;
>                    ^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        259
Source: 
> 	
> 	if (block.timestamp < startDate)	
>      ^^^^^^^^^^^^^^^
> 		currentPeriod = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        262
Source: 
> 	else
> 		currentPeriod = (block.timestamp - startDate) / 86400;
>                    ^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        351
Source: 
> 	
> 	if (block.timestamp >= mainStk.startDate() + (mainStk.daysParticipatedGetAt(msg.sender, 0) * 86400) + 31556926 + mainStk.contingency())
>      ^^^^^^^^^^^^^^^
> 	{

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    MinereumStakingPayout
Line:        476
Source: 
> 	
> 	if (block.timestamp >= startDate + (BonusDay[msg.sender][0] * 86400) + 31556926 + contingency)
>      ^^^^^^^^^^^^^^^
> 	{

[0m
