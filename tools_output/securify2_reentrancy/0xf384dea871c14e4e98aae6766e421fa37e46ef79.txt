Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ESCROW
Line:        18
Source: 
> 	using SafeMath for uint256;
> 	address private rot=0x45F2aB0ca2116b2e1a70BF5e13293947b25d0272;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address private reg=0x28515e3a4932c3a780875D329FDA8E2C93B79E43;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ESCROW
Line:        19
Source: 
> 	address private rot=0x45F2aB0ca2116b2e1a70BF5e13293947b25d0272;
> 	address private reg=0x28515e3a4932c3a780875D329FDA8E2C93B79E43;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint256) public price;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ESCROW
Line:        31
Source: 
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}
>     function geInfo(address n)external view returns(uint256,uint256){return(price[n],amount[n]);}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    	function()external{revert();}}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ESCROW
Line:        30
Source: 
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function geInfo(address n)external view returns(uint256,uint256){return(price[n],amount[n]);}

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.13;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> library SafeMath {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ESCROW
Line:        30
Source: 
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function geInfo(address n)external view returns(uint256,uint256){return(price[n],amount[n]);}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ESCROW
Line:        30
Source: 
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function geInfo(address n)external view returns(uint256,uint256){return(price[n],amount[n]);}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESCROW
Line:        24
Source: 
> 	function setEscrow(uint256 p,uint256 a)external returns(bool){
> 	    require(Out(rot).balanceOf(msg.sender) >= a);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(p>10**14);price[msg.sender]=p;amount[msg.sender]=a;return true;}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESCROW
Line:        28
Source: 
> 		uint256 gam=(msg.value.mul(10**18)).div(price[w]);
> 		require(Out(rot).balanceOf(w) >= amount[w] && amount[w] >= gam && 
>           ^^^^^^^^^^^^^^^^^^^^^
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESCROW
Line:        29
Source: 
> 		require(Out(rot).balanceOf(w) >= amount[w] && amount[w] >= gam && 
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESCROW
Line:        29
Source: 
> 		require(Out(rot).balanceOf(w) >= amount[w] && amount[w] >= gam && 
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESCROW
Line:        29
Source: 
> 		require(Out(rot).balanceOf(w) >= amount[w] && amount[w] >= gam && 
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));
>                                                                           ^^^^^^^^^^^^^^^^^^^^
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ESCROW
Line:        30
Source: 
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function geInfo(address n)external view returns(uint256,uint256){return(price[n],amount[n]);}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ESCROW
Line:        30
Source: 
> 		    Out(reg).register(msg.sender,w) && Out(rot).mint(msg.sender,gam) && Out(rot).burn(w,gam));
> 		amount[w]=amount[w].sub(gam);toPayable(w).transfer(msg.value);return true;}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function geInfo(address n)external view returns(uint256,uint256){return(price[n],amount[n]);}

[0m
