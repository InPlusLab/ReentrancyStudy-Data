Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1225
Source: 
>   */
>   function setCollateralConfig(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _collateralType,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1297
Source: 
>   */
>   function removeCollateral(address _collateralType) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1316
Source: 
>   */
>   function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].debtLimit = _debtLimit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1327
Source: 
>   */
>   function setCollateralLiquidationRatio(address _collateralType, uint256 _liquidationRatio)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1342
Source: 
>   */
>   function setCollateralMinCollateralRatio(address _collateralType, uint256 _minCollateralRatio)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1358
Source: 
>   */
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     a.core().state().refreshCollateral(_collateralType);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1370
Source: 
>   */
>   function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].originationFee = _originationFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1381
Source: 
>   */
>   function setCollateralLiquidationBonus(address _collateralType, uint256 _liquidationBonus)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1396
Source: 
>   */
>   function setCollateralLiquidationFee(address _collateralType, uint256 _liquidationFee) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_liquidationFee < 1e18); // fee < 100%

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1406
Source: 
>   */
>   function setMinVotingPeriod(uint256 _minVotingPeriod) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     minVotingPeriod = _minVotingPeriod;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1414
Source: 
>   */
>   function setMaxVotingPeriod(uint256 _maxVotingPeriod) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     maxVotingPeriod = _maxVotingPeriod;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1422
Source: 
>   */
>   function setVotingQuorum(uint256 _votingQuorum) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_votingQuorum < 1e18);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1431
Source: 
>   */
>   function setProposalThreshold(uint256 _proposalThreshold) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_proposalThreshold < 1e18);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1441
Source: 
>   */
>   function collateralDebtLimit(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].debtLimit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1449
Source: 
>   */
>   function collateralLiquidationRatio(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].liquidationRatio;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1457
Source: 
>   */
>   function collateralMinCollateralRatio(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].minCollateralRatio;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1466
Source: 
>   */
>   function collateralBorrowRate(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].borrowRate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1475
Source: 
>   */
>   function collateralOriginationFee(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].originationFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1484
Source: 
>   */
>   function collateralLiquidationBonus(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].liquidationBonus;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1493
Source: 
>   */
>   function collateralLiquidationFee(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].liquidationFee;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ConfigProvider
Line:        1501
Source: 
>   */
>   function collateralConfigs(uint256 _id) public view override returns (CollateralConfig memory) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_id <= numCollateralConfigs, "Invalid config id");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1225
Source: 
>   */
>   function setCollateralConfig(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _collateralType,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1316
Source: 
>   */
>   function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].debtLimit = _debtLimit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1358
Source: 
>   */
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     a.core().state().refreshCollateral(_collateralType);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1370
Source: 
>   */
>   function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].originationFee = _originationFee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1381
Source: 
>   */
>   function setCollateralLiquidationBonus(address _collateralType, uint256 _liquidationBonus)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1396
Source: 
>   */
>   function setCollateralLiquidationFee(address _collateralType, uint256 _liquidationFee) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_liquidationFee < 1e18); // fee < 100%

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1406
Source: 
>   */
>   function setMinVotingPeriod(uint256 _minVotingPeriod) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     minVotingPeriod = _minVotingPeriod;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1414
Source: 
>   */
>   function setMaxVotingPeriod(uint256 _maxVotingPeriod) public override onlyManager {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     maxVotingPeriod = _maxVotingPeriod;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1441
Source: 
>   */
>   function collateralDebtLimit(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].debtLimit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1449
Source: 
>   */
>   function collateralLiquidationRatio(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].liquidationRatio;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1457
Source: 
>   */
>   function collateralMinCollateralRatio(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].minCollateralRatio;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1466
Source: 
>   */
>   function collateralBorrowRate(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].borrowRate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1475
Source: 
>   */
>   function collateralOriginationFee(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].originationFee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1484
Source: 
>   */
>   function collateralLiquidationBonus(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].liquidationBonus;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ConfigProvider
Line:        1493
Source: 
>   */
>   function collateralLiquidationFee(address _collateralType) public view override returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _collateralConfigs[collateralIds[_collateralType]].liquidationFee;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1239
Source: 
>       // Initialize new collateral
>       a.core().state().initializeRates(_collateralType);
>       ^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1239
Source: 
>       // Initialize new collateral
>       a.core().state().initializeRates(_collateralType);
>       ^^^^^^^^^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1239
Source: 
>       // Initialize new collateral
>       a.core().state().initializeRates(_collateralType);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1256
Source: 
>       // Update collateral config
>       a.core().state().refreshCollateral(_collateralType);
>       ^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1256
Source: 
>       // Update collateral config
>       a.core().state().refreshCollateral(_collateralType);
>       ^^^^^^^^^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1256
Source: 
>       // Update collateral config
>       a.core().state().refreshCollateral(_collateralType);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        262
Source: 
> 
>   function MANAGER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IAccessController
Line:        264
Source: 
> 
>   function MINTER_ROLE() external view returns (bytes32);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ITimelock
Line:        958
Source: 
> 
>   function GRACE_PERIOD() external view returns (uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IVaultsCore
Line:        1112
Source: 
> 
>   function WETH() external view returns (IWETH);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1239
Source: 
>       // Initialize new collateral
>       a.core().state().initializeRates(_collateralType);
>       ^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1239
Source: 
>       // Initialize new collateral
>       a.core().state().initializeRates(_collateralType);
>       ^^^^^^^^^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1239
Source: 
>       // Initialize new collateral
>       a.core().state().initializeRates(_collateralType);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1256
Source: 
>       // Update collateral config
>       a.core().state().refreshCollateral(_collateralType);
>       ^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1256
Source: 
>       // Update collateral config
>       a.core().state().refreshCollateral(_collateralType);
>       ^^^^^^^^^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1256
Source: 
>       // Update collateral config
>       a.core().state().refreshCollateral(_collateralType);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1359
Source: 
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>     a.core().state().refreshCollateral(_collateralType);
>     ^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1359
Source: 
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>     a.core().state().refreshCollateral(_collateralType);
>     ^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1359
Source: 
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>     a.core().state().refreshCollateral(_collateralType);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ConfigProvider
Line:        1193
Source: 
> 
>   uint256 public override numCollateralConfigs;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   /// @notice The minimum duration of voting on a proposal, in seconds

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        177
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        180
Source: 
> 
>   uint256 internal constant _RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_RAY = _RAY / 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        181
Source: 
>   uint256 internal constant _RAY = 1e27;
>   uint256 internal constant _HALF_RAY = _RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    WadRayMath
Line:        183
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1251
Source: 
> 
>       numCollateralConfigs++;
>       ^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[numCollateralConfigs] = config;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1252
Source: 
>       numCollateralConfigs++;
>       _collateralConfigs[numCollateralConfigs] = config;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       collateralIds[_collateralType] = numCollateralConfigs;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1253
Source: 
>       _collateralConfigs[numCollateralConfigs] = config;
>       collateralIds[_collateralType] = numCollateralConfigs;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1259
Source: 
> 
>       _collateralConfigs[id].collateralType = _collateralType;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].debtLimit = _debtLimit;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1260
Source: 
>       _collateralConfigs[id].collateralType = _collateralType;
>       _collateralConfigs[id].debtLimit = _debtLimit;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].liquidationRatio = _liquidationRatio;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1261
Source: 
>       _collateralConfigs[id].debtLimit = _debtLimit;
>       _collateralConfigs[id].liquidationRatio = _liquidationRatio;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].minCollateralRatio = _minCollateralRatio;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1262
Source: 
>       _collateralConfigs[id].liquidationRatio = _liquidationRatio;
>       _collateralConfigs[id].minCollateralRatio = _minCollateralRatio;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1263
Source: 
>       _collateralConfigs[id].minCollateralRatio = _minCollateralRatio;
>       _collateralConfigs[id].borrowRate = _borrowRate;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].originationFee = _originationFee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1264
Source: 
>       _collateralConfigs[id].borrowRate = _borrowRate;
>       _collateralConfigs[id].originationFee = _originationFee;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].liquidationBonus = _liquidationBonus;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1265
Source: 
>       _collateralConfigs[id].originationFee = _originationFee;
>       _collateralConfigs[id].liquidationBonus = _liquidationBonus;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _collateralConfigs[id].liquidationFee = _liquidationFee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1266
Source: 
>       _collateralConfigs[id].liquidationBonus = _liquidationBonus;
>       _collateralConfigs[id].liquidationFee = _liquidationFee;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1301
Source: 
> 
>     _collateralConfigs[id] = _collateralConfigs[numCollateralConfigs]; //move last entry forward
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     collateralIds[_collateralConfigs[id].collateralType] = id; //update id for last entry

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1302
Source: 
>     _collateralConfigs[id] = _collateralConfigs[numCollateralConfigs]; //move last entry forward
>     collateralIds[_collateralConfigs[id].collateralType] = id; //update id for last entry
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     delete _collateralConfigs[numCollateralConfigs]; // delete last entry

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1303
Source: 
>     collateralIds[_collateralConfigs[id].collateralType] = id; //update id for last entry
>     delete _collateralConfigs[numCollateralConfigs]; // delete last entry
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     delete collateralIds[_collateralType];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1306
Source: 
> 
>     numCollateralConfigs--;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1317
Source: 
>   function setCollateralDebtLimit(address _collateralType, uint256 _debtLimit) public override onlyManager {
>     _collateralConfigs[collateralIds[_collateralType]].debtLimit = _debtLimit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1333
Source: 
>     require(_liquidationRatio <= _collateralConfigs[collateralIds[_collateralType]].minCollateralRatio);
>     _collateralConfigs[collateralIds[_collateralType]].liquidationRatio = _liquidationRatio;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1348
Source: 
>     require(_minCollateralRatio >= _collateralConfigs[collateralIds[_collateralType]].liquidationRatio);
>     _collateralConfigs[collateralIds[_collateralType]].minCollateralRatio = _minCollateralRatio;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1360
Source: 
>     a.core().state().refreshCollateral(_collateralType);
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1371
Source: 
>   function setCollateralOriginationFee(address _collateralType, uint256 _originationFee) public override onlyManager {
>     _collateralConfigs[collateralIds[_collateralType]].originationFee = _originationFee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1386
Source: 
>   {
>     _collateralConfigs[collateralIds[_collateralType]].liquidationBonus = _liquidationBonus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1398
Source: 
>     require(_liquidationFee < 1e18); // fee < 100%
>     _collateralConfigs[collateralIds[_collateralType]].liquidationFee = _liquidationFee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _emitUpdateEvent(_collateralType);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1407
Source: 
>   function setMinVotingPeriod(uint256 _minVotingPeriod) public override onlyManager {
>     minVotingPeriod = _minVotingPeriod;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1415
Source: 
>   function setMaxVotingPeriod(uint256 _maxVotingPeriod) public override onlyManager {
>     maxVotingPeriod = _maxVotingPeriod;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1424
Source: 
>     require(_votingQuorum < 1e18);
>     votingQuorum = _votingQuorum;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ConfigProvider
Line:        1433
Source: 
>     require(_proposalThreshold < 1e18);
>     proposalThreshold = _proposalThreshold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1239
Source: 
>       // Initialize new collateral
>       a.core().state().initializeRates(_collateralType);
>       ^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1239
Source: 
>       // Initialize new collateral
>       a.core().state().initializeRates(_collateralType);
>       ^^^^^^^^^^^^^^^^
>       CollateralConfig memory config = CollateralConfig({

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1256
Source: 
>       // Update collateral config
>       a.core().state().refreshCollateral(_collateralType);
>       ^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1256
Source: 
>       // Update collateral config
>       a.core().state().refreshCollateral(_collateralType);
>       ^^^^^^^^^^^^^^^^
>       uint256 id = collateralIds[_collateralType];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1359
Source: 
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>     a.core().state().refreshCollateral(_collateralType);
>     ^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1359
Source: 
>   function setCollateralBorrowRate(address _collateralType, uint256 _borrowRate) public override onlyManager {
>     a.core().state().refreshCollateral(_collateralType);
>     ^^^^^^^^^^^^^^^^
>     _collateralConfigs[collateralIds[_collateralType]].borrowRate = _borrowRate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>                                    ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ConfigProvider
Line:        1210
Source: 
>   modifier onlyManager() {
>     require(a.controller().hasRole(a.controller().MANAGER_ROLE(), msg.sender), "Caller is not a Manager");
>             ^^^^^^^^^^^^^^
>     _;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ConfigProvider
Line:        1195
Source: 
>   /// @notice The minimum duration of voting on a proposal, in seconds
>   uint256 public override minVotingPeriod = 3 days;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   /// @notice The max duration of voting on a proposal, in seconds

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ConfigProvider
Line:        1197
Source: 
>   /// @notice The max duration of voting on a proposal, in seconds
>   uint256 public override maxVotingPeriod = 2 weeks;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   /// @notice The percentage of votes in support of a proposal required in order for a quorum to be reached and for a proposal to succeed

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ConfigProvider
Line:        1199
Source: 
>   /// @notice The percentage of votes in support of a proposal required in order for a quorum to be reached and for a proposal to succeed
>   uint256 public override votingQuorum = 1e16; // 1%
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   /// @notice The percentage of votes required in order for a voter to become a proposer

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ConfigProvider
Line:        1201
Source: 
>   /// @notice The percentage of votes required in order for a voter to become a proposer
>   uint256 public override proposalThreshold = 2e14; // 0.02%
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        177
Source: 
> 
>   uint256 internal constant _WAD = 1e18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_WAD = _WAD / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        178
Source: 
>   uint256 internal constant _WAD = 1e18;
>   uint256 internal constant _HALF_WAD = _WAD / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        180
Source: 
> 
>   uint256 internal constant _RAY = 1e27;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 internal constant _HALF_RAY = _RAY / 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        181
Source: 
>   uint256 internal constant _RAY = 1e27;
>   uint256 internal constant _HALF_RAY = _RAY / 2;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    WadRayMath
Line:        183
Source: 
> 
>   uint256 internal constant _WAD_RAY_RATIO = 1e9;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
