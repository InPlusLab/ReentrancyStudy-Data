Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.10. Changing pragma version to 0.6.10....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        396
Source: 
>         uint256 cs;
>         assembly {
>         ^^^^^^^^^^
>             cs := extcodesize(self)

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Initializable
Line:        411
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        406
Source: 
>      */
>     function isInitialized() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return initialized;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        452
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        471
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        480
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Initializable
Line:        406
Source: 
>      */
>     function isInitialized() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return initialized;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        452
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        471
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        480
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        825
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         IBurnableERC20 _TRU,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        953
Source: 
>      */
>     function pauseSubmissions(bool status) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         submissionPauseStatus = status;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        953
Source: 
>      */
>     function pauseSubmissions(bool status) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         submissionPauseStatus = status;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        963
Source: 
>      */
>     function submit(address id) external override onlyAllowedSubmitters onlyNotExistingLoans(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!submissionPauseStatus, "TrueRatingAgencyV2: New submissions are paused");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1015
Source: 
>      */
>     function resetCastRatings(address id) public override onlyPendingLoans(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (getYesRate(id, msg.sender) > 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1027
Source: 
>      */
>     function yes(address id) external override onlyPendingLoans(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rate(id, true);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1035
Source: 
>      */
>     function no(address id) external override onlyPendingLoans(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rate(id, false);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1095
Source: 
>      */
>     function claim(address id, address rater) external override onlyFundedLoans(id) calculateTotalReward(id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 claimableRewards = claimable(id, rater);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        825
Source: 
>      */
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         IBurnableERC20 _TRU,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        846
Source: 
>      */
>     function setLoanFactory(ILoanFactory _factory) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         factory = _factory;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        865
Source: 
>      */
>     function setRewardMultiplier(uint256 newRewardMultiplier) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         rewardMultiplier = newRewardMultiplier;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        875
Source: 
>      */
>     function getNoRate(address id, address rater) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].ratings[rater][false];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        884
Source: 
>      */
>     function getYesRate(address id, address rater) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].ratings[rater][true];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        892
Source: 
>      */
>     function getTotalNoRatings(address id) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].prediction[false];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        900
Source: 
>      */
>     function getTotalYesRatings(address id) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].prediction[true];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        908
Source: 
>      */
>     function getVotingStart(address id) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].timestamp;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        917
Source: 
>      */
>     function getResults(address id)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        933
Source: 
>      */
>     function allowChangingAllowances(address who, bool status) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         canChangeAllowance[who] = status;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        943
Source: 
>      */
>     function allow(address who, bool status) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(canChangeAllowance[msg.sender], "TrueFiPool: Cannot change allowances");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1113
Source: 
>      */
>     function claimed(address id, address rater) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return loans[id].claimed[rater];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1123
Source: 
>      */
>     function claimable(address id, address rater) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (status(id) < LoanStatus.Running) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        831
Source: 
>     ) public initializer {
>         require(address(this) == _distributor.beneficiary(), "TrueRatingAgencyV2: Invalid distributor beneficiary");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        965
Source: 
>         require(!submissionPauseStatus, "TrueRatingAgencyV2: New submissions are paused");
>         require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgencyV2: Sender is not borrower");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(factory.isLoanToken(id), "TrueRatingAgencyV2: Only LoanTokens created via LoanFactory are supported");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        966
Source: 
>         require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgencyV2: Sender is not borrower");
>         require(factory.isLoanToken(id), "TrueRatingAgencyV2: Only LoanTokens created via LoanFactory are supported");
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         loans[id] = Loan({creator: msg.sender, timestamp: block.timestamp, blockNumber: block.number, reward: 0});

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        933
Source: 
>      */
>     function allowChangingAllowances(address who, bool status) external onlyOwner {
>                                                   ^^^^^^^^^^^
>         canChangeAllowance[who] = status;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        943
Source: 
>      */
>     function allow(address who, bool status) external {
>                                 ^^^^^^^^^^^
>         require(canChangeAllowance[msg.sender], "TrueFiPool: Cannot change allowances");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        953
Source: 
>      */
>     function pauseSubmissions(bool status) public onlyOwner {
>                               ^^^^^^^^^^^
>         submissionPauseStatus = status;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Initializable
Line:        411
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        746
Source: 
> 
>     IBurnableERC20 public TRU;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     IVoteTokenWithERC20 public stkTRU;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        374
Source: 
> 
>         bool isTopLevelCall = !initializing;
>         ^^^^^^^^^^^^^^^^^^^
>         if (isTopLevelCall) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        789
Source: 
>      */
>     modifier onlyCreator(address id) {
>                          ^^^^^^^^^^
>         require(loans[id].creator == msg.sender, "TrueRatingAgencyV2: Not sender's loan");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        797
Source: 
>      */
>     modifier onlyNotExistingLoans(address id) {
>                                   ^^^^^^^^^^
>         require(status(id) == LoanStatus.Void, "TrueRatingAgencyV2: Loan was already created");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        805
Source: 
>      */
>     modifier onlyPendingLoans(address id) {
>                               ^^^^^^^^^^
>         require(status(id) == LoanStatus.Pending, "TrueRatingAgencyV2: Loan is not currently pending");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        813
Source: 
>      */
>     modifier onlyFundedLoans(address id) {
>                              ^^^^^^^^^^
>         require(status(id) >= LoanStatus.Running, "TrueRatingAgencyV2: Loan was not funded");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1056
Source: 
>      */
>     modifier calculateTotalReward(address id) {
>                                   ^^^^^^^^^^
>         if (loans[id].reward == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1058
Source: 
>         if (loans[id].reward == 0) {
>             uint256 interest = ILoanToken(id).profit();
>             ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1062
Source: 
>             // prettier-ignore
>             uint256 totalReward = toTRU(
>             ^^^^^^^^^^^^^^^^^^^
>                 interest

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1069
Source: 
> 
>             uint256 ratersReward = totalReward.mul(ratersRewardFactor).div(10000);
>             ^^^^^^^^^^^^^^^^^^^^
>             loans[id].reward = ratersReward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        831
Source: 
>     ) public initializer {
>         require(address(this) == _distributor.beneficiary(), "TrueRatingAgencyV2: Invalid distributor beneficiary");
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Ownable.initialize();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        965
Source: 
>         require(!submissionPauseStatus, "TrueRatingAgencyV2: New submissions are paused");
>         require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgencyV2: Sender is not borrower");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(factory.isLoanToken(id), "TrueRatingAgencyV2: Only LoanTokens created via LoanFactory are supported");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        966
Source: 
>         require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgencyV2: Sender is not borrower");
>         require(factory.isLoanToken(id), "TrueRatingAgencyV2: Only LoanTokens created via LoanFactory are supported");
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         loans[id] = Loan({creator: msg.sender, timestamp: block.timestamp, blockNumber: block.number, reward: 0});

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1156
Source: 
>         // get internal status
>         ILoanToken.Status loanInternalStatus = ILoanToken(id).status();
>                                                ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        990
Source: 
>     function rate(address id, bool choice) internal {
>         uint256 stake = stkTRU.getPriorVotes(msg.sender, loans[id].blockNumber);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stake > 0, "TrueRatingAgencyV2: Cannot rate with empty balance");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1058
Source: 
>         if (loans[id].reward == 0) {
>             uint256 interest = ILoanToken(id).profit();
>                                ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1064
Source: 
>                 interest
>                     .mul(distributor.remaining())
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>                     .mul(rewardMultiplier)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1102
Source: 
>             // transfer tokens
>             require(TRU.transfer(rater, claimableRewards));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Claimed(id, rater, claimableRewards);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1066
Source: 
>                     .mul(rewardMultiplier)
>                     .div(distributor.amount())
>                          ^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1072
Source: 
>             if (totalReward > 0) {
>                 distributor.distribute(totalReward);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 TRU.transfer(address(stkTRU), totalReward.sub(ratersReward));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1073
Source: 
>                 distributor.distribute(totalReward);
>                 TRU.transfer(address(stkTRU), totalReward.sub(ratersReward));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        399
Source: 
>         }
>         return cs == 0;
>                ^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        436
Source: 
> contract Ownable is Initializable, Context {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        361
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        366
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        436
Source: 
> contract Ownable is Initializable, Context {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        746
Source: 
> 
>     IBurnableERC20 public TRU;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     IVoteTokenWithERC20 public stkTRU;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        747
Source: 
>     IBurnableERC20 public TRU;
>     IVoteTokenWithERC20 public stkTRU;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IArbitraryDistributor public distributor;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        748
Source: 
>     IVoteTokenWithERC20 public stkTRU;
>     IArbitraryDistributor public distributor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ILoanFactory public factory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        749
Source: 
>     IArbitraryDistributor public distributor;
>     ILoanFactory public factory;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        754
Source: 
>      */
>     uint256 public ratersRewardFactor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        757
Source: 
>     // reward multiplier for raters
>     uint256 public rewardMultiplier;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        760
Source: 
>     // are submissions paused?
>     bool public submissionPauseStatus;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        361
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        366
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        411
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        361
Source: 
>      */
>     bool private initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        366
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        411
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1007
Source: 
>     function _resetCastRatings(address id, bool choice) internal {
>         loans[id].prediction[choice] = loans[id].prediction[choice].sub(loans[id].ratings[msg.sender][choice]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         loans[id].ratings[msg.sender][choice] = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TrueRatingAgencyV2
Line:        1008
Source: 
>         loans[id].prediction[choice] = loans[id].prediction[choice].sub(loans[id].ratings[msg.sender][choice]);
>         loans[id].ratings[msg.sender][choice] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        376
Source: 
>         if (isTopLevelCall) {
>             initializing = true;
>             ^^^^^^^^^^^^^^^^^^^
>             initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        377
Source: 
>             initializing = true;
>             initialized = true;
>             ^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        445
Source: 
>         address msgSender = _msgSender();
>         _owner = msgSender;
>         ^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), msgSender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        383
Source: 
>         if (isTopLevelCall) {
>             initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        376
Source: 
>         if (isTopLevelCall) {
>             initializing = true;
>             ^^^^^^^^^^^^^^^^^^^
>             initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        377
Source: 
>             initializing = true;
>             initialized = true;
>             ^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        834
Source: 
> 
>         TRU = _TRU;
>         ^^^^^^^^^^
>         stkTRU = _stkTRU;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        835
Source: 
>         TRU = _TRU;
>         stkTRU = _stkTRU;
>         ^^^^^^^^^^^^^^^^
>         distributor = _distributor;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        836
Source: 
>         stkTRU = _stkTRU;
>         distributor = _distributor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         factory = _factory;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        837
Source: 
>         distributor = _distributor;
>         factory = _factory;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        839
Source: 
> 
>         ratersRewardFactor = 10000;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        383
Source: 
>         if (isTopLevelCall) {
>             initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        995
Source: 
> 
>         loans[id].prediction[choice] = loans[id].prediction[choice].add(stake);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         loans[id].ratings[msg.sender][choice] = loans[id].ratings[msg.sender][choice].add(stake);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        996
Source: 
>         loans[id].prediction[choice] = loans[id].prediction[choice].add(stake);
>         loans[id].ratings[msg.sender][choice] = loans[id].ratings[msg.sender][choice].add(stake);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1070
Source: 
>             uint256 ratersReward = totalReward.mul(ratersRewardFactor).div(10000);
>             loans[id].reward = ratersReward;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (totalReward > 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1100
Source: 
>             // track amount of claimed tokens
>             loans[id].claimed[rater] = loans[id].claimed[rater].add(claimableRewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // transfer tokens

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Initializable
Line:        372
Source: 
>     modifier initializer() {
>         require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");
>                                 ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Ownable
Line:        444
Source: 
>     function initialize() internal initializer {
>         address msgSender = _msgSender();
>                             ^^^^^^^^^^^^
>         _owner = msgSender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TrueRatingAgencyV2
Line:        1073
Source: 
>                 distributor.distribute(totalReward);
>                 TRU.transfer(address(stkTRU), totalReward.sub(ratersReward));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        366
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        411
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        366
Source: 
>      */
>     bool private initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        411
Source: 
>     // Reserved storage space to allow for layout changes in the future.
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
