Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        88
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    Event
Line:        190
Source: 
>     event Distribution (uint256 totalReward);
>     event Transfer (address indexed attendee, uint256 reward);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Conflict
Contract:    Event
Line:        252
Source: 
>                 .div(totalClaps);
>             (bool success, ) = attendees[i].call.value(reward)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Event
Line:        252
Source: 
>                 .div(totalClaps);
>             (bool success, ) = attendees[i].call.value(reward)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Event
Line:        252
Source: 
>                 .div(totalClaps);
>             (bool success, ) = attendees[i].call.value(reward)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Event
Line:        236
Source: 
> 
>     function clap (address[] calldata _attendees, uint256[] calldata _claps)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProxyEvent
Line:        272
Source: 
> 
>     function registerFor (address payable _attendee) external payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         register(_attendee, msg.value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProxyEvent
Line:        277
Source: 
> 
>     function clapFor (
>     ^^^^^^^^^^^^^^^^^^
>         address _clapper,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Event
Line:        173
Source: 
> 
>     bytes5 constant public version = "2.1.0";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant private CLAPS_PER_ATTENDEE = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Event
Line:        252
Source: 
>                 .div(totalClaps);
>             (bool success, ) = attendees[i].call.value(reward)("");
>              ^^^^^^^^^^^^
>             if (success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ProxyEvent
Line:        267
Source: 
> 
>     bytes5 constant public version = "2.0.0";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => address) public proxy;

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    ProxyEvent
Line:        267
Source: 
> 
>     bytes5 constant public version = "2.0.0";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => address) public proxy;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Event
Line:        180
Source: 
>     uint8 constant private ATTENDEE_CLAPPED = 2;
>     bool distributionMade;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Event
Line:        252
Source: 
>                 .div(totalClaps);
>             (bool success, ) = attendees[i].call.value(reward)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Event
Line:        252
Source: 
>                 .div(totalClaps);
>             (bool success, ) = attendees[i].call.value(reward)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Event
Line:        252
Source: 
>                 .div(totalClaps);
>             (bool success, ) = attendees[i].call.value(reward)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Event
Line:        226
Source: 
>         uint256 givenClaps;
>         for (uint256 i; i < _attendees.length; i = i.add(1)) {
>                         ^
>             givenClaps = givenClaps.add(_claps[i]);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Event
Line:        248
Source: 
>         emit Distribution(totalReward);
>         for (uint256 i; i < attendees.length; i = i.add(1)) {
>                         ^
>             uint256 reward = claps[attendees[i]]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Event
Line:        180
Source: 
>     uint8 constant private ATTENDEE_CLAPPED = 2;
>     bool distributionMade;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Event
Line:        187
Source: 
>     mapping(address => uint256) public claps;
>     uint256 public totalClaps;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Event
Line:        180
Source: 
>     uint8 constant private ATTENDEE_CLAPPED = 2;
>     bool distributionMade;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Event
Line:        187
Source: 
>     mapping(address => uint256) public claps;
>     uint256 public totalClaps;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Event
Line:        252
Source: 
>                 .div(totalClaps);
>             (bool success, ) = attendees[i].call.value(reward)("");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        207
Source: 
>         require(block.timestamp < end);
>         states[_attendee] = ATTENDEE_REGISTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         attendees.push(_attendee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        208
Source: 
>         states[_attendee] = ATTENDEE_REGISTERED;
>         attendees.push(_attendee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         claps[_attendee] = 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        209
Source: 
>         attendees.push(_attendee);
>         claps[_attendee] = 1;
>         ^^^^^^^^^^^^^^^^^^^^
>         totalClaps += 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        210
Source: 
>         claps[_attendee] = 1;
>         totalClaps += 1;
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        224
Source: 
>         require(_attendees.length == _claps.length);
>         states[_clapper] = ATTENDEE_CLAPPED;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 givenClaps;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        230
Source: 
>             if (states[_attendees[i]] == ATTENDEE_UNREGISTERED) continue;
>             claps[_attendees[i]] = claps[_attendees[i]].add(_claps[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        233
Source: 
>         require(givenClaps <= attendees.length.mul(CLAPS_PER_ATTENDEE));
>         totalClaps = totalClaps.add(givenClaps);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        245
Source: 
>         require(totalClaps > 0);
>         distributionMade = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalReward = address(this).balance;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        210
Source: 
>         claps[_attendee] = 1;
>         totalClaps += 1;
>         ^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        224
Source: 
>         require(_attendees.length == _claps.length);
>         states[_clapper] = ATTENDEE_CLAPPED;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 givenClaps;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        230
Source: 
>             if (states[_attendees[i]] == ATTENDEE_UNREGISTERED) continue;
>             claps[_attendees[i]] = claps[_attendees[i]].add(_claps[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        233
Source: 
>         require(givenClaps <= attendees.length.mul(CLAPS_PER_ATTENDEE));
>         totalClaps = totalClaps.add(givenClaps);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Event
Line:        245
Source: 
>         require(totalClaps > 0);
>         distributionMade = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalReward = address(this).balance;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Event
Line:        207
Source: 
>         require(block.timestamp < end);
>         states[_attendee] = ATTENDEE_REGISTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         attendees.push(_attendee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Event
Line:        208
Source: 
>         states[_attendee] = ATTENDEE_REGISTERED;
>         attendees.push(_attendee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         claps[_attendee] = 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Event
Line:        209
Source: 
>         attendees.push(_attendee);
>         claps[_attendee] = 1;
>         ^^^^^^^^^^^^^^^^^^^^
>         totalClaps += 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProxyEvent
Line:        274
Source: 
>         register(_attendee, msg.value);
>         proxy[_attendee] = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Event
Line:        173
Source: 
> 
>     bytes5 constant public version = "2.1.0";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant private CLAPS_PER_ATTENDEE = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ProxyEvent
Line:        267
Source: 
> 
>     bytes5 constant public version = "2.0.0";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => address) public proxy;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Event
Line:        193
Source: 
>     constructor (uint64 _fee, uint32 _end) public {
>         require(block.timestamp < _end);
>                 ^^^^^^^^^^^^^^^
>         fee = _fee;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Event
Line:        206
Source: 
>         require(attendees.length < MAX_ATTENDEES);
>         require(block.timestamp < end);
>                 ^^^^^^^^^^^^^^^
>         states[_attendee] = ATTENDEE_REGISTERED;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Event
Line:        193
Source: 
>     constructor (uint64 _fee, uint32 _end) public {
>         require(block.timestamp < _end);
>                 ^^^^^^^^^^^^^^^
>         fee = _fee;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Event
Line:        206
Source: 
>         require(attendees.length < MAX_ATTENDEES);
>         require(block.timestamp < end);
>                 ^^^^^^^^^^^^^^^
>         states[_attendee] = ATTENDEE_REGISTERED;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Event
Line:        243
Source: 
>         require(distributionMade == false);
>         require(block.timestamp >= end);
>                 ^^^^^^^^^^^^^^^
>         require(totalClaps > 0);

[0m
