Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Get102Token
Line:        178
Source: 
> 
>     IToken           public TOKEN             = IToken(0x9D70ADFE35A0A9A8CdFF1f5367D3682Fceaa136B);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ITokenPublicSale public TOKEN_PUBLIC_SALE = ITokenPublicSale(0x0073A236eE3DBD8a133F8d9D4717C0D6A042E392);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Get102Token
Line:        179
Source: 
>     IToken           public TOKEN             = IToken(0x9D70ADFE35A0A9A8CdFF1f5367D3682Fceaa136B);
>     ITokenPublicSale public TOKEN_PUBLIC_SALE = ITokenPublicSale(0x0073A236eE3DBD8a133F8d9D4717C0D6A042E392);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Get102Token
Line:        181
Source: 
> 
>     uint256 private WEI_MIN = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private TOKEN_PER_TXN = 102000000; // 102.000000 Token

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Get102Token
Line:        182
Source: 
>     uint256 private WEI_MIN = 1 ether;
>     uint256 private TOKEN_PER_TXN = 102000000; // 102.000000 Token
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        62
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        121
Source: 
> 
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        62
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        121
Source: 
> 
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Get102Token
Line:        191
Source: 
> 
>     function txs() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _txs;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownable
Line:        89
Source: 
> 
>     function rescueTokens(address tokenAddress, address receiver, uint256 amount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20 _token = IERC20(tokenAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath256
Line:        36
Source: 
>         uint256 c = a / b;
>         assert(a == b * c + a % b);
>                     ^^^^^
>         return a / b;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath256
Line:        27
Source: 
>         }
>         c = a * b;
>             ^^^^^
>         assert(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Get102Token
Line:        198
Source: 
>         require(msg.value >= WEI_MIN);
>         require(TOKEN.balanceOf(address(this)) >= TOKEN_PER_TXN);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(TOKEN.balanceOf(msg.sender) == 0);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Get102Token
Line:        199
Source: 
>         require(TOKEN.balanceOf(address(this)) >= TOKEN_PER_TXN);
>         require(TOKEN.balanceOf(msg.sender) == 0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!TOKEN.inWhitelist(msg.sender));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Get102Token
Line:        200
Source: 
>         require(TOKEN.balanceOf(msg.sender) == 0);
>         require(!TOKEN.inWhitelist(msg.sender));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!_alreadyGot[msg.sender]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Get102Token
Line:        205
Source: 
>         uint256 __tokenUsdPrice;
>         (__etherPrice, , , __tokenUsdPrice, , , , , , , ,) = TOKEN_PUBLIC_SALE.status();
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Get102Token
Line:        223
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, TOKEN_PER_TXN));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Get102Token
Line:        215
Source: 
>         if (msg.value > __wei) {
>             msg.sender.transfer(msg.value.sub(__wei));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _receiver.transfer(__wei);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Get102Token
Line:        216
Source: 
>             msg.sender.transfer(msg.value.sub(__wei));
>             _receiver.transfer(__wei);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        75
Source: 
>         require(newOwner != address(0));
>         address __previousOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        83
Source: 
>         require(newReceiver != address(0));
>         address __previousReceiver = _receiver;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _receiver = newReceiver;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        90
Source: 
>     function rescueTokens(address tokenAddress, address receiver, uint256 amount) external onlyOwner {
>         IERC20 _token = IERC20(tokenAddress);
>         ^^^^^^^^^^^^^
>         require(receiver != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Get102Token
Line:        178
Source: 
> 
>     IToken           public TOKEN             = IToken(0x9D70ADFE35A0A9A8CdFF1f5367D3682Fceaa136B);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ITokenPublicSale public TOKEN_PUBLIC_SALE = ITokenPublicSale(0x0073A236eE3DBD8a133F8d9D4717C0D6A042E392);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Get102Token
Line:        179
Source: 
>     IToken           public TOKEN             = IToken(0x9D70ADFE35A0A9A8CdFF1f5367D3682Fceaa136B);
>     ITokenPublicSale public TOKEN_PUBLIC_SALE = ITokenPublicSale(0x0073A236eE3DBD8a133F8d9D4717C0D6A042E392);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Get102Token
Line:        181
Source: 
> 
>     uint256 private WEI_MIN = 1 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private TOKEN_PER_TXN = 102000000; // 102.000000 Token

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Get102Token
Line:        182
Source: 
>     uint256 private WEI_MIN = 1 ether;
>     uint256 private TOKEN_PER_TXN = 102000000; // 102.000000 Token
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Get102Token
Line:        203
Source: 
> 
>         uint256 __etherPrice;
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 __tokenUsdPrice;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Get102Token
Line:        204
Source: 
>         uint256 __etherPrice;
>         uint256 __tokenUsdPrice;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         (__etherPrice, , , __tokenUsdPrice, , , , , , , ,) = TOKEN_PUBLIC_SALE.status();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Get102Token
Line:        209
Source: 
> 
>         uint256 __usd = TOKEN_PER_TXN.mul(__tokenUsdPrice).div(1000000);
>         ^^^^^^^^^^^^^
>         uint256 __wei = __usd.mul(1 ether).div(__etherPrice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Get102Token
Line:        210
Source: 
>         uint256 __usd = TOKEN_PER_TXN.mul(__tokenUsdPrice).div(1000000);
>         uint256 __wei = __usd.mul(1 ether).div(__etherPrice);
>         ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Get102Token
Line:        186
Source: 
> 
>     mapping (address => bool) _alreadyGot;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Get102Token
Line:        182
Source: 
>     uint256 private WEI_MIN = 1 ether;
>     uint256 private TOKEN_PER_TXN = 102000000; // 102.000000 Token
>                                     ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Get102Token
Line:        209
Source: 
> 
>         uint256 __usd = TOKEN_PER_TXN.mul(__tokenUsdPrice).div(1000000);
>                                                                ^^^^^^^
>         uint256 __wei = __usd.mul(1 ether).div(__etherPrice);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ownable
Line:        104
Source: 
> 
>         to.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Get102Token
Line:        215
Source: 
>         if (msg.value > __wei) {
>             msg.sender.transfer(msg.value.sub(__wei));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _receiver.transfer(__wei);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Get102Token
Line:        216
Source: 
>             msg.sender.transfer(msg.value.sub(__wei));
>             _receiver.transfer(__wei);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Ownable
Line:        104
Source: 
> 
>         to.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Get102Token
Line:        215
Source: 
>         if (msg.value > __wei) {
>             msg.sender.transfer(msg.value.sub(__wei));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _receiver.transfer(__wei);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Get102Token
Line:        216
Source: 
>             msg.sender.transfer(msg.value.sub(__wei));
>             _receiver.transfer(__wei);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Ownable
Line:        104
Source: 
> 
>         to.transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Get102Token
Line:        215
Source: 
>         if (msg.value > __wei) {
>             msg.sender.transfer(msg.value.sub(__wei));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _receiver.transfer(__wei);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Get102Token
Line:        216
Source: 
>             msg.sender.transfer(msg.value.sub(__wei));
>             _receiver.transfer(__wei);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        92
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        95
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        92
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        95
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        92
Source: 
>         require(receiver != address(0));
>         uint256 balance = _token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance >= amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ownable
Line:        95
Source: 
> 
>         assert(_token.transfer(receiver, amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Get102Token
Line:        198
Source: 
>         require(msg.value >= WEI_MIN);
>         require(TOKEN.balanceOf(address(this)) >= TOKEN_PER_TXN);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(TOKEN.balanceOf(msg.sender) == 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Get102Token
Line:        199
Source: 
>         require(TOKEN.balanceOf(address(this)) >= TOKEN_PER_TXN);
>         require(TOKEN.balanceOf(msg.sender) == 0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!TOKEN.inWhitelist(msg.sender));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Get102Token
Line:        200
Source: 
>         require(TOKEN.balanceOf(msg.sender) == 0);
>         require(!TOKEN.inWhitelist(msg.sender));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!_alreadyGot[msg.sender]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Get102Token
Line:        205
Source: 
>         uint256 __tokenUsdPrice;
>         (__etherPrice, , , __tokenUsdPrice, , , , , , , ,) = TOKEN_PUBLIC_SALE.status();
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Get102Token
Line:        223
Source: 
> 
>         assert(TOKEN.transfer(msg.sender, TOKEN_PER_TXN));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Get102Token
Line:        184
Source: 
> 
>     uint256 private _txs;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
