[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Staking
Line:        278
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transferFrom(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Staking
Line:        370
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transfer(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Staking
Line:        427
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transfer(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Staking
Line:        460
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transfer(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             depositor,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        321
Source: 
>      */
>     function withdraw(
>     ^^^^^^^^^^^^^^^^^^
>         address toAddress,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        386
Source: 
>      */
>     function withdrawFallback(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address toAddress,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        478
Source: 
>      */
>     function authorizeOwnershipTransfer(address authorizedAddress) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        509
Source: 
>      */
>     function setWithdrawalPublisher(address newWithdrawalPublisher) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        525
Source: 
>      */
>     function setFallbackPublisher(address newFallbackPublisher) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        542
Source: 
>      */
>     function setImmediatelyWithdrawableLimitPublisher(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       address newImmediatelyWithdrawableLimitPublisher

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Staking
Line:        613
Source: 
>      */
>     function addWithdrawalRoot(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 root,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Staking
Line:        651
Source: 
>      */
>     function removeWithdrawalRoots(bytes32[] calldata roots) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Staking
Line:        278
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transferFrom(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Staking
Line:        370
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transfer(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toAddress,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Staking
Line:        427
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transfer(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        129
Source: 
> 
>     address public _owner;
>     ^^^^^^^^^^^^^^^^^^^^^
>     address public _authorizedNewOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        130
Source: 
>     address public _owner;
>     address public _authorizedNewOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _tokenAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        131
Source: 
>     address public _authorizedNewOwner;
>     address public _tokenAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        133
Source: 
> 
>     address public _withdrawalPublisher;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _fallbackPublisher;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        134
Source: 
>     address public _withdrawalPublisher;
>     address public _fallbackPublisher;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _fallbackWithdrawalDelaySeconds = 1 weeks;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        135
Source: 
>     address public _fallbackPublisher;
>     uint256 public _fallbackWithdrawalDelaySeconds = 1 weeks;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        138
Source: 
>     // 1% of total supply
>     uint256 public _immediatelyWithdrawableLimit = 100_000 * (10**18);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _immediatelyWithdrawableLimitPublisher;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        139
Source: 
>     uint256 public _immediatelyWithdrawableLimit = 100_000 * (10**18);
>     address public _immediatelyWithdrawableLimitPublisher;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        141
Source: 
> 
>     uint256 public _depositNonce = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => PendingDeposit) public _nonceToPendingDeposit;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        142
Source: 
>     uint256 public _depositNonce = 0;
>     mapping(uint256 => PendingDeposit) public _nonceToPendingDeposit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        144
Source: 
> 
>     uint256 public _maxWithdrawalRootNonce = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => uint256) public _withdrawalRootToNonce;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        145
Source: 
>     uint256 public _maxWithdrawalRootNonce = 0;
>     mapping(bytes32 => uint256) public _withdrawalRootToNonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public _addressToWithdrawalNonce;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        146
Source: 
>     mapping(bytes32 => uint256) public _withdrawalRootToNonce;
>     mapping(address => uint256) public _addressToWithdrawalNonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public _addressToCumulativeAmountWithdrawn;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        147
Source: 
>     mapping(address => uint256) public _addressToWithdrawalNonce;
>     mapping(address => uint256) public _addressToCumulativeAmountWithdrawn;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        149
Source: 
> 
>     bytes32 public _fallbackRoot;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _fallbackMaxDepositIncluded = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        150
Source: 
>     bytes32 public _fallbackRoot;
>     uint256 public _fallbackMaxDepositIncluded = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _fallbackSetDate = 2**200;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Staking
Line:        151
Source: 
>     uint256 public _fallbackMaxDepositIncluded = 0;
>     uint256 public _fallbackSetDate = 2**200;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5.3<0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        278
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transferFrom(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        370
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transfer(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        427
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transfer(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        460
Source: 
> 
>         bool transferred = ERC20Token(_tokenAddress).transfer(
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             depositor,

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Staking
Line:        130
Source: 
>     address public _owner;
>     address public _authorizedNewOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public _tokenAddress;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Staking
Line:        149
Source: 
> 
>     bytes32 public _fallbackRoot;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public _fallbackMaxDepositIncluded = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Staking
Line:        268
Source: 
> 
>         _depositNonce = SafeMath.add(_depositNonce, 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nonceToPendingDeposit[_depositNonce].depositor = msg.sender;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Staking
Line:        269
Source: 
>         _depositNonce = SafeMath.add(_depositNonce, 1);
>         _nonceToPendingDeposit[_depositNonce].depositor = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _nonceToPendingDeposit[_depositNonce].amount = amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Staking
Line:        270
Source: 
>         _nonceToPendingDeposit[_depositNonce].depositor = msg.sender;
>         _nonceToPendingDeposit[_depositNonce].amount = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Staking
Line:        699
Source: 
>         require(
>             SafeMath.add(_fallbackSetDate, _fallbackWithdrawalDelaySeconds) > block.timestamp,
>                                                                               ^^^^^^^^^^^^^^^
>             "Cannot set fallback root while fallback mechanism is active"

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Staking
Line:        396
Source: 
>         require(
>             SafeMath.add(_fallbackSetDate, _fallbackWithdrawalDelaySeconds) <= block.timestamp,
>                                                                                ^^^^^^^^^^^^^^^
>             "Fallback withdrawal period is not active"

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Staking
Line:        447
Source: 
>         require(
>             SafeMath.add(_fallbackSetDate, _fallbackWithdrawalDelaySeconds) <= block.timestamp,
>                                                                                ^^^^^^^^^^^^^^^
>             "Fallback withdrawal period is not active, so refunds are not permitted"

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Staking
Line:        673
Source: 
> 
>         _fallbackSetDate = block.timestamp;
>                            ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Staking
Line:        713
Source: 
>         _fallbackMaxDepositIncluded = maxDepositIncluded;
>         _fallbackSetDate = block.timestamp;
>                            ^^^^^^^^^^^^^^^
> 

[0m
