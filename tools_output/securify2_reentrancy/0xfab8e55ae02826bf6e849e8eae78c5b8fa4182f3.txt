Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Chai
Line:        42
Source: 
>     // --- Data ---
>     VatLike  public vat = VatLike(0x65852698D424d6750B21BC975eFd0B746A3da9e3);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     PotLike  public pot = PotLike(0x01590BB50bC05f7fA0CE11de917c54B06509Da36);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Chai
Line:        43
Source: 
>     VatLike  public vat = VatLike(0x65852698D424d6750B21BC975eFd0B746A3da9e3);
>     PotLike  public pot = PotLike(0x01590BB50bC05f7fA0CE11de917c54B06509Da36);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     JoinLike public daiJoin = JoinLike(0xCf658E570d0744C75eB325E784eEFff9eEF1B748);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Chai
Line:        44
Source: 
>     PotLike  public pot = PotLike(0x01590BB50bC05f7fA0CE11de917c54B06509Da36);
>     JoinLike public daiJoin = JoinLike(0xCf658E570d0744C75eB325E784eEFff9eEF1B748);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     GemLike  public daiToken = GemLike(0x4Eab78e4C2acf2Ed41d56ce71b51c9D717782124);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Chai
Line:        45
Source: 
>     JoinLike public daiJoin = JoinLike(0xCf658E570d0744C75eB325E784eEFff9eEF1B748);
>     GemLike  public daiToken = GemLike(0x4Eab78e4C2acf2Ed41d56ce71b51c9D717782124);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Chai
Line:        89
Source: 
>     bytes32 public constant PERMIT_TYPEHASH  = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;
>     bytes32 public a;
>     ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Chai
Line:        106
Source: 
>     // --- Token ---
>     function transfer(address dst, uint wad) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferFrom(msg.sender, dst, wad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Chai
Line:        110
Source: 
>     // like transferFrom but dai-denominated
>     function move(address src, address dst, uint wad) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Chai
Line:        115
Source: 
>     }
>     function transferFrom(address src, address dst, uint wad)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public returns (bool)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Chai
Line:        128
Source: 
>     }
>     function approve(address usr, uint wad) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowance[msg.sender][usr] = wad;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Chai
Line:        156
Source: 
> 
>     function dai(address usr) external returns (uint wad) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Chai
Line:        161
Source: 
>     // wad is denominated in dai
>     function join(address dst, uint wad) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Chai
Line:        190
Source: 
>     // wad is denominated in dai
>     function draw(address src, uint wad) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Chai
Line:        70
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        162
Source: 
>     function join(address dst, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                           ^^^^^^^^^
>         uint pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        162
Source: 
>     function join(address dst, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                        ^^^^^^^^^^
>         uint pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        167
Source: 
> 
>         daiToken.transferFrom(msg.sender, address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiJoin.join(address(this), wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        168
Source: 
>         daiToken.transferFrom(msg.sender, address(this), wad);
>         daiJoin.join(address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pot.join(pie);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        169
Source: 
>         daiJoin.join(address(this), wad);
>         pot.join(pie);
>         ^^^^^^^^^^^^^
>         emit Transfer(address(0), dst, pie);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        162
Source: 
>     function join(address dst, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                     ^^^^^^^^^
>         uint pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        183
Source: 
> 
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                           ^^^^^^^^^
>         pot.exit(wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        183
Source: 
> 
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                        ^^^^^^^^^^
>         pot.exit(wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        184
Source: 
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>         pot.exit(wad);
>         ^^^^^^^^^^^^^
>         daiJoin.exit(msg.sender, rmul(chi, wad));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        185
Source: 
>         pot.exit(wad);
>         daiJoin.exit(msg.sender, rmul(chi, wad));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(src, address(0), wad);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Chai
Line:        183
Source: 
> 
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                     ^^^^^^^^^
>         pot.exit(wad);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Chai
Line:        48
Source: 
>     // --- ERC20 Data ---
>     string  public constant name     = "Chai";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string  public constant symbol   = "CHAI";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Chai
Line:        49
Source: 
>     string  public constant name     = "Chai";
>     string  public constant symbol   = "CHAI";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string  public constant version  = "1";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Chai
Line:        50
Source: 
>     string  public constant symbol   = "CHAI";
>     string  public constant version  = "1";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8   public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Chai
Line:        51
Source: 
>     string  public constant version  = "1";
>     uint8   public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Chai
Line:        62
Source: 
>     // --- Math ---
>     uint constant RAY = 10 ** 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function add(uint x, uint y) internal pure returns (uint z) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        111
Source: 
>     function move(address src, address dst, uint wad) external returns (bool) {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                           ^^^^^^^^^
>         // rounding up ensures dst gets at least wad dai

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        111
Source: 
>     function move(address src, address dst, uint wad) external returns (bool) {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                        ^^^^^^^^^^
>         // rounding up ensures dst gets at least wad dai

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        111
Source: 
>     function move(address src, address dst, uint wad) external returns (bool) {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                     ^^^^^^^^^
>         // rounding up ensures dst gets at least wad dai

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        157
Source: 
>     function dai(address usr) external returns (uint wad) {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                           ^^^^^^^^^
>         wad = rmul(chi, balanceOf[usr]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        157
Source: 
>     function dai(address usr) external returns (uint wad) {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                        ^^^^^^^^^^
>         wad = rmul(chi, balanceOf[usr]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        157
Source: 
>     function dai(address usr) external returns (uint wad) {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                     ^^^^^^^^^
>         wad = rmul(chi, balanceOf[usr]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        162
Source: 
>     function join(address dst, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                           ^^^^^^^^^
>         uint pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        162
Source: 
>     function join(address dst, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                        ^^^^^^^^^^
>         uint pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        162
Source: 
>     function join(address dst, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                     ^^^^^^^^^
>         uint pie = rdiv(wad, chi);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        183
Source: 
> 
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                           ^^^^^^^^^
>         pot.exit(wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        183
Source: 
> 
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                        ^^^^^^^^^^
>         pot.exit(wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        183
Source: 
> 
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                     ^^^^^^^^^
>         pot.exit(wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        191
Source: 
>     function draw(address src, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                           ^^^^^^^^^
>         // rounding up ensures usr gets at least wad dai

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        191
Source: 
>     function draw(address src, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                        ^^^^^^^^^^
>         // rounding up ensures usr gets at least wad dai

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Chai
Line:        191
Source: 
>     function draw(address src, uint wad) external {
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>                                                     ^^^^^^^^^
>         // rounding up ensures usr gets at least wad dai

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Chai
Line:        99
Source: 
> 
>         vat.hope(address(daiJoin));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vat.hope(address(pot));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Chai
Line:        100
Source: 
>         vat.hope(address(daiJoin));
>         vat.hope(address(pot));
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Chai
Line:        102
Source: 
> 
>         daiToken.approve(address(daiJoin), uint(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Chai
Line:        167
Source: 
> 
>         daiToken.transferFrom(msg.sender, address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiJoin.join(address(this), wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Chai
Line:        168
Source: 
>         daiToken.transferFrom(msg.sender, address(this), wad);
>         daiJoin.join(address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pot.join(pie);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Chai
Line:        169
Source: 
>         daiJoin.join(address(this), wad);
>         pot.join(pie);
>         ^^^^^^^^^^^^^
>         emit Transfer(address(0), dst, pie);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Chai
Line:        184
Source: 
>         uint chi = (now > pot.rho()) ? pot.drip() : pot.chi();
>         pot.exit(wad);
>         ^^^^^^^^^^^^^
>         daiJoin.exit(msg.sender, rmul(chi, wad));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Chai
Line:        185
Source: 
>         pot.exit(wad);
>         daiJoin.exit(msg.sender, rmul(chi, wad));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(src, address(0), wad);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Chai
Line:        64
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Chai
Line:        67
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Chai
Line:        70
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Chai
Line:        52
Source: 
>     uint8   public constant decimals = 18;
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Chai
Line:        89
Source: 
>     bytes32 public constant PERMIT_TYPEHASH  = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;
>     bytes32 public a;
>     ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Chai
Line:        129
Source: 
>     function approve(address usr, uint wad) external returns (bool) {
>         allowance[msg.sender][usr] = wad;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, usr, wad);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Chai
Line:        149
Source: 
>         require(expiry == 0 || now <= expiry, "chai/permit-expired");
>         require(nonce == nonces[holder]++, "chai/invalid-nonce");
>                          ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Chai
Line:        152
Source: 
>         uint can = allowed ? uint(-1) : 0;
>         allowance[holder][spender] = can;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(holder, spender, can);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Chai
Line:        164
Source: 
>         uint pie = rdiv(wad, chi);
>         balanceOf[dst] = add(balanceOf[dst], pie);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalSupply    = add(totalSupply, pie);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Chai
Line:        165
Source: 
>         balanceOf[dst] = add(balanceOf[dst], pie);
>         totalSupply    = add(totalSupply, pie);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Chai
Line:        102
Source: 
> 
>         daiToken.approve(address(daiJoin), uint(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Chai
Line:        167
Source: 
> 
>         daiToken.transferFrom(msg.sender, address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         daiJoin.join(address(this), wad);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Chai
Line:        49
Source: 
>     string  public constant name     = "Chai";
>     string  public constant symbol   = "CHAI";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string  public constant version  = "1";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Chai
Line:        51
Source: 
>     string  public constant version  = "1";
>     uint8   public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Chai
Line:        89
Source: 
>     bytes32 public constant PERMIT_TYPEHASH  = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;
>     bytes32 public a;
>     ^^^^^^^^^^^^^^^^
> 

[0m
