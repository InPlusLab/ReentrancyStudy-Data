Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        74
Source: 
> 
>         if (returndata.length > 0) { // return data is optional
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(abi.decode(returndata, (bool)), "SafeERC20: erc20 operation did not succeed");

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LexGuildLocker
Line:        154
Source: 
>     event Release(uint256 indexed index, uint256[] indexed milestone); 
>     event Withdraw(uint256 indexed index, uint256 indexed remainder);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    LexGuildLocker
Line:        215
Source: 
>         if (locker.token == wETH && msg.value > 0) {
>             require(msg.value == sum, "!ETH");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             IWETH(wETH).deposit();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        131
Source: 
>     address public lexDAO;
>     address public wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference
>       ^^^^^^
>     uint256 public lockerCount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        131
Source: 
>     address public lexDAO;
>     address public wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference
>                                                                                                  ^^^^^^^^^^
>     uint256 public lockerCount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    LexGuildLocker
Line:        317
Source: 
>     }
> }
>                                                       

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LexGuildLocker
Line:        241
Source: 
>             IERC20(locker.token).safeTransfer(locker.provider[i], milestone[i]);
>             locker.released = locker.released.add(milestone[i]);
>                                      ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LexGuildLocker
Line:        244
Source: 
> 
> 	    emit Release(index, milestone); 
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LexGuildLocker
Line:        247
Source: 
>     
>     function withdraw(uint256 index) external { // withdraw locker remainder to client if termination time passes & no lock
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	Locker storage locker = lockers[index];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        108
Source: 
>         require(b > 0);
>         uint256 c = a / b;
>                       ^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    LexGuildLocker
Line:        244
Source: 
> 
> 	    emit Release(index, milestone); 
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        108
Source: 
>         require(b > 0);
>         uint256 c = a / b;
>                       ^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    LexGuildLocker
Line:        244
Source: 
> 
> 	    emit Release(index, milestone); 
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        108
Source: 
>         require(b > 0);
>         uint256 c = a / b;
>                       ^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LexGuildLocker
Line:        199
Source: 
>             0,
>             termination,
>                    ^^^^^
>             details);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LexGuildLocker
Line:        286
Source: 
> 	    
> 	    require(locker.locked == 1, "!locked"); 
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    require(locker.cap > locker.released, "released");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LexGuildLocker
Line:        297
Source: 
>   
>         IERC20(locker.token).safeTransfer(locker.client, clientAward);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(locker.token).safeTransfer(locker.resolver, resolutionFee);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LexGuildLocker
Line:        317
Source: 
>     }
> }


[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        131
Source: 
>     address public lexDAO;
>     address public wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // canonical ether token wrapper contract reference
>                                                                          ^^^^^
>     uint256 public lockerCount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LexGuildLocker
Line:        156
Source: 
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);
>     event Resolve(address indexed resolver, uint256 indexed clientAward, uint256[] indexed providerAward, uint256 index, uint256 resolutionFee, bytes32 details); 
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UpdateLockerSettings(address indexed lexDAO, uint256 indexed MAX_DURATION, uint256 indexed resolutionRate, bytes32 details);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LexGuildLocker
Line:        242
Source: 
>             locker.released = locker.released.add(milestone[i]);
>         }
>         ^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LexGuildLocker
Line:        154
Source: 
>     event Release(uint256 indexed index, uint256[] indexed milestone); 
>     event Withdraw(uint256 indexed index, uint256 indexed remainder);
>    ^^^^^^^^^^^^^^^^^^^^^
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LexGuildLocker
Line:        154
Source: 
>     event Release(uint256 indexed index, uint256[] indexed milestone); 
>     event Withdraw(uint256 indexed index, uint256 indexed remainder);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LexGuildLocker
Line:        155
Source: 
>     event Withdraw(uint256 indexed index, uint256 indexed remainder);
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);
>                                                                                    ^^^^
>     event Resolve(address indexed resolver, uint256 indexed clientAward, uint256[] indexed providerAward, uint256 index, uint256 resolutionFee, bytes32 details); 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LexGuildLocker
Line:        156
Source: 
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);
>     event Resolve(address indexed resolver, uint256 indexed clientAward, uint256[] indexed providerAward, uint256 index, uint256 resolutionFee, bytes32 details); 
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UpdateLockerSettings(address indexed lexDAO, uint256 indexed MAX_DURATION, uint256 indexed resolutionRate, bytes32 details);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LexGuildLocker
Line:        156
Source: 
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);
>     event Resolve(address indexed resolver, uint256 indexed clientAward, uint256[] indexed providerAward, uint256 index, uint256 resolutionFee, bytes32 details); 
>                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event UpdateLockerSettings(address indexed lexDAO, uint256 indexed MAX_DURATION, uint256 indexed resolutionRate, bytes32 details);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LexGuildLocker
Line:        156
Source: 
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);
>     event Resolve(address indexed resolver, uint256 indexed clientAward, uint256[] indexed providerAward, uint256 index, uint256 resolutionFee, bytes32 details); 
>                                                                                                                                                            ^^^^^^^
>     event UpdateLockerSettings(address indexed lexDAO, uint256 indexed MAX_DURATION, uint256 indexed resolutionRate, bytes32 details);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LexGuildLocker
Line:        244
Source: 
> 
> 	    emit Release(index, milestone); 
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LexGuildLocker
Line:        244
Source: 
> 
> 	    emit Release(index, milestone); 
>              ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LexGuildLocker
Line:        241
Source: 
>             IERC20(locker.token).safeTransfer(locker.provider[i], milestone[i]);
>             locker.released = locker.released.add(milestone[i]);
>                                      ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LexGuildLocker
Line:        247
Source: 
>     
>     function withdraw(uint256 index) external { // withdraw locker remainder to client if termination time passes & no lock
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	Locker storage locker = lockers[index];

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        75
Source: 
>         if (returndata.length > 0) { // return data is optional
>             require(abi.decode(returndata, (bool)), "SafeERC20: erc20 operation did not succeed");
>                      ^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LexGuildLocker
Line:        155
Source: 
>     event Withdraw(uint256 indexed index, uint256 indexed remainder);
>     event Lock(address indexed sender, uint256 indexed index, bytes32 indexed details);
>                                                                                    ^^^^
>     event Resolve(address indexed resolver, uint256 indexed clientAward, uint256[] indexed providerAward, uint256 index, uint256 resolutionFee, bytes32 details); 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LexGuildLocker
Line:        218
Source: 
>             (bool success, ) = wETH.call.value(msg.value)("");
>             require(success, "!transfer");
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             IWETH(wETH).transfer(address(this), msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LexGuildLocker
Line:        219
Source: 
>             require(success, "!transfer");
>             IWETH(wETH).transfer(address(this), msg.value);
>                                                      ^^^^^^
>         } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LexGuildLocker
Line:        283
Source: 
>         
>         uint256 remainder = locker.cap.sub(locker.released); 
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	    uint256 resolutionFee = remainder.div(resolutionRate); // calculate dispute resolution fee

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        106
Source: 
> 
>     function div(uint256 a, uint256 b) internal pure returns (uint256) {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(b > 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        108
Source: 
>         require(b > 0);
>         uint256 c = a / b;
>                       ^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LexGuildLocker
Line:        247
Source: 
>     
>     function withdraw(uint256 index) external { // withdraw locker remainder to client if termination time passes & no lock
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	Locker storage locker = lockers[index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LexGuildLocker
Line:        294
Source: 
>             require(clientAward.add(providerAward[i]) == remainder.sub(resolutionFee), "resolution != remainder");
>             IERC20(locker.token).safeTransfer(locker.provider[i], providerAward[i]);
>                                                                          ^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LexGuildLocker
Line:        317
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         

[0m
