Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        49
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        54
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        119
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        119
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SDCPStaking
Line:        190
Source: 
>       v2Pair = v2;
>       require(IUniswapV2Pair(v2).token0() == sdcp || IUniswapV2Pair(v2).token1() == sdcp, "E/no sdcp");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SDCPStaking
Line:        190
Source: 
>       v2Pair = v2;
>       require(IUniswapV2Pair(v2).token0() == sdcp || IUniswapV2Pair(v2).token1() == sdcp, "E/no sdcp");
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SDCPStaking
Line:        217
Source: 
>       require(stype <= 2, "E/type error");
>       require(IERC20(v2Pair).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender] = Staking(uint128(amount), uint32(now), uint32(now), stype);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SDCPStaking
Line:        236
Source: 
> 
>       IERC20(v2Pair).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SDCPStaking
Line:        280
Source: 
> 
>       IERC20(sdcpToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender].earnTime = uint32(now);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SDCPStaking
Line:        287
Source: 
>     function fetchPrice() internal view returns (uint) {
>       (uint reserve0, uint reserve1,) = IUniswapV2Pair(v2Pair).getReserves();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SDCPStaking
Line:        291
Source: 
> 
>       if(IUniswapV2Pair(v2Pair).token0() == sdcpToken) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oneSdcp.mul(reserve1) / reserve0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SDCPStaking
Line:        318
Source: 
>     function withdrawSDCP(uint amount) external onlyOwner {
>       IERC20(sdcpToken).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        142
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SDCPStaking
Line:        317
Source: 
> 
>     function withdrawSDCP(uint amount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       IERC20(sdcpToken).transfer(msg.sender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SDCPStaking
Line:        214
Source: 
> 
>     function stakingV2(uint amount, uint64 stype) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(V2Stakings[msg.sender].amount == 0, "E/aleady staking");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SDCPStaking
Line:        255
Source: 
>         uint earnDays = endDay - startDay;
>         uint earnPs = earnDays * BASE_EP;
>                       ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SDCPStaking
Line:        269
Source: 
>         if(s.stype == 2) {
>           return earns * 2;
>                  ^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        53
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SDCPStaking
Line:        313
Source: 
>         uint t = (p - lastPrice) / (lastPrice / 10); 
>         earnPercent[d] = ep * t;
>                          ^^^^^^
>       }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SDCPStaking
Line:        217
Source: 
>       require(stype <= 2, "E/type error");
>       require(IERC20(v2Pair).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender] = Staking(uint128(amount), uint32(now), uint32(now), stype);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SDCPStaking
Line:        236
Source: 
> 
>       IERC20(v2Pair).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SDCPStaking
Line:        200
Source: 
> 
>     mapping(address => Staking) V2Stakings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SDCPStaking
Line:        287
Source: 
>     function fetchPrice() internal view returns (uint) {
>       (uint reserve0, uint reserve1,) = IUniswapV2Pair(v2Pair).getReserves();
>        ^^^^^^^^^^^^^
>       require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        107
Source: 
> contract Ownable {
>     address _owner;
>     ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SDCPStaking
Line:        179
Source: 
> 
>     uint constant BASE_EP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SDCPStaking
Line:        181
Source: 
> 
>     uint constant DAY =  60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SDCPStaking
Line:        183
Source: 
> 
>     uint constant RATE = 1660000;  // 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant LEAST = 500;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SDCPStaking
Line:        184
Source: 
>     uint constant RATE = 1660000;  // 
>     uint constant LEAST = 500;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SDCPStaking
Line:        200
Source: 
> 
>     mapping(address => Staking) V2Stakings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SDCPStaking
Line:        202
Source: 
> 
>     mapping(uint => uint) dayPrices;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SDCPStaking
Line:        188
Source: 
>       sdcpToken = sdcp;
>       sdcpDec = IERC20(sdcp).decimals();
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>       v2Pair = v2;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SDCPStaking
Line:        190
Source: 
>       v2Pair = v2;
>       require(IUniswapV2Pair(v2).token0() == sdcp || IUniswapV2Pair(v2).token1() == sdcp, "E/no sdcp");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SDCPStaking
Line:        190
Source: 
>       v2Pair = v2;
>       require(IUniswapV2Pair(v2).token0() == sdcp || IUniswapV2Pair(v2).token1() == sdcp, "E/no sdcp");
>                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SDCPStaking
Line:        217
Source: 
>       require(stype <= 2, "E/type error");
>       require(IERC20(v2Pair).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender] = Staking(uint128(amount), uint32(now), uint32(now), stype);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SDCPStaking
Line:        287
Source: 
>     function fetchPrice() internal view returns (uint) {
>       (uint reserve0, uint reserve1,) = IUniswapV2Pair(v2Pair).getReserves();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SDCPStaking
Line:        291
Source: 
> 
>       if(IUniswapV2Pair(v2Pair).token0() == sdcpToken) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oneSdcp.mul(reserve1) / reserve0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SDCPStaking
Line:        236
Source: 
> 
>       IERC20(v2Pair).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SDCPStaking
Line:        280
Source: 
> 
>       IERC20(sdcpToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender].earnTime = uint32(now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SDCPStaking
Line:        318
Source: 
>     function withdrawSDCP(uint amount) external onlyOwner {
>       IERC20(sdcpToken).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SDCPStaking
Line:        175
Source: 
>     address private immutable sdcpToken;
>     address private immutable v2Pair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SDCPStaking
Line:        177
Source: 
> 
>     uint8 private immutable sdcpDec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SDCPStaking
Line:        281
Source: 
>       IERC20(sdcpToken).transfer(msg.sender, earnsTotal);
>       V2Stakings[msg.sender].earnTime = uint32(now);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SDCPStaking
Line:        306
Source: 
> 
>       dayPrices[d] = p;
>       ^^^^^^^^^^^^^^^^
>       uint lastPrice = dayPrices[d-1];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SDCPStaking
Line:        313
Source: 
>         uint t = (p - lastPrice) / (lastPrice / 10); 
>         earnPercent[d] = ep * t;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SDCPStaking
Line:        236
Source: 
> 
>       IERC20(v2Pair).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SDCPStaking
Line:        280
Source: 
> 
>       IERC20(sdcpToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender].earnTime = uint32(now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SDCPStaking
Line:        318
Source: 
>     function withdrawSDCP(uint amount) external onlyOwner {
>       IERC20(sdcpToken).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SDCPStaking
Line:        184
Source: 
>     uint constant RATE = 1660000;  // 
>     uint constant LEAST = 500;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
