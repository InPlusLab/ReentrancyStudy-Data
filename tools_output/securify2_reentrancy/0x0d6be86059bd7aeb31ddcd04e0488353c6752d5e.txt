Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        20
Source: 
> contract FOMOPOOL {
>      address public ownerWallet = 0x2fF324915A980c8C82a0062a6B0f724249F3176d;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      address public feesWallet = 0x6eC27978a98AfA20daA6B85B44De4653853a4816;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        21
Source: 
>      address public ownerWallet = 0x2fF324915A980c8C82a0062a6B0f724249F3176d;
>      address public feesWallet = 0x6eC27978a98AfA20daA6B85B44De4653853a4816;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint public currUserID = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        88
Source: 
>     
>    uint REGESTRATION_FESS=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.05 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        89
Source: 
>    uint REGESTRATION_FESS=0.05 ether;
>    uint pool1_price=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.1 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        90
Source: 
>    uint pool1_price=0.05 ether;
>    uint pool2_price=0.1 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=0.2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        91
Source: 
>    uint pool2_price=0.1 ether ;
>    uint pool3_price=0.2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        92
Source: 
>    uint pool3_price=0.2 ether;
>    uint pool4_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        93
Source: 
>    uint pool4_price=0.5 ether;
>    uint pool5_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        94
Source: 
>    uint pool5_price=1 ether;
>    uint pool6_price=2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=5 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        95
Source: 
>    uint pool6_price=2 ether;
>    uint pool7_price=5 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=10 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    FOMOPOOL
Line:        96
Source: 
>    uint pool7_price=5 ether ;
>    uint pool8_price=10 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        223
Source: 
>      
>        function regUser(uint _referrerID) public payable {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        285
Source: 
>    
>        function buyPool1() public payable {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        338
Source: 
>     
>       function buyPool2() public payable {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        390
Source: 
>     
>      function buyPool3() public payable {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        442
Source: 
>     
>     function buyPool4() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        495
Source: 
>     
>     function buyPool5() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        546
Source: 
>     
>     function buyPool6() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        597
Source: 
>     
>     function buyPool7() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FOMOPOOL
Line:        649
Source: 
>     
>     function buyPool8() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(users[msg.sender].isExist, "User Not Registered");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        307
Source: 
>        if(pool1users[pool1Currentuser].payment_received < 1){
>                 address(uint160(pool1Currentuser)).send(pool1_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool1users[pool1Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        327
Source: 
>                       address pool1Currentuser=pool1userList[pool1activeUserID];
>                       address(uint160(pool1Currentuser)).send(pool1_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        359
Source: 
>        if(pool2users[pool2Currentuser].payment_received < 1){
>                 address(uint160(pool2Currentuser)).send(pool2_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool2users[pool2Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        379
Source: 
>                       address pool2Currentuser=pool2userList[pool2activeUserID];
>                       address(uint160(pool2Currentuser)).send(pool2_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        411
Source: 
>        if(pool3users[pool3Currentuser].payment_received < 1){
>                 address(uint160(pool3Currentuser)).send(pool3_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool3users[pool3Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        431
Source: 
>                       address pool3Currentuser=pool3userList[pool3activeUserID];
>                       address(uint160(pool3Currentuser)).send(pool3_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        463
Source: 
>        if(pool4users[pool4Currentuser].payment_received < 2){
>                 address(uint160(pool4Currentuser)).send(pool4_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool4users[pool4Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        483
Source: 
>                       address pool4Currentuser=pool4userList[pool4activeUserID];
>                       address(uint160(pool4Currentuser)).send(pool4_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        516
Source: 
>        if(pool5users[pool5Currentuser].payment_received < 2){
>                 address(uint160(pool5Currentuser)).send(pool5_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool5users[pool5Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        536
Source: 
>                       address pool5Currentuser=pool5userList[pool5activeUserID];
>                       address(uint160(pool5Currentuser)).send(pool5_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        567
Source: 
>        if(pool6users[pool6Currentuser].payment_received < 2){
>                 address(uint160(pool6Currentuser)).send(pool6_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool6users[pool6Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        587
Source: 
>                       address pool6Currentuser=pool6userList[pool6activeUserID];
>                       address(uint160(pool6Currentuser)).send(pool6_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        618
Source: 
>        if(pool7users[pool7Currentuser].payment_received < 2){
>                 address(uint160(pool7Currentuser)).send(pool7_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool7users[pool7Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        638
Source: 
>                       address pool7Currentuser=pool7userList[pool7activeUserID];
>                       address(uint160(pool7Currentuser)).send(pool7_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        670
Source: 
>        if(pool8users[pool8Currentuser].payment_received < 2){
>                 address(uint160(pool8Currentuser)).send(pool8_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool8users[pool8Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    FOMOPOOL
Line:        690
Source: 
>                       address pool8Currentuser=pool8userList[pool8activeUserID];
>                       address(uint160(pool8Currentuser)).send(pool8_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FOMOPOOL
Line:        326
Source: 
>                       
>                       address pool1Currentuser=pool1userList[pool1activeUserID];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>                       address(uint160(pool1Currentuser)).send(pool1_price);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FOMOPOOL
Line:        378
Source: 
>                       
>                       address pool2Currentuser=pool2userList[pool2activeUserID];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>                       address(uint160(pool2Currentuser)).send(pool2_price);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FOMOPOOL
Line:        430
Source: 
>                       
>                       address pool3Currentuser=pool3userList[pool3activeUserID];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>                       address(uint160(pool3Currentuser)).send(pool3_price);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FOMOPOOL
Line:        482
Source: 
>                       
>                       address pool4Currentuser=pool4userList[pool4activeUserID];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>                       address(uint160(pool4Currentuser)).send(pool4_price);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FOMOPOOL
Line:        535
Source: 
>                       
>                       address pool5Currentuser=pool5userList[pool5activeUserID];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>                       address(uint160(pool5Currentuser)).send(pool5_price);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FOMOPOOL
Line:        586
Source: 
>                      
>                       address pool6Currentuser=pool6userList[pool6activeUserID];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>                       address(uint160(pool6Currentuser)).send(pool6_price);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FOMOPOOL
Line:        637
Source: 
>                       
>                       address pool7Currentuser=pool7userList[pool7activeUserID];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>                       address(uint160(pool7Currentuser)).send(pool7_price);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    FOMOPOOL
Line:        689
Source: 
>                       
>                       address pool8Currentuser=pool8userList[pool8activeUserID];
>                       ^^^^^^^^^^^^^^^^^^^^^^^^
>                       address(uint160(pool8Currentuser)).send(pool8_price);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        42
Source: 
>       
>       uint public unlimited_level_price=0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        86
Source: 
>      
>      mapping(uint => uint) public LEVEL_PRICE;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        88
Source: 
>     
>    uint REGESTRATION_FESS=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.05 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        89
Source: 
>    uint REGESTRATION_FESS=0.05 ether;
>    uint pool1_price=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.1 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        90
Source: 
>    uint pool1_price=0.05 ether;
>    uint pool2_price=0.1 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=0.2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        91
Source: 
>    uint pool2_price=0.1 ether ;
>    uint pool3_price=0.2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        92
Source: 
>    uint pool3_price=0.2 ether;
>    uint pool4_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        93
Source: 
>    uint pool4_price=0.5 ether;
>    uint pool5_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        94
Source: 
>    uint pool5_price=1 ether;
>    uint pool6_price=2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=5 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        95
Source: 
>    uint pool6_price=2 ether;
>    uint pool7_price=5 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=10 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        96
Source: 
>    uint pool7_price=5 ether ;
>    uint pool8_price=10 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        101
Source: 
>    
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        102
Source: 
>      event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>      event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        103
Source: 
>      event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        104
Source: 
>      event regPoolEntry(address indexed _user,uint _level,   uint _time);
>      event getPoolPayment(address indexed _user,address indexed _receiver, uint _level, uint _time);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FOMOPOOL
Line:        258
Source: 
>        
>             uint level_price_local=0;
>             ^^^^^^^^^^^^^^^^^^^^^^
>             if(_level>4){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        88
Source: 
>     
>    uint REGESTRATION_FESS=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool1_price=0.05 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        89
Source: 
>    uint REGESTRATION_FESS=0.05 ether;
>    uint pool1_price=0.05 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool2_price=0.1 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        90
Source: 
>    uint pool1_price=0.05 ether;
>    uint pool2_price=0.1 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool3_price=0.2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        91
Source: 
>    uint pool2_price=0.1 ether ;
>    uint pool3_price=0.2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool4_price=0.5 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        92
Source: 
>    uint pool3_price=0.2 ether;
>    uint pool4_price=0.5 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool5_price=1 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        93
Source: 
>    uint pool4_price=0.5 ether;
>    uint pool5_price=1 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool6_price=2 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        94
Source: 
>    uint pool5_price=1 ether;
>    uint pool6_price=2 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool7_price=5 ether ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        95
Source: 
>    uint pool6_price=2 ether;
>    uint pool7_price=5 ether ;
>    ^^^^^^^^^^^^^^^^^^^^^^^^
>    uint pool8_price=10 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FOMOPOOL
Line:        96
Source: 
>    uint pool7_price=5 ether ;
>    uint pool8_price=10 ether;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        265
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        707
Source: 
>     {
>          if (!address(uint160(feesWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        307
Source: 
>        if(pool1users[pool1Currentuser].payment_received < 1){
>                 address(uint160(pool1Currentuser)).send(pool1_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool1users[pool1Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        327
Source: 
>                       address pool1Currentuser=pool1userList[pool1activeUserID];
>                       address(uint160(pool1Currentuser)).send(pool1_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        359
Source: 
>        if(pool2users[pool2Currentuser].payment_received < 1){
>                 address(uint160(pool2Currentuser)).send(pool2_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool2users[pool2Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        379
Source: 
>                       address pool2Currentuser=pool2userList[pool2activeUserID];
>                       address(uint160(pool2Currentuser)).send(pool2_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        411
Source: 
>        if(pool3users[pool3Currentuser].payment_received < 1){
>                 address(uint160(pool3Currentuser)).send(pool3_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool3users[pool3Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        431
Source: 
>                       address pool3Currentuser=pool3userList[pool3activeUserID];
>                       address(uint160(pool3Currentuser)).send(pool3_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        463
Source: 
>        if(pool4users[pool4Currentuser].payment_received < 2){
>                 address(uint160(pool4Currentuser)).send(pool4_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool4users[pool4Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        483
Source: 
>                       address pool4Currentuser=pool4userList[pool4activeUserID];
>                       address(uint160(pool4Currentuser)).send(pool4_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        516
Source: 
>        if(pool5users[pool5Currentuser].payment_received < 2){
>                 address(uint160(pool5Currentuser)).send(pool5_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool5users[pool5Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        536
Source: 
>                       address pool5Currentuser=pool5userList[pool5activeUserID];
>                       address(uint160(pool5Currentuser)).send(pool5_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        567
Source: 
>        if(pool6users[pool6Currentuser].payment_received < 2){
>                 address(uint160(pool6Currentuser)).send(pool6_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool6users[pool6Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        587
Source: 
>                       address pool6Currentuser=pool6userList[pool6activeUserID];
>                       address(uint160(pool6Currentuser)).send(pool6_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        618
Source: 
>        if(pool7users[pool7Currentuser].payment_received < 2){
>                 address(uint160(pool7Currentuser)).send(pool7_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool7users[pool7Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        638
Source: 
>                       address pool7Currentuser=pool7userList[pool7activeUserID];
>                       address(uint160(pool7Currentuser)).send(pool7_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        670
Source: 
>        if(pool8users[pool8Currentuser].payment_received < 2){
>                 address(uint160(pool8Currentuser)).send(pool8_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool8users[pool8Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        690
Source: 
>                       address pool8Currentuser=pool8userList[pool8activeUserID];
>                       address(uint160(pool8Currentuser)).send(pool8_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        265
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        707
Source: 
>     {
>          if (!address(uint160(feesWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        307
Source: 
>        if(pool1users[pool1Currentuser].payment_received < 1){
>                 address(uint160(pool1Currentuser)).send(pool1_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool1users[pool1Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        327
Source: 
>                       address pool1Currentuser=pool1userList[pool1activeUserID];
>                       address(uint160(pool1Currentuser)).send(pool1_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        359
Source: 
>        if(pool2users[pool2Currentuser].payment_received < 1){
>                 address(uint160(pool2Currentuser)).send(pool2_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool2users[pool2Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        379
Source: 
>                       address pool2Currentuser=pool2userList[pool2activeUserID];
>                       address(uint160(pool2Currentuser)).send(pool2_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        411
Source: 
>        if(pool3users[pool3Currentuser].payment_received < 1){
>                 address(uint160(pool3Currentuser)).send(pool3_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool3users[pool3Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        431
Source: 
>                       address pool3Currentuser=pool3userList[pool3activeUserID];
>                       address(uint160(pool3Currentuser)).send(pool3_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        463
Source: 
>        if(pool4users[pool4Currentuser].payment_received < 2){
>                 address(uint160(pool4Currentuser)).send(pool4_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool4users[pool4Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        483
Source: 
>                       address pool4Currentuser=pool4userList[pool4activeUserID];
>                       address(uint160(pool4Currentuser)).send(pool4_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        516
Source: 
>        if(pool5users[pool5Currentuser].payment_received < 2){
>                 address(uint160(pool5Currentuser)).send(pool5_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool5users[pool5Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        536
Source: 
>                       address pool5Currentuser=pool5userList[pool5activeUserID];
>                       address(uint160(pool5Currentuser)).send(pool5_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        567
Source: 
>        if(pool6users[pool6Currentuser].payment_received < 2){
>                 address(uint160(pool6Currentuser)).send(pool6_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool6users[pool6Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        587
Source: 
>                       address pool6Currentuser=pool6userList[pool6activeUserID];
>                       address(uint160(pool6Currentuser)).send(pool6_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        618
Source: 
>        if(pool7users[pool7Currentuser].payment_received < 2){
>                 address(uint160(pool7Currentuser)).send(pool7_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool7users[pool7Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        638
Source: 
>                       address pool7Currentuser=pool7userList[pool7activeUserID];
>                       address(uint160(pool7Currentuser)).send(pool7_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        670
Source: 
>        if(pool8users[pool8Currentuser].payment_received < 2){
>                 address(uint160(pool8Currentuser)).send(pool8_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool8users[pool8Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FOMOPOOL
Line:        690
Source: 
>                       address pool8Currentuser=pool8userList[pool8activeUserID];
>                       address(uint160(pool8Currentuser)).send(pool8_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        265
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        707
Source: 
>     {
>          if (!address(uint160(feesWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        307
Source: 
>        if(pool1users[pool1Currentuser].payment_received < 1){
>                 address(uint160(pool1Currentuser)).send(pool1_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool1users[pool1Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        327
Source: 
>                       address pool1Currentuser=pool1userList[pool1activeUserID];
>                       address(uint160(pool1Currentuser)).send(pool1_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        359
Source: 
>        if(pool2users[pool2Currentuser].payment_received < 1){
>                 address(uint160(pool2Currentuser)).send(pool2_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool2users[pool2Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        379
Source: 
>                       address pool2Currentuser=pool2userList[pool2activeUserID];
>                       address(uint160(pool2Currentuser)).send(pool2_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        411
Source: 
>        if(pool3users[pool3Currentuser].payment_received < 1){
>                 address(uint160(pool3Currentuser)).send(pool3_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool3users[pool3Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        431
Source: 
>                       address pool3Currentuser=pool3userList[pool3activeUserID];
>                       address(uint160(pool3Currentuser)).send(pool3_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        463
Source: 
>        if(pool4users[pool4Currentuser].payment_received < 2){
>                 address(uint160(pool4Currentuser)).send(pool4_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool4users[pool4Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        483
Source: 
>                       address pool4Currentuser=pool4userList[pool4activeUserID];
>                       address(uint160(pool4Currentuser)).send(pool4_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        516
Source: 
>        if(pool5users[pool5Currentuser].payment_received < 2){
>                 address(uint160(pool5Currentuser)).send(pool5_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool5users[pool5Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        536
Source: 
>                       address pool5Currentuser=pool5userList[pool5activeUserID];
>                       address(uint160(pool5Currentuser)).send(pool5_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        567
Source: 
>        if(pool6users[pool6Currentuser].payment_received < 2){
>                 address(uint160(pool6Currentuser)).send(pool6_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool6users[pool6Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        587
Source: 
>                       address pool6Currentuser=pool6userList[pool6activeUserID];
>                       address(uint160(pool6Currentuser)).send(pool6_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        618
Source: 
>        if(pool7users[pool7Currentuser].payment_received < 2){
>                 address(uint160(pool7Currentuser)).send(pool7_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool7users[pool7Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        638
Source: 
>                       address pool7Currentuser=pool7userList[pool7activeUserID];
>                       address(uint160(pool7Currentuser)).send(pool7_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        670
Source: 
>        if(pool8users[pool8Currentuser].payment_received < 2){
>                 address(uint160(pool8Currentuser)).send(pool8_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool8users[pool8Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FOMOPOOL
Line:        690
Source: 
>                       address pool8Currentuser=pool8userList[pool8activeUserID];
>                       address(uint160(pool8Currentuser)).send(pool8_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        307
Source: 
>        if(pool1users[pool1Currentuser].payment_received < 1){
>                 address(uint160(pool1Currentuser)).send(pool1_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool1users[pool1Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        327
Source: 
>                       address pool1Currentuser=pool1userList[pool1activeUserID];
>                       address(uint160(pool1Currentuser)).send(pool1_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        359
Source: 
>        if(pool2users[pool2Currentuser].payment_received < 1){
>                 address(uint160(pool2Currentuser)).send(pool2_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool2users[pool2Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        379
Source: 
>                       address pool2Currentuser=pool2userList[pool2activeUserID];
>                       address(uint160(pool2Currentuser)).send(pool2_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        411
Source: 
>        if(pool3users[pool3Currentuser].payment_received < 1){
>                 address(uint160(pool3Currentuser)).send(pool3_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool3users[pool3Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        431
Source: 
>                       address pool3Currentuser=pool3userList[pool3activeUserID];
>                       address(uint160(pool3Currentuser)).send(pool3_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        463
Source: 
>        if(pool4users[pool4Currentuser].payment_received < 2){
>                 address(uint160(pool4Currentuser)).send(pool4_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool4users[pool4Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        483
Source: 
>                       address pool4Currentuser=pool4userList[pool4activeUserID];
>                       address(uint160(pool4Currentuser)).send(pool4_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        516
Source: 
>        if(pool5users[pool5Currentuser].payment_received < 2){
>                 address(uint160(pool5Currentuser)).send(pool5_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool5users[pool5Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        536
Source: 
>                       address pool5Currentuser=pool5userList[pool5activeUserID];
>                       address(uint160(pool5Currentuser)).send(pool5_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        567
Source: 
>        if(pool6users[pool6Currentuser].payment_received < 2){
>                 address(uint160(pool6Currentuser)).send(pool6_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool6users[pool6Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        587
Source: 
>                       address pool6Currentuser=pool6userList[pool6activeUserID];
>                       address(uint160(pool6Currentuser)).send(pool6_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        618
Source: 
>        if(pool7users[pool7Currentuser].payment_received < 2){
>                 address(uint160(pool7Currentuser)).send(pool7_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool7users[pool7Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        638
Source: 
>                       address pool7Currentuser=pool7userList[pool7activeUserID];
>                       address(uint160(pool7Currentuser)).send(pool7_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        670
Source: 
>        if(pool8users[pool8Currentuser].payment_received < 2){
>                 address(uint160(pool8Currentuser)).send(pool8_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool8users[pool8Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FOMOPOOL
Line:        690
Source: 
>                       address pool8Currentuser=pool8userList[pool8activeUserID];
>                       address(uint160(pool8Currentuser)).send(pool8_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FOMOPOOL
Line:        265
Source: 
>             }
>             sent = address(uint160(referer)).send(level_price_local);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    FOMOPOOL
Line:        707
Source: 
>     {
>          if (!address(uint160(feesWallet)).send(getEthBalance()))
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        307
Source: 
>        if(pool1users[pool1Currentuser].payment_received < 1){
>                 address(uint160(pool1Currentuser)).send(pool1_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool1users[pool1Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        327
Source: 
>                       address pool1Currentuser=pool1userList[pool1activeUserID];
>                       address(uint160(pool1Currentuser)).send(pool1_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool1Currentuser, 1, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        359
Source: 
>        if(pool2users[pool2Currentuser].payment_received < 1){
>                 address(uint160(pool2Currentuser)).send(pool2_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool2users[pool2Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        379
Source: 
>                       address pool2Currentuser=pool2userList[pool2activeUserID];
>                       address(uint160(pool2Currentuser)).send(pool2_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool2Currentuser, 2, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        411
Source: 
>        if(pool3users[pool3Currentuser].payment_received < 1){
>                 address(uint160(pool3Currentuser)).send(pool3_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool3users[pool3Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        431
Source: 
>                       address pool3Currentuser=pool3userList[pool3activeUserID];
>                       address(uint160(pool3Currentuser)).send(pool3_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool3Currentuser, 3, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        463
Source: 
>        if(pool4users[pool4Currentuser].payment_received < 2){
>                 address(uint160(pool4Currentuser)).send(pool4_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool4users[pool4Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        483
Source: 
>                       address pool4Currentuser=pool4userList[pool4activeUserID];
>                       address(uint160(pool4Currentuser)).send(pool4_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool4Currentuser, 4, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        516
Source: 
>        if(pool5users[pool5Currentuser].payment_received < 2){
>                 address(uint160(pool5Currentuser)).send(pool5_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool5users[pool5Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        536
Source: 
>                       address pool5Currentuser=pool5userList[pool5activeUserID];
>                       address(uint160(pool5Currentuser)).send(pool5_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool5Currentuser, 5, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        567
Source: 
>        if(pool6users[pool6Currentuser].payment_received < 2){
>                 address(uint160(pool6Currentuser)).send(pool6_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool6users[pool6Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        587
Source: 
>                       address pool6Currentuser=pool6userList[pool6activeUserID];
>                       address(uint160(pool6Currentuser)).send(pool6_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool6Currentuser, 6, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        618
Source: 
>        if(pool7users[pool7Currentuser].payment_received < 2){
>                 address(uint160(pool7Currentuser)).send(pool7_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool7users[pool7Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        638
Source: 
>                       address pool7Currentuser=pool7userList[pool7activeUserID];
>                       address(uint160(pool7Currentuser)).send(pool7_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool7Currentuser, 7, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        670
Source: 
>        if(pool8users[pool8Currentuser].payment_received < 2){
>                 address(uint160(pool8Currentuser)).send(pool8_price);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 pool8users[pool8Currentuser].payment_received+=1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FOMOPOOL
Line:        690
Source: 
>                       address pool8Currentuser=pool8userList[pool8activeUserID];
>                       address(uint160(pool8Currentuser)).send(pool8_price);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                       emit getPoolPayment(msg.sender,pool8Currentuser, 8, now);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FOMOPOOL
Line:        106
Source: 
>    
>      UserStruct[] public requests;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
