[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DSGuardFactory
Line:        208
Source: 
>         if (permitFurucombo) {
>             guard.permit(
>             ^^^^^^^^^^^^^
>                 furucombo,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = owner_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        53
Source: 
> 
>     function setAuthority(DSAuthority authority_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authority = authority_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = owner_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        53
Source: 
> 
>     function setAuthority(DSAuthority authority_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authority = authority_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSGuard
Line:        121
Source: 
> 
>     function canCall(
>     ^^^^^^^^^^^^^^^^^
>         address src_,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSGuard
Line:        158
Source: 
> 
>     function permit(
>     ^^^^^^^^^^^^^^^^
>         address src,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSGuard
Line:        166
Source: 
> 
>     function forbid(
>     ^^^^^^^^^^^^^^^^
>         address src,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSGuardFactory
Line:        201
Source: 
> 
>     function newGuard(
>     ^^^^^^^^^^^^^^^^^^
>         bool permitFurucombo,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = owner_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        53
Source: 
> 
>     function setAuthority(DSAuthority authority_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authority = authority_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        48
Source: 
> 
>     function setOwner(address owner_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = owner_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        53
Source: 
> 
>     function setAuthority(DSAuthority authority_) public auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authority = authority_;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSGuardFactory
Line:        201
Source: 
> 
>     function newGuard(
>     ^^^^^^^^^^^^^^^^^^
>         bool permitFurucombo,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSGuard
Line:        121
Source: 
> 
>     function canCall(
>     ^^^^^^^^^^^^^^^^^
>         address src_,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSGuard
Line:        140
Source: 
> 
>     function permit(
>     ^^^^^^^^^^^^^^^^
>         bytes32 src,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSGuard
Line:        149
Source: 
> 
>     function forbid(
>     ^^^^^^^^^^^^^^^^
>         bytes32 src,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSGuard
Line:        158
Source: 
> 
>     function permit(
>     ^^^^^^^^^^^^^^^^
>         address src,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DSGuard
Line:        166
Source: 
> 
>     function forbid(
>     ^^^^^^^^^^^^^^^^
>         address src,

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        24
Source: 
> 
> pragma solidity >=0.4.23;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        99
Source: 
> 
> pragma solidity >=0.4.23;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        194
Source: 
> 
> pragma solidity >0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSGuard
Line:        119
Source: 
> 
>     mapping(bytes32 => mapping(bytes32 => mapping(bytes32 => bool))) acl;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DSAuth
Line:        75
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSGuardFactory
Line:        208
Source: 
>         if (permitFurucombo) {
>             guard.permit(
>             ^^^^^^^^^^^^^
>                 furucombo,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DSGuardFactory
Line:        214
Source: 
>         }
>         guard.setOwner(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isGuard[address(guard)] = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        40
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority public authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public owner;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        49
Source: 
>     function setOwner(address owner_) public auth {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        54
Source: 
>     function setAuthority(DSAuthority authority_) public auth {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        49
Source: 
>     function setOwner(address owner_) public auth {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        54
Source: 
>     function setAuthority(DSAuthority authority_) public auth {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSGuard
Line:        145
Source: 
>     ) public auth {
>         acl[src][dst][sig] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogPermit(src, dst, sig);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSGuard
Line:        154
Source: 
>     ) public auth {
>         acl[src][dst][sig] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogForbid(src, dst, sig);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DSGuardFactory
Line:        215
Source: 
>         guard.setOwner(msg.sender);
>         isGuard[address(guard)] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         guards[msg.sender] = address(guard);

[0m
