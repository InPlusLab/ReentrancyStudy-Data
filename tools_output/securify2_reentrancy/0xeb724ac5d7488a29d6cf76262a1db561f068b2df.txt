[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    etherATM
Line:        30
Source: 
> 
>     function enter(address payable referrer) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (msg.value < 0.05 ether) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    etherATM
Line:        58
Source: 
>             uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;
>             persons[payoutIdx].etherAddress.transfer(transactionAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance -= transactionAmount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    etherATM
Line:        64
Source: 
> 
>     function setOwner(address payable _owner) external onlyowner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _owner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    etherATM
Line:        30
Source: 
> 
>     function enter(address payable referrer) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (msg.value < 0.05 ether) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    etherATM
Line:        56
Source: 
> 
>         while (balance > (persons[payoutIdx].amount / 100) * 180) {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    etherATM
Line:        57
Source: 
>         while (balance > (persons[payoutIdx].amount / 100) * 180) {
>             uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             persons[payoutIdx].etherAddress.transfer(transactionAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    etherATM
Line:        37
Source: 
>         if (msg.value > 4000 ether) {
>             msg.sender.transfer(msg.value - 4000 ether);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             amount = 4000 ether;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    etherATM
Line:        52
Source: 
>         totalAmount = totalAmount-ownerAmount;
>         owner.transfer(ownerAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         referrer.transfer(totalAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    etherATM
Line:        53
Source: 
>         owner.transfer(ownerAmount);
>         referrer.transfer(totalAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         collectedFees = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    etherATM
Line:        58
Source: 
>             uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;
>             persons[payoutIdx].etherAddress.transfer(transactionAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance -= transactionAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    etherATM
Line:        7
Source: 
> 
> contract etherATM {
> ^^^^^^^^^^^^^^^^^^^
>     struct Person {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.10;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    etherATM
Line:        20
Source: 
> 
>     address payable owner;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    etherATM
Line:        52
Source: 
>         totalAmount = totalAmount-ownerAmount;
>         owner.transfer(ownerAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         referrer.transfer(totalAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    etherATM
Line:        53
Source: 
>         owner.transfer(ownerAmount);
>         referrer.transfer(totalAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         collectedFees = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    etherATM
Line:        58
Source: 
>             uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;
>             persons[payoutIdx].etherAddress.transfer(transactionAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance -= transactionAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    etherATM
Line:        32
Source: 
>         if (msg.value < 0.05 ether) {
>             msg.sender.transfer(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    etherATM
Line:        37
Source: 
>         if (msg.value > 4000 ether) {
>             msg.sender.transfer(msg.value - 4000 ether);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             amount = 4000 ether;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    etherATM
Line:        52
Source: 
>         totalAmount = totalAmount-ownerAmount;
>         owner.transfer(ownerAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         referrer.transfer(totalAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    etherATM
Line:        53
Source: 
>         owner.transfer(ownerAmount);
>         referrer.transfer(totalAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         collectedFees = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    etherATM
Line:        58
Source: 
>             uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;
>             persons[payoutIdx].etherAddress.transfer(transactionAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance -= transactionAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    etherATM
Line:        58
Source: 
>             uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;
>             persons[payoutIdx].etherAddress.transfer(transactionAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance -= transactionAmount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    etherATM
Line:        17
Source: 
>     uint256 public payoutIdx = 0;
>     uint256 public collectedFees;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public balance = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    etherATM
Line:        32
Source: 
>         if (msg.value < 0.05 ether) {
>             msg.sender.transfer(msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    etherATM
Line:        37
Source: 
>         if (msg.value > 4000 ether) {
>             msg.sender.transfer(msg.value - 4000 ether);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             amount = 4000 ether;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    etherATM
Line:        52
Source: 
>         totalAmount = totalAmount-ownerAmount;
>         owner.transfer(ownerAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         referrer.transfer(totalAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    etherATM
Line:        53
Source: 
>         owner.transfer(ownerAmount);
>         referrer.transfer(totalAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         collectedFees = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    etherATM
Line:        58
Source: 
>             uint256 transactionAmount = (persons[payoutIdx].amount / 100) * 180;
>             persons[payoutIdx].etherAddress.transfer(transactionAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balance -= transactionAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    etherATM
Line:        44
Source: 
>         uint256 idx = persons.length;
>         persons.length += 1;
>         ^^^^^^^^^^^^^^^^^^^
>         persons[idx].etherAddress = msg.sender;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    etherATM
Line:        45
Source: 
>         persons.length += 1;
>         persons[idx].etherAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         persons[idx].amount = amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    etherATM
Line:        46
Source: 
>         persons[idx].etherAddress = msg.sender;
>         persons[idx].amount = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    etherATM
Line:        48
Source: 
> 
>         collectedFees += 0;
>         ^^^^^^^^^^^^^^^^^^
>         uint256 totalAmount = collectedFees + amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    etherATM
Line:        54
Source: 
>         referrer.transfer(totalAmount);
>         collectedFees = 0;
>         ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    etherATM
Line:        59
Source: 
>             persons[payoutIdx].etherAddress.transfer(transactionAmount);
>             balance -= transactionAmount;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             payoutIdx += 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    etherATM
Line:        60
Source: 
>             balance -= transactionAmount;
>             payoutIdx += 1;
>             ^^^^^^^^^^^^^^
>         }

[0m
