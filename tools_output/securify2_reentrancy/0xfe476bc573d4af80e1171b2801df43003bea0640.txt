pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        71
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        176
Source: 
>     
>     function setBreaker(bool _breaker) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        320
Source: 
>     
>     function balanceOf() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return IERC20(want).balanceOf(address(this))

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        108
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        81
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        176
Source: 
>     
>     function setBreaker(bool _breaker) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        232
Source: 
>     // Withdraw partial funds, normally used with a vault withdrawal
>     function withdraw(uint _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == controller, "!controller");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        326
Source: 
>     
>     function setGovernance(address _governance) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        331
Source: 
>     
>     function setController(address _controller) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        316
Source: 
>     
>     function normalize(uint _amount) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _amount.mul(10**IERC20(want).decimals()).div(10**IERC20(mUSD).decimals());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        183
Source: 
>         require(breaker == false, "!breaker");
>         uint _balance = IERC20(want).balanceOf(address(this));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _usdc = _balance.div(2);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        189
Source: 
>         uint _before = _balance;
>         MStable(mUSD).mint(want,_usdc);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = IERC20(want).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        190
Source: 
>         MStable(mUSD).mint(want,_usdc);
>         uint _after = IERC20(want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supply = supply.add(_before.sub(_after));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        193
Source: 
>         
>         uint _musd = IERC20(mUSD).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        195
Source: 
>         
>         uint _total = IERC20(balancer).totalSupply();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _balancerMUSD = IERC20(mUSD).balanceOf(balancer);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        196
Source: 
>         uint _total = IERC20(balancer).totalSupply();
>         uint _balancerMUSD = IERC20(mUSD).balanceOf(balancer);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _poolAmountMUSD = _musd.mul(_total).div(_balancerMUSD);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        199
Source: 
>         
>         uint _balancerUSDC = IERC20(want).balanceOf(balancer);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _poolAmountUSDC = _usdc.mul(_total).div(_balancerUSDC);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        215
Source: 
>         _maxAmountIn[1] = _usdc;
>         _before = IERC20(want).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Balancer(balancer).joinPool(_poolAmountOut, _maxAmountIn);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        216
Source: 
>         _before = IERC20(want).balanceOf(address(this));
>         Balancer(balancer).joinPool(_poolAmountOut, _maxAmountIn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _after = IERC20(want).balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        217
Source: 
>         Balancer(balancer).joinPool(_poolAmountOut, _maxAmountIn);
>         _after = IERC20(want).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supply = supply.add(_before.sub(_after));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        81
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        160
Source: 
>     
>     address constant public want = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant public mUSD = address(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        161
Source: 
>     address constant public want = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);
>     address constant public mUSD = address(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address constant public balancer = address(0x72Cd8f4504941Bf8c5a21d1Fd83A96499FD71d2C);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        162
Source: 
>     address constant public mUSD = address(0xe2f2a5C287993345a840Db3B0845fbC70f5935a5);
>     address constant public balancer = address(0x72Cd8f4504941Bf8c5a21d1Fd83A96499FD71d2C);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        183
Source: 
>         require(breaker == false, "!breaker");
>         uint _balance = IERC20(want).balanceOf(address(this));
>         ^^^^^^^^^^^^^
>         uint _usdc = _balance.div(2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        184
Source: 
>         uint _balance = IERC20(want).balanceOf(address(this));
>         uint _usdc = _balance.div(2);
>         ^^^^^^^^^^
>         IERC20(want).safeApprove(mUSD, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        188
Source: 
>         
>         uint _before = _balance;
>         ^^^^^^^^^^^^
>         MStable(mUSD).mint(want,_usdc);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        190
Source: 
>         MStable(mUSD).mint(want,_usdc);
>         uint _after = IERC20(want).balanceOf(address(this));
>         ^^^^^^^^^^^
>         supply = supply.add(_before.sub(_after));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        193
Source: 
>         
>         uint _musd = IERC20(mUSD).balanceOf(address(this));
>         ^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        195
Source: 
>         
>         uint _total = IERC20(balancer).totalSupply();
>         ^^^^^^^^^^^
>         uint _balancerMUSD = IERC20(mUSD).balanceOf(balancer);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        196
Source: 
>         uint _total = IERC20(balancer).totalSupply();
>         uint _balancerMUSD = IERC20(mUSD).balanceOf(balancer);
>         ^^^^^^^^^^^^^^^^^^
>         uint _poolAmountMUSD = _musd.mul(_total).div(_balancerMUSD);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        197
Source: 
>         uint _balancerMUSD = IERC20(mUSD).balanceOf(balancer);
>         uint _poolAmountMUSD = _musd.mul(_total).div(_balancerMUSD);
>         ^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        199
Source: 
>         
>         uint _balancerUSDC = IERC20(want).balanceOf(balancer);
>         ^^^^^^^^^^^^^^^^^^
>         uint _poolAmountUSDC = _usdc.mul(_total).div(_balancerUSDC);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        200
Source: 
>         uint _balancerUSDC = IERC20(want).balanceOf(balancer);
>         uint _poolAmountUSDC = _usdc.mul(_total).div(_balancerUSDC);
>         ^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        202
Source: 
>         
>         uint _poolAmountOut = _poolAmountMUSD;
>         ^^^^^^^^^^^^^^^^^^^
>         if (_poolAmountUSDC < _poolAmountOut) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        212
Source: 
>         
>         uint[] memory _maxAmountIn = new uint[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _maxAmountIn[0] = _musd;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        234
Source: 
>         require(msg.sender == controller, "!controller");
>         uint _balance = IERC20(want).balanceOf(address(this));
>         ^^^^^^^^^^^^^
>         if (_balance < _amount) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        236
Source: 
>         if (_balance < _amount) {
>             uint _withdrew = _withdrawSome(_amount.sub(_balance));
>             ^^^^^^^^^^^^^^
>             _amount = _withdrew.add(_balance);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        275
Source: 
>     function _withdrawAll() internal {
>         uint _bpt = IERC20(balancer).balanceOf(address(this));
>         ^^^^^^^^^
>         uint[] memory _minAmountOut = new uint[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        276
Source: 
>         uint _bpt = IERC20(balancer).balanceOf(address(this));
>         uint[] memory _minAmountOut = new uint[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _minAmountOut[0] = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        279
Source: 
>         _minAmountOut[1] = 0;
>         uint _before = IERC20(want).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         Balancer(balancer).exitPool(_bpt, _minAmountOut);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        281
Source: 
>         Balancer(balancer).exitPool(_bpt, _minAmountOut);
>         uint _after = IERC20(want).balanceOf(address(this));
>         ^^^^^^^^^^^
>         supply = supply.sub(_after.sub(_before));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        283
Source: 
>         supply = supply.sub(_after.sub(_before));
>         uint _musd = IERC20(mUSD).balanceOf(address(this));
>         ^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        291
Source: 
>     function _withdrawSome(uint256 _amount) internal returns (uint) {
>         uint _usdc = IERC20(want).balanceOf(balancer);
>         ^^^^^^^^^^
>         uint _bpt = IERC20(balancer).balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        292
Source: 
>         uint _usdc = IERC20(want).balanceOf(balancer);
>         uint _bpt = IERC20(balancer).balanceOf(address(this));
>         ^^^^^^^^^
>         uint _totalSupply = IERC20(balancer).totalSupply();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        293
Source: 
>         uint _bpt = IERC20(balancer).balanceOf(address(this));
>         uint _totalSupply = IERC20(balancer).totalSupply();
>         ^^^^^^^^^^^^^^^^^
>         uint _redeem = _totalSupply.mul(_amount.div(2)).div(_usdc);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        294
Source: 
>         uint _totalSupply = IERC20(balancer).totalSupply();
>         uint _redeem = _totalSupply.mul(_amount.div(2)).div(_usdc);
>         ^^^^^^^^^^^^
>         if (_redeem > _bpt) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        298
Source: 
>         }
>         uint[] memory _minAmountOut = new uint[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _minAmountOut[0] = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        301
Source: 
>         _minAmountOut[1] = 0;
>         uint _before = IERC20(want).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         uint _mBefore = IERC20(mUSD).balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        302
Source: 
>         uint _before = IERC20(want).balanceOf(address(this));
>         uint _mBefore = IERC20(mUSD).balanceOf(address(this));
>         ^^^^^^^^^^^^^
>         Balancer(balancer).exitPool(_redeem, _minAmountOut);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        304
Source: 
>         Balancer(balancer).exitPool(_redeem, _minAmountOut);
>         uint _mAfter = IERC20(mUSD).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         uint _musd = _mAfter.sub(_mBefore);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        305
Source: 
>         uint _mAfter = IERC20(mUSD).balanceOf(address(this));
>         uint _musd = _mAfter.sub(_mBefore);
>         ^^^^^^^^^^
>         uint _after = IERC20(want).balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        306
Source: 
>         uint _musd = _mAfter.sub(_mBefore);
>         uint _after = IERC20(want).balanceOf(address(this));
>         ^^^^^^^^^^^
>         uint _withdrew = _after.sub(_before);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        307
Source: 
>         uint _after = IERC20(want).balanceOf(address(this));
>         uint _withdrew = _after.sub(_before);
>         ^^^^^^^^^^^^^^
>         supply = supply.sub(_withdrew);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        193
Source: 
>         
>         uint _musd = IERC20(mUSD).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        195
Source: 
>         
>         uint _total = IERC20(balancer).totalSupply();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _balancerMUSD = IERC20(mUSD).balanceOf(balancer);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        99
Source: 
>     function safeApprove(IERC20 token, address spender, uint256 value) internal {
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        227
Source: 
>         require(address(_asset) != balancer, "!c");
>         balance = _asset.balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _asset.safeTransfer(controller, balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        234
Source: 
>         require(msg.sender == controller, "!controller");
>         uint _balance = IERC20(want).balanceOf(address(this));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_balance < _amount) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        292
Source: 
>         uint _usdc = IERC20(want).balanceOf(balancer);
>         uint _bpt = IERC20(balancer).balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _totalSupply = IERC20(balancer).totalSupply();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        317
Source: 
>     function normalize(uint _amount) public view returns (uint) {
>         return _amount.mul(10**IERC20(want).decimals()).div(10**IERC20(mUSD).decimals());
>                                ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        253
Source: 
>     function redeem() external {
>         MStable(mUSD).redeem(want, normalize(IERC20(mUSD).balanceOf(address(this))));
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        260
Source: 
>         _withdrawAll();
>         balance = IERC20(want).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        275
Source: 
>     function _withdrawAll() internal {
>         uint _bpt = IERC20(balancer).balanceOf(address(this));
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint[] memory _minAmountOut = new uint[](2);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        283
Source: 
>         supply = supply.sub(_after.sub(_before));
>         uint _musd = IERC20(mUSD).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        321
Source: 
>     function balanceOf() public view returns (uint) {
>         return IERC20(want).balanceOf(address(this))
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 .add(supply);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        183
Source: 
>         require(breaker == false, "!breaker");
>         uint _balance = IERC20(want).balanceOf(address(this));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _usdc = _balance.div(2);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        189
Source: 
>         uint _before = _balance;
>         MStable(mUSD).mint(want,_usdc);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = IERC20(want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        190
Source: 
>         MStable(mUSD).mint(want,_usdc);
>         uint _after = IERC20(want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supply = supply.add(_before.sub(_after));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        196
Source: 
>         uint _total = IERC20(balancer).totalSupply();
>         uint _balancerMUSD = IERC20(mUSD).balanceOf(balancer);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _poolAmountMUSD = _musd.mul(_total).div(_balancerMUSD);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        199
Source: 
>         
>         uint _balancerUSDC = IERC20(want).balanceOf(balancer);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _poolAmountUSDC = _usdc.mul(_total).div(_balancerUSDC);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        215
Source: 
>         _maxAmountIn[1] = _usdc;
>         _before = IERC20(want).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Balancer(balancer).joinPool(_poolAmountOut, _maxAmountIn);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        216
Source: 
>         _before = IERC20(want).balanceOf(address(this));
>         Balancer(balancer).joinPool(_poolAmountOut, _maxAmountIn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _after = IERC20(want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        217
Source: 
>         Balancer(balancer).joinPool(_poolAmountOut, _maxAmountIn);
>         _after = IERC20(want).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supply = supply.add(_before.sub(_after));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        291
Source: 
>     function _withdrawSome(uint256 _amount) internal returns (uint) {
>         uint _usdc = IERC20(want).balanceOf(balancer);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _bpt = IERC20(balancer).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        293
Source: 
>         uint _bpt = IERC20(balancer).balanceOf(address(this));
>         uint _totalSupply = IERC20(balancer).totalSupply();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _redeem = _totalSupply.mul(_amount.div(2)).div(_usdc);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        301
Source: 
>         _minAmountOut[1] = 0;
>         uint _before = IERC20(want).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _mBefore = IERC20(mUSD).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        302
Source: 
>         uint _before = IERC20(want).balanceOf(address(this));
>         uint _mBefore = IERC20(mUSD).balanceOf(address(this));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Balancer(balancer).exitPool(_redeem, _minAmountOut);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        303
Source: 
>         uint _mBefore = IERC20(mUSD).balanceOf(address(this));
>         Balancer(balancer).exitPool(_redeem, _minAmountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _mAfter = IERC20(mUSD).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        304
Source: 
>         Balancer(balancer).exitPool(_redeem, _minAmountOut);
>         uint _mAfter = IERC20(mUSD).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _musd = _mAfter.sub(_mBefore);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        306
Source: 
>         uint _musd = _mAfter.sub(_mBefore);
>         uint _after = IERC20(want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _withdrew = _after.sub(_before);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        309
Source: 
>         supply = supply.sub(_withdrew);
>         _before = IERC20(want).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supply = supply.sub(normalize(_musd));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        311
Source: 
>         supply = supply.sub(normalize(_musd));
>         MStable(mUSD).redeem(want, normalize(_musd));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _after = IERC20(want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        312
Source: 
>         MStable(mUSD).redeem(want, normalize(_musd));
>         _after = IERC20(want).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _withdrew.add(_after.sub(_before));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        317
Source: 
>     function normalize(uint _amount) public view returns (uint) {
>         return _amount.mul(10**IERC20(want).decimals()).div(10**IERC20(mUSD).decimals());
>                                                                 ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        253
Source: 
>     function redeem() external {
>         MStable(mUSD).redeem(want, normalize(IERC20(mUSD).balanceOf(address(this))));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        279
Source: 
>         _minAmountOut[1] = 0;
>         uint _before = IERC20(want).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Balancer(balancer).exitPool(_bpt, _minAmountOut);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        280
Source: 
>         uint _before = IERC20(want).balanceOf(address(this));
>         Balancer(balancer).exitPool(_bpt, _minAmountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = IERC20(want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        281
Source: 
>         Balancer(balancer).exitPool(_bpt, _minAmountOut);
>         uint _after = IERC20(want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supply = supply.sub(_after.sub(_before));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrategyBalancerMTA
Line:        287
Source: 
>         supply = supply.sub(normalize(_musd));
>         MStable(mUSD).redeem(want, normalize(_musd));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        72
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        191
Source: 
>         uint _after = IERC20(want).balanceOf(address(this));
>         supply = supply.add(_before.sub(_after));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StrategyBalancerMTA
Line:        218
Source: 
>         _after = IERC20(want).balanceOf(address(this));
>         supply = supply.add(_before.sub(_after));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        81
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
