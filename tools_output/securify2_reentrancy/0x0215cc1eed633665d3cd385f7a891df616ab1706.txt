Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        267
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != accountHash && codehash != 0x0);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ECDSA
Line:        417
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(signature, 0x20))

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DPRBridge
Line:        661
Source: 
> 
>         function setTransfer(uint amount, bytes32 substrateAddress) public  
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             updateUserDepositInfo(msg.sender, amount) 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DPRBridge
Line:        679
Source: 
>         */
>         function revertTransfer(bytes32 messageID) public pendingMessage(messageID) {
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Message storage message = messages[messageID];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DPRBridge
Line:        696
Source: 
>         */
>         function withdrawTransfer(bytes32  substrateSender, address recipient, uint availableAmount,bytes memory sig)  public
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateContractWithdrawInfo(availableAmount)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DPRBridge
Line:        714
Source: 
>         */
>         function confirmWithdrawTransfer(bytes32 messageID, bytes memory signature) public withdrawMessage(messageID) 
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //onlyManyValidatorsConfirm(messageID, msg.sender) 

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        368
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        303
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DPRBridge
Line:        638
Source: 
> 
>         function changeSubmiter(address _newSubmiter)   external onlyOwner{
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             submiter = _newSubmiter;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DPRBridge
Line:        641
Source: 
>         }
>         function setUserDailyMax(uint256 max_amount) external onlyOwner returns(bool){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             user_daily_max_deposit_and_withdraw_amount = max_amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DPRBridge
Line:        651
Source: 
> 
>         function setUserMin(uint256 min_amount) external onlyOwner returns(bool){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             user_min_deposit_and_withdraw_amount = min_amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DPRBridge
Line:        656
Source: 
> 
>          function setUserMax(uint256 max_amount) external onlyOwner returns(bool){
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             user_max_deposit_and_withdraw_amount = max_amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DPRBridge
Line:        714
Source: 
>         */
>         function confirmWithdrawTransfer(bytes32 messageID, bytes memory signature) public withdrawMessage(messageID) 
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //onlyManyValidatorsConfirm(messageID, msg.sender) 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DPRBridge
Line:        730
Source: 
>         }
>         function transferOwnerShip(address _newOwner) onlyOwner external{
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DPRBridge
Line:        733
Source: 
>         }
>         function withdrawAllTokens(IERC20 _token, uint256 amount) external onlyOwner{
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _token.safeTransfer(owner, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DPRBridge
Line:        646
Source: 
> 
>         function setDailyMax(uint256 max_amount) external onlyOwner returns(bool){
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             daily_max_deposit_and_withdraw_amount = max_amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DPRBridge
Line:        661
Source: 
> 
>         function setTransfer(uint amount, bytes32 substrateAddress) public  
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             updateUserDepositInfo(msg.sender, amount) 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DPRBridge
Line:        696
Source: 
>         */
>         function withdrawTransfer(bytes32  substrateSender, address recipient, uint availableAmount,bytes memory sig)  public
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateContractWithdrawInfo(availableAmount)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DPRBridge
Line:        664
Source: 
>             updateContractDepositInfo(amount){
>             require(token.allowance(msg.sender, address(this)) >= amount, "contract is not allowed to this amount");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DPRBridge
Line:        666
Source: 
>             
>             token.transferFrom(msg.sender, address(this), amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        303
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        496
Source: 
>         mapping(bytes32 => Message) public messages;
>         mapping(address => DepositInfo) public user_deposit_info;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(address => WithdrawInfo) public user_withdraw_info;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        497
Source: 
>         mapping(address => DepositInfo) public user_deposit_info;
>         mapping(address => WithdrawInfo) public user_withdraw_info;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DepositInfo public contract_deposit_info;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        498
Source: 
>         mapping(address => WithdrawInfo) public user_withdraw_info;
>         DepositInfo public contract_deposit_info;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WithdrawInfo public contract_withdraw_info;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        499
Source: 
>         DepositInfo public contract_deposit_info;
>         WithdrawInfo public contract_withdraw_info;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address public submiter;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        502
Source: 
>         address public owner;
>         uint256 private user_daily_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 private daily_max_deposit_and_withdraw_amount = 500000 * 10 ** 18; //init value

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        503
Source: 
>         uint256 private user_daily_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value
>         uint256 private daily_max_deposit_and_withdraw_amount = 500000 * 10 ** 18; //init value
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 private user_min_deposit_and_withdraw_amount = 1000 * 10 ** 18; //init value

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        504
Source: 
>         uint256 private daily_max_deposit_and_withdraw_amount = 500000 * 10 ** 18; //init value
>         uint256 private user_min_deposit_and_withdraw_amount = 1000 * 10 ** 18; //init value
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 private user_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        505
Source: 
>         uint256 private user_min_deposit_and_withdraw_amount = 1000 * 10 ** 18; //init value
>         uint256 private user_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        549
Source: 
>             DepositInfo storage di = user_deposit_info[user];
>             uint256 last_deposit_time = di.last_deposit_time;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(last_deposit_time == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        555
Source: 
>             }else{
>                 uint256 pass_time = block.timestamp.sub(last_deposit_time);
>                    ^^^^^^^^^^^^^^^^^
>                 if(pass_time <= 1 days){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        557
Source: 
>                 if(pass_time <= 1 days){
>                     uint256 total_deposit_amount = di.deposit_amount.add(amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(total_deposit_amount <= user_daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed the daily limit");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        572
Source: 
>             DepositInfo storage cdi = contract_deposit_info;
>             uint256 last_deposit_time = cdi.last_deposit_time;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(last_deposit_time == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        577
Source: 
>             }else{
>                 uint256 pass_time = block.timestamp.sub(last_deposit_time);
>                    ^^^^^^^^^^^^^^^^^
>                 if(pass_time <= 1 days){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        579
Source: 
>                 if(pass_time <= 1 days){
>                     uint256 total_deposit_amount = cdi.deposit_amount.add(amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(total_deposit_amount <= daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed contract deposit limit");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        594
Source: 
>             WithdrawInfo storage cdi = contract_withdraw_info;
>             uint256 last_withdraw_time = cdi.last_withdraw_time;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(last_withdraw_time == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        599
Source: 
>             }else{
>                 uint256 pass_time = block.timestamp.sub(last_withdraw_time);
>                    ^^^^^^^^^^^^^^^^^
>                 if(pass_time <= 1 days){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        601
Source: 
>                 if(pass_time <= 1 days){
>                     uint256 total_withdraw_amount = cdi.withdraw_amount.add(amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(total_withdraw_amount <= daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed contract deposit limit");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        617
Source: 
>             WithdrawInfo storage ui = user_withdraw_info[user];
>             uint256 last_withdraw_time = ui.last_withdraw_time;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(last_withdraw_time == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        623
Source: 
>             }else{
>                 uint256 pass_time = block.timestamp.sub(last_withdraw_time);
>                    ^^^^^^^^^^^^^^^^^
>                 if(pass_time <= 1 days){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        625
Source: 
>                 if(pass_time <= 1 days){
>                     uint256 total_withdraw_amount = ui.withdraw_amount.add(amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(total_withdraw_amount <= user_daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed the daily limit");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        718
Source: 
>             bytes32 data = keccak256(abi.encodePacked(messageID));
>             bytes32 sign_data = keccak256(abi.encodePacked(SIGN_HASH_PREFIX, data));
>                ^^^^^^^^^^^^^^^^^
>             address recover_address = ECDSA.recover(sign_data, signature);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        719
Source: 
>             bytes32 sign_data = keccak256(abi.encodePacked(SIGN_HASH_PREFIX, data));
>             address recover_address = ECDSA.recover(sign_data, signature);
>                ^^^^^^^^^^^^^^^^^^^^^^^
>             require(recover_address == submiter, "DPRBridge: Address not match");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DPRBridge
Line:        722
Source: 
>             Message storage message = messages[messageID];
>             uint256 withdraw_amount = message.availableAmount;
>                ^^^^^^^^^^^^^^^^^^^^^^^
>             //setWithdrawData(message.spender, withdraw_amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        463
Source: 
> 
>         IERC20 public token;
>            ^^^^^^^^^^^^^^^^^
>         using SafeERC20 for IERC20;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        494
Source: 
> 
>         bytes constant internal SIGN_HASH_PREFIX = "\x19Ethereum Signed Message:\n32";
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(bytes32 => Message) public messages;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        495
Source: 
>         bytes constant internal SIGN_HASH_PREFIX = "\x19Ethereum Signed Message:\n32";
>         mapping(bytes32 => Message) public messages;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(address => DepositInfo) public user_deposit_info;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        496
Source: 
>         mapping(bytes32 => Message) public messages;
>         mapping(address => DepositInfo) public user_deposit_info;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(address => WithdrawInfo) public user_withdraw_info;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        497
Source: 
>         mapping(address => DepositInfo) public user_deposit_info;
>         mapping(address => WithdrawInfo) public user_withdraw_info;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DepositInfo public contract_deposit_info;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        498
Source: 
>         mapping(address => WithdrawInfo) public user_withdraw_info;
>         DepositInfo public contract_deposit_info;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         WithdrawInfo public contract_withdraw_info;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        499
Source: 
>         DepositInfo public contract_deposit_info;
>         WithdrawInfo public contract_withdraw_info;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address public submiter;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        500
Source: 
>         WithdrawInfo public contract_withdraw_info;
>         address public submiter;
>            ^^^^^^^^^^^^^^^^^^^^^
>         address public owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        501
Source: 
>         address public submiter;
>         address public owner;
>            ^^^^^^^^^^^^^^^^^^
>         uint256 private user_daily_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        502
Source: 
>         address public owner;
>         uint256 private user_daily_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 private daily_max_deposit_and_withdraw_amount = 500000 * 10 ** 18; //init value

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        503
Source: 
>         uint256 private user_daily_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value
>         uint256 private daily_max_deposit_and_withdraw_amount = 500000 * 10 ** 18; //init value
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 private user_min_deposit_and_withdraw_amount = 1000 * 10 ** 18; //init value

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        504
Source: 
>         uint256 private daily_max_deposit_and_withdraw_amount = 500000 * 10 ** 18; //init value
>         uint256 private user_min_deposit_and_withdraw_amount = 1000 * 10 ** 18; //init value
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 private user_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DPRBridge
Line:        505
Source: 
>         uint256 private user_min_deposit_and_withdraw_amount = 1000 * 10 ** 18; //init value
>         uint256 private user_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        523
Source: 
>         */
>         modifier validMessage(bytes32 messageID, address spender, bytes32 substrateAddress, uint availableAmount) {
>                                  ^^^^^^^^^^^^^^^^^
>             require((messages[messageID].spender == spender)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        523
Source: 
>         */
>         modifier validMessage(bytes32 messageID, address spender, bytes32 substrateAddress, uint availableAmount) {
>                                                     ^^^^^^^^^^^^^^^
>             require((messages[messageID].spender == spender)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        523
Source: 
>         */
>         modifier validMessage(bytes32 messageID, address spender, bytes32 substrateAddress, uint availableAmount) {
>                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^
>             require((messages[messageID].spender == spender)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        523
Source: 
>         */
>         modifier validMessage(bytes32 messageID, address spender, bytes32 substrateAddress, uint availableAmount) {
>                                                                                                ^^^^^^^^^^^^^^^^^^^^
>             require((messages[messageID].spender == spender)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        531
Source: 
> 
>         modifier pendingMessage(bytes32 messageID) {
>                                    ^^^^^^^^^^^^^^^^^
>             require(messages[messageID].status ==  Status.PENDING, "DPRBridge: Message is not pending");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        541
Source: 
> 
>         modifier withdrawMessage(bytes32 messageID) {
>                                     ^^^^^^^^^^^^^^^^^
>             require(messages[messageID].status ==  Status.WITHDRAW, "Message is not withdrawed");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        546
Source: 
> 
>         modifier  updateUserDepositInfo(address user, uint256 amount) {
>                                            ^^^^^^^^^^^^
>             require(amount >= user_min_deposit_and_withdraw_amount && amount <= user_max_deposit_and_withdraw_amount, "DPRBridge: Not in the range");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        546
Source: 
> 
>         modifier  updateUserDepositInfo(address user, uint256 amount) {
>                                                          ^^^^^^^^^^^^^^
>             require(amount >= user_min_deposit_and_withdraw_amount && amount <= user_max_deposit_and_withdraw_amount, "DPRBridge: Not in the range");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        548
Source: 
>             require(amount >= user_min_deposit_and_withdraw_amount && amount <= user_max_deposit_and_withdraw_amount, "DPRBridge: Not in the range");
>             DepositInfo storage di = user_deposit_info[user];
>                ^^^^^^^^^^^^^^^^^^^^^^
>             uint256 last_deposit_time = di.last_deposit_time;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        549
Source: 
>             DepositInfo storage di = user_deposit_info[user];
>             uint256 last_deposit_time = di.last_deposit_time;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(last_deposit_time == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        555
Source: 
>             }else{
>                 uint256 pass_time = block.timestamp.sub(last_deposit_time);
>                    ^^^^^^^^^^^^^^^^^
>                 if(pass_time <= 1 days){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        557
Source: 
>                 if(pass_time <= 1 days){
>                     uint256 total_deposit_amount = di.deposit_amount.add(amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(total_deposit_amount <= user_daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed the daily limit");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        570
Source: 
> 
>         modifier updateContractDepositInfo(uint256 amount){
>                                               ^^^^^^^^^^^^^
>             DepositInfo storage cdi = contract_deposit_info;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        571
Source: 
>         modifier updateContractDepositInfo(uint256 amount){
>             DepositInfo storage cdi = contract_deposit_info;
>                ^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 last_deposit_time = cdi.last_deposit_time;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        572
Source: 
>             DepositInfo storage cdi = contract_deposit_info;
>             uint256 last_deposit_time = cdi.last_deposit_time;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(last_deposit_time == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        577
Source: 
>             }else{
>                 uint256 pass_time = block.timestamp.sub(last_deposit_time);
>                    ^^^^^^^^^^^^^^^^^
>                 if(pass_time <= 1 days){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        579
Source: 
>                 if(pass_time <= 1 days){
>                     uint256 total_deposit_amount = cdi.deposit_amount.add(amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(total_deposit_amount <= daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed contract deposit limit");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        592
Source: 
> 
>         modifier updateContractWithdrawInfo(uint256 amount){
>                                                ^^^^^^^^^^^^^
>             WithdrawInfo storage cdi = contract_withdraw_info;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        593
Source: 
>         modifier updateContractWithdrawInfo(uint256 amount){
>             WithdrawInfo storage cdi = contract_withdraw_info;
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 last_withdraw_time = cdi.last_withdraw_time;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        594
Source: 
>             WithdrawInfo storage cdi = contract_withdraw_info;
>             uint256 last_withdraw_time = cdi.last_withdraw_time;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(last_withdraw_time == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        599
Source: 
>             }else{
>                 uint256 pass_time = block.timestamp.sub(last_withdraw_time);
>                    ^^^^^^^^^^^^^^^^^
>                 if(pass_time <= 1 days){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        601
Source: 
>                 if(pass_time <= 1 days){
>                     uint256 total_withdraw_amount = cdi.withdraw_amount.add(amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(total_withdraw_amount <= daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed contract deposit limit");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        614
Source: 
> 
>         modifier  updateUserWithdrawInfo(address user, uint256 amount) {
>                                             ^^^^^^^^^^^^
>             require(amount >= user_min_deposit_and_withdraw_amount && amount <= user_max_deposit_and_withdraw_amount, "DPRBridge: Not in the range");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        614
Source: 
> 
>         modifier  updateUserWithdrawInfo(address user, uint256 amount) {
>                                                           ^^^^^^^^^^^^^^
>             require(amount >= user_min_deposit_and_withdraw_amount && amount <= user_max_deposit_and_withdraw_amount, "DPRBridge: Not in the range");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        616
Source: 
>             require(amount >= user_min_deposit_and_withdraw_amount && amount <= user_max_deposit_and_withdraw_amount, "DPRBridge: Not in the range");
>             WithdrawInfo storage ui = user_withdraw_info[user];
>                ^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 last_withdraw_time = ui.last_withdraw_time;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        617
Source: 
>             WithdrawInfo storage ui = user_withdraw_info[user];
>             uint256 last_withdraw_time = ui.last_withdraw_time;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(last_withdraw_time == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        623
Source: 
>             }else{
>                 uint256 pass_time = block.timestamp.sub(last_withdraw_time);
>                    ^^^^^^^^^^^^^^^^^
>                 if(pass_time <= 1 days){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DPRBridge
Line:        625
Source: 
>                 if(pass_time <= 1 days){
>                     uint256 total_withdraw_amount = ui.withdraw_amount.add(amount);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     require(total_withdraw_amount <= user_daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed the daily limit");

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DPRBridge
Line:        503
Source: 
>         uint256 private user_daily_max_deposit_and_withdraw_amount = 20000 * 10 ** 18; //init value
>         uint256 private daily_max_deposit_and_withdraw_amount = 500000 * 10 ** 18; //init value
>                                                                    ^^^^^^
>         uint256 private user_min_deposit_and_withdraw_amount = 1000 * 10 ** 18; //init value

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DPRBridge
Line:        664
Source: 
>             updateContractDepositInfo(amount){
>             require(token.allowance(msg.sender, address(this)) >= amount, "contract is not allowed to this amount");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DPRBridge
Line:        700
Source: 
>             //require(msg.value == fee, "DPRBridge: Fee not match");
>             require(token.balanceOf(address(this)) >= availableAmount, "DPRBridge: Balance is not enough");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             bytes32 messageID = keccak256(abi.encodePacked(substrateSender, recipient, availableAmount, block.timestamp));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DPRBridge
Line:        666
Source: 
>             
>             token.transferFrom(msg.sender, address(this), amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DPRBridge
Line:        687
Source: 
>             cdi.deposit_amount.sub(message.availableAmount);
>             token.transfer(msg.sender, message.availableAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        268
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != accountHash && codehash != 0x0);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    ECDSA
Line:        432
Source: 
>         // these malleable signatures as well.
>         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
>                        ^
>             return address(0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DPRBridge
Line:        724
Source: 
>             //setWithdrawData(message.spender, withdraw_amount);
>             message.status = Status.CONFIRMED_WITHDRAW;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             token.safeTransfer(message.spender, withdraw_amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DPRBridge
Line:        596
Source: 
>             if(last_withdraw_time == 0){
>                 cdi.last_withdraw_time = block.timestamp;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 cdi.withdraw_amount += amount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DPRBridge
Line:        597
Source: 
>                 cdi.last_withdraw_time = block.timestamp;
>                 cdi.withdraw_amount += amount;
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DPRBridge
Line:        707
Source: 
>              Message  memory message = Message(messageID, recipient, substrateSender, availableAmount, Status.WITHDRAW);
>              messages[messageID] = message;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>              emit WithdrawMessage(messageID,msg.sender , substrateSender, availableAmount, sig);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DPRBridge
Line:        603
Source: 
>                     require(total_withdraw_amount <= daily_max_deposit_and_withdraw_amount, "DPRBridge: Execeed contract deposit limit");
>                     cdi.withdraw_amount = total_withdraw_amount;
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }else{

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DPRBridge
Line:        605
Source: 
>                 }else{
>                     cdi.withdraw_amount = amount;
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     cdi.last_withdraw_time = block.timestamp;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DPRBridge
Line:        606
Source: 
>                     cdi.withdraw_amount = amount;
>                     cdi.last_withdraw_time = block.timestamp;
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DPRBridge
Line:        666
Source: 
>             
>             token.transferFrom(msg.sender, address(this), amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DPRBridge
Line:        687
Source: 
>             cdi.deposit_amount.sub(message.availableAmount);
>             token.transfer(msg.sender, message.availableAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        303
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        334
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        341
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        346
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
