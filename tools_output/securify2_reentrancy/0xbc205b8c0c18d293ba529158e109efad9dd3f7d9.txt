[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        269
Source: 
>      */
>     bool internal _notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        274
Source: 
>      */
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        279
Source: 
>      */
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        284
Source: 
>      */
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        300
Source: 
>      */
>     address payable public admin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        305
Source: 
>      */
>     address payable public pendingAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        310
Source: 
>      */
>     ComptrollerInterface public comptroller;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        315
Source: 
>      */
>     InterestRateModel public interestRateModel;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        320
Source: 
>      */
>     uint256 internal initialExchangeRateMantissa;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        325
Source: 
>      */
>     uint256 public reserveFactorMantissa;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        330
Source: 
>      */
>     uint256 public accrualBlockNumber;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        335
Source: 
>      */
>     uint256 public borrowIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        340
Source: 
>      */
>     uint256 public totalBorrows;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        345
Source: 
>      */
>     uint256 public totalReserves;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CTokenStorage
Line:        350
Source: 
>      */
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        793
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        819
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        828
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        819
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        828
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TALEVotingBonus
Line:        1144
Source: 
>     /// @notice Get current Compound DAI APY
>     function getAPY() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // TODO: check calculation with compound discord team

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TALEVotingBonus
Line:        1150
Source: 
>     /// @notice Get user's DAI staking and reward info
>     function getDaiStakeInfo(address user)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TALEVotingBonus
Line:        1188
Source: 
>     /// @notice Get token balance by user
>     function getTokenBalance(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return token.balanceOf(user);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TALEVotingBonus
Line:        1193
Source: 
>     /// @notice Get total amount of DAI available in Compound (+ interest)
>     function getCompoundDaiBalance() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (, uint256 balance, , uint256 exchangeRate) = cDai.getAccountSnapshot(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        828
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1045
Source: 
>      */
>     function stakeDAI(uint256 daiAmount) external onlyActive {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1150
Source: 
>     /// @notice Get user's DAI staking and reward info
>     function getDaiStakeInfo(address user)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1188
Source: 
>     /// @notice Get token balance by user
>     function getTokenBalance(address user) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return token.balanceOf(user);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1239
Source: 
>     /// @notice Set new token reward amount
>     function setTokenRewardAmount(uint256 _value) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenRewardAmount = _value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1244
Source: 
>     /// @notice Set new min dai staking amount
>     function setMinDAIStakingAmount(uint256 _value) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minDAIStakingAmount = _value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1249
Source: 
>     /// @notice Set new min dai staking time
>     function setMinDAIStakingTime(uint256 _value) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minDAIStakingTime = _value;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1259
Source: 
>     /// @notice Set new cDAI token address
>     function setCDaiTokenAddress(address _cDai) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         cDai = CTokenInterface(_cDai);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TALEVotingBonus
Line:        974
Source: 
>      */
>     function calculateRewards(address user)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1254
Source: 
>     /// @notice Set new DAI token address
>     function setDaiTokenAddress(address _dai) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dai = IERC20(_dai);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1264
Source: 
>     /// @notice Set new token address
>     function setTokenAddress(address _token) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token = IERC20(_token);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TALEVotingBonus
Line:        1031
Source: 
>         require(
>             token.transfer(msg.sender, availableRewards),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "transfer failed in transfer of rewards"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TALEVotingBonus
Line:        1065
Source: 
>         require(
>             dai.transferFrom(msg.sender, address(this), daiAmount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "failed in transferFrom of dai Tokens"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TALEVotingBonus
Line:        1071
Source: 
>         require(
>             dai.approve(address(cDai), daiAmount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "failed in approve of dai Tokens"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TALEVotingBonus
Line:        1082
Source: 
>         require(
>             token.transfer(msg.sender, tokenRewardsToUser),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "failed sending token rewards"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TALEVotingBonus
Line:        1089
Source: 
>         // Supply to Compound, expect no errors
>         assert(cDai.mint(daiAmount) == 0);
>                ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TALEVotingBonus
Line:        1114
Source: 
>         require(
>             cDai.redeemUnderlying(amountToRedeem) == 0,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Cannot redeem from compound"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TALEVotingBonus
Line:        1118
Source: 
>         require(
>             dai.transfer(msg.sender, amountToRedeem),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "transfer failed in withdraw"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TALEVotingBonus
Line:        1124
Source: 
>         require(
>             token.transfer(msg.sender, availableRewards),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "transfer failed in transfer of rewards"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1025
Source: 
> 
>         (uint256 availableRewards, , ) = calculateRewards(msg.sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1054
Source: 
>         // Accumulate previous rewards
>         (uint256 availableRewards, , ) = calculateRewards(msg.sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>         _stake.accumulatedRewards = _stake.accumulatedRewards.add(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1108
Source: 
> 
>         (uint256 availableRewards, , ) = calculateRewards(msg.sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1194
Source: 
>     function getCompoundDaiBalance() public view returns (uint256) {
>         (, uint256 balance, , uint256 exchangeRate) = cDai.getAccountSnapshot(
>            ^^^^^^^^^^^^^^^
>             address(this)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CTokenStorage
Line:        290
Source: 
> 
>     uint256 internal constant borrowRateMaxMantissa = 0.0005e16;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CTokenStorage
Line:        295
Source: 
>      */
>     uint256 internal constant reserveFactorMaxMantissa = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CTokenInterface
Line:        382
Source: 
>      */
>     bool public constant isCToken = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        983
Source: 
>     {
>         DaiStake storage _stake = daiStakes[user];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1023
Source: 
>     function claimRewards() external nonReentrant onlyActive {
>         DaiStake storage _stake = daiStakes[msg.sender];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1025
Source: 
> 
>         (uint256 availableRewards, , ) = calculateRewards(msg.sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1051
Source: 
> 
>         DaiStake storage _stake = daiStakes[msg.sender];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1054
Source: 
>         // Accumulate previous rewards
>         (uint256 availableRewards, , ) = calculateRewards(msg.sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
>         _stake.accumulatedRewards = _stake.accumulatedRewards.add(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1101
Source: 
>     function unstakeDAI() external nonReentrant onlyActive {
>         DaiStake storage _stake = daiStakes[msg.sender];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1108
Source: 
> 
>         (uint256 availableRewards, , ) = calculateRewards(msg.sender);
>          ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1167
Source: 
>     {
>         DaiStake storage _stake = daiStakes[user];
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1194
Source: 
>     function getCompoundDaiBalance() public view returns (uint256) {
>         (, uint256 balance, , uint256 exchangeRate) = cDai.getAccountSnapshot(
>            ^^^^^^^^^^^^^^^
>             address(this)

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        97
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        218
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        261
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        847
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1031
Source: 
>         require(
>             token.transfer(msg.sender, availableRewards),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "transfer failed in transfer of rewards"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1065
Source: 
>         require(
>             dai.transferFrom(msg.sender, address(this), daiAmount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "failed in transferFrom of dai Tokens"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1071
Source: 
>         require(
>             dai.approve(address(cDai), daiAmount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "failed in approve of dai Tokens"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1082
Source: 
>         require(
>             token.transfer(msg.sender, tokenRewardsToUser),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "failed sending token rewards"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1089
Source: 
>         // Supply to Compound, expect no errors
>         assert(cDai.mint(daiAmount) == 0);
>                ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1114
Source: 
>         require(
>             cDai.redeemUnderlying(amountToRedeem) == 0,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Cannot redeem from compound"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1118
Source: 
>         require(
>             dai.transfer(msg.sender, amountToRedeem),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "transfer failed in withdraw"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1124
Source: 
>         require(
>             token.transfer(msg.sender, availableRewards),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "transfer failed in transfer of rewards"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1146
Source: 
>         // TODO: check calculation with compound discord team
>         return cDai.supplyRatePerBlock().mul(4).mul(60).mul(24).mul(365);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1194
Source: 
>     function getCompoundDaiBalance() public view returns (uint256) {
>         (, uint256 balance, , uint256 exchangeRate) = cDai.getAccountSnapshot(
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^
>             address(this)

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1217
Source: 
>         require(
>             token.transfer(owner(), balance),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Error withdrawing tokens from contract"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1226
Source: 
>         require(
>             dai.transfer(owner(), balance),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Error withdrawing tokens from contract"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1233
Source: 
>     function claimCompoundDAI() external onlyOwner {
>         uint256 balance = cDai.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Redeem DAI from compound

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1235
Source: 
>         // Redeem DAI from compound
>         require(cDai.redeem(balance) == 0, "Cannot redeem from compound");
>                 ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1189
Source: 
>     function getTokenBalance(address user) public view returns (uint256) {
>         return token.balanceOf(user);
>                ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1215
Source: 
>     function withdrawTokens() external onlyOwner {
>         uint256 balance = token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TALEVotingBonus
Line:        1224
Source: 
>     function withdrawDAI() external onlyOwner {
>         uint256 balance = dai.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TALEVotingBonus
Line:        942
Source: 
>     uint256 public tokenRewardAmount;
>     uint256 public totalDaiStaked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        269
Source: 
>      */
>     bool internal _notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        274
Source: 
>      */
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        279
Source: 
>      */
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        284
Source: 
>      */
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        300
Source: 
>      */
>     address payable public admin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        305
Source: 
>      */
>     address payable public pendingAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        310
Source: 
>      */
>     ComptrollerInterface public comptroller;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        315
Source: 
>      */
>     InterestRateModel public interestRateModel;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        320
Source: 
>      */
>     uint256 internal initialExchangeRateMantissa;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        325
Source: 
>      */
>     uint256 public reserveFactorMantissa;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        330
Source: 
>      */
>     uint256 public accrualBlockNumber;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        335
Source: 
>      */
>     uint256 public borrowIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        340
Source: 
>      */
>     uint256 public totalBorrows;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        345
Source: 
>      */
>     uint256 public totalReserves;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CTokenStorage
Line:        350
Source: 
>      */
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        893
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _notEntered = false;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1035
Source: 
> 
>         _stake.amountRewarded = _stake.amountRewarded.add(availableRewards);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        899
Source: 
>         // https://eips.ethereum.org/EIPS/eip-2200)
>         _notEntered = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1055
Source: 
>         (uint256 availableRewards, , ) = calculateRewards(msg.sender);
>         _stake.accumulatedRewards = _stake.accumulatedRewards.add(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             availableRewards

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1060
Source: 
>         // Add new Dai tokens staked and reset stake timestamp
>         _stake.tokenAmount = _stake.tokenAmount.add(daiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _stake.stakedTimestamp = now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1061
Source: 
>         _stake.tokenAmount = _stake.tokenAmount.add(daiAmount);
>         _stake.stakedTimestamp = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1086
Source: 
> 
>         _stake.amountRewarded = _stake.amountRewarded.add(tokenRewardsToUser);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1091
Source: 
> 
>         totalDaiStaked = totalDaiStaked.add(daiAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        893
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _notEntered = false;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1130
Source: 
> 
>         totalDaiStaked = totalDaiStaked.sub(amountToRedeem);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1133
Source: 
>         // Reset amounts in stake
>         _stake.amountRewarded = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         _stake.accumulatedRewards = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1134
Source: 
>         _stake.amountRewarded = 0;
>         _stake.accumulatedRewards = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _stake.tokenAmount = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1135
Source: 
>         _stake.accumulatedRewards = 0;
>         _stake.tokenAmount = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         _stake.unstakedTimestamp = now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TALEVotingBonus
Line:        1136
Source: 
>         _stake.tokenAmount = 0;
>         _stake.unstakedTimestamp = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        899
Source: 
>         // https://eips.ethereum.org/EIPS/eip-2200)
>         _notEntered = true;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        269
Source: 
>      */
>     bool internal _notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        274
Source: 
>      */
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        279
Source: 
>      */
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        284
Source: 
>      */
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        290
Source: 
> 
>     uint256 internal constant borrowRateMaxMantissa = 0.0005e16;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        295
Source: 
>      */
>     uint256 internal constant reserveFactorMaxMantissa = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        300
Source: 
>      */
>     address payable public admin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        305
Source: 
>      */
>     address payable public pendingAdmin;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        310
Source: 
>      */
>     ComptrollerInterface public comptroller;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        315
Source: 
>      */
>     InterestRateModel public interestRateModel;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        320
Source: 
>      */
>     uint256 internal initialExchangeRateMantissa;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        325
Source: 
>      */
>     uint256 public reserveFactorMantissa;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        330
Source: 
>      */
>     uint256 public accrualBlockNumber;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        335
Source: 
>      */
>     uint256 public borrowIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        340
Source: 
>      */
>     uint256 public totalBorrows;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        345
Source: 
>      */
>     uint256 public totalReserves;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        350
Source: 
>      */
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        355
Source: 
>      */
>     mapping(address => uint256) internal accountTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        360
Source: 
>      */
>     mapping(address => mapping(address => uint256)) internal transferAllowances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CTokenStorage
Line:        375
Source: 
>      */
>     mapping(address => BorrowSnapshot) internal accountBorrows;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        869
Source: 
> contract ReentrancyGuard {
>     bool private _notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
