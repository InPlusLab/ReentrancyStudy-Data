Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    JHETokenSale
Line:        140
Source: 
>         require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'contract has not enough token');
>         require(tokenContract.transfer(msg.sender, _numberOfTokens),'transfer error');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    JHETokenSale
Line:        122
Source: 
>     modifier noBalance() {
>         require(address(this).balance == 0, "balance not null, transfer funds first");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHEToken
Line:        80
Source: 
> 
>     function transfer(address _to, uint256 _value) public returns (bool success) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function approve(address _spender, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHEToken
Line:        81
Source: 
>     function transfer(address _to, uint256 _value) public returns (bool success) {}
>     function approve(address _spender, uint256 _value) public returns (bool success) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHEToken
Line:        82
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool success) {}
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHETokenSale
Line:        132
Source: 
> 
>     function buyTokens(uint256 _numberOfTokens) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenTotalPrice = (multiply(_numberOfTokens, tokenPrice)).div(10**18);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHETokenSale
Line:        178
Source: 
> 
>     function endSale() public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))),'transfer error');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHETokenSale
Line:        188
Source: 
>     */
>     function setFeeDistributions(address payable _feeWallet, string memory _name, uint256 _percent) public  onlyOwner noBalance{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_feeWallet != address(0), "address not valid");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHETokenSale
Line:        246
Source: 
> 
>     function deActivateFeeWallet(address _feeWallet) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_feeWallet != address(0), "address not valid");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHETokenSale
Line:        261
Source: 
>     // Transfer Owner
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHETokenSale
Line:        270
Source: 
>     // Transfer ether wallet
>     function transferEtherWallet(address payable _newEtherWallet) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferEtherWallet(_newEtherWallet);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    JHETokenSale
Line:        279
Source: 
>     // set token price
>     function setTokenPrice(uint256 _tokenPrice) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tokenPrice != 0, "token price is null");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    JHETokenSale
Line:        139
Source: 
>         require(msg.value >= tokenTotalPrice.add(_totalFeeAmount),'incorrect amount');
>         require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'contract has not enough token');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenContract.transfer(msg.sender, _numberOfTokens),'transfer error');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    JHETokenSale
Line:        140
Source: 
>         require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'contract has not enough token');
>         require(tokenContract.transfer(msg.sender, _numberOfTokens),'transfer error');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    JHETokenSale
Line:        157
Source: 
>         uint256 _ownerFunds = ethAmount.sub(totalFeeAmount);
>         etherWallet.transfer(_ownerFunds);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    JHETokenSale
Line:        172
Source: 
>         if (address(this).balance != 0){
>             etherWallet.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    JHETokenSale
Line:        179
Source: 
>     function endSale() public onlyOwner{
>         require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))),'transfer error');
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    JHETokenSale
Line:        179
Source: 
>     function endSale() public onlyOwner{
>         require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))),'transfer error');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    JHETokenSale
Line:        166
Source: 
>                 uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%
>                 fees[i].wallet.transfer(feeValue);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    JHETokenSale
Line:        261
Source: 
>     // Transfer Owner
>     function transferOwnership(address payable _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    JHETokenSale
Line:        270
Source: 
>     // Transfer ether wallet
>     function transferEtherWallet(address payable _newEtherWallet) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferEtherWallet(_newEtherWallet);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    JHEToken
Line:        80
Source: 
> 
>     function transfer(address _to, uint256 _value) public returns (bool success) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function approve(address _spender, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    JHEToken
Line:        81
Source: 
>     function transfer(address _to, uint256 _value) public returns (bool success) {}
>     function approve(address _spender, uint256 _value) public returns (bool success) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    JHEToken
Line:        82
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool success) {}
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    JHETokenSale
Line:        188
Source: 
>     */
>     function setFeeDistributions(address payable _feeWallet, string memory _name, uint256 _percent) public  onlyOwner noBalance{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_feeWallet != address(0), "address not valid");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        27
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    JHETokenSale
Line:        139
Source: 
>         require(msg.value >= tokenTotalPrice.add(_totalFeeAmount),'incorrect amount');
>         require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'contract has not enough token');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenContract.transfer(msg.sender, _numberOfTokens),'transfer error');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    JHETokenSale
Line:        140
Source: 
>         require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'contract has not enough token');
>         require(tokenContract.transfer(msg.sender, _numberOfTokens),'transfer error');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    JHETokenSale
Line:        166
Source: 
>                 uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%
>                 fees[i].wallet.transfer(feeValue);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    JHETokenSale
Line:        172
Source: 
>         if (address(this).balance != 0){
>             etherWallet.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    JHETokenSale
Line:        157
Source: 
>         uint256 _ownerFunds = ethAmount.sub(totalFeeAmount);
>         etherWallet.transfer(_ownerFunds);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    JHETokenSale
Line:        97
Source: 
> 
>     struct _Fee {
>     ^^^^^^^^^^^^^
>         uint256 id;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    JHETokenSale
Line:        136
Source: 
>         uint256 totalFeePercent = getTotalFeePercent ();
>         uint256 _totalFeeAmount = tokenTotalPrice.mul(totalFeePercent).div(100000);  // FEE: 100000 = 100%
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         totalFeeAmount = totalFeeAmount.add (_totalFeeAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    JHETokenSale
Line:        156
Source: 
>         // transfer owner's ether deducted from total Fee Amount
>         uint256 _ownerFunds = ethAmount.sub(totalFeeAmount);
>         ^^^^^^^^^^^^^^^^^^^
>         etherWallet.transfer(_ownerFunds);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    JHETokenSale
Line:        136
Source: 
>         uint256 totalFeePercent = getTotalFeePercent ();
>         uint256 _totalFeeAmount = tokenTotalPrice.mul(totalFeePercent).div(100000);  // FEE: 100000 = 100%
>                                                                            ^^^^^^
>         totalFeeAmount = totalFeeAmount.add (_totalFeeAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    JHETokenSale
Line:        165
Source: 
>             if (fees[i].active){
>                 uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%
>                                                                      ^^^^^^
>                 fees[i].wallet.transfer(feeValue);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    JHETokenSale
Line:        200
Source: 
>         totalFeePercent = totalFeePercent.add(_percent);
>         require(totalFeePercent <= 100000, "total fee cannot exceed 100");
>                                    ^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    JHETokenSale
Line:        157
Source: 
>         uint256 _ownerFunds = ethAmount.sub(totalFeeAmount);
>         etherWallet.transfer(_ownerFunds);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    JHETokenSale
Line:        166
Source: 
>                 uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%
>                 fees[i].wallet.transfer(feeValue);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    JHETokenSale
Line:        172
Source: 
>         if (address(this).balance != 0){
>             etherWallet.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    JHETokenSale
Line:        157
Source: 
>         uint256 _ownerFunds = ethAmount.sub(totalFeeAmount);
>         etherWallet.transfer(_ownerFunds);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    JHETokenSale
Line:        166
Source: 
>                 uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%
>                 fees[i].wallet.transfer(feeValue);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    JHETokenSale
Line:        172
Source: 
>         if (address(this).balance != 0){
>             etherWallet.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    JHETokenSale
Line:        157
Source: 
>         uint256 _ownerFunds = ethAmount.sub(totalFeeAmount);
>         etherWallet.transfer(_ownerFunds);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    JHETokenSale
Line:        166
Source: 
>                 uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%
>                 fees[i].wallet.transfer(feeValue);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    JHETokenSale
Line:        172
Source: 
>         if (address(this).balance != 0){
>             etherWallet.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    JHETokenSale
Line:        139
Source: 
>         require(msg.value >= tokenTotalPrice.add(_totalFeeAmount),'incorrect amount');
>         require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'contract has not enough token');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokenContract.transfer(msg.sender, _numberOfTokens),'transfer error');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    JHETokenSale
Line:        140
Source: 
>         require(tokenContract.balanceOf(address(this)) >= _numberOfTokens,'contract has not enough token');
>         require(tokenContract.transfer(msg.sender, _numberOfTokens),'transfer error');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    JHETokenSale
Line:        179
Source: 
>     function endSale() public onlyOwner{
>         require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))),'transfer error');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    JHETokenSale
Line:        179
Source: 
>     function endSale() public onlyOwner{
>         require(tokenContract.transfer(owner, tokenContract.balanceOf(address(this))),'transfer error');
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    JHETokenSale
Line:        129
Source: 
>     function multiply(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x,'');
>                            ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    JHETokenSale
Line:        217
Source: 
> 
>             fee.id = (feesCount + 1);
>             ^^^
>             fee.name = _name;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    JHETokenSale
Line:        92
Source: 
>     uint256 public tokenPrice;
>     uint256 public tokensSold;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalFeeAmount;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    JHETokenSale
Line:        157
Source: 
>         uint256 _ownerFunds = ethAmount.sub(totalFeeAmount);
>         etherWallet.transfer(_ownerFunds);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    JHETokenSale
Line:        166
Source: 
>                 uint feeValue = _ownerFunds.mul(fees[i].percent).div(100000);  // FEE: 100000 = 100%
>                 fees[i].wallet.transfer(feeValue);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    JHETokenSale
Line:        172
Source: 
>         if (address(this).balance != 0){
>             etherWallet.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    JHETokenSale
Line:        137
Source: 
>         uint256 _totalFeeAmount = tokenTotalPrice.mul(totalFeePercent).div(100000);  // FEE: 100000 = 100%
>         totalFeeAmount = totalFeeAmount.add (_totalFeeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value >= tokenTotalPrice.add(_totalFeeAmount),'incorrect amount');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    JHETokenSale
Line:        146
Source: 
> 
>         tokensSold += _numberOfTokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    JHETokenSale
Line:        174
Source: 
>         }
>         totalFeeAmount = 0;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    JHEToken
Line:        78
Source: 
> contract JHEToken {
>     mapping(address => uint256) public balanceOf;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
