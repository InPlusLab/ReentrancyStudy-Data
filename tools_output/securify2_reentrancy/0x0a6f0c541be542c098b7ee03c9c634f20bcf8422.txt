Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MerkleDrop
Line:        144
Source: 
>     function burn(uint value) internal {
>         if (value == 0) {
>             ^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MerkleDrop
Line:        132
Source: 
> 
>         return currentHash == root;
>                ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleDrop
Line:        62
Source: 
> 
>     function withdraw(uint value, bytes32[] memory proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(verifyEntitled(msg.sender, value, proof), "The proof could not be verified.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MerkleDrop
Line:        118
Source: 
> 
>     function deleteContract() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now >= decayStartTime + decayDurationInSeconds, "The storage cannot be deleted before the end of the merkle drop.");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleDrop
Line:        70
Source: 
>         assert(valueToSend <= value);
>         require(droppedToken.balanceOf(address(this)) >= valueToSend, "The MerkleDrop does not have tokens to drop yet / anymore.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(valueToSend != 0, "The decayed entitled value is now zero.");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleDrop
Line:        77
Source: 
> 
>         require(droppedToken.transfer(msg.sender, valueToSend));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(msg.sender, valueToSend, value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MerkleDrop
Line:        148
Source: 
>         emit Burn(value);
>         droppedToken.burn(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MerkleDrop
Line:        62
Source: 
> 
>     function withdraw(uint value, bytes32[] memory proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(verifyEntitled(msg.sender, value, proof), "The proof could not be verified.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MerkleDrop
Line:        81
Source: 
> 
>     function verifyEntitled(address recipient, uint value, bytes32[] memory proof) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to pack the 20 bytes address to the 32 bytes value

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MerkleDrop
Line:        88
Source: 
> 
>     function decayedEntitlementAtTime(uint value, uint time, bool roundUp) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (time <= decayStartTime) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MerkleDrop
Line:        155
Source: 
>         if (roundUp) {
>             decay = (value*timeToDecay+totalDecayTime-1)/totalDecayTime;
>                      ^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MerkleDrop
Line:        157
Source: 
>         } else {
>             decay = value*timeToDecay/totalDecayTime;
>                     ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MerkleDrop
Line:        70
Source: 
>         assert(valueToSend <= value);
>         require(droppedToken.balanceOf(address(this)) >= valueToSend, "The MerkleDrop does not have tokens to drop yet / anymore.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(valueToSend != 0, "The decayed entitled value is now zero.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MerkleDrop
Line:        77
Source: 
> 
>         require(droppedToken.transfer(msg.sender, valueToSend));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(msg.sender, valueToSend, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MerkleDrop
Line:        152
Source: 
>     function decay(uint value, uint timeToDecay, uint totalDecayTime, bool roundUp) internal pure returns (uint) {
>         uint decay;
>         ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.8;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MerkleDrop
Line:        70
Source: 
>         assert(valueToSend <= value);
>         require(droppedToken.balanceOf(address(this)) >= valueToSend, "The MerkleDrop does not have tokens to drop yet / anymore.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(valueToSend != 0, "The decayed entitled value is now zero.");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MerkleDrop
Line:        77
Source: 
> 
>         require(droppedToken.transfer(msg.sender, valueToSend));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(msg.sender, valueToSend, value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MerkleDrop
Line:        148
Source: 
>         emit Burn(value);
>         droppedToken.burn(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    MerkleDrop
Line:        45
Source: 
>     uint public remainingValue;  // The total of not withdrawn entitlements, not considering decay
>     uint public spentTokens;  // The total tokens spent by the contract, burnt or withdrawn
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted call to selfdestruct
Description: Calls to selfdestruct that can be triggered by any user
             must be inspected.
Type:        Violation
Contract:    MerkleDrop
Line:        122
Source: 
> 
>         selfdestruct(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MerkleDrop
Line:        114
Source: 
> 
>         spentTokens += toBurn;
>         ^^^^^^^^^^^^^^^^^^^^^
>         burn(toBurn);

[0m
