Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenRetriever
Line:        233
Source: 
>      */
>     function retrieveTokens(address _tokenContract) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IToken tokenInstance = IToken(_tokenContract);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownership
Line:        361
Source: 
>      */
>     function isOwner(address _account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _account == owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownership
Line:        371
Source: 
>      */
>     function getOwner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownership
Line:        361
Source: 
>      */
>     function isOwner(address _account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _account == owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownership
Line:        371
Source: 
>      */
>     function getOwner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TransferableOwnership
Line:        414
Source: 
>      */
>     function transferOwnership(address _newOwner) public only_owner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenObserver
Line:        181
Source: 
>      */
>     function notifyTokensReceived(address _from, uint _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         onTokensReceived(msg.sender, _from, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownership
Line:        361
Source: 
>      */
>     function isOwner(address _account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _account == owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownership
Line:        371
Source: 
>      */
>     function getOwner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TransferableOwnership
Line:        414
Source: 
>      */
>     function transferOwnership(address _newOwner) public only_owner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        662
Source: 
>      */
>     function isDeploying() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stage == Stages.Deploying;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        673
Source: 
>      */
>     function isDeployed() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stage == Stages.Deployed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        683
Source: 
>      */
>     function isExecuted() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stage == Stages.Executed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        699
Source: 
>      */
>     function deploy() public only_owner only_at_stage(Stages.Deploying) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(this).balance >= prevProxyRecordedBalance, "f:deploy;e:invalid_balance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        731
Source: 
>      */
>     function getTotalSupply() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint sum = 0; 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        757
Source: 
>      */
>     function balanceOf(address _token, address _owner) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balance = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        778
Source: 
>      */
>     function execute() public only_at_stage(Stages.Deployed) only_after_claiming_period {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        800
Source: 
>      */
>     function withdraw() public only_at_stage(Stages.Executed) only_during_withdraw_period only_token_holder only_authenticated {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Balance storage b = allocated[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        850
Source: 
>      */
>     function retrieveEther() public only_owner only_after_withdraw_period {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        863
Source: 
>      */
>     function retrieveTokens(address _tokenContract) public only_owner not_accepted_token(_tokenContract) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         super.retrieveTokens(_tokenContract);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TransferableOwnership
Line:        414
Source: 
>      */
>     function transferOwnership(address _newOwner) public only_owner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenRetriever
Line:        233
Source: 
>      */
>     function retrieveTokens(address _tokenContract) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IToken tokenInstance = IToken(_tokenContract);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownership
Line:        361
Source: 
>      */
>     function isOwner(address _account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _account == owner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenObserver
Line:        181
Source: 
>      */
>     function notifyTokensReceived(address _from, uint _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         onTokensReceived(msg.sender, _from, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenRetriever
Line:        233
Source: 
>      */
>     function retrieveTokens(address _tokenContract) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IToken tokenInstance = IToken(_tokenContract);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Ownership
Line:        361
Source: 
>      */
>     function isOwner(address _account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _account == owner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        745
Source: 
>      */
>     function hasBalance(address _owner) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allocatedIndex.length > 0 && _owner == allocatedIndex[allocated[_owner].index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        757
Source: 
>      */
>     function balanceOf(address _token, address _owner) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint balance = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        863
Source: 
>      */
>     function retrieveTokens(address _tokenContract) public only_owner not_accepted_token(_tokenContract) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         super.retrieveTokens(_tokenContract);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        709
Source: 
>         // Remove prev proxy as observer
>         IObservable(address(drpsToken)).unregisterObserver(prevProxy);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IObservable(address(drpuToken)).unregisterObserver(prevProxy);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        710
Source: 
>         IObservable(address(drpsToken)).unregisterObserver(prevProxy);
>         IObservable(address(drpuToken)).unregisterObserver(prevProxy);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        713
Source: 
>         // Register this proxy as observer
>         IObservable(address(drpsToken)).registerObserver(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IObservable(address(drpuToken)).registerObserver(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        714
Source: 
>         IObservable(address(drpsToken)).registerObserver(address(this));
>         IObservable(address(drpuToken)).registerObserver(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        788
Source: 
>         // Disable tokens
>         IManagedToken(address(drpsToken)).lock();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IManagedToken(address(drpuToken)).lock();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        789
Source: 
>         IManagedToken(address(drpsToken)).lock();
>         IManagedToken(address(drpuToken)).lock();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        792
Source: 
>         // Remove self token as owner
>         IMultiOwned(address(drpsToken)).removeOwner(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IMultiOwned(address(drpuToken)).removeOwner(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        793
Source: 
>         IMultiOwned(address(drpsToken)).removeOwner(address(this));
>         IMultiOwned(address(drpuToken)).removeOwner(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        722
Source: 
> 
>         dissolvementFund.transfer(amountToTransfer);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        810
Source: 
>         uint amountToTransfer = weight * claimTotalEther / claimTotalWeight;
>         msg.sender.transfer(amountToTransfer);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownership
Line:        350
Source: 
>      */
>     modifier only_owner() {
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, "m:only_owner");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        553
Source: 
>      */
>     modifier only_authenticated() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(authenticator.authenticate(msg.sender), "m:only_authenticated");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        562
Source: 
>      */
>     modifier only_at_stage(Stages _stage) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stage == _stage, "m:only_at_stage");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        573
Source: 
>      */
>     modifier only_accepted_token(address _token) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_token == address(drpsToken) || _token == address(drpuToken), "m:only_accepted_token");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        584
Source: 
>      */
>     modifier not_accepted_token(address _token) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_token != address(drpsToken) && _token != address(drpuToken), "m:not_accepted_token");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        593
Source: 
>      */
>     modifier only_token_holder() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allocated[msg.sender].drps > 0 || allocated[msg.sender].drpu > 0, "m:only_token_holder");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        603
Source: 
>      */
>     modifier only_during_claiming_period() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(claimDeadline > 0 && now <= claimDeadline, "m:only_during_claiming_period");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        612
Source: 
>      */
>     modifier only_after_claiming_period() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(claimDeadline > 0 && now > claimDeadline, "m:only_after_claiming_period");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        622
Source: 
>      */
>     modifier only_during_withdraw_period() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(withdrawDeadline > 0 && now <= withdrawDeadline, "m:only_during_withdraw_period");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        631
Source: 
>      */
>     modifier only_after_withdraw_period() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(withdrawDeadline > 0 && now > withdrawDeadline, "m:only_after_withdraw_period");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity ^0.5.8;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        562
Source: 
>      */
>     modifier only_at_stage(Stages _stage) {
>                            ^^^^^^^^^^^^^
>         require(stage == _stage, "m:only_at_stage");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        573
Source: 
>      */
>     modifier only_accepted_token(address _token) {
>                                  ^^^^^^^^^^^^^^
>         require(_token == address(drpsToken) || _token == address(drpuToken), "m:only_accepted_token");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        584
Source: 
>      */
>     modifier not_accepted_token(address _token) {
>                                 ^^^^^^^^^^^^^^
>         require(_token != address(drpsToken) && _token != address(drpuToken), "m:not_accepted_token");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        722
Source: 
> 
>         dissolvementFund.transfer(amountToTransfer);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        810
Source: 
>         uint amountToTransfer = weight * claimTotalEther / claimTotalWeight;
>         msg.sender.transfer(amountToTransfer);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        722
Source: 
> 
>         dissolvementFund.transfer(amountToTransfer);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        810
Source: 
>         uint amountToTransfer = weight * claimTotalEther / claimTotalWeight;
>         msg.sender.transfer(amountToTransfer);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        722
Source: 
> 
>         dissolvementFund.transfer(amountToTransfer);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        810
Source: 
>         uint amountToTransfer = weight * claimTotalEther / claimTotalWeight;
>         msg.sender.transfer(amountToTransfer);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenRetriever
Line:        235
Source: 
>         IToken tokenInstance = IToken(_tokenContract);
>         uint tokenBalance = tokenInstance.balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (tokenBalance > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        554
Source: 
>     modifier only_authenticated() {
>         require(authenticator.authenticate(msg.sender), "m:only_authenticated");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenRetriever
Line:        237
Source: 
>         if (tokenBalance > 0) {
>             tokenInstance.transfer(msg.sender, tokenBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        709
Source: 
>         // Remove prev proxy as observer
>         IObservable(address(drpsToken)).unregisterObserver(prevProxy);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IObservable(address(drpuToken)).unregisterObserver(prevProxy);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        710
Source: 
>         IObservable(address(drpsToken)).unregisterObserver(prevProxy);
>         IObservable(address(drpuToken)).unregisterObserver(prevProxy);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        713
Source: 
>         // Register this proxy as observer
>         IObservable(address(drpsToken)).registerObserver(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IObservable(address(drpuToken)).registerObserver(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        714
Source: 
>         IObservable(address(drpsToken)).registerObserver(address(this));
>         IObservable(address(drpuToken)).registerObserver(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        733
Source: 
>         uint sum = 0; 
>         sum += drpsToken.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^
>         sum += drpuToken.totalSupply();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        734
Source: 
>         sum += drpsToken.totalSupply();
>         sum += drpuToken.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^
>         return sum;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        788
Source: 
>         // Disable tokens
>         IManagedToken(address(drpsToken)).lock();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IManagedToken(address(drpuToken)).lock();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        789
Source: 
>         IManagedToken(address(drpsToken)).lock();
>         IManagedToken(address(drpuToken)).lock();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        792
Source: 
>         // Remove self token as owner
>         IMultiOwned(address(drpsToken)).removeOwner(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IMultiOwned(address(drpuToken)).removeOwner(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        793
Source: 
>         IMultiOwned(address(drpsToken)).removeOwner(address(this));
>         IMultiOwned(address(drpuToken)).removeOwner(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        544
Source: 
> 
>     uint public claimTotalWeight;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public claimTotalEther;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        545
Source: 
>     uint public claimTotalWeight;
>     uint public claimTotalEther;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public claimDeadline;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        546
Source: 
>     uint public claimTotalEther;
>     uint public claimDeadline;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public withdrawDeadline;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        547
Source: 
>     uint public claimDeadline;
>     uint public withdrawDeadline;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        781
Source: 
>         // Mark as executed
>         stage = Stages.Executed;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawDeadline = now + WITHDRAW_DURATION;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        782
Source: 
>         stage = Stages.Executed;
>         withdrawDeadline = now + WITHDRAW_DURATION;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DcorpDissolvementProposal
Line:        785
Source: 
>         // Remaining balance is claimable
>         claimTotalEther = address(this).balance;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenRetriever
Line:        237
Source: 
>         if (tokenBalance > 0) {
>             tokenInstance.transfer(msg.sender, tokenBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        788
Source: 
>         // Disable tokens
>         IManagedToken(address(drpsToken)).lock();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IManagedToken(address(drpuToken)).lock();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DcorpDissolvementProposal
Line:        789
Source: 
>         IManagedToken(address(drpsToken)).lock();
>         IManagedToken(address(drpuToken)).lock();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
