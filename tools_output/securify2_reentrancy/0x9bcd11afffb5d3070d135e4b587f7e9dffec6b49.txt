Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    NewLRCLongTermHoldingContract
Line:        303
Source: 
> 
>     uint public depositStartTime    = 1504076273;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    NewLRCLongTermHoldingContract
Line:        305
Source: 
> 
>     uint public depositStopTime     = 1509260273;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewLRCLongTermHoldingContract
Line:        421
Source: 
> 
>     function drain() onlyOwner public {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        433
Source: 
> 
>         require(Token(lrcTokenAddress).transfer(owner, balance));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        471
Source: 
> 
>         return Token(lrcTokenAddress).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        525
Source: 
> 
>             .min256(lrcToken.allowance(msg.sender, address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        521
Source: 
> 
>         uint lrcAmount = lrcToken
>                            ^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        551
Source: 
> 
>         require(lrcToken.transferFrom(msg.sender, address(this), lrcAmount), "lrc transfer failed");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        617
Source: 
> 
>         require(Token(lrcTokenAddress).transfer(msg.sender, lrcAmount));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        621
Source: 
> 
>             msg.sender.transfer(msg.value);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        629
Source: 
> 
>     function getBonus(uint _lrcWithdrawalBase) view public returns (uint) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        59
Source: 
> 
>     uint256 c = a * b;
>                 ^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        525
Source: 
> 
>             .min256(lrcToken.allowance(msg.sender, address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        521
Source: 
> 
>         uint lrcAmount = lrcToken
>                            ^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        551
Source: 
> 
>         require(lrcToken.transferFrom(msg.sender, address(this), lrcAmount), "lrc transfer failed");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        617
Source: 
> 
>         require(Token(lrcTokenAddress).transfer(msg.sender, lrcAmount));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        621
Source: 
> 
>             msg.sender.transfer(msg.value);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    NewLRCLongTermHoldingContract
Line:        621
Source: 
> 
>             msg.sender.transfer(msg.value);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NewLRCLongTermHoldingContract
Line:        621
Source: 
> 
>             msg.sender.transfer(msg.value);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        433
Source: 
> 
>         require(Token(lrcTokenAddress).transfer(owner, balance));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        525
Source: 
> 
>             .min256(lrcToken.allowance(msg.sender, address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        521
Source: 
> 
>         uint lrcAmount = lrcToken
>                            ^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        551
Source: 
> 
>         require(lrcToken.transferFrom(msg.sender, address(this), lrcAmount), "lrc transfer failed");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        617
Source: 
> 
>         require(Token(lrcTokenAddress).transfer(msg.sender, lrcAmount));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NewLRCLongTermHoldingContract
Line:        471
Source: 
> 
>         return Token(lrcTokenAddress).balanceOf(address(this));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        543
Source: 
> 
>         lrcDeposited += lrcAmount;
>           ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NewLRCLongTermHoldingContract
Line:        547
Source: 
> 
>         emit Deposit(depositId++, msg.sender, lrcAmount);
>                        ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    NewLRCLongTermHoldingContract
Line:        269
Source: 
> 
>     uint public constant DEPOSIT_PERIOD             = 60 days; // = 2 months
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
