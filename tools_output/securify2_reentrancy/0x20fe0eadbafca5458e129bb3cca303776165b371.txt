pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    BPROMinter
Line:        147
Source: 
>     address public backstopPool;
>     address public genesisPool;
>                          ^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MockMiner
Line:        268
Source: 
>     function getBlockNumber() public view returns(uint) {
>         if(blockNumber == 0) return block.number;
>                                 ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        80
Source: 
>      */
>     function owner() public view returns (address) {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        106
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        115
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        80
Source: 
>      */
>     function owner() public view returns (address) {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        106
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        115
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        80
Source: 
>      */
>     function owner() public view returns (address) {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        106
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        115
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MockMiner
Line:        263
Source: 
> 
>     function fwdBlockNumber(uint delta) public {
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         blockNumber += delta;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MockMiner
Line:        267
Source: 
> 
>     function getBlockNumber() public view returns(uint) {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(blockNumber == 0) return block.number;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        115
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        201
Source: 
> 
>     function setMinter(address newMinter) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now > deploymentTime + 4 * YEAR, "setMinter: wait-4-years");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        208
Source: 
> 
>     function setDevPool(address newPool) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now > deploymentTime + YEAR, "setDevPool: wait-1-years");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        215
Source: 
> 
>     function setBackstopPool(address newPool) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         backstopPool = newPool;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        221
Source: 
> 
>     function setUserPool(address newPool) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userPool = newPool;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        227
Source: 
> 
>     function setReservoir(address newPool) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         reservoir = newPool;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        115
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        201
Source: 
> 
>     function setMinter(address newMinter) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now > deploymentTime + 4 * YEAR, "setMinter: wait-4-years");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        208
Source: 
> 
>     function setDevPool(address newPool) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now > deploymentTime + YEAR, "setDevPool: wait-1-years");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        215
Source: 
> 
>     function setBackstopPool(address newPool) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         backstopPool = newPool;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        221
Source: 
> 
>     function setUserPool(address newPool) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userPool = newPool;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BPROMinter
Line:        227
Source: 
> 
>     function setReservoir(address newPool) external onlyOwner {
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         reservoir = newPool;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MockMiner
Line:        263
Source: 
> 
>     function fwdBlockNumber(uint delta) public {
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         blockNumber += delta;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    BPROMinter
Line:        245
Source: 
> 
>         uint mintAmount = deltaBlock * dripRate;
>                                                ^
>         bpro.mint(target, mintAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    BPROMinter
Line:        194
Source: 
> 
>         drip(userPool, "dripUser", dripPerMonth / BLOCKS_PER_MONTH, deploymentBlock + BLOCKS_PER_MONTH * 3);
>                                                                                                            ^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    BPROMinter
Line:        245
Source: 
> 
>         uint mintAmount = deltaBlock * dripRate;
>                                                ^
>         bpro.mint(target, mintAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    BPROMinter
Line:        194
Source: 
> 
>         drip(userPool, "dripUser", dripPerMonth / BLOCKS_PER_MONTH, deploymentBlock + BLOCKS_PER_MONTH * 3);
>                                                                                                            ^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BPROMinter
Line:        246
Source: 
>         uint mintAmount = deltaBlock * dripRate;
>         bpro.mint(target, mintAmount);
>                              ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        64
Source: 
> contract Ownable is Context {
>     address private _owner;
>                          ^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BPROMinter
Line:        150
Source: 
>     uint public deploymentBlock;
>     uint public deploymentTime;
>                          ^^^^^^
>     mapping(bytes32 => uint) lastDripBlock;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BPROMinter
Line:        151
Source: 
>     uint public deploymentTime;
>     mapping(bytes32 => uint) lastDripBlock;
>                          ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BPROMinter
Line:        153
Source: 
> 
>     BPROLike public bpro;
>                          
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BPROMinter
Line:        155
Source: 
> 
>     uint constant BLOCKS_PER_YEAR = 45 * 60 * 24 * 365 / 10; // 4.5 blocks per minute
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant BLOCKS_PER_MONTH = (BLOCKS_PER_YEAR / 12);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BPROMinter
Line:        156
Source: 
>     uint constant BLOCKS_PER_YEAR = 45 * 60 * 24 * 365 / 10; // 4.5 blocks per minute
>     uint constant BLOCKS_PER_MONTH = (BLOCKS_PER_YEAR / 12);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BPROMinter
Line:        158
Source: 
> 
>     uint constant YEAR = 365 days;
>                          ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MockMiner
Line:        257
Source: 
> 
>     constructor(BPROLike _bpro, address _reservoir, address _devPool, address _userPool, address _backstopPool) public 
>   ^^^^^^^^^^^^^^^^
>         BPROMinter(_bpro,_reservoir,_devPool,_userPool,_backstopPool)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BPROMinter
Line:        246
Source: 
>         uint mintAmount = deltaBlock * dripRate;
>         bpro.mint(target, mintAmount);
>                              ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BPROMinter
Line:        203
Source: 
>         require(now > deploymentTime + 4 * YEAR, "setMinter: wait-4-years");
>         bpro.setMinter(newMinter);
>                              ^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BPROMinter
Line:        246
Source: 
>         uint mintAmount = deltaBlock * dripRate;
>         bpro.mint(target, mintAmount);
>                              ^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BPROMinter
Line:        203
Source: 
>         require(now > deploymentTime + 4 * YEAR, "setMinter: wait-4-years");
>         bpro.setMinter(newMinter);
>                              ^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BPROMinter
Line:        147
Source: 
>     address public backstopPool;
>     address public genesisPool;
>                          ^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MockMiner
Line:        264
Source: 
>     function fwdBlockNumber(uint delta) public {
>         blockNumber += delta;
>                              
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BPROMinter
Line:        243
Source: 
>         uint deltaBlock = currBlock - prevDripBlock;
>         lastDripBlock[targetName] = currBlock;
>                              ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BPROMinter
Line:        147
Source: 
>     address public backstopPool;
>     address public genesisPool;
>                          ^^^^^^
> 

[0m
