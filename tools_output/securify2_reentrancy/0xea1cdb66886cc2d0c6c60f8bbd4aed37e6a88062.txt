Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EtherCity
Line:        218
Source: 
>         uint32 size;
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(_userId)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EtherCity
Line:        614
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        57
Source: 
>     
>     address private vaultMissed = 0x217E758839395FCd954C912519f5b8FB7F22E393;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public contractor;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        59
Source: 
>     address public contractor;
>     uint private MatrixexpiresOn_0 = 100000 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private MatrixexpiresOn_1 = 30 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        60
Source: 
>     uint private MatrixexpiresOn_0 = 100000 days;
>     uint private MatrixexpiresOn_1 = 30 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private MatrixexpiresOn_2 = 60 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        61
Source: 
>     uint private MatrixexpiresOn_1 = 30 days;
>     uint private MatrixexpiresOn_2 = 60 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private MatrixexpiresOn_3 = 90 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        62
Source: 
>     uint private MatrixexpiresOn_2 = 60 days;
>     uint private MatrixexpiresOn_3 = 90 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private MatrixexpiresOn_4 = 120 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        63
Source: 
>     uint private MatrixexpiresOn_3 = 90 days;
>     uint private MatrixexpiresOn_4 = 120 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        77
Source: 
> 
>     uint private dre    = 10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private refs1  = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        78
Source: 
>     uint private dre    = 10;
>     uint private refs1  = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private refs1b = 9;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        79
Source: 
>     uint private refs1  = 18;
>     uint private refs1b = 9;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint private refs2  = 40;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        80
Source: 
>     uint private refs1b = 9;
>     uint private refs2  = 40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private refs2b = 20;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        81
Source: 
>     uint private refs2  = 40;
>     uint private refs2b = 20;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private fees   = 1; // x3

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EtherCity
Line:        82
Source: 
>     uint private refs2b = 20;
>     uint private fees   = 1; // x3
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        165
Source: 
>     
>     function highestStage(address _userId) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint p = 12;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        467
Source: 
>     
>     function getFallBackEther() public payable validateContractor(msg.sender){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(contractor)).transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        485
Source: 
>     
>     function matrixInitialisation() public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == contractor, 'Sorry you cannot Run this Function');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        579
Source: 
>     
>     function stats() public view returns(uint lId, uint aU, uint rT, uint rTl, uint dE, uint lE, uint mI, uint mCI, uint jT){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (lastUserId, activeUsers, raisedToday, raisedTotal, distEarning, lostEarnings, matrixIncomes, matchIncomes, joinedToday);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        583
Source: 
> 
>     function getUserData(address _userId) public view returns(address _refBy, uint _refs, uint _myTeam, uint _earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isUserExists(_userId), 'Sorry No User Found with matching ETH Address!');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        599
Source: 
>     
>     function usersActiveCityMatrix(address _userId, uint _level) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_userId].activeMember[_level];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        603
Source: 
> 
>     function userMatrixExpiration(address _userId, uint _level) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_userId].CityMatrix[_level].expiresOn;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherCity
Line:        607
Source: 
> 
>     function usersMatrix(address _userId, uint _level) public view returns(address, address[] memory, address[] memory, bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_userId].CityMatrix[_level].refBy,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    EtherCity
Line:        415
Source: 
>         else{
>             address(uint160(_userId)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EtherCity
Line:        446
Source: 
>         uint pay2 = _amount * 40 / 100;
>         address(uint160(_userId)).transfer(pay1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(contractor)).transfer(pay2);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EtherCity
Line:        447
Source: 
>         address(uint160(_userId)).transfer(pay1);
>         address(uint160(contractor)).transfer(pay2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    EtherCity
Line:        437
Source: 
>             }else{
>                 address(uint160(_admin)).transfer(pay);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherCity
Line:        165
Source: 
>     
>     function highestStage(address _userId) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint p = 12;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherCity
Line:        175
Source: 
>     
>     function newSignup(address _sponsor) external payable{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value == levelPrice[1], 'To register you Must Buy House 1 which costs 0.025 ether');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherCity
Line:        583
Source: 
> 
>     function getUserData(address _userId) public view returns(address _refBy, uint _refs, uint _myTeam, uint _earnings, uint _dearnings, uint _mearnings, uint _maearnings, uint _missedEarning){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(isUserExists(_userId), 'Sorry No User Found with matching ETH Address!');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        471
Source: 
>     
>     function guDownlines(address _userId, uint _level) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_userId].CityMatrix[_level].refs1.length;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        595
Source: 
> 
>     function isUserExists(address _userAddress) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_userAddress].id != 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        599
Source: 
>     
>     function usersActiveCityMatrix(address _userId, uint _level) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_userId].activeMember[_level];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        603
Source: 
> 
>     function userMatrixExpiration(address _userId, uint _level) public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_userId].CityMatrix[_level].expiresOn;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherCity
Line:        607
Source: 
> 
>     function usersMatrix(address _userId, uint _level) public view returns(address, address[] memory, address[] memory, bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (users[_userId].CityMatrix[_level].refBy,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity
Line:        426
Source: 
>         if(_type == 1){
>             pay = _amount * fees / 100;
>                   ^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity
Line:        444
Source: 
>     function contractDivident(address _userId, uint _amount) internal returns(bool){
>         uint pay1 = _amount * 60 / 100;
>                     ^^^^^^^^^^^^
>         uint pay2 = _amount * 40 / 100;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    EtherCity
Line:        445
Source: 
>         uint pay1 = _amount * 60 / 100;
>         uint pay2 = _amount * 40 / 100;
>                     ^^^^^^^^^^^^
>         address(uint160(_userId)).transfer(pay1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EtherCity
Line:        415
Source: 
>         else{
>             address(uint160(_userId)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        59
Source: 
>     address public contractor;
>     uint private MatrixexpiresOn_0 = 100000 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private MatrixexpiresOn_1 = 30 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        60
Source: 
>     uint private MatrixexpiresOn_0 = 100000 days;
>     uint private MatrixexpiresOn_1 = 30 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private MatrixexpiresOn_2 = 60 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        61
Source: 
>     uint private MatrixexpiresOn_1 = 30 days;
>     uint private MatrixexpiresOn_2 = 60 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private MatrixexpiresOn_3 = 90 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        62
Source: 
>     uint private MatrixexpiresOn_2 = 60 days;
>     uint private MatrixexpiresOn_3 = 90 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private MatrixexpiresOn_4 = 120 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        63
Source: 
>     uint private MatrixexpiresOn_3 = 90 days;
>     uint private MatrixexpiresOn_4 = 120 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        214
Source: 
>     function buyNewProperty(uint _matrixId) external payable validMatrixId(_matrixId){
>         address _userId = msg.sender;
>         ^^^^^^^^^^^^^^^
>         require(isUserExists(_userId), 'You Must be a Registered Member');

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        231
Source: 
>         
>         uint _level = _matrixId;
>         ^^^^^^^^^^^
>         uint expiresOn = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        261
Source: 
>             // Renewal
>             address _firstUpline = users[_userId].CityMatrix[_level].refBy;
>             ^^^^^^^^^^^^^^^^^^^^
>             address _secondUpline = users[_firstUpline].refBy;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        262
Source: 
>             address _firstUpline = users[_userId].CityMatrix[_level].refBy;
>             address _secondUpline = users[_firstUpline].refBy;
>             ^^^^^^^^^^^^^^^^^^^^^
>             processLevel(_firstUpline, _secondUpline, _level);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        352
Source: 
>         users[_upline].CityMatrix[_level].refs1.push(_userId); // Level 1
>         address _upline2 = users[_upline].CityMatrix[_level].refBy;
>         ^^^^^^^^^^^^^^^^
>         users[_upline2].CityMatrix[_level].refs2.push(_userId); // Level 2

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        366
Source: 
> 
>     function DirectReferral(address _userId, uint _amount) private{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint payDre = dre * _amount / 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        433
Source: 
>         for(uint m = 0; m < 3; m++){
>             address _admin = users[contractor].refs[m];
>             ^^^^^^^^^^^^^^
>             if(m == 1){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        502
Source: 
>         for(uint i = 0; i < users[contractor].refs.length; i++){
>             address _userId = users[contractor].refs[i];
>             ^^^^^^^^^^^^^^^
>             User memory user = User({

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        530
Source: 
> 
>         address _upline = users[contractor].refs[1];
>         ^^^^^^^^^^^^^^^
>         users[_upline].refs.push(0x22cFacA660BcaB211F9AbefD96396C8019fb6e5F);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        536
Source: 
>                 for(uint downe = 0; downe < users[contractor].refs.length; downe++){
>                     address _userId = users[contractor].refs[downe];
>                     ^^^^^^^^^^^^^^^
>                     users[_userId].CityMatrix[mi].refBy = contractor;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherCity
Line:        551
Source: 
>         
>         address _userId = users[_upline].refs[0];
>         ^^^^^^^^^^^^^^^
>         users[_userId] = user;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherCity
Line:        139
Source: 
> 
>     modifier validMatrixId(uint _matrixId) {
>                            ^^^^^^^^^^^^^^
>         require(_matrixId > 0 && _matrixId < 13, 'Invalid MatrixId');

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherCity
Line:        144
Source: 
>     
>     modifier validateContractor(address _userId){
>                                 ^^^^^^^^^^^^^^^
>         require(_userId == contractor && address(this).balance > 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EtherCity
Line:        59
Source: 
>     address public contractor;
>     uint private MatrixexpiresOn_0 = 100000 days;
>                                      ^^^^^^^^^^^
>     uint private MatrixexpiresOn_1 = 30 days;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherCity
Line:        446
Source: 
>         uint pay2 = _amount * 40 / 100;
>         address(uint160(_userId)).transfer(pay1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(contractor)).transfer(pay2);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherCity
Line:        447
Source: 
>         address(uint160(_userId)).transfer(pay1);
>         address(uint160(contractor)).transfer(pay2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherCity
Line:        415
Source: 
>         else{
>             address(uint160(_userId)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherCity
Line:        437
Source: 
>             }else{
>                 address(uint160(_admin)).transfer(pay);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherCity
Line:        468
Source: 
>     function getFallBackEther() public payable validateContractor(msg.sender){
>         address(uint160(contractor)).transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherCity
Line:        415
Source: 
>         else{
>             address(uint160(_userId)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherCity
Line:        446
Source: 
>         uint pay2 = _amount * 40 / 100;
>         address(uint160(_userId)).transfer(pay1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(contractor)).transfer(pay2);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherCity
Line:        447
Source: 
>         address(uint160(_userId)).transfer(pay1);
>         address(uint160(contractor)).transfer(pay2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherCity
Line:        437
Source: 
>             }else{
>                 address(uint160(_admin)).transfer(pay);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherCity
Line:        468
Source: 
>     function getFallBackEther() public payable validateContractor(msg.sender){
>         address(uint160(contractor)).transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherCity
Line:        446
Source: 
>         uint pay2 = _amount * 40 / 100;
>         address(uint160(_userId)).transfer(pay1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(contractor)).transfer(pay2);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherCity
Line:        447
Source: 
>         address(uint160(_userId)).transfer(pay1);
>         address(uint160(contractor)).transfer(pay2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherCity
Line:        437
Source: 
>             }else{
>                 address(uint160(_admin)).transfer(pay);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherCity
Line:        415
Source: 
>         else{
>             address(uint160(_userId)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherCity
Line:        468
Source: 
>     function getFallBackEther() public payable validateContractor(msg.sender){
>         address(uint160(contractor)).transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    EtherCity
Line:        221
Source: 
>         }
>         require(size == 0, "cannot be a contract");
>                 ^^^^
>         if(_matrixId > 1){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherCity
Line:        446
Source: 
>         uint pay2 = _amount * 40 / 100;
>         address(uint160(_userId)).transfer(pay1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address(uint160(contractor)).transfer(pay2);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherCity
Line:        447
Source: 
>         address(uint160(_userId)).transfer(pay1);
>         address(uint160(contractor)).transfer(pay2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherCity
Line:        415
Source: 
>         else{
>             address(uint160(_userId)).transfer(_amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    EtherCity
Line:        437
Source: 
>             }else{
>                 address(uint160(_admin)).transfer(pay);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        191
Source: 
>         
>         users[_userId] = user;
>         ^^^^^^^^^^^^^^^^^^^^^
>         idToAddress[lastUserId] = _userId;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        195
Source: 
>         users[_userId].refBy = _sponsor;
>         lastUserId++;
>         ^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        201
Source: 
>         getProperty(_userId, 1);
>         activeUsers++;
>         ^^^^^^^^^^^^^
>         if(afterOneDay(lasUpdate)){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        203
Source: 
>         if(afterOneDay(lasUpdate)){
>             joinedToday = 0;
>             ^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        343
Source: 
>         while(users[_userId].refBy != address(0)){
>             users[users[_userId].refBy].teamCount++;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _userId = users[_userId].refBy;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        206
Source: 
>         else{
>             joinedToday++;
>             ^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        234
Source: 
>         if(users[_userId].id < 5){
>             users[_userId].CityMatrix[_level].expiresOn = MatrixexpiresOn_0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        264
Source: 
>             processLevel(_firstUpline, _secondUpline, _level);
>             users[_userId].CityMatrix[_level].reinvestCount++;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        274
Source: 
>         if(afterOneDay(lasUpdate)){
>             lasUpdate = now;
>             ^^^^^^^^^^^^^^^
>             raisedToday = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        275
Source: 
>             lasUpdate = now;
>             raisedToday = 0;
>             ^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        278
Source: 
>         else{
>             raisedToday += cost;
>             ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        402
Source: 
>         uint payMb = refsb * _amount / 100;
>         users[_userId].earnings[0].matchingBonus += payMb;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         matchIncomes += payMb;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        403
Source: 
>         users[_userId].earnings[0].matchingBonus += payMb;
>         matchIncomes += payMb;
>         ^^^^^^^^^^^^^^^^^^^^^
>         dividentDistribution(checkBeneficiary(_userId, _level, 2, payMb), payMb);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        417
Source: 
>         }
>         distEarning += _amount;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         // Emit Earnings Received

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        458
Source: 
>             if(_type == 1){
>                 users[_userId].earnings[0].missedEarnings += _amount;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        462
Source: 
>             }
>             lostEarnings += _amount;
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             _beneficiary = vaultMissed;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        460
Source: 
>             }else{
>                 users[_userId].earnings[0].missedBonus += _amount;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        477
Source: 
>         if(!users[_userId].activeMember[_level] || users[_userId].CityMatrix[_level].expiresOn < now){
>             users[_userId].activeMember[_level] = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_userId].CityMatrix[_level].active = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        478
Source: 
>             users[_userId].activeMember[_level] = false;
>             users[_userId].CityMatrix[_level].active = false;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        381
Source: 
>         uint payLevel = refsc * _amount / 100;
>         users[_userId].earnings[0].matrixEarnings += payLevel;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         matrixIncomes += payLevel;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        382
Source: 
>         users[_userId].earnings[0].matrixEarnings += payLevel;
>         matrixIncomes += payLevel;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address beneficiray;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        266
Source: 
>         }else{
>             users[_userId].activeMember[_level] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_userId].CityMatrix[_level].active = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        267
Source: 
>             users[_userId].activeMember[_level] = true;
>             users[_userId].CityMatrix[_level].active = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             users[_userId].CityMatrix[_level].reinvestCount = 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        268
Source: 
>             users[_userId].CityMatrix[_level].active = true;
>             users[_userId].CityMatrix[_level].reinvestCount = 1;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             DirectReferral(users[_userId].refBy, cost);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        350
Source: 
>     function updateMatrixUpliner(address _userId, address _upline, uint _level) private {
>         users[_userId].CityMatrix[_level].refBy = _upline;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_upline].CityMatrix[_level].refs1.push(_userId); // Level 1

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        351
Source: 
>         users[_userId].CityMatrix[_level].refBy = _upline;
>         users[_upline].CityMatrix[_level].refs1.push(_userId); // Level 1
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _upline2 = users[_upline].CityMatrix[_level].refBy;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        353
Source: 
>         address _upline2 = users[_upline].CityMatrix[_level].refBy;
>         users[_upline2].CityMatrix[_level].refs2.push(_userId); // Level 2
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         processLevel(_upline, _upline2, _level);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        368
Source: 
>         uint payDre = dre * _amount / 100;
>         users[_userId].earnings[0].dreEarnings += payDre;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         dividentDistribution(_userId, payDre);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        251
Source: 
>            if(users[_userId].CityMatrix[_level].expiresOn < now || users[_userId].CityMatrix[_level].expiresOn == 0){
>                users[_userId].CityMatrix[_level].expiresOn = now + expiresOn;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherCity
Line:        253
Source: 
>            }else{
>                users[_userId].CityMatrix[_level].expiresOn += expiresOn;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity
Line:        192
Source: 
>         users[_userId] = user;
>         idToAddress[lastUserId] = _userId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         userIds[lastUserId] = _userId;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity
Line:        193
Source: 
>         idToAddress[lastUserId] = _userId;
>         userIds[lastUserId] = _userId;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_userId].refBy = _sponsor;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity
Line:        194
Source: 
>         userIds[lastUserId] = _userId;
>         users[_userId].refBy = _sponsor;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         lastUserId++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity
Line:        197
Source: 
> 
>         users[_sponsor].refs.push(_userId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[_sponsor].refsCount++;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity
Line:        198
Source: 
>         users[_sponsor].refs.push(_userId);
>         users[_sponsor].refsCount++;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Activates House1

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    EtherCity
Line:        280
Source: 
>         }
>         raisedTotal += cost;
>         ^^^^^^^^^^^^^^^^^^^
>         emit Upgrade(_userId, users[_userId].refBy, _matrixId);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EtherCity
Line:        53
Source: 
>     mapping(uint => address) public userIds;
>     mapping(address => uint) public balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EtherCity
Line:        84
Source: 
> 
>     mapping(address => Initialisation) private inits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
