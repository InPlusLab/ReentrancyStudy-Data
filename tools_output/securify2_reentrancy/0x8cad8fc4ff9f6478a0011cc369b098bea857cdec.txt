[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        60
Source: 
>     uint256 cs;
>     assembly { cs := extcodesize(self) }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return cs == 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Initializable
Line:        65
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    LidTeamLock
Line:        321
Source: 
>         }
>         require(totalTeamBP == 10000, "Must allocate exactly 100% (10000 BP) to team.");
>                 ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        143
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        148
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    BasisPoints
Line:        250
Source: 
>     function mulBP(uint amt, uint bp) internal pure returns (uint) {
>         if (amt == 0) return 0;
>             ^^^^^^^^
>         return amt.mul(bp).div(BASIS_POINTS);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    LidTeamLock
Line:        348
Source: 
>     function startRelease() external {
>         require(releaseStart == 0, "Has already started.");
>                 ^^^^^^^^^^^^^^^^^
>         require(address(this).balance != 0, "Must have some ether deposited.");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LidTeamLock
Line:        331
Source: 
>         uint toClaim = totalClaimAmount.sub(teamMemberClaimedLid[msg.sender]);
>         if (lidToken.balanceOf(address(this)) < toClaim) toClaim = lidToken.balanceOf(address(this));
>                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LidTeamLock
Line:        333
Source: 
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);
>         lidToken.transfer(msg.sender, toClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LidTeamLock
Line:        344
Source: 
>         teamMemberClaimedEth[msg.sender] = teamMemberClaimedEth[msg.sender].add(toClaim);
>         msg.sender.transfer(toClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LidTeamLock
Line:        350
Source: 
>         require(address(this).balance != 0, "Must have some ether deposited.");
>         require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         startingLid = lidToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LidTeamLock
Line:        351
Source: 
>         require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");
>         startingLid = lidToken.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         startingEth = address(this).balance;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LidTeamLock
Line:        324
Source: 
> 
>     function claimLid(uint id) external onlyAfterStart {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(checkIfTeamMember(msg.sender), "Can only be called by team members.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LidTeamLock
Line:        336
Source: 
> 
>     function claimEth(uint id) external onlyAfterStart {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(checkIfTeamMember(msg.sender), "Can only be called by team members.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LidTeamLock
Line:        299
Source: 
> 
>     function initialize(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint _releaseInterval,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LidTeamLock
Line:        331
Source: 
>         uint toClaim = totalClaimAmount.sub(teamMemberClaimedLid[msg.sender]);
>         if (lidToken.balanceOf(address(this)) < toClaim) toClaim = lidToken.balanceOf(address(this));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LidTeamLock
Line:        331
Source: 
>         uint toClaim = totalClaimAmount.sub(teamMemberClaimedLid[msg.sender]);
>         if (lidToken.balanceOf(address(this)) < toClaim) toClaim = lidToken.balanceOf(address(this));
>                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LidTeamLock
Line:        333
Source: 
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);
>         lidToken.transfer(msg.sender, toClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LidTeamLock
Line:        350
Source: 
>         require(address(this).balance != 0, "Must have some ether deposited.");
>         require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         startingLid = lidToken.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LidTeamLock
Line:        351
Source: 
>         require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");
>         startingLid = lidToken.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         startingEth = address(this).balance;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    LidTeamLock
Line:        344
Source: 
>         teamMemberClaimedEth[msg.sender] = teamMemberClaimedEth[msg.sender].add(toClaim);
>         msg.sender.transfer(toClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Initializable
Line:        65
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        38
Source: 
> 
>     bool isTopLevelCall = !initializing;
>     ^^^^^^^^^^^^^^^^^^^
>     if (isTopLevelCall) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    LidTeamLock
Line:        344
Source: 
>         teamMemberClaimedEth[msg.sender] = teamMemberClaimedEth[msg.sender].add(toClaim);
>         msg.sender.transfer(toClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LidTeamLock
Line:        344
Source: 
>         teamMemberClaimedEth[msg.sender] = teamMemberClaimedEth[msg.sender].add(toClaim);
>         msg.sender.transfer(toClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LidTeamLock
Line:        331
Source: 
>         uint toClaim = totalClaimAmount.sub(teamMemberClaimedLid[msg.sender]);
>         if (lidToken.balanceOf(address(this)) < toClaim) toClaim = lidToken.balanceOf(address(this));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LidTeamLock
Line:        331
Source: 
>         uint toClaim = totalClaimAmount.sub(teamMemberClaimedLid[msg.sender]);
>         if (lidToken.balanceOf(address(this)) < toClaim) toClaim = lidToken.balanceOf(address(this));
>                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LidTeamLock
Line:        350
Source: 
>         require(address(this).balance != 0, "Must have some ether deposited.");
>         require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         startingLid = lidToken.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LidTeamLock
Line:        351
Source: 
>         require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");
>         startingLid = lidToken.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         startingEth = address(this).balance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LidTeamLock
Line:        333
Source: 
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);
>         lidToken.transfer(msg.sender, toClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        61
Source: 
>     assembly { cs := extcodesize(self) }
>     return cs == 0;
>            ^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    LidTeamLock
Line:        380
Source: 
>     function checkIfTeamMember(address member) internal view returns (bool) {
>         for (uint i; i < teamMemberAddresses.length; i++) {
>                                                      ^
>             if (teamMemberAddresses[i] == member)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        25
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        30
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LidTeamLock
Line:        278
Source: 
> 
>     uint public releaseInterval;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public releaseStart;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LidTeamLock
Line:        279
Source: 
>     uint public releaseInterval;
>     uint public releaseStart;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public releaseBP;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LidTeamLock
Line:        280
Source: 
>     uint public releaseStart;
>     uint public releaseBP;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LidTeamLock
Line:        282
Source: 
> 
>     uint public startingLid;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public startingEth;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LidTeamLock
Line:        283
Source: 
>     uint public startingLid;
>     uint public startingEth;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LidTeamLock
Line:        290
Source: 
> 
>     ILidCertifiableToken private lidToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        25
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        30
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        65
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    BasisPoints
Line:        247
Source: 
> 
>     uint constant private BASIS_POINTS = 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        40
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        41
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LidTeamLock
Line:        308
Source: 
> 
>         releaseInterval = _releaseInterval;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         releaseBP = _releaseBP;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LidTeamLock
Line:        309
Source: 
>         releaseInterval = _releaseInterval;
>         releaseBP = _releaseBP;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         lidToken = _lidToken;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LidTeamLock
Line:        310
Source: 
>         releaseBP = _releaseBP;
>         lidToken = _lidToken;
>         ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LidTeamLock
Line:        313
Source: 
>         for (uint i = 0; i < _teamMemberAddresses.length; i++) {
>             teamMemberAddresses.push(_teamMemberAddresses[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LidTeamLock
Line:        318
Source: 
>         for (uint i = 0; i < _teamMemberBPs.length; i++) {
>             teamMemberBPs.push(_teamMemberBPs[i]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalTeamBP = totalTeamBP.add(_teamMemberBPs[i]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Initializable
Line:        47
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LidTeamLock
Line:        351
Source: 
>         require(lidToken.balanceOf(address(this)) != 0, "Must have some lid deposited.");
>         startingLid = lidToken.balanceOf(address(this));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         startingEth = address(this).balance;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LidTeamLock
Line:        352
Source: 
>         startingLid = lidToken.balanceOf(address(this));
>         startingEth = address(this).balance;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         releaseStart = now.add(24 hours);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LidTeamLock
Line:        353
Source: 
>         startingEth = address(this).balance;
>         releaseStart = now.add(24 hours);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LidTeamLock
Line:        333
Source: 
>         teamMemberClaimedLid[msg.sender] = teamMemberClaimedLid[msg.sender].add(toClaim);
>         lidToken.transfer(msg.sender, toClaim);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        25
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        30
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        65
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BasisPoints
Line:        247
Source: 
> 
>     uint constant private BASIS_POINTS = 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        65
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
