Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Bytes32
Line:        113
Source: 
>     function _bytes32(string memory _input) internal pure returns(bytes32 result) {
>         assembly {
>         ^^^^^^^^^^
>             result := mload(add(_input, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ReturnData
Line:        126
Source: 
>     function _returnReturnData(bool _success) internal pure {
>         assembly {
>         ^^^^^^^^^^
>             let returndatastart := 0

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ReturnData
Line:        136
Source: 
>     internal returns(bool success) {
>         assembly {
>         ^^^^^^^^^^
>             success := call(gas, _destination, _value, add(_data, 32), mload(_data), 0, 0)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetInterface
Line:        44
Source: 
> 
>     function _performGeneric(bytes memory, address) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         revert();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        184
Source: 
>      */
>     function init(AssetProxyInterface _proxy) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(proxy) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        200
Source: 
>      */
>     function _performTransferWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        237
Source: 
>      */
>     function _performTransferToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _icap,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        270
Source: 
>      */
>     function _performTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        309
Source: 
>      */
>     function _performTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        345
Source: 
>      */
>     function _performApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        369
Source: 
>      */
>     function _performGeneric(bytes memory _data, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public payable onlyProxy() {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        398
Source: 
>     // Interface functions to allow specifying ICAP addresses as strings.
>     function transferToICAP(string memory _icap, uint _value) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferToICAPWithReference(_icap, _value, '');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        408
Source: 
> 
>     function transferFromToICAP(address _from, string memory _icap, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ambi2Enabled
Line:        463
Source: 
>     // Perform only after claiming the node, or claim in the same tx.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ambi2EnabledFull
Line:        481
Source: 
>     // Setup and claim atomically.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetInterface
Line:        44
Source: 
> 
>     function _performGeneric(bytes memory, address) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         revert();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        184
Source: 
>      */
>     function init(AssetProxyInterface _proxy) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(proxy) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        200
Source: 
>      */
>     function _performTransferWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        237
Source: 
>      */
>     function _performTransferToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _icap,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        270
Source: 
>      */
>     function _performTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        309
Source: 
>      */
>     function _performTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        345
Source: 
>      */
>     function _performApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        369
Source: 
>      */
>     function _performGeneric(bytes memory _data, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public payable onlyProxy() {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        398
Source: 
>     // Interface functions to allow specifying ICAP addresses as strings.
>     function transferToICAP(string memory _icap, uint _value) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferToICAPWithReference(_icap, _value, '');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        408
Source: 
> 
>     function transferFromToICAP(address _from, string memory _icap, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ambi2Enabled
Line:        463
Source: 
>     // Perform only after claiming the node, or claim in the same tx.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ambi2EnabledFull
Line:        481
Source: 
>     // Setup and claim atomically.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetInterface
Line:        44
Source: 
> 
>     function _performGeneric(bytes memory, address) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         revert();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        184
Source: 
>      */
>     function init(AssetProxyInterface _proxy) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(proxy) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        200
Source: 
>      */
>     function _performTransferWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        237
Source: 
>      */
>     function _performTransferToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _icap,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        270
Source: 
>      */
>     function _performTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        309
Source: 
>      */
>     function _performTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        345
Source: 
>      */
>     function _performApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        369
Source: 
>      */
>     function _performGeneric(bytes memory _data, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public payable onlyProxy() {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        398
Source: 
>     // Interface functions to allow specifying ICAP addresses as strings.
>     function transferToICAP(string memory _icap, uint _value) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferToICAPWithReference(_icap, _value, '');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Asset
Line:        408
Source: 
> 
>     function transferFromToICAP(address _from, string memory _icap, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ambi2Enabled
Line:        463
Source: 
>     // Perform only after claiming the node, or claim in the same tx.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ambi2EnabledFull
Line:        481
Source: 
>     // Setup and claim atomically.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetWithWhitelist
Line:        526
Source: 
> 
>     function allowTransferFrom(address _from) public onlyRole('admin') returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whitelist[_from] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetWithWhitelist
Line:        531
Source: 
> 
>     function blockTransferFrom(address _from) public onlyRole('admin') returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whitelist[_from] = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetWithWhitelist
Line:        541
Source: 
> 
>     function removeRestriction() public onlyRole('admin') returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         restrictionRemoved = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetWithWhitelist
Line:        554
Source: 
> 
>     function setExpiration(uint _time) public onlyRole('admin') returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (restrictionExpiraton != 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        258
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _icap, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        225
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _to, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        333
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _icap, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        297
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _to, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        358
Source: 
>     internal returns(bool) {
>         return proxy._forwardApprove(_spender, _value, _sender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        258
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _icap, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        225
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _to, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        333
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _icap, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        297
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _to, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        358
Source: 
>     internal returns(bool) {
>         return proxy._forwardApprove(_spender, _value, _sender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        485
Source: 
>         }
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             !_ambi2.isOwner(address(this), msg.sender)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        486
Source: 
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>             !_ambi2.isOwner(address(this), msg.sender)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        258
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _icap, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        225
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _to, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        333
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _icap, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        297
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _to, _value, _reference, _sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Asset
Line:        358
Source: 
>     internal returns(bool) {
>         return proxy._forwardApprove(_spender, _value, _sender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        485
Source: 
>         }
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             !_ambi2.isOwner(address(this), msg.sender)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        486
Source: 
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>             !_ambi2.isOwner(address(this), msg.sender)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AssetWithAmbi
Line:        504
Source: 
>     modifier onlyRole(bytes32 _role) {
>         if (address(ambi2) != address(0) && (ambi2.hasRole(address(this), _role, _sender()))) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Asset
Line:        161
Source: 
>  */
> contract Asset is AssetInterface, Bytes32, ReturnData {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Assigned asset proxy contract, immutable.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    AssetWithAmbi
Line:        502
Source: 
> 
> contract AssetWithAmbi is Asset, Ambi2EnabledFull {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier onlyRole(bytes32 _role) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        519
Source: 
>  */
> contract AssetWithWhitelist is AssetWithAmbi {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => bool) public whitelist;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        184
Source: 
>      */
>     function init(AssetProxyInterface _proxy) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(proxy) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        200
Source: 
>      */
>     function _performTransferWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        237
Source: 
>      */
>     function _performTransferToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _icap,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        345
Source: 
>      */
>     function _performApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ambi2Enabled
Line:        463
Source: 
>     // Perform only after claiming the node, or claim in the same tx.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        481
Source: 
>     // Setup and claim atomically.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        184
Source: 
>      */
>     function init(AssetProxyInterface _proxy) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(proxy) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        200
Source: 
>      */
>     function _performTransferWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        237
Source: 
>      */
>     function _performTransferToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _icap,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        345
Source: 
>      */
>     function _performApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ambi2Enabled
Line:        463
Source: 
>     // Perform only after claiming the node, or claim in the same tx.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        481
Source: 
>     // Setup and claim atomically.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        184
Source: 
>      */
>     function init(AssetProxyInterface _proxy) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(proxy) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        200
Source: 
>      */
>     function _performTransferWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        237
Source: 
>      */
>     function _performTransferToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _icap,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Asset
Line:        345
Source: 
>      */
>     function _performApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ambi2Enabled
Line:        463
Source: 
>     // Perform only after claiming the node, or claim in the same tx.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        481
Source: 
>     // Setup and claim atomically.
>     function setupAmbi2(Ambi2 _ambi2) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(ambi2) != address(0)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetInterface
Line:        44
Source: 
> 
>     function _performGeneric(bytes memory, address) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         revert();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        270
Source: 
>      */
>     function _performTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        309
Source: 
>      */
>     function _performTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        369
Source: 
>      */
>     function _performGeneric(bytes memory _data, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public payable onlyProxy() {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        398
Source: 
>     // Interface functions to allow specifying ICAP addresses as strings.
>     function transferToICAP(string memory _icap, uint _value) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferToICAPWithReference(_icap, _value, '');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        402
Source: 
> 
>     function transferToICAPWithReference(string memory _icap, uint _value, string memory _reference)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        408
Source: 
> 
>     function transferFromToICAP(address _from, string memory _icap, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        413
Source: 
> 
>     function transferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        423
Source: 
> 
>     function isICAP(address _address) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes20 a = bytes20(_address);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetInterface
Line:        44
Source: 
> 
>     function _performGeneric(bytes memory, address) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         revert();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        270
Source: 
>      */
>     function _performTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        309
Source: 
>      */
>     function _performTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        369
Source: 
>      */
>     function _performGeneric(bytes memory _data, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public payable onlyProxy() {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        398
Source: 
>     // Interface functions to allow specifying ICAP addresses as strings.
>     function transferToICAP(string memory _icap, uint _value) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferToICAPWithReference(_icap, _value, '');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        402
Source: 
> 
>     function transferToICAPWithReference(string memory _icap, uint _value, string memory _reference)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        408
Source: 
> 
>     function transferFromToICAP(address _from, string memory _icap, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        413
Source: 
> 
>     function transferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        423
Source: 
> 
>     function isICAP(address _address) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes20 a = bytes20(_address);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetInterface
Line:        44
Source: 
> 
>     function _performGeneric(bytes memory, address) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         revert();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        270
Source: 
>      */
>     function _performTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        309
Source: 
>      */
>     function _performTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        369
Source: 
>      */
>     function _performGeneric(bytes memory _data, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public payable onlyProxy() {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        398
Source: 
>     // Interface functions to allow specifying ICAP addresses as strings.
>     function transferToICAP(string memory _icap, uint _value) public returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return transferToICAPWithReference(_icap, _value, '');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        402
Source: 
> 
>     function transferToICAPWithReference(string memory _icap, uint _value, string memory _reference)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        408
Source: 
> 
>     function transferFromToICAP(address _from, string memory _icap, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        413
Source: 
> 
>     function transferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Asset
Line:        423
Source: 
> 
>     function isICAP(address _address) public pure returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes20 a = bytes20(_address);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        526
Source: 
> 
>     function allowTransferFrom(address _from) public onlyRole('admin') returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whitelist[_from] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        531
Source: 
> 
>     function blockTransferFrom(address _from) public onlyRole('admin') returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whitelist[_from] = false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        536
Source: 
> 
>     function transferIsAllowed(address _from) public view returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable-next-line not-rely-on-time

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        486
Source: 
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>             !_ambi2.isOwner(address(this), msg.sender)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        485
Source: 
>         }
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             !_ambi2.isOwner(address(this), msg.sender)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        486
Source: 
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>             !_ambi2.isOwner(address(this), msg.sender)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        485
Source: 
>         }
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             !_ambi2.isOwner(address(this), msg.sender)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        486
Source: 
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>             !_ambi2.isOwner(address(this), msg.sender)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Violation
Contract:    Ambi2EnabledFull
Line:        485
Source: 
>         }
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             !_ambi2.isOwner(address(this), msg.sender)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        204
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        223
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     internal returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        241
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        256
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     internal returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        275
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        295
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     internal returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        314
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        331
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     internal returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        345
Source: 
>      */
>     function _performApprove(address _spender, uint _value, address _sender)
>                                                             ^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        356
Source: 
>      */
>     function _approve(address _spender, uint _value, address _sender)
>                                                      ^^^^^^^^^^^^^^^
>     internal returns(bool) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Asset
Line:        369
Source: 
>      */
>     function _performGeneric(bytes memory _data, address _sender)
>                                                  ^^^^^^^^^^^^^^^
>     public payable onlyProxy() {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        546
Source: 
> 
>     modifier transferAllowed(address _sender) {
>                              ^^^^^^^^^^^^^^^
>         if (!transferIsAllowed(_sender)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        573
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     internal transferAllowed(_sender) returns(bool)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        583
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     internal transferAllowed(_sender) returns(bool)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        594
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     internal transferAllowed(_from) returns(bool)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    AssetWithWhitelist
Line:        605
Source: 
>         string memory _reference,
>         address _sender)
>         ^^^^^^^^^^^^^^^
>     internal transferAllowed(_from) returns(bool)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetInterface
Line:        11
Source: 
> contract AssetInterface {
>     function _performTransferWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetInterface
Line:        18
Source: 
> 
>     function _performTransferToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _icap,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetInterface
Line:        25
Source: 
> 
>     function _performApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetInterface
Line:        28
Source: 
> 
>     function _performTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetInterface
Line:        36
Source: 
> 
>     function _performTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetInterface
Line:        44
Source: 
> 
>     function _performGeneric(bytes memory, address) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         revert();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetProxyInterface
Line:        78
Source: 
> contract AssetProxyInterface is ERC20Interface {
>     function _forwardApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public returns(bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetProxyInterface
Line:        81
Source: 
> 
>     function _forwardTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetProxyInterface
Line:        89
Source: 
> 
>     function _forwardTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Asset
Line:        200
Source: 
>      */
>     function _performTransferWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _to,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Asset
Line:        237
Source: 
>      */
>     function _performTransferToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _icap,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Asset
Line:        270
Source: 
>      */
>     function _performTransferFromWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Asset
Line:        309
Source: 
>      */
>     function _performTransferFromToICAPWithReference(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _from,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Asset
Line:        345
Source: 
>      */
>     function _performApprove(address _spender, uint _value, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public onlyProxy() returns(bool) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Asset
Line:        369
Source: 
>      */
>     function _performGeneric(bytes memory _data, address _sender)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public payable onlyProxy() {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ambi2Enabled
Line:        456
Source: 
> 
>     modifier onlyRole(bytes32 _role) {
>                       ^^^^^^^^^^^^^
>         if (address(ambi2) != address(0) && ambi2.hasRole(address(this), _role, msg.sender)) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AssetWithAmbi
Line:        503
Source: 
> contract AssetWithAmbi is Asset, Ambi2EnabledFull {
>     modifier onlyRole(bytes32 _role) {
>                       ^^^^^^^^^^^^^
>         if (address(ambi2) != address(0) && (ambi2.hasRole(address(this), _role, _sender()))) {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AssetWithWhitelist
Line:        546
Source: 
> 
>     modifier transferAllowed(address _sender) {
>                              ^^^^^^^^^^^^^^^
>         if (!transferIsAllowed(_sender)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        485
Source: 
>         }
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             !_ambi2.isOwner(address(this), msg.sender)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        486
Source: 
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>             !_ambi2.isOwner(address(this), msg.sender)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        485
Source: 
>         }
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             !_ambi2.isOwner(address(this), msg.sender)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        486
Source: 
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>             !_ambi2.isOwner(address(this), msg.sender)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        485
Source: 
>         }
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             !_ambi2.isOwner(address(this), msg.sender)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        486
Source: 
>         if (!_ambi2.claimFor(address(this), msg.sender) &&
>             !_ambi2.isOwner(address(this), msg.sender)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return false;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetWithAmbi
Line:        504
Source: 
>     modifier onlyRole(bytes32 _role) {
>         if (address(ambi2) != address(0) && (ambi2.hasRole(address(this), _role, _sender()))) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        258
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _icap, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        225
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _to, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        333
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _icap, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        297
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _to, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        358
Source: 
>     internal returns(bool) {
>         return proxy._forwardApprove(_spender, _value, _sender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        258
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _icap, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        225
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _to, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        333
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _icap, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        297
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _to, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        358
Source: 
>     internal returns(bool) {
>         return proxy._forwardApprove(_spender, _value, _sender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        258
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _icap, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        225
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _sender, _to, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        333
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromToICAPWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _icap, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        297
Source: 
>     internal returns(bool) {
>         return proxy._forwardTransferFromWithReference(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _from, _to, _value, _reference, _sender);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Asset
Line:        358
Source: 
>     internal returns(bool) {
>         return proxy._forwardApprove(_spender, _value, _sender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Asset
Line:        163
Source: 
>     // Assigned asset proxy contract, immutable.
>     AssetProxyInterface public proxy;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Asset
Line:        381
Source: 
>     // Most probably the following should never be redefined in child contracts.
>     address public genericSender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ambi2Enabled
Line:        454
Source: 
> contract Ambi2Enabled {
>     Ambi2 public ambi2;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Asset
Line:        163
Source: 
>     // Assigned asset proxy contract, immutable.
>     AssetProxyInterface public proxy;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Asset
Line:        381
Source: 
>     // Most probably the following should never be redefined in child contracts.
>     address public genericSender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ambi2Enabled
Line:        454
Source: 
> contract Ambi2Enabled {
>     Ambi2 public ambi2;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Asset
Line:        163
Source: 
>     // Assigned asset proxy contract, immutable.
>     AssetProxyInterface public proxy;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Asset
Line:        381
Source: 
>     // Most probably the following should never be redefined in child contracts.
>     address public genericSender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ambi2Enabled
Line:        454
Source: 
> contract Ambi2Enabled {
>     Ambi2 public ambi2;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AssetWithWhitelist
Line:        521
Source: 
>     mapping(address => bool) public whitelist;
>     uint public restrictionExpiraton;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public restrictionRemoved;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AssetWithWhitelist
Line:        522
Source: 
>     uint public restrictionExpiraton;
>     bool public restrictionRemoved;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Asset
Line:        188
Source: 
>         }
>         proxy = _proxy;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ambi2Enabled
Line:        468
Source: 
> 
>         ambi2 = _ambi2;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        490
Source: 
> 
>         ambi2 = _ambi2;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Asset
Line:        188
Source: 
>         }
>         proxy = _proxy;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ambi2Enabled
Line:        468
Source: 
> 
>         ambi2 = _ambi2;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ambi2EnabledFull
Line:        490
Source: 
> 
>         ambi2 = _ambi2;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetWithWhitelist
Line:        527
Source: 
>     function allowTransferFrom(address _from) public onlyRole('admin') returns(bool) {
>         whitelist[_from] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetWithWhitelist
Line:        532
Source: 
>     function blockTransferFrom(address _from) public onlyRole('admin') returns(bool) {
>         whitelist[_from] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetWithWhitelist
Line:        542
Source: 
>     function removeRestriction() public onlyRole('admin') returns(bool) {
>         restrictionRemoved = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AssetWithWhitelist
Line:        564
Source: 
>         }
>         restrictionExpiraton = _time;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ambi2Enabled
Line:        468
Source: 
> 
>         ambi2 = _ambi2;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ambi2EnabledFull
Line:        490
Source: 
> 
>         ambi2 = _ambi2;
>         ^^^^^^^^^^^^^^
>         return true;

[0m
