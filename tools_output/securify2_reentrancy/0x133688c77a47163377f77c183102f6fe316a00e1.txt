[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OwnerHelper
Line:        59
Source: 
>   	
>   	function transferOwnership(address _to) onlyOwner public
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   	{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        181
Source: 
> 
>     function totalSupply() view public returns (uint) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        186
Source: 
>     
>     function balanceOf(address _who) view public returns (uint) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        191
Source: 
>     
>     function transfer(address _to, uint _value) notLocked public returns (bool) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        203
Source: 
>     
>     function approve(address _spender, uint _value) notLocked public returns (bool)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        214
Source: 
>     
>     function allowance(address _owner, address _spender) view public returns (uint) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        219
Source: 
> 
>     function transferFrom(address _from, address _to, uint _value) notLocked public returns (bool) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        248
Source: 
>     
>     function setTokenUnlock() onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        255
Source: 
>     
>     function setTokenLock() onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        262
Source: 
> 
>     function withdrawTokenRequest(address _contract, uint _value) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawRequestFlag[_contract][_value] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        267
Source: 
> 
>     function withdrawTokens(address _contract, uint _value) onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        290
Source: 
> 
>     function burnToken(uint _value) onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        305
Source: 
>     
>     function close() onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        312
Source: 
> 
>     function adminIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        327
Source: 
> 
>     function researchIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        342
Source: 
> 
>     function mktIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        357
Source: 
> 
>     function userRewardIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AkmeToken
Line:        371
Source: 
> 
>     function contingencyIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkmeToken
Line:        191
Source: 
>     
>     function transfer(address _to, uint _value) notLocked public returns (bool) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkmeToken
Line:        219
Source: 
> 
>     function transferFrom(address _from, address _to, uint _value) notLocked public returns (bool) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkmeToken
Line:        290
Source: 
> 
>     function burnToken(uint _value) onlyOwner public
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkmeToken
Line:        312
Source: 
> 
>     function adminIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkmeToken
Line:        327
Source: 
> 
>     function researchIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkmeToken
Line:        342
Source: 
> 
>     function mktIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkmeToken
Line:        357
Source: 
> 
>     function userRewardIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AkmeToken
Line:        371
Source: 
> 
>     function contingencyIssue(address _to) onlyOwner public 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AkmeToken
Line:        186
Source: 
>     
>     function balanceOf(address _who) view public returns (uint) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AkmeToken
Line:        203
Source: 
>     
>     function approve(address _spender, uint _value) notLocked public returns (bool)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AkmeToken
Line:        214
Source: 
>     
>     function allowance(address _owner, address _spender) view public returns (uint) 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AkmeToken
Line:        262
Source: 
> 
>     function withdrawTokenRequest(address _contract, uint _value) onlyOwner public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawRequestFlag[_contract][_value] = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    AkmeToken
Line:        278
Source: 
>             uint eth = _value.mul(10 ** uint256(decimals));
>             msg.sender.transfer(eth);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AkmeToken
Line:        119
Source: 
> 
>     uint constant public maxTotalSupply = 2000000000 * E18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public maxAdminSupply = 200000000 * E18; // 10%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AkmeToken
Line:        120
Source: 
>     uint constant public maxTotalSupply = 2000000000 * E18;
>     uint constant public maxAdminSupply = 200000000 * E18; // 10%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public maxResearchSupply = 200000000 * E18; // 10%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AkmeToken
Line:        121
Source: 
>     uint constant public maxAdminSupply = 200000000 * E18; // 10%
>     uint constant public maxResearchSupply = 200000000 * E18; // 10%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public maxMktSupply = 240000000 * E18; // 12%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AkmeToken
Line:        122
Source: 
>     uint constant public maxResearchSupply = 200000000 * E18; // 10%
>     uint constant public maxMktSupply = 240000000 * E18; // 12%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public maxUserRewardSupply = 1300000000 * E18; // 65%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AkmeToken
Line:        123
Source: 
>     uint constant public maxMktSupply = 240000000 * E18; // 12%
>     uint constant public maxUserRewardSupply = 1300000000 * E18; // 65%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public maxContingencySupply = 60000000 * E18; // 3%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AkmeToken
Line:        124
Source: 
>     uint constant public maxUserRewardSupply = 1300000000 * E18; // 65%
>     uint constant public maxContingencySupply = 60000000 * E18; // 3%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.9;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AkmeToken
Line:        119
Source: 
> 
>     uint constant public maxTotalSupply = 2000000000 * E18;
>                                           ^^^^^^^^^^
>     uint constant public maxAdminSupply = 200000000 * E18; // 10%

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AkmeToken
Line:        120
Source: 
>     uint constant public maxTotalSupply = 2000000000 * E18;
>     uint constant public maxAdminSupply = 200000000 * E18; // 10%
>                                           ^^^^^^^^^
>     uint constant public maxResearchSupply = 200000000 * E18; // 10%

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AkmeToken
Line:        121
Source: 
>     uint constant public maxAdminSupply = 200000000 * E18; // 10%
>     uint constant public maxResearchSupply = 200000000 * E18; // 10%
>                                              ^^^^^^^^^
>     uint constant public maxMktSupply = 240000000 * E18; // 12%

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AkmeToken
Line:        122
Source: 
>     uint constant public maxResearchSupply = 200000000 * E18; // 10%
>     uint constant public maxMktSupply = 240000000 * E18; // 12%
>                                         ^^^^^^^^^
>     uint constant public maxUserRewardSupply = 1300000000 * E18; // 65%

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AkmeToken
Line:        123
Source: 
>     uint constant public maxMktSupply = 240000000 * E18; // 12%
>     uint constant public maxUserRewardSupply = 1300000000 * E18; // 65%
>                                                ^^^^^^^^^^
>     uint constant public maxContingencySupply = 60000000 * E18; // 3%

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AkmeToken
Line:        124
Source: 
>     uint constant public maxUserRewardSupply = 1300000000 * E18; // 65%
>     uint constant public maxContingencySupply = 60000000 * E18; // 3%
>                                                 ^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    AkmeToken
Line:        145
Source: 
>     // Token Total
>     uint constant private E18 = 1000000000000000000;
>                                 ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    AkmeToken
Line:        278
Source: 
>             uint eth = _value.mul(10 ** uint256(decimals));
>             msg.sender.transfer(eth);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    AkmeToken
Line:        278
Source: 
>             uint eth = _value.mul(10 ** uint256(decimals));
>             msg.sender.transfer(eth);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AkmeToken
Line:        278
Source: 
>             uint eth = _value.mul(10 ** uint256(decimals));
>             msg.sender.transfer(eth);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AkmeToken
Line:        282
Source: 
>         {
>             uint8 tokenDecimals = IERC20Metadata(_contract).decimals();
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint tokens = _value.mul(10 ** uint256(tokenDecimals));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AkmeToken
Line:        284
Source: 
>             uint tokens = _value.mul(10 ** uint256(tokenDecimals));
>             ERC20Interface(_contract).transfer(msg.sender, tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AkmeToken
Line:        284
Source: 
>             uint tokens = _value.mul(10 ** uint256(tokenDecimals));
>             ERC20Interface(_contract).transfer(msg.sender, tokens);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AkmeToken
Line:        106
Source: 
>     
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AkmeToken
Line:        108
Source: 
>     uint8 public decimals;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AkmeToken
Line:        119
Source: 
> 
>     uint constant public maxTotalSupply = 2000000000 * E18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant public maxAdminSupply = 200000000 * E18; // 10%

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    AkmeToken
Line:        270
Source: 
>         require(withdrawRequestFlag[_contract][_value],"Withdraw request first");
>         require(block.timestamp >= lastWithdrawRequestTime[_contract][_value].add(WITHDRAW_REQUEST_DELAY_TIME), "request hasn't surpassed time");
>                 ^^^^^^^^^^^^^^^
>         require(block.timestamp <= lastWithdrawRequestTime[_contract][_value].add(WITHDRAW_REQUEST_MAXIMUM_DELAY_TIME), "request is stale");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    AkmeToken
Line:        271
Source: 
>         require(block.timestamp >= lastWithdrawRequestTime[_contract][_value].add(WITHDRAW_REQUEST_DELAY_TIME), "request hasn't surpassed time");
>         require(block.timestamp <= lastWithdrawRequestTime[_contract][_value].add(WITHDRAW_REQUEST_MAXIMUM_DELAY_TIME), "request is stale");
>                 ^^^^^^^^^^^^^^^
> 

[0m
