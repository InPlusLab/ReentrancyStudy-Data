[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        35
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        181
Source: 
> 
>     function setParners(address payable _partner, uint _fee) public onlyOwner (){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PARTNER_ADDRESS = _partner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        185
Source: 
>     }
>     function setSys(address payable _sys, uint _fee) public onlyOwner (){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         SYS_ADDRESS = _sys;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        189
Source: 
>     }
>     function getItem(uint _code) public view returns (address iOwner, string memory _key,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _item,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        195
Source: 
>     }
>     function getItemByOwner(uint _code) public returns (address iOwner, string memory _key,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _item,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        207
Source: 
>     }
>     function getItemsByCreator() public returns (uint[] memory _code, uint[] memory _iId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (itemsByCreators[msg.sender].code, itemsByCreators[msg.sender].iId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        210
Source: 
>     }
>     function getItemsByTokenOwner(address _game, uint _iId) public returns (uint[] memory _codes) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC721 erc721 = IERC721(_game);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        215
Source: 
>     }
>     function changePass(uint _code, bytes32 _pass) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == items[_code].creator);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        219
Source: 
>     }
>     function checkPass(uint _code, bytes32 _pass) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return items[_code].pass == _pass;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        222
Source: 
>     }
>     function deposit(uint256 _code, address payable _iOwner, string memory _key, uint256 _feeAmount,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _game, uint256 _iId, ERC20 _bonusToken, uint256 _bonusTokenAmount, bytes32 _pass, address _buyer) public payable{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        252
Source: 
>     }
>     function cancel(uint256 _code, bytes32 _pass) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(items[_code].available == true && msg.sender == address(items[_code].creator) && _pass == items[_code].pass);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DepositBlockchainCard
Line:        269
Source: 
>     }
>     function withdraw(uint256 _code, address payable _to, bytes32 _pass) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(items[_code].available == true && msg.sender == address(items[_code].iOwner) && _pass == items[_code].pass);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        212
Source: 
>         IERC721 erc721 = IERC721(_game);
>         require(erc721.ownerOf(_iId) == msg.sender);
>                 ^^^^^^^^^^^^^^^^^^^^
>         return codes[_game].codes[_iId];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        230
Source: 
>                 ERC20 erc20 = ERC20(_bonusToken);
>                 erc20.transferFrom(msg.sender, address(this), _bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        235
Source: 
>         }
>         _iOwner.transfer(_feeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC721 erc721 = IERC721(_game);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        237
Source: 
>         IERC721 erc721 = IERC721(_game);
>         erc721.transferFrom(msg.sender, address(this), _iId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         items[_code] = item(_iOwner, _key, _iId, _game, true, _bonusToken, _bonusTokenAmount, msg.sender, _buyer, _pass, sysfee, partnerfee);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        258
Source: 
>                 ERC20 erc20 = ERC20(items[_code].bonusToken);
>                 erc20.transfer(items[_code].creator, items[_code].bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        264
Source: 
>         IERC721 erc721 = IERC721(items[_code].game);
>         erc721.transferFrom(address(this), items[_code].creator, items[_code].item);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         items[_code].available = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        266
Source: 
>         items[_code].available = false;
>         items[_code].creator.transfer(items[_code].sysfee.add(items[_code].partnerfee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        261
Source: 
>         } else {
>             items[_code].creator.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        275
Source: 
>                 ERC20 erc20 = ERC20(items[_code].bonusToken);
>                 erc20.transfer(_to, items[_code].bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        281
Source: 
>         IERC721 erc721 = IERC721(items[_code].game);
>         erc721.transferFrom(address(this), _to, items[_code].item);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         items[_code].available = false;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        283
Source: 
>         items[_code].available = false;
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        284
Source: 
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        278
Source: 
>         } else {
>             _to.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        269
Source: 
>     }
>     function withdraw(uint256 _code, address payable _to, bytes32 _pass) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(items[_code].available == true && msg.sender == address(items[_code].iOwner) && _pass == items[_code].pass);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        181
Source: 
> 
>     function setParners(address payable _partner, uint _fee) public onlyOwner (){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PARTNER_ADDRESS = _partner;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        185
Source: 
>     }
>     function setSys(address payable _sys, uint _fee) public onlyOwner (){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         SYS_ADDRESS = _sys;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        189
Source: 
>     }
>     function getItem(uint _code) public view returns (address iOwner, string memory _key,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _item,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        210
Source: 
>     }
>     function getItemsByTokenOwner(address _game, uint _iId) public returns (uint[] memory _codes) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC721 erc721 = IERC721(_game);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        215
Source: 
>     }
>     function changePass(uint _code, bytes32 _pass) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == items[_code].creator);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        219
Source: 
>     }
>     function checkPass(uint _code, bytes32 _pass) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return items[_code].pass == _pass;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        222
Source: 
>     }
>     function deposit(uint256 _code, address payable _iOwner, string memory _key, uint256 _feeAmount,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _game, uint256 _iId, ERC20 _bonusToken, uint256 _bonusTokenAmount, bytes32 _pass, address _buyer) public payable{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DepositBlockchainCard
Line:        230
Source: 
>                 ERC20 erc20 = ERC20(_bonusToken);
>                 erc20.transferFrom(msg.sender, address(this), _bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DepositBlockchainCard
Line:        237
Source: 
>         IERC721 erc721 = IERC721(_game);
>         erc721.transferFrom(msg.sender, address(this), _iId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         items[_code] = item(_iOwner, _key, _iId, _game, true, _bonusToken, _bonusTokenAmount, msg.sender, _buyer, _pass, sysfee, partnerfee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        235
Source: 
>         }
>         _iOwner.transfer(_feeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC721 erc721 = IERC721(_game);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        266
Source: 
>         items[_code].available = false;
>         items[_code].creator.transfer(items[_code].sysfee.add(items[_code].partnerfee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        261
Source: 
>         } else {
>             items[_code].creator.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        283
Source: 
>         items[_code].available = false;
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        284
Source: 
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        278
Source: 
>         } else {
>             _to.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        148
Source: 
>     ERC20 constant internal ETH_TOKEN_ADDRESS = ERC20(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);
>     address payable public SYS_ADDRESS = address(0xbE064F371A0e1e0EF7f4DA08578210002219722B);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable public PARTNER_ADDRESS = address(0x1e56CAB5Dc4503caf9CcB469Ae7b0b22354C678c);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        149
Source: 
>     address payable public SYS_ADDRESS = address(0xbE064F371A0e1e0EF7f4DA08578210002219722B);
>     address payable public PARTNER_ADDRESS = address(0x1e56CAB5Dc4503caf9CcB469Ae7b0b22354C678c);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public sysfee = 100000000000000;// 1 finney;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        153
Source: 
> 
>     struct item {
>     ^^^^^^^^^^^^^
>         address iOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        167
Source: 
>     }
>     struct itemsByCreator {
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint[] code;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        171
Source: 
>     }
>     struct game2code {
>     ^^^^^^^^^^^^^^^^^^
>         mapping(uint => uint[]) codes;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        177
Source: 
>     mapping(address => itemsByCreator) private itemsByCreators;
>     event _deposit(address creator, uint _code);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event _withdraw(uint _code);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        178
Source: 
>     event _deposit(address creator, uint _code);
>     event _withdraw(uint _code);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     constructor() public {}

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        150
Source: 
>     address payable public PARTNER_ADDRESS = address(0x1e56CAB5Dc4503caf9CcB469Ae7b0b22354C678c);
>     uint public sysfee = 100000000000000;// 1 finney;
>                          ^^^^^^^^^^^^^^^
>     uint public partnerfee = 70000000000000; // 1 finney;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        151
Source: 
>     uint public sysfee = 100000000000000;// 1 finney;
>     uint public partnerfee = 70000000000000; // 1 finney;
>                              ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        266
Source: 
>         items[_code].available = false;
>         items[_code].creator.transfer(items[_code].sysfee.add(items[_code].partnerfee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        261
Source: 
>         } else {
>             items[_code].creator.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        283
Source: 
>         items[_code].available = false;
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        284
Source: 
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        278
Source: 
>         } else {
>             _to.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        235
Source: 
>         }
>         _iOwner.transfer(_feeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC721 erc721 = IERC721(_game);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        266
Source: 
>         items[_code].available = false;
>         items[_code].creator.transfer(items[_code].sysfee.add(items[_code].partnerfee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        261
Source: 
>         } else {
>             items[_code].creator.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        283
Source: 
>         items[_code].available = false;
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        284
Source: 
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        278
Source: 
>         } else {
>             _to.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        235
Source: 
>         }
>         _iOwner.transfer(_feeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC721 erc721 = IERC721(_game);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        266
Source: 
>         items[_code].available = false;
>         items[_code].creator.transfer(items[_code].sysfee.add(items[_code].partnerfee));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        261
Source: 
>         } else {
>             items[_code].creator.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        283
Source: 
>         items[_code].available = false;
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        284
Source: 
>         SYS_ADDRESS.transfer(items[_code].sysfee);
>         PARTNER_ADDRESS.transfer(items[_code].partnerfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _withdraw(_code);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        278
Source: 
>         } else {
>             _to.transfer(items[_code].bonusTokenAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        212
Source: 
>         IERC721 erc721 = IERC721(_game);
>         require(erc721.ownerOf(_iId) == msg.sender);
>                 ^^^^^^^^^^^^^^^^^^^^
>         return codes[_game].codes[_iId];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        230
Source: 
>                 ERC20 erc20 = ERC20(_bonusToken);
>                 erc20.transferFrom(msg.sender, address(this), _bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        237
Source: 
>         IERC721 erc721 = IERC721(_game);
>         erc721.transferFrom(msg.sender, address(this), _iId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         items[_code] = item(_iOwner, _key, _iId, _game, true, _bonusToken, _bonusTokenAmount, msg.sender, _buyer, _pass, sysfee, partnerfee);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        258
Source: 
>                 ERC20 erc20 = ERC20(items[_code].bonusToken);
>                 erc20.transfer(items[_code].creator, items[_code].bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        264
Source: 
>         IERC721 erc721 = IERC721(items[_code].game);
>         erc721.transferFrom(address(this), items[_code].creator, items[_code].item);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         items[_code].available = false;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        275
Source: 
>                 ERC20 erc20 = ERC20(items[_code].bonusToken);
>                 erc20.transfer(_to, items[_code].bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DepositBlockchainCard
Line:        281
Source: 
>         IERC721 erc721 = IERC721(items[_code].game);
>         erc721.transferFrom(address(this), _to, items[_code].item);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         items[_code].available = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        235
Source: 
>         }
>         _iOwner.transfer(_feeAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC721 erc721 = IERC721(_game);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        238
Source: 
>         erc721.transferFrom(msg.sender, address(this), _iId);
>         items[_code] = item(_iOwner, _key, _iId, _game, true, _bonusToken, _bonusTokenAmount, msg.sender, _buyer, _pass, sysfee, partnerfee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         items[_code].available = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        239
Source: 
>         items[_code] = item(_iOwner, _key, _iId, _game, true, _bonusToken, _bonusTokenAmount, msg.sender, _buyer, _pass, sysfee, partnerfee);
>         items[_code].available = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addCode(_game, _iId, _code);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        241
Source: 
>         addCode(_game, _iId, _code);
>         itemsByCreators[msg.sender].code.push(_code);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         itemsByCreators[msg.sender].iId.push(_iId);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        242
Source: 
>         itemsByCreators[msg.sender].code.push(_code);
>         itemsByCreators[msg.sender].iId.push(_iId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit _deposit(msg.sender, _code);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DepositBlockchainCard
Line:        250
Source: 
>         }
>         if(!existed) codes[_game].codes[_iId].push(_code);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DepositBlockchainCard
Line:        230
Source: 
>                 ERC20 erc20 = ERC20(_bonusToken);
>                 erc20.transferFrom(msg.sender, address(this), _bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DepositBlockchainCard
Line:        258
Source: 
>                 ERC20 erc20 = ERC20(items[_code].bonusToken);
>                 erc20.transfer(items[_code].creator, items[_code].bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DepositBlockchainCard
Line:        275
Source: 
>                 ERC20 erc20 = ERC20(items[_code].bonusToken);
>                 erc20.transfer(_to, items[_code].bonusTokenAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
