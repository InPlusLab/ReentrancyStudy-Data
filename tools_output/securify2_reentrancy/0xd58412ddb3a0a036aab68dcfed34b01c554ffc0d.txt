[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StorageWrite
Line:        295
Source: 
>         uint slot = _getArraySlot(_dest, _index);
>         assembly { result := sload(slot) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StorageWrite
Line:        299
Source: 
>     function _getArraySlot(uint _dest, uint _index) internal pure returns (uint slot) {
>         assembly {
>         ^^^^^^^^^^
>             let free := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StorageWrite
Line:        308
Source: 
>         uint slot = _getArraySlot(_dest, _index);
>         assembly { sstore(slot, _value) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        551
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NewCards
Line:        1855
Source: 
>         uint256 cp;
>         assembly { cp := protoToSeason_slot }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StorageWrite.repeatUint16(cp, low, (high - low) + 1, id);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NewCards
Line:        1942
Source: 
>         uint256 cp;
>         assembly { cp := cardProtos_slot }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StorageWrite.uint16s(cp, start, _protos);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NewCards
Line:        1945
Source: 
>         uint256 cq;
>         assembly { cq := cardQualities_slot }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StorageWrite.uint8s(cq, start, _qualities);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Cards
Line:        2398
Source: 
>         uint256 cp;
>         assembly { cp := protoToSeason_slot }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StorageWrite.repeatUint16(cp, low, (high - low) + 1, id);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Cards
Line:        2485
Source: 
>         uint256 cp;
>         assembly { cp := cardProtos_slot }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StorageWrite.uint16s(cp, start, _protos);

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Cards
Line:        2488
Source: 
>         uint256 cq;
>         assembly { cq := cardQualities_slot }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StorageWrite.uint8s(cq, start, _qualities);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InscribableToken
Line:        189
Source: 
> 
>     function getProperty(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _id,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InscribableToken
Line:        231
Source: 
> 
>     function getClassProperty(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        652
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        678
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        687
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        810
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(owner != address(0), "ERC721: balance query for the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        810
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(owner != address(0), "ERC721: balance query for the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        810
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(owner != address(0), "ERC721: balance query for the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1399
Source: 
> 
>     function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (batches[index].userID, batches[index].size);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1406
Source: 
> 
>     function ownerOf(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1480
Source: 
> 
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1505
Source: 
> 
>     function getApproved(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1518
Source: 
> 
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1526
Source: 
> 
>     function balanceOf(address _owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InscribableToken
Line:        189
Source: 
> 
>     function getProperty(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _id,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InscribableToken
Line:        231
Source: 
> 
>     function getClassProperty(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        652
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        678
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        687
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        810
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(owner != address(0), "ERC721: balance query for the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1111
Source: 
> 
>     function transferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1124
Source: 
> 
>     function transferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1136
Source: 
> 
>     function safeTransferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1149
Source: 
> 
>     function safeTransferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1399
Source: 
> 
>     function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (batches[index].userID, batches[index].size);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1406
Source: 
> 
>     function ownerOf(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1480
Source: 
> 
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1505
Source: 
> 
>     function getApproved(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1518
Source: 
> 
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1526
Source: 
> 
>     function balanceOf(address _owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1637
Source: 
> 
>     function getDetails(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenId

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1647
Source: 
> 
>     function mintCard(
>     ^^^^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1670
Source: 
> 
>     function mintCards(
>     ^^^^^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1696
Source: 
> 
>     function addFactory(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _factory,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1726
Source: 
> 
>     function approveForMythic(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _factory,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1746
Source: 
> 
>     function makeMythicTradable(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 _mythic

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1765
Source: 
> 
>     function unlockTrading(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _season

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1808
Source: 
> 
>     function burnAll(uint256[] memory tokenIDs) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < tokenIDs.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1822
Source: 
> 
>     function startSeason(
>     ^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1863
Source: 
> 
>     function updateProtos(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint16[] memory _ids,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1902
Source: 
> 
>     function lockProtos(uint16[] memory _ids) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2020
Source: 
> 
>     function setQuality(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokenId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2039
Source: 
> 
>     function setPropertyManager(address _manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         propertyManager = _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2043
Source: 
> 
>     function setProperty(uint256 _id, bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2052
Source: 
> 
>     function setClassProperty(bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2063
Source: 
> 
>     function setBaseURI(string memory uri) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         baseURI = uri;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InscribableToken
Line:        189
Source: 
> 
>     function getProperty(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _id,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InscribableToken
Line:        231
Source: 
> 
>     function getClassProperty(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        652
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        678
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        687
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        810
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(owner != address(0), "ERC721: balance query for the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1111
Source: 
> 
>     function transferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1124
Source: 
> 
>     function transferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1136
Source: 
> 
>     function safeTransferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1149
Source: 
> 
>     function safeTransferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1399
Source: 
> 
>     function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (batches[index].userID, batches[index].size);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1406
Source: 
> 
>     function ownerOf(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1480
Source: 
> 
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1505
Source: 
> 
>     function getApproved(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1518
Source: 
> 
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1526
Source: 
> 
>     function balanceOf(address _owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2180
Source: 
> 
>     function getDetails(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenId

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2239
Source: 
> 
>     function addFactory(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _factory,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2269
Source: 
> 
>     function approveForMythic(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _factory,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2289
Source: 
> 
>     function makeMythicTradable(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 _mythic

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2308
Source: 
> 
>     function unlockTrading(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _season

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2327
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2351
Source: 
> 
>     function burnAll(uint256[] memory tokenIDs) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < tokenIDs.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2365
Source: 
> 
>     function startSeason(
>     ^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2406
Source: 
> 
>     function updateProtos(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint16[] memory _ids,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2445
Source: 
> 
>     function lockProtos(uint16[] memory _ids) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2563
Source: 
> 
>     function setQuality(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokenId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2582
Source: 
> 
>     function setPropertyManager(address _manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         propertyManager = _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2586
Source: 
> 
>     function setProperty(uint256 _id, bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Cards
Line:        2595
Source: 
> 
>     function setClassProperty(bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InscribableToken
Line:        189
Source: 
> 
>     function getProperty(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _id,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InscribableToken
Line:        231
Source: 
> 
>     function getClassProperty(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        652
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        678
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        687
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        810
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(owner != address(0), "ERC721: balance query for the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1111
Source: 
> 
>     function transferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1124
Source: 
> 
>     function transferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1136
Source: 
> 
>     function safeTransferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiTransfer
Line:        1149
Source: 
> 
>     function safeTransferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1399
Source: 
> 
>     function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (batches[index].userID, batches[index].size);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1406
Source: 
> 
>     function ownerOf(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1480
Source: 
> 
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1505
Source: 
> 
>     function getApproved(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1518
Source: 
> 
>     function totalSupply()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchToken
Line:        1526
Source: 
> 
>     function balanceOf(address _owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1637
Source: 
> 
>     function getDetails(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenId

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1696
Source: 
> 
>     function addFactory(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _factory,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1726
Source: 
> 
>     function approveForMythic(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _factory,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1746
Source: 
> 
>     function makeMythicTradable(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 _mythic

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1765
Source: 
> 
>     function unlockTrading(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _season

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1808
Source: 
> 
>     function burnAll(uint256[] memory tokenIDs) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < tokenIDs.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1822
Source: 
> 
>     function startSeason(
>     ^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1863
Source: 
> 
>     function updateProtos(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint16[] memory _ids,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        1902
Source: 
> 
>     function lockProtos(uint16[] memory _ids) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2020
Source: 
> 
>     function setQuality(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokenId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2039
Source: 
> 
>     function setPropertyManager(address _manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         propertyManager = _manager;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2043
Source: 
> 
>     function setProperty(uint256 _id, bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2052
Source: 
> 
>     function setClassProperty(bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NewCards
Line:        2063
Source: 
> 
>     function setBaseURI(string memory uri) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         baseURI = uri;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchWrapper
Line:        2623
Source: 
> 
>     function setMigrating(bool _migrating) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         migrating = _migrating;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchWrapper
Line:        2627
Source: 
> 
>     function copyUntil(uint gasThreshold) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         while (gasleft() > gasThreshold) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchWrapper
Line:        2633
Source: 
> 
>     function mintCards(address _to, uint16[] memory _protos, uint8[] memory _qualities) public returns (uint id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!migrating, "must not be migrating");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchWrapper
Line:        2638
Source: 
> 
>     function mintCard(address _to, uint16 _proto, uint8 _quality) public returns (uint id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!migrating, "must not be migrating");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchWrapper
Line:        2677
Source: 
> 
>     function getQuality(uint _tokenId) public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isOld(_tokenId) ? old.cardQualities(_tokenId) : cardQualities[_tokenId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchWrapper
Line:        2681
Source: 
> 
>     function getDetails(uint256 tokenId) public view returns (uint16 proto, uint8 quality) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isOld(tokenId) ? old.getDetails(tokenId) : (cardProtos[tokenId], cardQualities[tokenId]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BatchWrapper
Line:        2685
Source: 
> 
>     function isTradable(uint256 _tokenId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 proto = getProto(_tokenId);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC721
Line:        1082
Source: 
> 
>         bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (retval == _ERC721_RECEIVED);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BatchWrapper
Line:        2648
Source: 
>         uint256 start = nextBatch;
>         (uint48 userID, uint16 size) = old.batches(start);
>                                        ^^^^^^^^^^^^^^^^^^
>         require(size > 0 && userID > 0, "incorrect batch or limit reached");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BatchWrapper
Line:        2650
Source: 
>         require(size > 0 && userID > 0, "incorrect batch or limit reached");
>         if (old.cardProtos(start) != 0) {
>             ^^^^^^^^^^^^^^^^^^^^^
>             address to = old.userIDToAddress(userID);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BatchWrapper
Line:        2651
Source: 
>         if (old.cardProtos(start) != 0) {
>             address to = old.userIDToAddress(userID);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint48 uID = _getUserID(to);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BatchWrapper
Line:        2674
Source: 
>     function getProto(uint _tokenId) public view returns (uint16) {
>         return isOld(_tokenId) ? old.cardProtos(_tokenId) : cardProtos[_tokenId];
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BatchWrapper
Line:        2678
Source: 
>     function getQuality(uint _tokenId) public view returns (uint8) {
>         return isOld(_tokenId) ? old.cardQualities(_tokenId) : cardQualities[_tokenId];
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BatchWrapper
Line:        2682
Source: 
>     function getDetails(uint256 tokenId) public view returns (uint16 proto, uint8 quality) {
>         return isOld(tokenId) ? old.getDetails(tokenId) : (cardProtos[tokenId], cardQualities[tokenId]);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ImmutableToken
Line:        390
Source: 
> 
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return string(abi.encodePacked(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        687
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        854
Source: 
>      */
>     function getApproved(uint256 tokenId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        854
Source: 
>      */
>     function getApproved(uint256 tokenId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Metadata
Line:        1267
Source: 
>      */
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        854
Source: 
>      */
>     function getApproved(uint256 tokenId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Metadata
Line:        1267
Source: 
>      */
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1406
Source: 
> 
>     function ownerOf(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1480
Source: 
> 
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1505
Source: 
> 
>     function getApproved(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        687
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        854
Source: 
>      */
>     function getApproved(uint256 tokenId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Metadata
Line:        1267
Source: 
>      */
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1406
Source: 
> 
>     function ownerOf(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1480
Source: 
> 
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1505
Source: 
> 
>     function getApproved(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NewCards
Line:        1670
Source: 
> 
>     function mintCards(
>     ^^^^^^^^^^^^^^^^^^^
>         address to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NewCards
Line:        1799
Source: 
> 
>     function burn(uint256 _tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NewCards
Line:        2067
Source: 
> 
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return string(abi.encodePacked(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ImmutableToken
Line:        390
Source: 
> 
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return string(abi.encodePacked(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        687
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        854
Source: 
>      */
>     function getApproved(uint256 tokenId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Metadata
Line:        1267
Source: 
>      */
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1406
Source: 
> 
>     function ownerOf(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1480
Source: 
> 
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1505
Source: 
> 
>     function getApproved(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Cards
Line:        2213
Source: 
> 
>     function mintCards(
>     ^^^^^^^^^^^^^^^^^^^
>         address to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Cards
Line:        2342
Source: 
> 
>     function burn(uint256 _tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        687
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        836
Source: 
>      */
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721
Line:        854
Source: 
>      */
>     function getApproved(uint256 tokenId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721: approved query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC721Metadata
Line:        1267
Source: 
>      */
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1406
Source: 
> 
>     function ownerOf(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1480
Source: 
> 
>     function approve(address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address owner = ownerOf(tokenId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchToken
Line:        1505
Source: 
> 
>     function getApproved(uint256 tokenId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NewCards
Line:        1670
Source: 
> 
>     function mintCards(
>     ^^^^^^^^^^^^^^^^^^^
>         address to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NewCards
Line:        1799
Source: 
> 
>     function burn(uint256 _tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NewCards
Line:        2067
Source: 
> 
>     function tokenURI(uint256 tokenId) external view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return string(abi.encodePacked(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchWrapper
Line:        2623
Source: 
> 
>     function setMigrating(bool _migrating) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         migrating = _migrating;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchWrapper
Line:        2633
Source: 
> 
>     function mintCards(address _to, uint16[] memory _protos, uint8[] memory _qualities) public returns (uint id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!migrating, "must not be migrating");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchWrapper
Line:        2668
Source: 
> 
>     function isOld(uint _tokenId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_exists(_tokenId), "card does not exist");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchWrapper
Line:        2673
Source: 
> 
>     function getProto(uint _tokenId) public view returns (uint16) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isOld(_tokenId) ? old.cardProtos(_tokenId) : cardProtos[_tokenId];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchWrapper
Line:        2677
Source: 
> 
>     function getQuality(uint _tokenId) public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isOld(_tokenId) ? old.cardQualities(_tokenId) : cardQualities[_tokenId];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchWrapper
Line:        2681
Source: 
> 
>     function getDetails(uint256 tokenId) public view returns (uint16 proto, uint8 quality) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return isOld(tokenId) ? old.getDetails(tokenId) : (cardProtos[tokenId], cardQualities[tokenId]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BatchWrapper
Line:        2685
Source: 
> 
>     function isTradable(uint256 _tokenId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint16 proto = getProto(_tokenId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        189
Source: 
> 
>     function getProperty(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _id,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        210
Source: 
> 
>     function getTokenKey(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        222
Source: 
> 
>     function getClassKey(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        231
Source: 
> 
>     function getClassProperty(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        478
Source: 
>      */
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        879
Source: 
>      */
>     function isApprovedForAll(address owner, address operator) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operatorApprovals[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        909
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         safeTransferFrom(from, to, tokenId, "");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        478
Source: 
>      */
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        879
Source: 
>      */
>     function isApprovedForAll(address owner, address operator) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operatorApprovals[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        909
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         safeTransferFrom(from, to, tokenId, "");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        478
Source: 
>      */
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        879
Source: 
>      */
>     function isApprovedForAll(address owner, address operator) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operatorApprovals[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        909
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         safeTransferFrom(from, to, tokenId, "");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1395
Source: 
> 
>     function getBatchStart(uint256 tokenId) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenId.div(batchSize).mul(batchSize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1399
Source: 
> 
>     function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (batches[index].userID, batches[index].size);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1526
Source: 
> 
>     function balanceOf(address _owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        189
Source: 
> 
>     function getProperty(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _id,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        210
Source: 
> 
>     function getTokenKey(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        222
Source: 
> 
>     function getClassKey(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        231
Source: 
> 
>     function getClassProperty(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        478
Source: 
>      */
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        879
Source: 
>      */
>     function isApprovedForAll(address owner, address operator) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operatorApprovals[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        909
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         safeTransferFrom(from, to, tokenId, "");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1111
Source: 
> 
>     function transferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1124
Source: 
> 
>     function transferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1136
Source: 
> 
>     function safeTransferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1149
Source: 
> 
>     function safeTransferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1395
Source: 
> 
>     function getBatchStart(uint256 tokenId) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenId.div(batchSize).mul(batchSize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1399
Source: 
> 
>     function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (batches[index].userID, batches[index].size);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1526
Source: 
> 
>     function balanceOf(address _owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        1637
Source: 
> 
>     function getDetails(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenId

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        1647
Source: 
> 
>     function mintCard(
>     ^^^^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        1822
Source: 
> 
>     function startSeason(
>     ^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        1863
Source: 
> 
>     function updateProtos(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint16[] memory _ids,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2020
Source: 
> 
>     function setQuality(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokenId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2039
Source: 
> 
>     function setPropertyManager(address _manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         propertyManager = _manager;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2043
Source: 
> 
>     function setProperty(uint256 _id, bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2052
Source: 
> 
>     function setClassProperty(bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2063
Source: 
> 
>     function setBaseURI(string memory uri) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         baseURI = uri;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        189
Source: 
> 
>     function getProperty(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _id,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        210
Source: 
> 
>     function getTokenKey(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        222
Source: 
> 
>     function getClassKey(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        231
Source: 
> 
>     function getClassProperty(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        478
Source: 
>      */
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        879
Source: 
>      */
>     function isApprovedForAll(address owner, address operator) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operatorApprovals[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        909
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         safeTransferFrom(from, to, tokenId, "");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1111
Source: 
> 
>     function transferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1124
Source: 
> 
>     function transferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1136
Source: 
> 
>     function safeTransferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1149
Source: 
> 
>     function safeTransferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1395
Source: 
> 
>     function getBatchStart(uint256 tokenId) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenId.div(batchSize).mul(batchSize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1399
Source: 
> 
>     function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (batches[index].userID, batches[index].size);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1526
Source: 
> 
>     function balanceOf(address _owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2180
Source: 
> 
>     function getDetails(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenId

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2190
Source: 
> 
>     function mintCard(
>     ^^^^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2327
Source: 
> 
>     function transferFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2365
Source: 
> 
>     function startSeason(
>     ^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2406
Source: 
> 
>     function updateProtos(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint16[] memory _ids,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2563
Source: 
> 
>     function setQuality(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokenId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2582
Source: 
> 
>     function setPropertyManager(address _manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         propertyManager = _manager;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2586
Source: 
> 
>     function setProperty(uint256 _id, bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cards
Line:        2595
Source: 
> 
>     function setClassProperty(bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        189
Source: 
> 
>     function getProperty(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _id,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        210
Source: 
> 
>     function getTokenKey(
>     ^^^^^^^^^^^^^^^^^^^^^
>         uint _tokenId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        222
Source: 
> 
>     function getClassKey(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InscribableToken
Line:        231
Source: 
> 
>     function getClassProperty(bytes32 _key)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC165
Line:        478
Source: 
>      */
>     function supportsInterface(bytes4 interfaceId) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _supportedInterfaces[interfaceId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        866
Source: 
>      */
>     function setApprovalForAll(address to, bool approved) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(to != _msgSender(), "ERC721: approve to caller");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        879
Source: 
>      */
>     function isApprovedForAll(address owner, address operator) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operatorApprovals[owner][operator];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        891
Source: 
>      */
>     function transferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         //solhint-disable-next-line max-line-length

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        909
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         safeTransferFrom(from, to, tokenId, "");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC721
Line:        925
Source: 
>      */
>     function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1111
Source: 
> 
>     function transferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1124
Source: 
> 
>     function transferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1136
Source: 
> 
>     function safeTransferBatch(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiTransfer
Line:        1149
Source: 
> 
>     function safeTransferAllFrom(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1395
Source: 
> 
>     function getBatchStart(uint256 tokenId) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenId.div(batchSize).mul(batchSize);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1399
Source: 
> 
>     function getBatch(uint256 index) public view returns (uint48 userID, uint16 size) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (batches[index].userID, batches[index].size);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchToken
Line:        1526
Source: 
> 
>     function balanceOf(address _owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        1637
Source: 
> 
>     function getDetails(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 tokenId

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        1647
Source: 
> 
>     function mintCard(
>     ^^^^^^^^^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        1822
Source: 
> 
>     function startSeason(
>     ^^^^^^^^^^^^^^^^^^^^^
>         string memory name,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        1863
Source: 
> 
>     function updateProtos(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint16[] memory _ids,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2020
Source: 
> 
>     function setQuality(
>     ^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokenId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2039
Source: 
> 
>     function setPropertyManager(address _manager) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         propertyManager = _manager;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2043
Source: 
> 
>     function setProperty(uint256 _id, bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2052
Source: 
> 
>     function setClassProperty(bytes32 _key, bytes32 _value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NewCards
Line:        2063
Source: 
> 
>     function setBaseURI(string memory uri) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         baseURI = uri;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchWrapper
Line:        2627
Source: 
> 
>     function copyUntil(uint gasThreshold) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         while (gasleft() > gasThreshold) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BatchWrapper
Line:        2638
Source: 
> 
>     function mintCard(address _to, uint16 _proto, uint8 _quality) public returns (uint id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!migrating, "must not be migrating");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    StorageWrite
Line:        353
Source: 
>         uint slotPosition = (initialOffset + _index) / perSlot;
>         uint withinSlot = ((_index + _offset) % perSlot) * _size;
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // evil bit shifting magic

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BatchWrapper
Line:        2648
Source: 
>         uint256 start = nextBatch;
>         (uint48 userID, uint16 size) = old.batches(start);
>                                        ^^^^^^^^^^^^^^^^^^
>         require(size > 0 && userID > 0, "incorrect batch or limit reached");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BatchWrapper
Line:        2650
Source: 
>         require(size > 0 && userID > 0, "incorrect batch or limit reached");
>         if (old.cardProtos(start) != 0) {
>             ^^^^^^^^^^^^^^^^^^^^^
>             address to = old.userIDToAddress(userID);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BatchWrapper
Line:        2651
Source: 
>         if (old.cardProtos(start) != 0) {
>             address to = old.userIDToAddress(userID);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint48 uID = _getUserID(to);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Metadata
Line:        1238
Source: 
>      */
>     constructor (string memory name, string memory symbol) public {
>                  ^^^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC721Metadata
Line:        1238
Source: 
>      */
>     constructor (string memory name, string memory symbol) public {
>                                      ^^^^^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BatchToken
Line:        1331
Source: 
>         uint256 _batchSize,
>         string memory name,
>         ^^^^^^^^^^^^^^^^^^
>         string memory symbol

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BatchToken
Line:        1332
Source: 
>         string memory name,
>         string memory symbol
>         ^^^^^^^^^^^^^^^^^^^^
>     )

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    NewCards
Line:        1624
Source: 
>         uint256 _batchSize,
>         string memory _name,
>         ^^^^^^^^^^^^^^^^^^^
>         string memory _symbol

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    NewCards
Line:        1625
Source: 
>         string memory _name,
>         string memory _symbol
>         ^^^^^^^^^^^^^^^^^^^^^
>     )

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    NewCards
Line:        1823
Source: 
>     function startSeason(
>         string memory name,
>         ^^^^^^^^^^^^^^^^^^
>         uint16 low,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Cards
Line:        2167
Source: 
>         uint256 _batchSize,
>         string memory _name,
>         ^^^^^^^^^^^^^^^^^^^
>         string memory _symbol

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Cards
Line:        2168
Source: 
>         string memory _name,
>         string memory _symbol
>         ^^^^^^^^^^^^^^^^^^^^^
>     )

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Cards
Line:        2366
Source: 
>     function startSeason(
>         string memory name,
>         ^^^^^^^^^^^^^^^^^^
>         uint16 low,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BatchWrapper
Line:        2617
Source: 
>         uint256 _batchSize,
>         string memory _name,
>         ^^^^^^^^^^^^^^^^^^^
>         string memory _symbol

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    BatchWrapper
Line:        2618
Source: 
>         string memory _name,
>         string memory _symbol
>         ^^^^^^^^^^^^^^^^^^^^^
>     ) public NewCards(_batchSize, _name, _symbol) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    String
Line:        270
Source: 
> 
>     bytes constant alphabet = "0123456789abcdef";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ImmutableToken
Line:        388
Source: 
> 
>     string public constant baseURI = "https://api.immutable.com/asset/";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    BatchWrapper
Line:        2610
Source: 
> 
>     uint16 private constant MAX_UINT16 = 2**16 - 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Cards public old;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    String
Line:        270
Source: 
> 
>     bytes constant alphabet = "0123456789abcdef";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC721
Line:        1082
Source: 
> 
>         bytes4 retval = IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (retval == _ERC721_RECEIVED);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BatchWrapper
Line:        2648
Source: 
>         uint256 start = nextBatch;
>         (uint48 userID, uint16 size) = old.batches(start);
>                                        ^^^^^^^^^^^^^^^^^^
>         require(size > 0 && userID > 0, "incorrect batch or limit reached");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BatchWrapper
Line:        2650
Source: 
>         require(size > 0 && userID > 0, "incorrect batch or limit reached");
>         if (old.cardProtos(start) != 0) {
>             ^^^^^^^^^^^^^^^^^^^^^
>             address to = old.userIDToAddress(userID);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BatchWrapper
Line:        2651
Source: 
>         if (old.cardProtos(start) != 0) {
>             address to = old.userIDToAddress(userID);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint48 uID = _getUserID(to);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BatchWrapper
Line:        2674
Source: 
>     function getProto(uint _tokenId) public view returns (uint16) {
>         return isOld(_tokenId) ? old.cardProtos(_tokenId) : cardProtos[_tokenId];
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BatchWrapper
Line:        2678
Source: 
>     function getQuality(uint _tokenId) public view returns (uint8) {
>         return isOld(_tokenId) ? old.cardQualities(_tokenId) : cardQualities[_tokenId];
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BatchWrapper
Line:        2682
Source: 
>     function getDetails(uint256 tokenId) public view returns (uint16 proto, uint8 quality) {
>         return isOld(tokenId) ? old.getDetails(tokenId) : (cardProtos[tokenId], cardQualities[tokenId]);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    String
Line:        257
Source: 
>         while (temp != 0) {
>             digits++;
>             ^^^^^^
>             temp /= 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        552
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    NewCards
Line:        1856
Source: 
>         assembly { cp := protoToSeason_slot }
>         StorageWrite.repeatUint16(cp, low, (high - low) + 1, id);
>                                   ^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    NewCards
Line:        1943
Source: 
>         assembly { cp := cardProtos_slot }
>         StorageWrite.uint16s(cp, start, _protos);
>                              ^^
>         uint256 cq;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Cards
Line:        2399
Source: 
>         assembly { cp := protoToSeason_slot }
>         StorageWrite.repeatUint16(cp, low, (high - low) + 1, id);
>                                   ^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Cards
Line:        2486
Source: 
>         assembly { cp := cardProtos_slot }
>         StorageWrite.uint16s(cp, start, _protos);
>                              ^^
>         uint256 cq;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BatchToken
Line:        1315
Source: 
>     uint256 public batchSize;
>     uint256 public nextBatch;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public tokenCount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BatchToken
Line:        1316
Source: 
>     uint256 public nextBatch;
>     uint256 public tokenCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BatchToken
Line:        1315
Source: 
>     uint256 public batchSize;
>     uint256 public nextBatch;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public tokenCount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BatchToken
Line:        1316
Source: 
>     uint256 public nextBatch;
>     uint256 public tokenCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BatchToken
Line:        1315
Source: 
>     uint256 public batchSize;
>     uint256 public nextBatch;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public tokenCount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BatchToken
Line:        1316
Source: 
>     uint256 public nextBatch;
>     uint256 public tokenCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BatchWrapper
Line:        2612
Source: 
>     Cards public old;
>     bool public migrating;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BatchToken
Line:        1315
Source: 
>     uint256 public batchSize;
>     uint256 public nextBatch;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public tokenCount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BatchToken
Line:        1316
Source: 
>     uint256 public nextBatch;
>     uint256 public tokenCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    String
Line:        270
Source: 
> 
>     bytes constant alphabet = "0123456789abcdef";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1059
Source: 
> 
>         _tokenOwner[tokenId] = to;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        619
Source: 
>     function increment(Counter storage counter) internal {
>         counter._value += 1;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        623
Source: 
>     function decrement(Counter storage counter) internal {
>         counter._value = counter._value.sub(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1092
Source: 
>         if (_tokenApprovals[tokenId] != address(0)) {
>             _tokenApprovals[tokenId] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1059
Source: 
> 
>         _tokenOwner[tokenId] = to;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        619
Source: 
>     function increment(Counter storage counter) internal {
>         counter._value += 1;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        623
Source: 
>     function decrement(Counter storage counter) internal {
>         counter._value = counter._value.sub(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1092
Source: 
>         if (_tokenApprovals[tokenId] != address(0)) {
>             _tokenApprovals[tokenId] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1059
Source: 
> 
>         _tokenOwner[tokenId] = to;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        619
Source: 
>     function increment(Counter storage counter) internal {
>         counter._value += 1;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        623
Source: 
>     function decrement(Counter storage counter) internal {
>         counter._value = counter._value.sub(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1092
Source: 
>         if (_tokenApprovals[tokenId] != address(0)) {
>             _tokenApprovals[tokenId] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1059
Source: 
> 
>         _tokenOwner[tokenId] = to;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        619
Source: 
>     function increment(Counter storage counter) internal {
>         counter._value += 1;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1355
Source: 
>             );
>             uID = userCount++;
>                   ^^^^^^^^^^^
>             userIDToAddress[uID] = to;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1356
Source: 
>             uID = userCount++;
>             userIDToAddress[uID] = to;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressToUserID[to] = uID;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1357
Source: 
>             userIDToAddress[uID] = to;
>             addressToUserID[to] = uID;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1381
Source: 
>         uint48 uID = _getUserID(to);
>         batches[start] = Batch({
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>             userID: uID,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1389
Source: 
>         }
>         nextBatch = nextBatch.add(batchSize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[to] = _balances[to].add(size);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1391
Source: 
>         _balances[to] = _balances[to].add(size);
>         tokenCount = tokenCount.add(size);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return start;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NewCards
Line:        1657
Source: 
>         _validateProto(_proto);
>         cardProtos[id] = _proto;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         cardQualities[id] = _quality;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NewCards
Line:        1658
Source: 
>         cardProtos[id] = _proto;
>         cardQualities[id] = _quality;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1059
Source: 
> 
>         _tokenOwner[tokenId] = to;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        619
Source: 
>     function increment(Counter storage counter) internal {
>         counter._value += 1;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1355
Source: 
>             );
>             uID = userCount++;
>                   ^^^^^^^^^^^
>             userIDToAddress[uID] = to;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1356
Source: 
>             uID = userCount++;
>             userIDToAddress[uID] = to;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressToUserID[to] = uID;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1357
Source: 
>             userIDToAddress[uID] = to;
>             addressToUserID[to] = uID;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1381
Source: 
>         uint48 uID = _getUserID(to);
>         batches[start] = Batch({
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>             userID: uID,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1389
Source: 
>         }
>         nextBatch = nextBatch.add(batchSize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[to] = _balances[to].add(size);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1391
Source: 
>         _balances[to] = _balances[to].add(size);
>         tokenCount = tokenCount.add(size);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return start;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Cards
Line:        2200
Source: 
>         _validateProto(_proto);
>         cardProtos[id] = _proto;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         cardQualities[id] = _quality;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Cards
Line:        2201
Source: 
>         cardProtos[id] = _proto;
>         cardQualities[id] = _quality;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC721
Line:        1059
Source: 
> 
>         _tokenOwner[tokenId] = to;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Counters
Line:        619
Source: 
>     function increment(Counter storage counter) internal {
>         counter._value += 1;
>         ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1355
Source: 
>             );
>             uID = userCount++;
>                   ^^^^^^^^^^^
>             userIDToAddress[uID] = to;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1356
Source: 
>             uID = userCount++;
>             userIDToAddress[uID] = to;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressToUserID[to] = uID;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1357
Source: 
>             userIDToAddress[uID] = to;
>             addressToUserID[to] = uID;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1381
Source: 
>         uint48 uID = _getUserID(to);
>         batches[start] = Batch({
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>             userID: uID,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1389
Source: 
>         }
>         nextBatch = nextBatch.add(batchSize);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[to] = _balances[to].add(size);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchToken
Line:        1391
Source: 
>         _balances[to] = _balances[to].add(size);
>         tokenCount = tokenCount.add(size);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return start;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NewCards
Line:        1657
Source: 
>         _validateProto(_proto);
>         cardProtos[id] = _proto;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         cardQualities[id] = _quality;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NewCards
Line:        1658
Source: 
>         cardProtos[id] = _proto;
>         cardQualities[id] = _quality;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchWrapper
Line:        2653
Source: 
>             uint48 uID = _getUserID(to);
>             batches[start] = Batch({
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>                 userID: uID,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchWrapper
Line:        2661
Source: 
>             }
>             nextBatch = nextBatch.add(batchSize);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _balances[to] = _balances[to].add(size);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchWrapper
Line:        2662
Source: 
>             nextBatch = nextBatch.add(batchSize);
>             _balances[to] = _balances[to].add(size);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             tokenCount = tokenCount.add(size);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchWrapper
Line:        2663
Source: 
>             _balances[to] = _balances[to].add(size);
>             tokenCount = tokenCount.add(size);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BatchWrapper
Line:        2665
Source: 
>         }
>         nextBatch += batchSize;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Counters
Line:        623
Source: 
>     function decrement(Counter storage counter) internal {
>         counter._value = counter._value.sub(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC721
Line:        1092
Source: 
>         if (_tokenApprovals[tokenId] != address(0)) {
>             _tokenApprovals[tokenId] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC721
Line:        1029
Source: 
>         _ownedTokensCount[owner].decrement();
>         _tokenOwner[tokenId] = address(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BatchToken
Line:        1390
Source: 
>         nextBatch = nextBatch.add(batchSize);
>         _balances[to] = _balances[to].add(size);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenCount = tokenCount.add(size);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Counters
Line:        623
Source: 
>     function decrement(Counter storage counter) internal {
>         counter._value = counter._value.sub(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC721
Line:        1092
Source: 
>         if (_tokenApprovals[tokenId] != address(0)) {
>             _tokenApprovals[tokenId] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC721
Line:        1029
Source: 
>         _ownedTokensCount[owner].decrement();
>         _tokenOwner[tokenId] = address(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BatchToken
Line:        1390
Source: 
>         nextBatch = nextBatch.add(batchSize);
>         _balances[to] = _balances[to].add(size);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenCount = tokenCount.add(size);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Counters
Line:        623
Source: 
>     function decrement(Counter storage counter) internal {
>         counter._value = counter._value.sub(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC721
Line:        1092
Source: 
>         if (_tokenApprovals[tokenId] != address(0)) {
>             _tokenApprovals[tokenId] = address(0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC721
Line:        1029
Source: 
>         _ownedTokensCount[owner].decrement();
>         _tokenOwner[tokenId] = address(0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BatchToken
Line:        1390
Source: 
>         nextBatch = nextBatch.add(batchSize);
>         _balances[to] = _balances[to].add(size);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokenCount = tokenCount.add(size);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        294
Source: 
>     function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { result := sload(slot) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        307
Source: 
>     function _setArraySlot(uint _dest, uint _index, uint _value) internal {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { sstore(slot, _value) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        321
Source: 
>     {
>         uint slotCount = _slotCount(_offset, _perSlot, _length);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         slots = new uint[](slotCount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        324
Source: 
>         // top and tail the slots
>         uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>         slots[0] = _getStorageArraySlot(_slot, firstPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        327
Source: 
>         if (slotCount > 1) {
>             uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        294
Source: 
>     function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { result := sload(slot) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        307
Source: 
>     function _setArraySlot(uint _dest, uint _index, uint _value) internal {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { sstore(slot, _value) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        321
Source: 
>     {
>         uint slotCount = _slotCount(_offset, _perSlot, _length);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         slots = new uint[](slotCount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        324
Source: 
>         // top and tail the slots
>         uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>         slots[0] = _getStorageArraySlot(_slot, firstPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        327
Source: 
>         if (slotCount > 1) {
>             uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        294
Source: 
>     function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { result := sload(slot) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        307
Source: 
>     function _setArraySlot(uint _dest, uint _index, uint _value) internal {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { sstore(slot, _value) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        321
Source: 
>     {
>         uint slotCount = _slotCount(_offset, _perSlot, _length);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         slots = new uint[](slotCount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        324
Source: 
>         // top and tail the slots
>         uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>         slots[0] = _getStorageArraySlot(_slot, firstPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        327
Source: 
>         if (slotCount > 1) {
>             uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        294
Source: 
>     function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { result := sload(slot) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        307
Source: 
>     function _setArraySlot(uint _dest, uint _index, uint _value) internal {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { sstore(slot, _value) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        321
Source: 
>     {
>         uint slotCount = _slotCount(_offset, _perSlot, _length);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         slots = new uint[](slotCount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        324
Source: 
>         // top and tail the slots
>         uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>         slots[0] = _getStorageArraySlot(_slot, firstPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        327
Source: 
>         if (slotCount > 1) {
>             uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        294
Source: 
>     function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { result := sload(slot) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        307
Source: 
>     function _setArraySlot(uint _dest, uint _index, uint _value) internal {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { sstore(slot, _value) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        321
Source: 
>     {
>         uint slotCount = _slotCount(_offset, _perSlot, _length);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         slots = new uint[](slotCount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        324
Source: 
>         // top and tail the slots
>         uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>         slots[0] = _getStorageArraySlot(_slot, firstPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        327
Source: 
>         if (slotCount > 1) {
>             uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        869
Source: 
> 
>         _operatorApprovals[_msgSender()][to] = approved;
>                            ^^^^^^^^^^^^
>         emit ApprovalForAll(_msgSender(), to, approved);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        870
Source: 
>         _operatorApprovals[_msgSender()][to] = approved;
>         emit ApprovalForAll(_msgSender(), to, approved);
>                             ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        294
Source: 
>     function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { result := sload(slot) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        307
Source: 
>     function _setArraySlot(uint _dest, uint _index, uint _value) internal {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { sstore(slot, _value) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        321
Source: 
>     {
>         uint slotCount = _slotCount(_offset, _perSlot, _length);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         slots = new uint[](slotCount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        324
Source: 
>         // top and tail the slots
>         uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>         slots[0] = _getStorageArraySlot(_slot, firstPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        327
Source: 
>         if (slotCount > 1) {
>             uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        869
Source: 
> 
>         _operatorApprovals[_msgSender()][to] = approved;
>                            ^^^^^^^^^^^^
>         emit ApprovalForAll(_msgSender(), to, approved);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        870
Source: 
>         _operatorApprovals[_msgSender()][to] = approved;
>         emit ApprovalForAll(_msgSender(), to, approved);
>                             ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        1008
Source: 
>         require(to != address(0), "ERC721: mint to the zero address");
>         require(!_exists(tokenId), "ERC721: token already minted");
>                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1279
Source: 
>     function _setTokenURI(uint256 tokenId, string memory uri) internal {
>         require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
>                 ^^^^^^^^^^^^^^^^
>         _tokenURIs[tokenId] = uri;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        294
Source: 
>     function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { result := sload(slot) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        307
Source: 
>     function _setArraySlot(uint _dest, uint _index, uint _value) internal {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { sstore(slot, _value) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        321
Source: 
>     {
>         uint slotCount = _slotCount(_offset, _perSlot, _length);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         slots = new uint[](slotCount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        324
Source: 
>         // top and tail the slots
>         uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>         slots[0] = _getStorageArraySlot(_slot, firstPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        327
Source: 
>         if (slotCount > 1) {
>             uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        869
Source: 
> 
>         _operatorApprovals[_msgSender()][to] = approved;
>                            ^^^^^^^^^^^^
>         emit ApprovalForAll(_msgSender(), to, approved);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        870
Source: 
>         _operatorApprovals[_msgSender()][to] = approved;
>         emit ApprovalForAll(_msgSender(), to, approved);
>                             ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        1008
Source: 
>         require(to != address(0), "ERC721: mint to the zero address");
>         require(!_exists(tokenId), "ERC721: token already minted");
>                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1279
Source: 
>     function _setTokenURI(uint256 tokenId, string memory uri) internal {
>         require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
>                 ^^^^^^^^^^^^^^^^
>         _tokenURIs[tokenId] = uri;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        294
Source: 
>     function _getStorageArraySlot(uint _dest, uint _index) internal view returns (uint result) {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { result := sload(slot) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        307
Source: 
>     function _setArraySlot(uint _dest, uint _index, uint _value) internal {
>         uint slot = _getArraySlot(_dest, _index);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly { sstore(slot, _value) }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        321
Source: 
>     {
>         uint slotCount = _slotCount(_offset, _perSlot, _length);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         slots = new uint[](slotCount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        324
Source: 
>         // top and tail the slots
>         uint firstPos = _pos(_offset, _perSlot); // _offset.div(_perSlot);
>                         ^^^^^^^^^^^^^^^^^^^^^^^
>         slots[0] = _getStorageArraySlot(_slot, firstPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StorageWrite
Line:        327
Source: 
>         if (slotCount > 1) {
>             uint lastPos = _pos(_offset.add(_length), _perSlot); // .div(_perSlot);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             slots[slotCount-1] = _getStorageArraySlot(_slot, lastPos);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        185
Source: 
>     {
>         properties[getTokenKey(_id, _key)] = _value;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenPropertySet(_id, _key, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        197
Source: 
>     {
>         return properties[getTokenKey(_id, _key)];
>                           ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        207
Source: 
>         emit ClassPropertySet(_key, _value);
>         properties[getClassKey(_key)] = _value;
>                    ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        236
Source: 
>     {
>         return properties[getClassKey(_key)];
>                           ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        869
Source: 
> 
>         _operatorApprovals[_msgSender()][to] = approved;
>                            ^^^^^^^^^^^^
>         emit ApprovalForAll(_msgSender(), to, approved);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        870
Source: 
>         _operatorApprovals[_msgSender()][to] = approved;
>         emit ApprovalForAll(_msgSender(), to, approved);
>                             ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        1008
Source: 
>         require(to != address(0), "ERC721: mint to the zero address");
>         require(!_exists(tokenId), "ERC721: token already minted");
>                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1279
Source: 
>     function _setTokenURI(uint256 tokenId, string memory uri) internal {
>         require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
>                 ^^^^^^^^^^^^^^^^
>         _tokenURIs[tokenId] = uri;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        185
Source: 
>     {
>         properties[getTokenKey(_id, _key)] = _value;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenPropertySet(_id, _key, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        197
Source: 
>     {
>         return properties[getTokenKey(_id, _key)];
>                           ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        207
Source: 
>         emit ClassPropertySet(_key, _value);
>         properties[getClassKey(_key)] = _value;
>                    ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        236
Source: 
>     {
>         return properties[getClassKey(_key)];
>                           ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        869
Source: 
> 
>         _operatorApprovals[_msgSender()][to] = approved;
>                            ^^^^^^^^^^^^
>         emit ApprovalForAll(_msgSender(), to, approved);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        870
Source: 
>         _operatorApprovals[_msgSender()][to] = approved;
>         emit ApprovalForAll(_msgSender(), to, approved);
>                             ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        1008
Source: 
>         require(to != address(0), "ERC721: mint to the zero address");
>         require(!_exists(tokenId), "ERC721: token already minted");
>                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1279
Source: 
>     function _setTokenURI(uint256 tokenId, string memory uri) internal {
>         require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
>                 ^^^^^^^^^^^^^^^^
>         _tokenURIs[tokenId] = uri;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        185
Source: 
>     {
>         properties[getTokenKey(_id, _key)] = _value;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenPropertySet(_id, _key, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        197
Source: 
>     {
>         return properties[getTokenKey(_id, _key)];
>                           ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        207
Source: 
>         emit ClassPropertySet(_key, _value);
>         properties[getClassKey(_key)] = _value;
>                    ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InscribableToken
Line:        236
Source: 
>     {
>         return properties[getClassKey(_key)];
>                           ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        869
Source: 
> 
>         _operatorApprovals[_msgSender()][to] = approved;
>                            ^^^^^^^^^^^^
>         emit ApprovalForAll(_msgSender(), to, approved);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        870
Source: 
>         _operatorApprovals[_msgSender()][to] = approved;
>         emit ApprovalForAll(_msgSender(), to, approved);
>                             ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721
Line:        1008
Source: 
>         require(to != address(0), "ERC721: mint to the zero address");
>         require(!_exists(tokenId), "ERC721: token already minted");
>                  ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ERC721Metadata
Line:        1279
Source: 
>     function _setTokenURI(uint256 tokenId, string memory uri) internal {
>         require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");
>                 ^^^^^^^^^^^^^^^^
>         _tokenURIs[tokenId] = uri;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        587
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    String
Line:        270
Source: 
> 
>     bytes constant alphabet = "0123456789abcdef";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BatchToken
Line:        1315
Source: 
>     uint256 public batchSize;
>     uint256 public nextBatch;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public tokenCount;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    String
Line:        270
Source: 
> 
>     bytes constant alphabet = "0123456789abcdef";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BatchWrapper
Line:        2610
Source: 
> 
>     uint16 private constant MAX_UINT16 = 2**16 - 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Cards public old;

[0m
