[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        267
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        366
Source: 
>                 // solhint-disable-next-line no-inline-assembly
>                 assembly {
>                 ^^^^^^^^^^
>                     let returndata_size := mload(returndata)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        85
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        90
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        730
Source: 
> 
>     function _setPendingGov(address pending)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        740
Source: 
> 
>     function acceptGov()
>     ^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        751
Source: 
> 
>     function setup_sale (
>     ^^^^^^^^^^^^^^^^^^^^^
>         address trader,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        778
Source: 
> 
>     function setup_purchase (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address trader,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OTC
Line:        805
Source: 
> 
>     function trade (
>     ^^^^^^^^^^^^^^^^
>         uint256 amount_in,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        357
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = target.call.value(weiValue)(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        291
Source: 
>         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    OTC
Line:        805
Source: 
> 
>     function trade (
>     ^^^^^^^^^^^^^^^^
>         uint256 amount_in,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OTC
Line:        751
Source: 
> 
>     function setup_sale (
>     ^^^^^^^^^^^^^^^^^^^^^
>         address trader,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OTC
Line:        778
Source: 
> 
>     function setup_purchase (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address trader,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OTC
Line:        989
Source: 
> 
>     function quote(
>     ^^^^^^^^^^^^^^^
>       uint256 purchaseAmount,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        89
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OTC
Line:        905
Source: 
>                // effectively: (x / 2**112) * 1e18
>                purchasePrice = (priceAverageSell >> 112) * one;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OTC
Line:        923
Source: 
>             if (priceAverageBuy > uint192(-1)) {
>                 salePrice = (priceAverageBuy >> 112) * one;
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OTC
Line:        925
Source: 
>             } else {
>                 salePrice = (priceAverageBuy * one) >> 112;
>                              ^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OTC
Line:        909
Source: 
>               // effectively: (x * 1e18 / 2**112)
>               purchasePrice = (priceAverageSell * one) >> 112;
>                                ^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OTC
Line:        945
Source: 
>                // effectively: (x / 2**112) * 1e18
>                purchasePrice = (priceAverageSell >> 112) * one;
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    OTC
Line:        949
Source: 
>                 // effectively: (x * 1e18 / 2**112)
>                 purchasePrice = (priceAverageSell * one) >> 112;
>                                  ^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OTC
Line:        971
Source: 
> 
>         if (UniswapPair(uniswap1).token0() == sell_token) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             saleTokenIs0 = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    OTC
Line:        978
Source: 
>         if (uniswap2 != address(0)) {
>             if (UniswapPair(uniswap2).token0() == purchase_token) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 purchaseTokenIs0 = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        291
Source: 
>         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapPair
Line:        462
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function PERMIT_TYPEHASH() external pure returns (bytes32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapPair
Line:        463
Source: 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function nonces(address owner) external view returns (uint);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapPair
Line:        480
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function factory() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixedPoint
Line:        522
Source: 
>     // resolution: 1 / 2**112
>     struct uq112x112 {
>     ^^^^^^^^^^^^^^^^^^
>         uint224 _x;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixedPoint
Line:        528
Source: 
>     // resolution: 1 / 2**112
>     struct uq144x112 {
>     ^^^^^^^^^^^^^^^^^^
>         uint _x;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        642
Source: 
>     /// @notice Address of the approved trader
>     address public approved_trader;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        645
Source: 
>     /// @notice Token the reserves are selling
>     address public reserves_sell_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        648
Source: 
>     /// @notice Token the reserves are puchasing
>     address public reserves_purchase_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        651
Source: 
>     /// @notice For a sale of a specific amount
>     uint256 public sell_amount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        654
Source: 
>     /// @notice For a purchase of a specific amount
>     uint256 public purchase_amount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        660
Source: 
>     /// @notice Current uniswap pair for purchase & sale tokens
>     address public uniswap_pair1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        663
Source: 
>     /// @notice Second uniswap pair for if TWAP uses two markets to determine price (for liquidity purposes)
>     address public uniswap_pair2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        693
Source: 
>     /// @notice Uniswap Factory
>     address public constant uniFact = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        702
Source: 
>     /// @notice % bound away from TWAP price
>     uint256 public twap_bounds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        705
Source: 
>     /// @notice counts number of twaps
>     uint256 public twap_counter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        730
Source: 
> 
>     function _setPendingGov(address pending)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        751
Source: 
> 
>     function setup_sale (
>     ^^^^^^^^^^^^^^^^^^^^^
>         address trader,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        778
Source: 
> 
>     function setup_purchase (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address trader,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        853
Source: 
>     // callable by anyone
>     function update_twap()
>     ^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        856
Source: 
>     {
>         (uint256 sell_token_priceCumulative, uint32 blockTimestamp) =
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair1, saleTokenIs0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        870
Source: 
>             // two hop
>             (uint256 buy_token_priceCumulative, ) =
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair2, !purchaseTokenIs0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        955
Source: 
> 
>     function reset_twap(
>     ^^^^^^^^^^^^^^^^^^^^
>         address uniswap1,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OTC
Line:        1005
Source: 
>     {
>         uint256 uniswap_quote = consult();
>         ^^^^^^^^^^^^^^^^^^^^^
>         uint256 minimum = uniswap_quote.mul(BASE.sub(twap_bounds)).div(BASE);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Address
Line:        357
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = target.call.value(weiValue)(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Address
Line:        357
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = target.call.value(weiValue)(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (success) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        971
Source: 
> 
>         if (UniswapPair(uniswap1).token0() == sell_token) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             saleTokenIs0 = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        978
Source: 
>         if (uniswap2 != address(0)) {
>             if (UniswapPair(uniswap2).token0() == purchase_token) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 purchaseTokenIs0 = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniswapV2OracleLibrary
Line:        604
Source: 
>         blockTimestamp = currentBlockTimestamp();
>         (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = UniswapPair(pair).getReserves();
>                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (isToken0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniswapV2OracleLibrary
Line:        606
Source: 
>         if (isToken0) {
>           priceCumulative = UniswapPair(pair).price0CumulativeLast();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniswapV2OracleLibrary
Line:        617
Source: 
>         } else {
>           priceCumulative = UniswapPair(pair).price1CumulativeLast();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           // if time has elapsed since the last update on the pair, mock the accumulated price values

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        893
Source: 
>             if (saleTokenIs0) {
>                 uint8 decs = ExpandedERC20(reserves_sell_token).decimals();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        913
Source: 
>             if (purchaseTokenIs0) {
>                 uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token1()).decimals();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        917
Source: 
>             } else {
>                 uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token0()).decimals();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        897
Source: 
>             } else {
>                 uint8 decs = ExpandedERC20(reserves_sell_token).decimals();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        932
Source: 
>             if (saleTokenIs0) {
>                 uint8 decs = ExpandedERC20(reserves_sell_token).decimals();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        936
Source: 
>             } else {
>                 uint8 decs = ExpandedERC20(reserves_sell_token).decimals();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    OTC
Line:        996
Source: 
>     {
>       uint256 decs = uint256(ExpandedERC20(reserves_sell_token).decimals());
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint256 one = 10**decs;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OTC
Line:        913
Source: 
>             if (purchaseTokenIs0) {
>                 uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token1()).decimals();
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OTC
Line:        917
Source: 
>             } else {
>                 uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token0()).decimals();
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        268
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    FixedPoint
Line:        556
Source: 
>         uint z;
>         require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");
>                            ^
>         return uq144x112(z);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        642
Source: 
>     /// @notice Address of the approved trader
>     address public approved_trader;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        645
Source: 
>     /// @notice Token the reserves are selling
>     address public reserves_sell_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        648
Source: 
>     /// @notice Token the reserves are puchasing
>     address public reserves_purchase_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        651
Source: 
>     /// @notice For a sale of a specific amount
>     uint256 public sell_amount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        654
Source: 
>     /// @notice For a purchase of a specific amount
>     uint256 public purchase_amount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        657
Source: 
>     /// @notice Denotes if trade is a sale or purchase
>     bool public isSale;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        660
Source: 
>     /// @notice Current uniswap pair for purchase & sale tokens
>     address public uniswap_pair1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        663
Source: 
>     /// @notice Second uniswap pair for if TWAP uses two markets to determine price (for liquidity purposes)
>     address public uniswap_pair2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        666
Source: 
>     /// @notice Flag for if purchase token is toke 0 in uniswap pair 2
>     bool public purchaseTokenIs0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        669
Source: 
>     /// @notice Flag for if sale token is token 0 in uniswap pair
>     bool public saleTokenIs0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        672
Source: 
>     /// @notice TWAP for first hop
>     uint256 public priceAverageSell;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        675
Source: 
>     /// @notice TWAP for second hop
>     uint256 public priceAverageBuy;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        678
Source: 
>     /// @notice last TWAP update time
>     uint32 public blockTimestampLast;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        681
Source: 
>     /// @notice last TWAP cumulative price;
>     uint256 public priceCumulativeLastSell;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        684
Source: 
>     /// @notice last TWAP cumulative price for two hop pairs;
>     uint256 public priceCumulativeLastBuy;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        687
Source: 
>     /// @notice Time between TWAP updates
>     uint256 public period;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        699
Source: 
>     /// @notice Reserve to withdraw from
>     address public reserve;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        702
Source: 
>     /// @notice % bound away from TWAP price
>     uint256 public twap_bounds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        705
Source: 
>     /// @notice counts number of twaps
>     uint256 public twap_counter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        708
Source: 
>     /// @notice denotes a trade as complete
>     bool public complete;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    OTC
Line:        714
Source: 
>     /// @notice pending governor
>     address public pendingGov;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        532
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private constant Q112 = uint(1) << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        533
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint private constant Q112 = uint(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private constant Q224 = Q112 << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        534
Source: 
>     uint private constant Q112 = uint(1) << RESOLUTION;
>     uint private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Address
Line:        357
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = target.call.value(weiValue)(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        963
Source: 
>     {
>         uniswap_pair1 = uniswap1;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uniswap_pair2 = uniswap2;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        964
Source: 
>         uniswap_pair1 = uniswap1;
>         uniswap_pair2 = uniswap2;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        966
Source: 
> 
>         blockTimestampLast = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         priceCumulativeLastSell = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        967
Source: 
>         blockTimestampLast = 0;
>         priceCumulativeLastSell = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         priceCumulativeLastBuy = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        968
Source: 
>         priceCumulativeLastSell = 0;
>         priceCumulativeLastBuy = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         priceAverageBuy = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        969
Source: 
>         priceCumulativeLastBuy = 0;
>         priceAverageBuy = 0;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        972
Source: 
>         if (UniswapPair(uniswap1).token0() == sell_token) {
>             saleTokenIs0 = true;
>             ^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        979
Source: 
>             if (UniswapPair(uniswap2).token0() == purchase_token) {
>                 purchaseTokenIs0 = true;
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        986
Source: 
>         update_twap();
>         twap_counter = 0;
>         ^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        864
Source: 
>         // overflow is desired
>         priceAverageSell = uint256(uint224((sell_token_priceCumulative - priceCumulativeLastSell) / timeElapsed));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         priceCumulativeLastSell = sell_token_priceCumulative;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        865
Source: 
>         priceAverageSell = uint256(uint224((sell_token_priceCumulative - priceCumulativeLastSell) / timeElapsed));
>         priceCumulativeLastSell = sell_token_priceCumulative;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        872
Source: 
>                 UniswapV2OracleLibrary.currentCumulativePrices(uniswap_pair2, !purchaseTokenIs0);
>             priceAverageBuy = uint256(uint224((buy_token_priceCumulative - priceCumulativeLastBuy) / timeElapsed));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        874
Source: 
> 
>             priceCumulativeLastBuy = buy_token_priceCumulative;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        877
Source: 
> 
>         twap_counter = twap_counter.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        879
Source: 
> 
>         blockTimestampLast = blockTimestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        981
Source: 
>             } else {
>                 purchaseTokenIs0 = false;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    OTC
Line:        974
Source: 
>         } else {
>             saleTokenIs0 = false;
>             ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OTC
Line:        913
Source: 
>             if (purchaseTokenIs0) {
>                 uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token1()).decimals();
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OTC
Line:        917
Source: 
>             } else {
>                 uint8 decs = ExpandedERC20(UniswapPair(uniswap_pair2).token0()).decimals();
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(decs <= 18, "too many decimals");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        291
Source: 
>         // solhint-disable-next-line avoid-low-level-calls, avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        411
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        418
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        423
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    OTC
Line:        693
Source: 
>     /// @notice Uniswap Factory
>     address public constant uniFact = address(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        533
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint private constant Q112 = uint(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private constant Q224 = Q112 << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        534
Source: 
>     uint private constant Q112 = uint(1) << RESOLUTION;
>     uint private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        595
Source: 
>     function currentBlockTimestamp() internal view returns (uint32) {
>         return uint32(block.timestamp % 2 ** 32);
>                       ^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    OTC
Line:        849
Source: 
>     {
>         return (block.timestamp - blockTimestampLast < GRACE) && (twap_counter > 0);
>                 ^^^^^^^^^^^^^^^
>     }

[0m
