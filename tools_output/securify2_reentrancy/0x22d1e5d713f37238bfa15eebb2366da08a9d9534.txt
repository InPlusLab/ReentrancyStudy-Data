Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Utils
Line:        69
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             size := extcodesize(contract_address)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        66
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        106
Source: 
> 
>     function setDeprecationSwitch() public onlyController returns (bool _success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         deprecated = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        111
Source: 
> 
>     function changeParameters(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price_bump_numerator,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        106
Source: 
> 
>     function setDeprecationSwitch() public onlyController returns (bool _success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         deprecated = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        111
Source: 
> 
>     function changeParameters(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price_bump_numerator,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistry
Line:        335
Source: 
>     // when other parties have just called `deposit()`)
>     function deposit(uint _limit_amount) public returns (bool _success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(! deprecated, "this contract was deprecated");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistry
Line:        376
Source: 
>     /// @param new_url The new URL string to be stored
>     function setURL(string memory new_url) public returns (bool _success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(hasValidRegistration(msg.sender), "registration expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ServiceRegistry
Line:        384
Source: 
>     /// A getter function for seeing the length of ever_made_deposits array
>     function everMadeDepositsLen() public view returns (uint256 _len) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ever_made_deposits.length;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        111
Source: 
> 
>     function changeParameters(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price_bump_numerator,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        66
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        111
Source: 
> 
>     function changeParameters(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price_bump_numerator,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Deposit
Line:        267
Source: 
>     /// @param _to The address where the withdrawn tokens should go
>     function withdraw(address payable _to) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balance = token.balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        66
Source: 
>     /// @return True if a contract exists, false otherwise
>     function contractExists(address contract_address) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint size;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ServiceRegistry
Line:        388
Source: 
> 
>     function hasValidRegistration(address _address) public view returns (bool _has_registration) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return now < service_valid_till[_address];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        220
Source: 
>         // P should be at most 24 * (2 ** 40).
>         uint256 price = _set_price * P / Q;
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        214
Source: 
> 
>         uint256 P = 24 * (A ** 4);
>                     ^^^^^^^^^^^^^
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                                       ^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                                       ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                                                          ^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>                                                          ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        220
Source: 
>         // P should be at most 24 * (2 ** 40).
>         uint256 price = _set_price * P / Q;
>                         ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ServiceRegistry
Line:        356
Source: 
>         // Record the price
>         set_price = amount * price_bump_numerator / price_bump_denominator;
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (set_price > 2 ** 90) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ServiceRegistry
Line:        365
Source: 
>         Deposit depo = new Deposit(address(token), valid_till, msg.sender, address(this));
>         require(token.transferFrom(msg.sender, address(depo), amount), "Token transfer for deposit failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Token
Line:        45
Source: 
>     // Optionally implemented function to show the number of decimals for the token
>     function decimals() external view returns (uint8 decimals);
>                                                ^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        87
Source: 
>     // the price decays according to decayedPrice().
>     uint256 public set_price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public set_price_at;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        88
Source: 
>     uint256 public set_price;
>     uint256 public set_price_at;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        91
Source: 
>     /// The amount of time (in seconds) till the price decreases to roughly 1/e.
>     uint256 public decay_constant = 200 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        94
Source: 
>     // Once the price is at min_price, it can't decay further.
>     uint256 public min_price = 1000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        97
Source: 
>     // Whenever a deposit comes in, the price is multiplied by numerator / denominator.
>     uint256 public price_bump_numerator = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price_bump_denominator = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        98
Source: 
>     uint256 public price_bump_numerator = 1;
>     uint256 public price_bump_denominator = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        101
Source: 
>     // The duration of service registration/extension in seconds
>     uint256 public registration_duration = 180 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        184
Source: 
>         require(now >= set_price_at, "An underflow in price computation");
>         uint256 seconds_passed = now - set_price_at;
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        206
Source: 
> 
>         uint256 X = _seconds_passed;
>         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        212
Source: 
> 
>         uint256 A = decay_constant;
>         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        214
Source: 
> 
>         uint256 P = 24 * (A ** 4);
>         ^^^^^^^^^
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        215
Source: 
>         uint256 P = 24 * (A ** 4);
>         uint256 Q = P + 24*(A**3)*X + 12*(A**2)*(X**2) + 4*A*(X**3) + X**4;
>         ^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Deposit
Line:        240
Source: 
>     // If the address has no code, service_registry.deprecated() call will fail.
>     ServiceRegistryConfigurableParameters service_registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Deposit
Line:        246
Source: 
>     // The timestamp after which the withdrawer can withdraw the deposit.
>     uint256 public release_at;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistry
Line:        281
Source: 
> 
>     mapping(address => uint256) public service_valid_till;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => string) public urls;  // URLs of services for HTTP access

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistry
Line:        286
Source: 
>     // Starting from this list, all alive registrations can be figured out.
>     address[] public ever_made_deposits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ServiceRegistry
Line:        342
Source: 
>         // Extend the service position.
>         uint256 valid_till = service_valid_till[msg.sender];
>         ^^^^^^^^^^^^^^^^^^
>         if (valid_till == 0) { // a first time joiner

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Deposit
Line:        240
Source: 
>     // If the address has no code, service_registry.deprecated() call will fail.
>     ServiceRegistryConfigurableParameters service_registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Deposit
Line:        268
Source: 
>     function withdraw(address payable _to) external {
>         uint256 balance = token.balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == withdrawer, "the caller is not the withdrawer");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Deposit
Line:        270
Source: 
>         require(msg.sender == withdrawer, "the caller is not the withdrawer");
>         require(now >= release_at || service_registry.deprecated(), "deposit not released yet");
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balance > 0, "nothing to withdraw");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Deposit
Line:        272
Source: 
>         require(balance > 0, "nothing to withdraw");
>         require(token.transfer(_to, balance), "token didn't transfer");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         selfdestruct(_to); // The contract can disappear.

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ServiceRegistry
Line:        320
Source: 
>         // Check if the contract is indeed a token contract
>         require(token.totalSupply() > 0, "total supply zero");
>                 ^^^^^^^^^^^^^^^^^^^
>         controller = _controller;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ServiceRegistry
Line:        365
Source: 
>         Deposit depo = new Deposit(address(token), valid_till, msg.sender, address(this));
>         require(token.transferFrom(msg.sender, address(depo), amount), "Token transfer for deposit failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Utils
Line:        73
Source: 
> 
>         return size > 0;
>                ^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        87
Source: 
>     // the price decays according to decayedPrice().
>     uint256 public set_price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public set_price_at;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        88
Source: 
>     uint256 public set_price;
>     uint256 public set_price_at;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        78
Source: 
> contract ServiceRegistryConfigurableParameters {
>     address public controller;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        87
Source: 
>     // the price decays according to decayedPrice().
>     uint256 public set_price;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public set_price_at;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ServiceRegistryConfigurableParameters
Line:        88
Source: 
>     uint256 public set_price;
>     uint256 public set_price_at;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        78
Source: 
> contract ServiceRegistryConfigurableParameters {
>     address public controller;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        97
Source: 
>     // Whenever a deposit comes in, the price is multiplied by numerator / denominator.
>     uint256 public price_bump_numerator = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price_bump_denominator = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        98
Source: 
>     uint256 public price_bump_numerator = 1;
>     uint256 public price_bump_denominator = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        101
Source: 
>     // The duration of service registration/extension in seconds
>     uint256 public registration_duration = 180 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ServiceRegistryConfigurableParameters
Line:        104
Source: 
>     // If true, new deposits are no longer accepted.
>     bool public deprecated = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
