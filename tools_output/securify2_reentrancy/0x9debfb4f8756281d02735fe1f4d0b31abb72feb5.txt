pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        342
Source: 
>      * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * imposed by `transfer`, making them unable to receive funds via

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        127
Source: 
>  * `SafeMath` restores this intuition by reverting the transaction when an
>  * operation overflows.
>    ^^^^^^^^^^^^^^^^^^^^
>  *

[0m
[0;31mSeverity:    LOW
Pattern:     ERC20 Indexed Pattern
Description: Events defined by ERC20 specification should use the
             'indexed' keyword.
Type:        Violation
Contract:    IERC20
Line:        134
Source: 
>     /**
>      * @dev Returns the addition of two unsigned integers, reverting on
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      * overflow.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        624
Source: 
>      * NOTE: Renouncing ownership will leave the contract without an owner,
>      * thereby removing any functionality that is only available to the owner.
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        648
Source: 
>         emit OwnershipTransferred(_owner, newOwner);
>         _owner = newOwner;
>        ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        659
Source: 
> 
>     function poolToken(address _reserveToken) external view returns (address);
>                                                          ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        648
Source: 
>         emit OwnershipTransferred(_owner, newOwner);
>         _owner = newOwner;
>        ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        659
Source: 
> 
>     function poolToken(address _reserveToken) external view returns (address);
>                                                          ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        953
Source: 
>     function withdraw() public onlyOwner {
>         uint256 contractBalance = address(this).balance;
>                                        ^^^^^^^^^^^^^^^^^
>         address payable _to = owner().toPayable();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }
>                                                                                                                             

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        384
Source: 
>     function safeTransfer(
>         IERC20 token,
>            ^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        502
Source: 
>  * Note that because there is a single `nonReentrant` guard, functions marked as
>  * `nonReentrant` may not call one another. This can be worked around by making
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>  * those functions `private`, and then adding `external` `nonReentrant` entry

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        384
Source: 
>     function safeTransfer(
>         IERC20 token,
>            ^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        502
Source: 
>  * Note that because there is a single `nonReentrant` guard, functions marked as
>  * `nonReentrant` may not call one another. This can be worked around by making
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>  * those functions `private`, and then adding `external` `nonReentrant` entry

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        384
Source: 
>     function safeTransfer(
>         IERC20 token,
>            ^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        502
Source: 
>  * Note that because there is a single `nonReentrant` guard, functions marked as
>  * `nonReentrant` may not call one another. This can be worked around by making
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>  * those functions `private`, and then adding `external` `nonReentrant` entry

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        912
Source: 
>     function _transferGoodwill(
>         address _tokenContractAddress,
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        384
Source: 
>     function safeTransfer(
>         IERC20 token,
>            ^^^^^^^^^^
>         address to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        659
Source: 
> 
>     function poolToken(address _reserveToken) external view returns (address);
>                                                          ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }
>                                                                                                                             

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        780
Source: 
>             require(msg.value > 0, "ERR: No ETH sent");
>             valueToSend = _transferGoodwill(_fromTokenAddress, msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        793
Source: 
> 
>         if (_fromTokenAddress == _toReserveTokenAddress) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (lptReceived, id) = _enterBancor(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        795
Source: 
>             (lptReceived, id) = _enterBancor(
>                 poolAnchor,
>         ^^^^^^^^^^^^^^^^^^^
>                 tokenToSend,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        838
Source: 
>             IERC20 toReserveToken = IERC20(_reserveToken);
>             toReserveToken.safeApprove(bancorLiquidityProtectionAddress, 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toReserveToken.safeApprove(

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        918
Source: 
>         uint256 goodwillPortion = SafeMath.div(
>             SafeMath.mul(valueToSend, goodwill),
>                                               ^^
>             10000

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        909
Source: 
>     @param valueToSend The total value being zapped in
>     @return The quantity of remaining tokens
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        383
Source: 
> 
>     function safeTransfer(
>                     ^^^^^^
>         IERC20 token,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        609
Source: 
>         require(isOwner(), "Ownable: caller is not the owner");
>         _;
>       ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        716
Source: 
>     IBancorContractRegistry
>         public constant bancorRegistry = IBancorContractRegistry(
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x52Ae12ABe5D8BD778BD5397F99cA900624CfADD4

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        724
Source: 
> 
>     event Zapin(
>            ^^^^^
>         address toWhomToIssue,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        728
Source: 
>         uint256 LPTRec,
>         uint256 vBNTRec,
>    ^^^^^^^^^^^^^^^^^^^^^
>         uint256 id

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        733
Source: 
>     constructor(uint16 _goodwill) public {
>         goodwill = _goodwill;
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        738
Source: 
>     modifier stopInEmergency {
>         if (stopped) {
>                 ^^^^^^
>             revert("Temporarily Paused");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        741
Source: 
>         } else {
>             _;
>             ^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        746
Source: 
>     /**
>     @notice This function is used to add single-sided protected liquidity to BancorV2 Pool
>                                                                      ^^^^^^^^^^^^^^^^^^^^^
>     @dev This function stakes LPT Received so the 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        748
Source: 
>     @dev This function stakes LPT Received so the 
>     @param _fromTokenAddress The token used for investment (address(0x00) if ether)
>                                                                                 ^^^
>     @param _toBanConverterAddress The address of pool to add liquidity to

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        780
Source: 
>             require(msg.value > 0, "ERR: No ETH sent");
>             valueToSend = _transferGoodwill(_fromTokenAddress, msg.value);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        911
Source: 
>      */
>     function _transferGoodwill(
>                    ^^^^^^^^^^^^
>         address _tokenContractAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        953
Source: 
>     function withdraw() public onlyOwner {
>         uint256 contractBalance = address(this).balance;
>                                        ^^^^^^^^^^^^^^^^^
>         address payable _to = owner().toPayable();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuard
Line:        526
Source: 
>      * function is not supported. It is possible to prevent this from happening
>      * by making the `nonReentrant` function external, and make it call a
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>      * `private` function that does the actual work.

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Ownable
Line:        609
Source: 
>         require(isOwner(), "Ownable: caller is not the owner");
>         _;
>       ^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        721
Source: 
>     IERC20 public constant vBNTToken = IERC20(
>         0x48Fb253446873234F2fEBbF9BdeAA72d9d387f94
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     );

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        721
Source: 
>     IERC20 public constant vBNTToken = IERC20(
>         0x48Fb253446873234F2fEBbF9BdeAA72d9d387f94
>                                          ^^^^^^^^^
>     );

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        724
Source: 
> 
>     event Zapin(
>            ^^^^^
>         address toWhomToIssue,

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        733
Source: 
>     constructor(uint16 _goodwill) public {
>         goodwill = _goodwill;
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        738
Source: 
>     modifier stopInEmergency {
>         if (stopped) {
>                 ^^^^^^
>             revert("Temporarily Paused");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        741
Source: 
>         } else {
>             _;
>             ^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        746
Source: 
>     /**
>     @notice This function is used to add single-sided protected liquidity to BancorV2 Pool
>                                                                      ^^^^^^^^^^^^^^^^^^^^^
>     @dev This function stakes LPT Received so the 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        748
Source: 
>     @dev This function stakes LPT Received so the 
>     @param _fromTokenAddress The token used for investment (address(0x00) if ether)
>                                                                                 ^^^
>     @param _toBanConverterAddress The address of pool to add liquidity to

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        877
Source: 
>         bytes memory swapData
>     ) internal returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        912
Source: 
>     function _transferGoodwill(
>         address _tokenContractAddress,
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        944
Source: 
>         tokenAddress.safeTransfer(owner(), qty);
>     }
>    ^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }


[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        912
Source: 
>     function _transferGoodwill(
>         address _tokenContractAddress,
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        877
Source: 
>         bytes memory swapData
>     ) internal returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        877
Source: 
>         bytes memory swapData
>     ) internal returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        912
Source: 
>     function _transferGoodwill(
>         address _tokenContractAddress,
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        944
Source: 
>         tokenAddress.safeTransfer(owner(), qty);
>     }
>    ^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }


[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        793
Source: 
> 
>         if (_fromTokenAddress == _toReserveTokenAddress) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (lptReceived, id) = _enterBancor(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        854
Source: 
>             _poolAnchor,
>             reserveToken,
>                        ^^
>             _amount

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        877
Source: 
>         bytes memory swapData
>     ) internal returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        444
Source: 
>     function safeDecreaseAllowance(
>         IERC20 token,
>      ^^^^^^^^^^^^^^^^
>         address spender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        957
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        795
Source: 
>             (lptReceived, id) = _enterBancor(
>                 poolAnchor,
>         ^^^^^^^^^^^^^^^^^^^
>                 tokenToSend,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        838
Source: 
>             IERC20 toReserveToken = IERC20(_reserveToken);
>             toReserveToken.safeApprove(bancorLiquidityProtectionAddress, 0);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             toReserveToken.safeApprove(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        883
Source: 
>             IERC20 fromToken = IERC20(_fromTokenAddress);
>             fromToken.safeApprove(address(_allowanceTarget), 0);
>                                                         ^^^^^^^^
>             fromToken.safeApprove(address(_allowanceTarget), _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        887
Source: 
> 
>         uint256 initialBalance = _toReserveTokenAddress == address(0)
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ? address(this).balance

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        888
Source: 
>         uint256 initialBalance = _toReserveTokenAddress == address(0)
>             ? address(this).balance
>                     ^^^^^^^^^^^^^^^
>             : IERC20(_toReserveTokenAddress).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        918
Source: 
>         uint256 goodwillPortion = SafeMath.div(
>             SafeMath.mul(valueToSend, goodwill),
>                                               ^^
>             10000

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        909
Source: 
>     @param valueToSend The total value being zapped in
>     @return The quantity of remaining tokens
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      */

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        343
Source: 
>      * of certain opcodes, possibly making contracts go over the 2300 gas limit
>      * imposed by `transfer`, making them unable to receive funds via
>          ^^^^^^^^
>      * `transfer`. {sendValue} removes this limitation.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        877
Source: 
>         bytes memory swapData
>     ) internal returns (uint256) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        912
Source: 
>     function _transferGoodwill(
>         address _tokenContractAddress,
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 valueToSend

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    BancorV2_ZapIn_General_V2
Line:        944
Source: 
>         tokenAddress.safeTransfer(owner(), qty);
>     }
>    ^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        555
Source: 
> contract Context {
>     // Empty internal constructor, to prevent people from mistakenly deploying
>                       ^^^^^^^^^^^^^^^^^^^
>     // an instance of this contract, which should be used via inheritance.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        559
Source: 
> 
>     // solhint-disable-previous-line no-empty-blocks
>            ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        384
Source: 
>     function safeTransfer(
>         IERC20 token,
>            ^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        498
Source: 
>  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
>  * available, which can be applied to functions to make sure there are no nested
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * (reentrant) calls to them.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        502
Source: 
>  * Note that because there is a single `nonReentrant` guard, functions marked as
>  * `nonReentrant` may not call one another. This can be worked around by making
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>  * those functions `private`, and then adding `external` `nonReentrant` entry

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        444
Source: 
>     function safeDecreaseAllowance(
>         IERC20 token,
>      ^^^^^^^^^^^^^^^^
>         address spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        458
Source: 
>                 newAllowance
>             )
> ^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        468
Source: 
>      */
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        384
Source: 
>     function safeTransfer(
>         IERC20 token,
>            ^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        498
Source: 
>  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
>  * available, which can be applied to functions to make sure there are no nested
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * (reentrant) calls to them.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        502
Source: 
>  * Note that because there is a single `nonReentrant` guard, functions marked as
>  * `nonReentrant` may not call one another. This can be worked around by making
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>  * those functions `private`, and then adding `external` `nonReentrant` entry

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        444
Source: 
>     function safeDecreaseAllowance(
>         IERC20 token,
>      ^^^^^^^^^^^^^^^^
>         address spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        458
Source: 
>                 newAllowance
>             )
> ^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        468
Source: 
>      */
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        384
Source: 
>     function safeTransfer(
>         IERC20 token,
>            ^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        498
Source: 
>  * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier
>  * available, which can be applied to functions to make sure there are no nested
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  * (reentrant) calls to them.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        502
Source: 
>  * Note that because there is a single `nonReentrant` guard, functions marked as
>  * `nonReentrant` may not call one another. This can be worked around by making
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>  * those functions `private`, and then adding `external` `nonReentrant` entry

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        444
Source: 
>     function safeDecreaseAllowance(
>         IERC20 token,
>      ^^^^^^^^^^^^^^^^
>         address spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        458
Source: 
>                 newAllowance
>             )
> ^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        468
Source: 
>      */
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        384
Source: 
>     function safeTransfer(
>         IERC20 token,
>            ^^^^^^^^^^
>         address to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        458
Source: 
>                 newAllowance
>             )
> ^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        468
Source: 
>      */
>     function callOptionalReturn(IERC20 token, bytes memory data) private {
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        526
Source: 
>      * function is not supported. It is possible to prevent this from happening
>      * by making the `nonReentrant` function external, and make it call a
>        ^^^^^^^^^^^^^^^^^^^^^^^^
>      * `private` function that does the actual work.

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    BancorV2_ZapIn_General_V2
Line:        728
Source: 
>         uint256 LPTRec,
>         uint256 vBNTRec,
>    ^^^^^^^^^^^^^^^^^^^^^
>         uint256 id

[0m
