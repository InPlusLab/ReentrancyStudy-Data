Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.2. Changing pragma version to 0.5.2....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        29
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        54
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        63
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        54
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        63
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GhoulxVesting
Line:        268
Source: 
> 
>     function token() public view returns (IERC20) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return GhoulxToken;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GhoulxVesting
Line:        272
Source: 
> 
>     function beneficiary(uint256 _vestingId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return vestings[_vestingId].beneficiary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GhoulxVesting
Line:        276
Source: 
> 
>     function releaseTime(uint256 _vestingId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return vestings[_vestingId].releaseTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GhoulxVesting
Line:        280
Source: 
> 
>     function vestingAmount(uint256 _vestingId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return vestings[_vestingId].amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GhoulxVesting
Line:        284
Source: 
> 
>     function removeVesting(uint256 _vestingId) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Vesting storage vesting = vestings[_vestingId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GhoulxVesting
Line:        306
Source: 
> 
>     function release(uint256 _vestingId) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Vesting storage vesting = vestings[_vestingId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GhoulxVesting
Line:        320
Source: 
> 
>     function retrieveExcessTokens(uint256 _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= GhoulxToken.balanceOf(address(this)).sub(tokensToVest), INSUFFICIENT_BALANCE);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        63
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GhoulxVesting
Line:        272
Source: 
> 
>     function beneficiary(uint256 _vestingId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return vestings[_vestingId].beneficiary;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GhoulxVesting
Line:        276
Source: 
> 
>     function releaseTime(uint256 _vestingId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return vestings[_vestingId].releaseTime;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GhoulxVesting
Line:        280
Source: 
> 
>     function vestingAmount(uint256 _vestingId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return vestings[_vestingId].amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GhoulxVesting
Line:        293
Source: 
> 
>     function addVesting(address _beneficiary, uint256 _releaseTime, uint256 _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_beneficiary != address(0x0), INVALID_BENEFICIARY);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GhoulxVesting
Line:        313
Source: 
> 
>         require(GhoulxToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vesting.released = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GhoulxVesting
Line:        233
Source: 
> 
>     IERC20 private GhoulxToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private tokensToVest = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GhoulxVesting
Line:        259
Source: 
>         // test data
>         uint256 SCALING_FACTOR = 10 ** 18;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 day = 1 minutes;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    GhoulxVesting
Line:        261
Source: 
>         uint256 day = 1 minutes;
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 0, 20000000 * SCALING_FACTOR);
>                                                                         ^^^^^^^^
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 365 * day, 20000000 * SCALING_FACTOR);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    GhoulxVesting
Line:        262
Source: 
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 0, 20000000 * SCALING_FACTOR);
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 365 * day, 20000000 * SCALING_FACTOR);
>                                                                                 ^^^^^^^^
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 730 * day, 30000000 * SCALING_FACTOR);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    GhoulxVesting
Line:        263
Source: 
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 365 * day, 20000000 * SCALING_FACTOR);
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 730 * day, 30000000 * SCALING_FACTOR);
>                                                                                 ^^^^^^^^
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 1095 * day,30000000 * SCALING_FACTOR);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    GhoulxVesting
Line:        264
Source: 
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 730 * day, 30000000 * SCALING_FACTOR);
>         addVesting(0x5baF7e041bD22d24b054Cf3A1fdC3Da0dFC918AA, now + 1095 * day,30000000 * SCALING_FACTOR);
>                                                                                 ^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GhoulxVesting
Line:        313
Source: 
> 
>         require(GhoulxToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         vesting.released = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        188
Source: 
>     function safeTransfer(IERC20 token, address to, uint256 value) internal {
>         require(token.transfer(to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GhoulxVesting
Line:        321
Source: 
>     function retrieveExcessTokens(uint256 _amount) public onlyOwner {
>         require(_amount <= GhoulxToken.balanceOf(address(this)).sub(tokensToVest), INSUFFICIENT_BALANCE);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         GhoulxToken.safeTransfer(owner(), _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GhoulxVesting
Line:        315
Source: 
>         vesting.released = true;
>         tokensToVest = tokensToVest.sub(vesting.amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         GhoulxToken.safeTransfer(vesting.beneficiary, vesting.amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    GhoulxVesting
Line:        314
Source: 
>         require(GhoulxToken.balanceOf(address(this)) >= vesting.amount, INSUFFICIENT_BALANCE);
>         vesting.released = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         tokensToVest = tokensToVest.sub(vesting.amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        188
Source: 
>     function safeTransfer(IERC20 token, address to, uint256 value) internal {
>         require(token.transfer(to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        192
Source: 
>     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
>         require(token.transferFrom(from, to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        199
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(msg.sender, spender) == 0));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        200
Source: 
>         require((value == 0) || (token.allowance(msg.sender, spender) == 0));
>         require(token.approve(spender, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        204
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        205
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        209
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        210
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        192
Source: 
>     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
>         require(token.transferFrom(from, to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        199
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(msg.sender, spender) == 0));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        200
Source: 
>         require((value == 0) || (token.allowance(msg.sender, spender) == 0));
>         require(token.approve(spender, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        204
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        205
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        209
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        210
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    GhoulxVesting
Line:        311
Source: 
>         // solhint-disable-next-line not-rely-on-time
>         require(block.timestamp >= vesting.releaseTime, NOT_VESTED);
>                 ^^^^^^^^^^^^^^^
> 

[0m
