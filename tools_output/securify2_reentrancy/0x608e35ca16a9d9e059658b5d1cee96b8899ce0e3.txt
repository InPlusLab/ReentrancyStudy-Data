Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.8. Changing pragma version to 0.5.8....
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    DonationCommunity
Line:        615
Source: 
>         registry = (RegistryInterface)(_registry);
>         charityVault.setRegistry(_registry);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        90
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    WhitelistedRole
Line:        143
Source: 
> 
>     Roles.Role private _whitelisteds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        105
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        109
Source: 
> 
>     function renounceWhitelistAdmin() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        105
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        109
Source: 
> 
>     function renounceWhitelistAdmin() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        150
Source: 
> 
>     function isWhitelisted(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        154
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        158
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        162
Source: 
> 
>     function renounceWhitelisted() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Secondary
Line:        373
Source: 
>      */
>     function primary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _primary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Secondary
Line:        381
Source: 
>      */
>     function transferPrimary(address recipient) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(recipient != address(0), "Secondary: new primary is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Secondary
Line:        373
Source: 
>      */
>     function primary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _primary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Secondary
Line:        381
Source: 
>      */
>     function transferPrimary(address recipient) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(recipient != address(0), "Secondary: new primary is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CharityVault
Line:        519
Source: 
>      */
>     function deposit(address _payee) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sumStats = sumStats.add(msg.value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CharityVault
Line:        527
Source: 
>      */
>     function withdraw(address payable _payee, uint256 _payment) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_payment > 0 && address(this).balance >= _payment, "Insufficient funds in the charity vault");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CharityVault
Line:        533
Source: 
> 
>     function setRegistry(address _registry) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registry = (RegistryInterface)(_registry);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CharityVault
Line:        537
Source: 
> 
>     function getRegistry() public view returns (RegistryInterface) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return registry;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        105
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistAdminRole
Line:        109
Source: 
> 
>     function renounceWhitelistAdmin() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelistAdmin(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        154
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        158
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    WhitelistedRole
Line:        162
Source: 
> 
>     function renounceWhitelisted() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DonationCommunity
Line:        613
Source: 
> 
>     function setRegistry(address _registry) public onlyWhitelisted {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registry = (RegistryInterface)(_registry);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DonationCommunity
Line:        629
Source: 
> 
>     function myReward(uint256 _ethAmount) public view returns (uint256 tokenAmount) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(_ethAmount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DonationCommunity
Line:        634
Source: 
> 
>     function myReturn(uint256 _tokenAmount) public view returns (uint256 returnEth) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getRegistry().getBondingVault().calculateReturn(_tokenAmount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DonationCommunity
Line:        638
Source: 
> 
>     function donate() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         donateDelegated(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DonationCommunity
Line:        662
Source: 
>     **/
>     function donateDelegatedNoReward(address payable _donor) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value > 0, "Must include some ETH to donate");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DonationCommunity
Line:        681
Source: 
> 
>     function passToCharityWithInterest(uint256 _amount, address payable _intermediary, string memory _ipfsHash, address _aaveToken, address _aaveAToken) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         passToCharity(_amount, _intermediary, _ipfsHash);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DonationCommunity
Line:        687
Source: 
> 
>     function name() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        101
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        105
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        101
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        105
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        150
Source: 
> 
>     function isWhitelisted(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        154
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        158
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        101
Source: 
> 
>     function isWhitelistAdmin(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelistAdmins.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistAdminRole
Line:        105
Source: 
> 
>     function addWhitelistAdmin(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelistAdmin(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        150
Source: 
> 
>     function isWhitelisted(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _whitelisteds.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        154
Source: 
> 
>     function addWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    WhitelistedRole
Line:        158
Source: 
> 
>     function removeWhitelisted(address account) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removeWhitelisted(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DonationCommunity
Line:        613
Source: 
> 
>     function setRegistry(address _registry) public onlyWhitelisted {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registry = (RegistryInterface)(_registry);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DonationCommunity
Line:        634
Source: 
> 
>     function myReturn(uint256 _tokenAmount) public view returns (uint256 returnEth) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getRegistry().getBondingVault().calculateReturn(_tokenAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DonationCommunity
Line:        647
Source: 
>     **/
>     function donateDelegated(address payable _donor) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value > 0, "Must include some ETH to donate");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DonationCommunity
Line:        662
Source: 
>     **/
>     function donateDelegatedNoReward(address payable _donor) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value > 0, "Must include some ETH to donate");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CharityVault
Line:        519
Source: 
>      */
>     function deposit(address _payee) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sumStats = sumStats.add(msg.value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CharityVault
Line:        527
Source: 
>      */
>     function withdraw(address payable _payee, uint256 _payment) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_payment > 0 && address(this).balance >= _payment, "Insufficient funds in the charity vault");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CharityVault
Line:        533
Source: 
> 
>     function setRegistry(address _registry) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registry = (RegistryInterface)(_registry);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DonationCommunity
Line:        629
Source: 
> 
>     function myReward(uint256 _ethAmount) public view returns (uint256 tokenAmount) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(_ethAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DonationCommunity
Line:        674
Source: 
> 
>     function passToCharity(uint256 _amount, address payable _intermediary, string memory _ipfsHash) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_intermediary != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DonationCommunity
Line:        681
Source: 
> 
>     function passToCharityWithInterest(uint256 _amount, address payable _intermediary, string memory _ipfsHash, address _aaveToken, address _aaveAToken) public onlyWhitelistAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         passToCharity(_amount, _intermediary, _ipfsHash);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    DonationCommunity
Line:        608
Source: 
>     */
>     constructor (string memory name) public {
>                  ^^^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DonationCommunity
Line:        623
Source: 
>     function allocate(uint256 donation) internal pure returns (uint256 _charityAllocation, uint256 _bondingAllocation) {
>         uint256 _multiplier = 100;
>         ^^^^^^^^^^^^^^^^^^^
>         _charityAllocation = (donation).mul(CHARITY_DISTRIBUTION).div(_multiplier);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DonationCommunity
Line:        630
Source: 
>     function myReward(uint256 _ethAmount) public view returns (uint256 tokenAmount) {
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(_ethAmount);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getRegistry().getBondingVault().calculateReward(_bondingAllocation);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DonationCommunity
Line:        630
Source: 
>     function myReward(uint256 _ethAmount) public view returns (uint256 tokenAmount) {
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(_ethAmount);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getRegistry().getBondingVault().calculateReward(_bondingAllocation);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DonationCommunity
Line:        650
Source: 
> 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         charityVault.deposit.value(_charityAllocation)(_donor);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DonationCommunity
Line:        650
Source: 
> 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         charityVault.deposit.value(_charityAllocation)(_donor);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DonationCommunity
Line:        665
Source: 
> 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         charityVault.deposit.value(_charityAllocation)(_donor);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DonationCommunity
Line:        665
Source: 
> 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         charityVault.deposit.value(_charityAllocation)(_donor);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CharityVault
Line:        529
Source: 
>         require(_payment > 0 && address(this).balance >= _payment, "Insufficient funds in the charity vault");
>         _payee.transfer(_payment);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDonationWithdrawn(_payment, _payee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CharityVault
Line:        529
Source: 
>         require(_payment > 0 && address(this).balance >= _payment, "Insufficient funds in the charity vault");
>         _payee.transfer(_payment);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDonationWithdrawn(_payment, _payee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    DonationCommunity
Line:        651
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>         charityVault.deposit.value(_charityAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    DonationCommunity
Line:        653
Source: 
> 
>         getRegistry().getBondingVault().fundWithReward.value(_bondingAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    DonationCommunity
Line:        666
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>         charityVault.deposit.value(_charityAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    DonationCommunity
Line:        669
Source: 
>         address payable bondingVaultPayable = address(uint160(address(getRegistry().getBondingVault())));
>         bondingVaultPayable.transfer(_bondingAllocation);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CharityVault
Line:        529
Source: 
>         require(_payment > 0 && address(this).balance >= _payment, "Insufficient funds in the charity vault");
>         _payee.transfer(_payment);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDonationWithdrawn(_payment, _payee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DonationCommunity
Line:        651
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>         charityVault.deposit.value(_charityAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DonationCommunity
Line:        653
Source: 
> 
>         getRegistry().getBondingVault().fundWithReward.value(_bondingAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DonationCommunity
Line:        666
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>         charityVault.deposit.value(_charityAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DonationCommunity
Line:        669
Source: 
>         address payable bondingVaultPayable = address(uint160(address(getRegistry().getBondingVault())));
>         bondingVaultPayable.transfer(_bondingAllocation);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        615
Source: 
>         registry = (RegistryInterface)(_registry);
>         charityVault.setRegistry(_registry);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        631
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(_ethAmount);
>         return getRegistry().getBondingVault().calculateReward(_bondingAllocation);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        631
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(_ethAmount);
>         return getRegistry().getBondingVault().calculateReward(_bondingAllocation);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        635
Source: 
>     function myReturn(uint256 _tokenAmount) public view returns (uint256 returnEth) {
>         return getRegistry().getBondingVault().calculateReturn(_tokenAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        635
Source: 
>     function myReturn(uint256 _tokenAmount) public view returns (uint256 returnEth) {
>         return getRegistry().getBondingVault().calculateReturn(_tokenAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        651
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>         charityVault.deposit.value(_charityAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        653
Source: 
> 
>         getRegistry().getBondingVault().fundWithReward.value(_bondingAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        653
Source: 
> 
>         getRegistry().getBondingVault().fundWithReward.value(_bondingAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        666
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>         charityVault.deposit.value(_charityAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        668
Source: 
> 
>         address payable bondingVaultPayable = address(uint160(address(getRegistry().getBondingVault())));
>                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bondingVaultPayable.transfer(_bondingAllocation);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        676
Source: 
>         require(_intermediary != address(0));
>         charityVault.withdraw(_intermediary, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        684
Source: 
>         //distribute accumulated interest amongst the communities
>         registry.yieldVault().withdraw(_aaveToken, _aaveAToken, 0);
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DonationCommunity
Line:        684
Source: 
>         //distribute accumulated interest amongst the communities
>         registry.yieldVault().withdraw(_aaveToken, _aaveAToken, 0);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CharityVault
Line:        496
Source: 
> 
>     RegistryInterface public registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public sumStats;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CharityVault
Line:        497
Source: 
>     RegistryInterface public registry;
>     uint256 public sumStats;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DonationCommunity
Line:        579
Source: 
> 
>     string private _name;
>     ^^^^^^^^^^^^^^^^^^^^
>     CharityVault public charityVault;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DonationCommunity
Line:        580
Source: 
>     string private _name;
>     CharityVault public charityVault;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DonationCommunity
Line:        582
Source: 
> 
>     RegistryInterface public registry;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        90
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistedRole
Line:        143
Source: 
> 
>     Roles.Role private _whitelisteds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistAdminRole
Line:        90
Source: 
> 
>     Roles.Role private _whitelistAdmins;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    WhitelistedRole
Line:        143
Source: 
> 
>     Roles.Role private _whitelisteds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DonationCommunity
Line:        651
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>         charityVault.deposit.value(_charityAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DonationCommunity
Line:        653
Source: 
> 
>         getRegistry().getBondingVault().fundWithReward.value(_bondingAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DonationCommunity
Line:        666
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(msg.value);
>         charityVault.deposit.value(_charityAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DonationCommunity
Line:        669
Source: 
>         address payable bondingVaultPayable = address(uint160(address(getRegistry().getBondingVault())));
>         bondingVaultPayable.transfer(_bondingAllocation);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        53
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        61
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        53
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        61
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        53
Source: 
>         require(!has(role, account), "Roles: account already has role");
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        61
Source: 
>         require(has(role, account), "Roles: account does not have role");
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DonationCommunity
Line:        614
Source: 
>     function setRegistry(address _registry) public onlyWhitelisted {
>         registry = (RegistryInterface)(_registry);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         charityVault.setRegistry(_registry);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CharityVault
Line:        520
Source: 
>     function deposit(address _payee) public payable {
>         sumStats = sumStats.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogDonationReceived(msg.value, _payee);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DonationCommunity
Line:        631
Source: 
>         (uint256 _charityAllocation, uint256  _bondingAllocation) = allocate(_ethAmount);
>         return getRegistry().getBondingVault().calculateReward(_bondingAllocation);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DonationCommunity
Line:        635
Source: 
>     function myReturn(uint256 _tokenAmount) public view returns (uint256 returnEth) {
>         return getRegistry().getBondingVault().calculateReturn(_tokenAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DonationCommunity
Line:        653
Source: 
> 
>         getRegistry().getBondingVault().fundWithReward.value(_bondingAllocation)(_donor);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DonationCommunity
Line:        684
Source: 
>         //distribute accumulated interest amongst the communities
>         registry.yieldVault().withdraw(_aaveToken, _aaveAToken, 0);
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
