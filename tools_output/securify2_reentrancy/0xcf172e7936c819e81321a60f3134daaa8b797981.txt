[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    xETHRebaser
Line:        30
Source: 
>     modifier onlyGov() {
>         require(msg.sender == gov, "This function can only be called by the governance address");
>                 ^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        226
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     if (a == 0) {
>         ^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        231
Source: 
>     uint256 c = a * b;
>     require(c / a == b);
>             ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    xETHRebaser
Line:        30
Source: 
>     modifier onlyGov() {
>         require(msg.sender == gov, "This function can only be called by the governance address");
>                 ^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    xETHRebaser
Line:        106
Source: 
>      */
>     function rebase() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Validate the address which triggered the rebase

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    xETHRebaser
Line:        87
Source: 
> 
>     function setGovernance(address _newGovernance) external onlyGov {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gov = _newGovernance;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    xETHRebaser
Line:        154
Source: 
> 
>     function setDeviationThreshold(uint256 deviationThreshold_) external onlyGov {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(deviationThreshold > 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    xETHRebaser
Line:        91
Source: 
> 
>     function setWhitelistedFrom(address _addr, bool _whitelisted) external onlyGov {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         whitelistFrom[_addr] = _whitelisted;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        230
Source: 
> 
>     uint256 c = a * b;
>                 ^^^^^
>     require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    xETHRebaser
Line:        135
Source: 
>         if (positive) {
>             require(xETH.xETHScalingFactor().mul(uint256(10**18).add(indexDelta)).div(10**18) < xETH.maxScalingFactor(), "new scaling factor will be too big");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    xETHRebaser
Line:        135
Source: 
>         if (positive) {
>             require(xETH.xETHScalingFactor().mul(uint256(10**18).add(indexDelta)).div(10**18) < xETH.maxScalingFactor(), "new scaling factor will be too big");
>                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    xETHRebaser
Line:        139
Source: 
>         // rebase
>         xETH.rebase(epoch, indexDelta, positive);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    xETHRebaser
Line:        140
Source: 
>         xETH.rebase(epoch, indexDelta, positive);
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    xETHRebaser
Line:        140
Source: 
>         xETH.rebase(epoch, indexDelta, positive);
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    xETHRebaser
Line:        135
Source: 
>         if (positive) {
>             require(xETH.xETHScalingFactor().mul(uint256(10**18).add(indexDelta)).div(10**18) < xETH.maxScalingFactor(), "new scaling factor will be too big");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    xETHRebaser
Line:        135
Source: 
>         if (positive) {
>             require(xETH.xETHScalingFactor().mul(uint256(10**18).add(indexDelta)).div(10**18) < xETH.maxScalingFactor(), "new scaling factor will be too big");
>                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    xETHRebaser
Line:        140
Source: 
>         xETH.rebase(epoch, indexDelta, positive);
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    xETHRebaser
Line:        140
Source: 
>         xETH.rebase(epoch, indexDelta, positive);
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    xETHTokenInterface
Line:        14
Source: 
> 
> interface xETHTokenInterface {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    xETHRebaser
Line:        25
Source: 
> 
> contract xETHRebaser {
> ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    xETHRebaser
Line:        62
Source: 
>    
>     address public uniswap_xeth_eth_pair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    xETHRebaser
Line:        149
Source: 
>     function getPrice() public view returns (uint256) {
>         (uint xethReserve, uint ethReserve, ) = UniswapPairContract(uniswap_xeth_eth_pair).getReserves();
>          ^^^^^^^^^^^^^^^^
>         uint xEthPrice = ethReserve.mul(10**18).div(xethReserve);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // SPDX-License-Identifier: UNLICENSED
> pragma solidity ^0.6.6;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    xETHRebaser
Line:        135
Source: 
>         if (positive) {
>             require(xETH.xETHScalingFactor().mul(uint256(10**18).add(indexDelta)).div(10**18) < xETH.maxScalingFactor(), "new scaling factor will be too big");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    xETHRebaser
Line:        135
Source: 
>         if (positive) {
>             require(xETH.xETHScalingFactor().mul(uint256(10**18).add(indexDelta)).div(10**18) < xETH.maxScalingFactor(), "new scaling factor will be too big");
>                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    xETHRebaser
Line:        140
Source: 
>         xETH.rebase(epoch, indexDelta, positive);
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    xETHRebaser
Line:        140
Source: 
>         xETH.rebase(epoch, indexDelta, positive);
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    xETHRebaser
Line:        149
Source: 
>     function getPrice() public view returns (uint256) {
>         (uint xethReserve, uint ethReserve, ) = UniswapPairContract(uniswap_xeth_eth_pair).getReserves();
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint xEthPrice = ethReserve.mul(10**18).div(xethReserve);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    xETHRebaser
Line:        139
Source: 
>         // rebase
>         xETH.rebase(epoch, indexDelta, positive);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    xETHRebaser
Line:        185
Source: 
>         require(_fee > 0);
>         xETHTokenInterface(xETHAddress).setSellFee(_fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    xETHRebaser
Line:        190
Source: 
>         require(_fee > 0);
>         xETHTokenInterface(xETHAddress).setTxFee(_fee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    xETHRebaser
Line:        58
Source: 
>     /// @notice The number of rebase cycles since inception
>     uint256 public epoch;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    xETHRebaser
Line:        139
Source: 
>         // rebase
>         xETH.rebase(epoch, indexDelta, positive);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assert(xETH.xETHScalingFactor() <= xETH.maxScalingFactor());

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    xETHRebaser
Line:        114
Source: 
>         uint256 elapsed = lastRebaseTimestampSec.add(minRebaseTimeIntervalSec);
>         require(elapsed < block.timestamp, "Not enough time has elapsed since last rebase!");
>                           ^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    xETHRebaser
Line:        118
Source: 
>         epoch = epoch.add(1);
>         lastRebaseTimestampSec = block.timestamp;
>                                  ^^^^^^^^^^^^^^^
>         minRebaseTimeIntervalSec = _computeTimeLeftUntilNextWindow();

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    xETHRebaser
Line:        145
Source: 
>         uint secsInDay = 1 days;
>         return secsInDay - (block.timestamp % secsInDay);
>                             ^^^^^^^^^^^^^^^
>     }

[0m
