[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DirectMigration
Line:        117
Source: 
> 
>     function activatedMigration() public returns (uint current) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint start = migrated;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DirectMigration
Line:        119
Source: 
>         uint start = migrated;
>         address first = old.ownerOf(start);
>                         ^^^^^^^^^^^^^^^^^^
>         current = start;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DirectMigration
Line:        123
Source: 
> 
>         uint last = old.totalSupply();
>                     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DirectMigration
Line:        152
Source: 
>         if (size <= threshold) {
>             newStart = cards.mintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DirectMigration
Line:        154
Source: 
>         } else {
>             newStart = cards.batchMintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DirectMigration
Line:        145
Source: 
>         for (uint i = 0; i < size; i++) {
>             (proto, purity) = old.getCard(start+i);
>                               ^^^^^^^^^^^^^^^^^^^^
>             protos[i] = convertProto(proto);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DirectMigration
Line:        132
Source: 
>             }
>             owner = old.ownerOf(current);
>                     ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DirectMigration
Line:        164
Source: 
> 
>     function convertPurity(uint16 purity) public pure returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint8((purity / 1000) + 2);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        119
Source: 
>         uint start = migrated;
>         address first = old.ownerOf(start);
>                         ^^^^^^^^^^^^^^^^^^
>         current = start;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        123
Source: 
> 
>         uint last = old.totalSupply();
>                     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        145
Source: 
>         for (uint i = 0; i < size; i++) {
>             (proto, purity) = old.getCard(start+i);
>                               ^^^^^^^^^^^^^^^^^^^^
>             protos[i] = convertProto(proto);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        152
Source: 
>         if (size <= threshold) {
>             newStart = cards.mintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        154
Source: 
>         } else {
>             newStart = cards.batchMintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DirectMigration
Line:        132
Source: 
>             }
>             owner = old.ownerOf(current);
>                     ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.11;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DirectMigration
Line:        101
Source: 
> 
>     uint threshold;
>     ^^^^^^^^^^^^^^
>     OldToken old;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DirectMigration
Line:        102
Source: 
>     uint threshold;
>     OldToken old;
>     ^^^^^^^^^^^^
>     ICards cards;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DirectMigration
Line:        103
Source: 
>     OldToken old;
>     ICards cards;
>     ^^^^^^^^^^^^
>     uint limit;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DirectMigration
Line:        104
Source: 
>     ICards cards;
>     uint limit;
>     ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DirectMigration
Line:        119
Source: 
>         uint start = migrated;
>         address first = old.ownerOf(start);
>                         ^^^^^^^^^^^^^^^^^^
>         current = start;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DirectMigration
Line:        123
Source: 
> 
>         uint last = old.totalSupply();
>                     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DirectMigration
Line:        145
Source: 
>         for (uint i = 0; i < size; i++) {
>             (proto, purity) = old.getCard(start+i);
>                               ^^^^^^^^^^^^^^^^^^^^
>             protos[i] = convertProto(proto);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DirectMigration
Line:        132
Source: 
>             }
>             owner = old.ownerOf(current);
>                     ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DirectMigration
Line:        152
Source: 
>         if (size <= threshold) {
>             newStart = cards.mintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DirectMigration
Line:        154
Source: 
>         } else {
>             newStart = cards.batchMintCards(first, protos, qualities);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DirectMigration
Line:        115
Source: 
> 
>     uint public migrated;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DirectMigration
Line:        157
Source: 
> 
>         migrated = current;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
