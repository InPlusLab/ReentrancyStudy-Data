Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    RewardsContract
Line:        583
Source: 
> 
>   string public url = "https://www.gamecredits.org";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    RewardsContract
Line:        695
Source: 
>     //   will be overwritten if necessary by future support changes
>     if(weekAccountSupport[endWeek][msg.sender] == 0) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       weekAccountSupport[endWeek][msg.sender] = lastWeekSupport;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    RewardsContract
Line:        737
Source: 
>     //   will be overwritten if necessary by future support changes
>     if(weekGameSupport[endWeek][_game] == 0) {
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       weekGameSupport[endWeek][_game] = lastWeekSupport;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsContract
Line:        629
Source: 
>   // @notice - this will throw if the _account doesn't have enough funds
>   function updateSupport(uint _game, address _account, uint _newSupport)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RewardsContract
Line:        667
Source: 
>   // @returns _payout - the total rewards payout over all the collected weeks
>   function collectRewards(uint _numberOfWeeks)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsContract
Line:        701
Source: 
> 
>     erc20Contract.transfer(msg.sender, _payout);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Payout(msg.sender, 0, _payout, endWeek);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsAccess
Line:        251
Source: 
>   modifier onlyGameAdmin(uint _game) {
>     require(gameContract.isAdminForGame(_game, msg.sender), "caller must be game admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsContract
Line:        743
Source: 
> 
>     erc20Contract.transfer(msg.sender, _payout);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Payout(msg.sender, _game, _payout, endWeek);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsContract
Line:        755
Source: 
>   {
>     uint gameId = gameContract.games(_game);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(gameId == _game, "gameIds must match");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    RewardsContract
Line:        769
Source: 
>   {
>     uint gameId = gameContract.games(_game);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(gameId == _game, "gameIds must match");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    RewardsContract
Line:        581
Source: 
> // (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.
> contract RewardsContract is RewardsBase {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsContract
Line:        629
Source: 
>   // @notice - this will throw if the _account doesn't have enough funds
>   function updateSupport(uint _game, address _account, uint _newSupport)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsContract
Line:        648
Source: 
>   // @notice - this will throw if called from a contract other than the GAME token contract
>   function fundRewardsPool(uint _amount, uint _startWeek, uint _numberOfWeeks)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsContract
Line:        667
Source: 
>   // @returns _payout - the total rewards payout over all the collected weeks
>   function collectRewards(uint _numberOfWeeks)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RewardsContract
Line:        709
Source: 
>   // @returns _payout - the total payout over all the collected weeks
>   function collectGamePayout(uint _game, uint _numberOfWeeks)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsContract
Line:        614
Source: 
>   // @returns support - the amount supported that game by that account
>   function getGameAccountSupport(uint _game, address _account)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsContract
Line:        751
Source: 
>   // @param _json - A json string to be used to display promotional information
>   function setPromotedGame(uint _game, bool _isPromoted, string calldata _json)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsContract
Line:        765
Source: 
>   // @param _isSuppressed - true for suppressed, false for not
>   function setSuppressedGame(uint _game, bool _isSuppressed)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsContract
Line:        775
Source: 
>   // @dev This support contract doesn't implement receiveGameCredits
>   function receiveGameCredits(uint, address, uint, uint, bytes32)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsContract
Line:        782
Source: 
>   // @dev This support contract doesn't implement receiveLoyaltyPayment
>   function receiveLoyaltyPayment(uint, address, uint, uint, bytes32)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RewardsContract
Line:        789
Source: 
>   // @dev This support contract doesn't implement contestEntry
>   function contestEntry(uint, address, uint, uint, uint, bytes32)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RewardsContract
Line:        701
Source: 
> 
>     erc20Contract.transfer(msg.sender, _payout);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Payout(msg.sender, 0, _payout, endWeek);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RewardsAccess
Line:        251
Source: 
>   modifier onlyGameAdmin(uint _game) {
>     require(gameContract.isAdminForGame(_game, msg.sender), "caller must be game admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RewardsContract
Line:        743
Source: 
> 
>     erc20Contract.transfer(msg.sender, _payout);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Payout(msg.sender, _game, _payout, endWeek);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    iSupportContract
Line:        183
Source: 
> // (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.
> contract iSupportContract {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    iGameContract
Line:        206
Source: 
> // (c) 2020 GAME Credits. All Rights Reserved. This code is not open source.
> contract iGameContract {
> ^^^^^^^^^^^^^^^^^^^^^^^^
>   function isAdminForGame(uint _game, address account) external view returns(bool);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsBase
Line:        396
Source: 
>     newSupport = prevSupport.add(_increase);
>     uint _gameSupport = gameSupport[_game].add(_increase);
>     ^^^^^^^^^^^^^^^^^
>     uint _accountSupport = accountSupport[_account].add(_increase);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsBase
Line:        397
Source: 
>     uint _gameSupport = gameSupport[_game].add(_increase);
>     uint _accountSupport = accountSupport[_account].add(_increase);
>     ^^^^^^^^^^^^^^^^^^^^
>     uint _totalSupport = totalSupport.add(_increase);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsBase
Line:        398
Source: 
>     uint _accountSupport = accountSupport[_account].add(_increase);
>     uint _totalSupport = totalSupport.add(_increase);
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsBase
Line:        415
Source: 
>     newSupport = prevSupport.sub(_decrease);
>     uint _gameSupport = gameSupport[_game].sub(_decrease);
>     ^^^^^^^^^^^^^^^^^
>     uint _accountSupport = accountSupport[_account].sub(_decrease);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsBase
Line:        416
Source: 
>     uint _gameSupport = gameSupport[_game].sub(_decrease);
>     uint _accountSupport = accountSupport[_account].sub(_decrease);
>     ^^^^^^^^^^^^^^^^^^^^
>     uint _totalSupport = totalSupport.sub(_decrease);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsBase
Line:        417
Source: 
>     uint _accountSupport = accountSupport[_account].sub(_decrease);
>     uint _totalSupport = totalSupport.sub(_decrease);
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsBase
Line:        435
Source: 
>   {
>     uint _currentWeek = getCurrentWeek();
>     ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsBase
Line:        491
Source: 
>   returns(uint endWeek) {
>     uint _currentWeek = getCurrentWeek();
>     ^^^^^^^^^^^^^^^^^
>     require(_startWeek < _currentWeek, "must get at least one week");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    iERC20
Line:        504
Source: 
>  */
> interface iERC20 {
> ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsContract
Line:        653
Source: 
>     require(_startWeek >= getCurrentWeek(), "Start Week must be equal or greater than current week");
>     uint _amountPerWeek = _amount.div(_numberOfWeeks);
>     ^^^^^^^^^^^^^^^^^^^
>     uint _checkAmount = _amountPerWeek.mul(_numberOfWeeks);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RewardsContract
Line:        654
Source: 
>     uint _amountPerWeek = _amount.div(_numberOfWeeks);
>     uint _checkAmount = _amountPerWeek.mul(_numberOfWeeks);
>     ^^^^^^^^^^^^^^^^^
>     require(_amount == _checkAmount, "Amount must divide exactly by number of weeks");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RewardsAccess
Line:        250
Source: 
>   // @dev Access control modifier to limit access to game admin accounts
>   modifier onlyGameAdmin(uint _game) {
>                          ^^^^^^^^^^
>     require(gameContract.isAdminForGame(_game, msg.sender), "caller must be game admin");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RewardsAccess
Line:        251
Source: 
>   modifier onlyGameAdmin(uint _game) {
>     require(gameContract.isAdminForGame(_game, msg.sender), "caller must be game admin");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RewardsContract
Line:        755
Source: 
>   {
>     uint gameId = gameContract.games(_game);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(gameId == _game, "gameIds must match");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RewardsContract
Line:        769
Source: 
>   {
>     uint gameId = gameContract.games(_game);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(gameId == _game, "gameIds must match");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsContract
Line:        701
Source: 
> 
>     erc20Contract.transfer(msg.sender, _payout);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Payout(msg.sender, 0, _payout, endWeek);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RewardsContract
Line:        743
Source: 
> 
>     erc20Contract.transfer(msg.sender, _payout);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Payout(msg.sender, _game, _payout, endWeek);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    RewardsContract
Line:        679
Source: 
>       uint weeklySupport = weekAccountSupport[i][msg.sender] == 0
>         ? lastWeekSupport
>           ^^^^^^^^^^^^^^^
>         : weekAccountSupport[i][msg.sender];

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    RewardsContract
Line:        722
Source: 
>       uint weeklySupport = weekGameSupport[week][_game] == 0
>         ? lastWeekSupport
>           ^^^^^^^^^^^^^^^
>         : weekGameSupport[week][_game];

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RewardsAccess
Line:        238
Source: 
>   // The Recovery account can change the Owner account.
>   address public recoveryAddress;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RewardsBase
Line:        337
Source: 
>   // Support
>   uint public totalSupport;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RewardsAccess
Line:        229
Source: 
>   // Reference to the address of the Game contract
>   iGameContract public gameContract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RewardsAccess
Line:        232
Source: 
>   // Reference to the address of the ERC20 contract
>   iERC20 public erc20Contract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        437
Source: 
> 
>     gameAccountSupport[_game][_supporter] = _newSupport;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     gameSupport[_game] = _gameSupport;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        438
Source: 
>     gameAccountSupport[_game][_supporter] = _newSupport;
>     gameSupport[_game] = _gameSupport;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     accountSupport[_supporter] = _accountSupport;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        439
Source: 
>     gameSupport[_game] = _gameSupport;
>     accountSupport[_supporter] = _accountSupport;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalSupport = _totalSupport;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        440
Source: 
>     accountSupport[_supporter] = _accountSupport;
>     totalSupport = _totalSupport;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        444
Source: 
>     // This tracks the difference between "not set this week" and "set to zero this week"
>     weekGameAccountSupport[_currentWeek][_game][_supporter] = _newSupport > 0 ? _newSupport : 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     weekAccountSupport[_currentWeek][_supporter] = _accountSupport > 0 ? _accountSupport : 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        445
Source: 
>     weekGameAccountSupport[_currentWeek][_game][_supporter] = _newSupport > 0 ? _newSupport : 1;
>     weekAccountSupport[_currentWeek][_supporter] = _accountSupport > 0 ? _accountSupport : 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     weekGameSupport[_currentWeek][_game] = _gameSupport > 0 ? _gameSupport : 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        446
Source: 
>     weekAccountSupport[_currentWeek][_supporter] = _accountSupport > 0 ? _accountSupport : 1;
>     weekGameSupport[_currentWeek][_game] = _gameSupport > 0 ? _gameSupport : 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     weekTotalSupport[_currentWeek] = _totalSupport > 0 ? _totalSupport : 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        447
Source: 
>     weekGameSupport[_currentWeek][_game] = _gameSupport > 0 ? _gameSupport : 1;
>     weekTotalSupport[_currentWeek] = _totalSupport > 0 ? _totalSupport : 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        452
Source: 
>     if(lastPayoutWeekByAccount[_supporter] == 0) {
>       lastPayoutWeekByAccount[_supporter] = _currentWeek - 1;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RewardsBase
Line:        455
Source: 
>     if (lastPayoutWeekByGame[_game] == 0) {
>       lastPayoutWeekByGame[_game] = _currentWeek - 1;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RewardsBase
Line:        478
Source: 
>       }
>       weekTotalSupport[_week] = _support;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RewardsContract
Line:        738
Source: 
>     if(weekGameSupport[endWeek][_game] == 0) {
>       weekGameSupport[endWeek][_game] = lastWeekSupport;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RewardsContract
Line:        741
Source: 
>     // Always update the last payout week
>     lastPayoutWeekByGame[_game] = endWeek;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RewardsBase
Line:        362
Source: 
>   {
>     weekTotalSupport[getCurrentWeek() - 1] = 1;
>                      ^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RewardsContract
Line:        701
Source: 
> 
>     erc20Contract.transfer(msg.sender, _payout);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Payout(msg.sender, 0, _payout, endWeek);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RewardsContract
Line:        743
Source: 
> 
>     erc20Contract.transfer(msg.sender, _payout);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Payout(msg.sender, _game, _payout, endWeek);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RewardsAccess
Line:        229
Source: 
>   // Reference to the address of the Game contract
>   iGameContract public gameContract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RewardsAccess
Line:        232
Source: 
>   // Reference to the address of the ERC20 contract
>   iERC20 public erc20Contract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RewardsContract
Line:        583
Source: 
> 
>   string public url = "https://www.gamecredits.org";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
