Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ReadProxy
Line:        232
Source: 
>         // Note that msg.sender in the underlying will always be the address of this contract.
>         assembly {
>         ^^^^^^^^^^
>             calldatacopy(0, 0, calldatasize)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinResolver
Line:        289
Source: 
> 
>     function rebuildCache() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32[] memory requiredAddresses = resolverAddressesRequired();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AddressResolver
Line:        388
Source: 
>         require(address(issuer) != address(0), "Cannot find Issuer address");
>         return address(issuer.pynths(key));
>                        ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        296
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        309
Source: 
>             // false if our cache is invalid or if the resolver doesn't have the required address
>             if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return false;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    AddressResolver
Line:        360
Source: 
>         for (uint i = 0; i < destinations.length; i++) {
>             destinations[i].rebuildCache();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        60
Source: 
> 
>     function nominateNewOwner(address _owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nominatedOwner = _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressResolver
Line:        385
Source: 
> 
>     function getPynth(bytes32 key) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IIssuer issuer = IIssuer(repository["Issuer"]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ReadProxy
Line:        224
Source: 
> 
>     function setTarget(address _target) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         target = _target;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        366
Source: 
> 
>     function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < names.length; i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        375
Source: 
> 
>     function getAddress(bytes32 name) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return repository[name];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        379
Source: 
> 
>     function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _foundAddress = repository[name];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MixinResolver
Line:        296
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MixinResolver
Line:        320
Source: 
>     function requireAndGetAddress(bytes32 name) internal view returns (address) {
>         address _foundAddress = addressCache[name];
>         ^^^^^^^^^^^^^^^^^^^^^
>         require(_foundAddress != address(0), string(abi.encodePacked("Missing address: ", name)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressResolver
Line:        380
Source: 
>     function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {
>         address _foundAddress = repository[name];
>         ^^^^^^^^^^^^^^^^^^^^^
>         require(_foundAddress != address(0), reason);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MixinResolver
Line:        309
Source: 
>             // false if our cache is invalid or if the resolver doesn't have the required address
>             if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return false;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MixinResolver
Line:        296
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressResolver
Line:        360
Source: 
>         for (uint i = 0; i < destinations.length; i++) {
>             destinations[i].rebuildCache();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressResolver
Line:        388
Source: 
>         require(address(issuer) != address(0), "Cannot find Issuer address");
>         return address(issuer.pynths(key));
>                        ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        52
Source: 
>     address public owner;
>     address public nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ReadProxy
Line:        220
Source: 
> contract ReadProxy is Owned {
>     address public target;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        52
Source: 
>     address public owner;
>     address public nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        61
Source: 
>     function nominateNewOwner(address _owner) external onlyOwner {
>         nominatedOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnerNominated(_owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReadProxy
Line:        225
Source: 
>     function setTarget(address _target) external onlyOwner {
>         target = _target;
>         ^^^^^^^^^^^^^^^^
>         emit TargetUpdated(target);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinResolver
Line:        297
Source: 
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>             addressCache[name] = destination;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CacheUpdated(name, destination);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        61
Source: 
>     function nominateNewOwner(address _owner) external onlyOwner {
>         nominatedOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnerNominated(_owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressResolver
Line:        351
Source: 
>             address destination = destinations[i];
>             repository[name] = destination;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit AddressImported(name, destination);

[0m
