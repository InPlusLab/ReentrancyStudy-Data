Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibNote
Line:        31
Source: 
>         _;
>         assembly {
>         ^^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GemJoin7
Line:        109
Source: 
> 
>     function join(address urn, uint wad) public note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "GemJoin7/not-live");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GemJoin7
Line:        119
Source: 
> 
>     function exit(address guy, uint wad) public note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint wad18 = mul(wad, 10 ** (18 - dec));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GemJoin7
Line:        119
Source: 
> 
>     function exit(address guy, uint wad) public note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint wad18 = mul(wad, 10 ** (18 - dec));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin7
Line:        70
Source: 
>     mapping (address => uint) public wards;
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin7
Line:        71
Source: 
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin7
Line:        97
Source: 
> 
>     function setImplementation(address implementation, uint256 permitted) public auth note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         implementations[implementation] = permitted; // 1 live, 0 disable

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GemJoin7
Line:        109
Source: 
> 
>     function join(address urn, uint wad) public note {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(live == 1, "GemJoin7/not-live");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GemJoin7
Line:        90
Source: 
>         ilk = ilk_;
>         setImplementation(address(gem.upgradedAddress()), 1);
>                                   ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        18
Source: 
> 
> pragma solidity >=0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin7
Line:        84
Source: 
>         gem = GemLike7(gem_);
>         dec = gem.decimals();
>               ^^^^^^^^^^^^^^
>         require(dec < 18, "GemJoin7/decimals-18-or-higher");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin7
Line:        111
Source: 
>         require(live == 1, "GemJoin7/not-live");
>         require(implementations[gem.upgradedAddress()] == 1, "GemJoin7/implementation-invalid");
>                                 ^^^^^^^^^^^^^^^^^^^^^
>         uint bal = gem.balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin7
Line:        112
Source: 
>         require(implementations[gem.upgradedAddress()] == 1, "GemJoin7/implementation-invalid");
>         uint bal = gem.balanceOf(address(this));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gem.transferFrom(msg.sender, address(this), wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin7
Line:        114
Source: 
>         gem.transferFrom(msg.sender, address(this), wad);
>         uint wadt = mul(sub(gem.balanceOf(address(this)), bal), 10 ** (18 - dec));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(int(wadt) >= 0, "GemJoin7/overflow");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GemJoin7
Line:        122
Source: 
>         require(int(wad18) >= 0, "GemJoin7/overflow");
>         require(implementations[gem.upgradedAddress()] == 1, "GemJoin7/implementation-invalid");
>                                 ^^^^^^^^^^^^^^^^^^^^^
>         vat.slip(ilk, msg.sender, -int(wad18));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin7
Line:        90
Source: 
>         ilk = ilk_;
>         setImplementation(address(gem.upgradedAddress()), 1);
>                                   ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin7
Line:        113
Source: 
>         uint bal = gem.balanceOf(address(this));
>         gem.transferFrom(msg.sender, address(this), wad);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint wadt = mul(sub(gem.balanceOf(address(this)), bal), 10 ** (18 - dec));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin7
Line:        116
Source: 
>         require(int(wadt) >= 0, "GemJoin7/overflow");
>         vat.slip(ilk, urn, int(wadt));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin7
Line:        123
Source: 
>         require(implementations[gem.upgradedAddress()] == 1, "GemJoin7/implementation-invalid");
>         vat.slip(ilk, msg.sender, -int(wad18));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gem.transfer(guy, wad);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GemJoin7
Line:        124
Source: 
>         vat.slip(ilk, msg.sender, -int(wad18));
>         gem.transfer(guy, wad);
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    GemJoin7
Line:        102
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "GemJoin7/overflow");
>                            ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    GemJoin7
Line:        106
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, "GemJoin7/underflow");
>                  ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin7
Line:        74
Source: 
> 
>     VatLike  public vat;
>     ^^^^^^^^^^^^^^^^^^^
>     bytes32  public ilk;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin7
Line:        75
Source: 
>     VatLike  public vat;
>     bytes32  public ilk;
>     ^^^^^^^^^^^^^^^^^^^
>     GemLike7 public gem;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin7
Line:        77
Source: 
>     GemLike7 public gem;
>     uint     public dec;
>     ^^^^^^^^^^^^^^^^^^^
>     uint     public live; // Access flag

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GemJoin7
Line:        78
Source: 
>     uint     public dec;
>     uint     public live; // Access flag
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
