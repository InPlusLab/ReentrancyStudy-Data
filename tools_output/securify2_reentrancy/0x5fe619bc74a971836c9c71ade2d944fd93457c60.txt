Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        93
Source: 
>   
>    function returnAllTokens() public {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        107
Source: 
>            
>   function claimTokens() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(ableToClaim);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        114
Source: 
>   
>   function openClaimSystem (bool _ableToClaim) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        119
Source: 
>   
>   function closeSellSystem () public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        124
Source: 
> 
>   function liqudity() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        129
Source: 
>   
>   function availableTokens() public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return Token.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        133
Source: 
>   
>   function yourTokens() public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return users[msg.sender].accountBalance;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        90
Source: 
>     
>     owner.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        111
Source: 
>     users[msg.sender].accountBalance = users[msg.sender].accountBalance.sub(value);
>     Token.transfer(msg.sender, value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        126
Source: 
>     require(msg.sender == owner);
>     Token.transfer(msg.sender, Token.balanceOf(address(this)));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        126
Source: 
>     require(msg.sender == owner);
>     Token.transfer(msg.sender, Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        130
Source: 
>   function availableTokens() public view returns(uint256) {
>     return Token.balanceOf(address(this));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        102
Source: 
>           if(value != 0){
>              Token.transfer(msg.sender, value);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        114
Source: 
>   
>   function openClaimSystem (bool _ableToClaim) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        90
Source: 
>     
>     owner.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        56
Source: 
>   uint256 public totalSold;
>   ERC20 public Token;
>   ^^^^^^^^^^^^^^^^^^
>   address payable public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        58
Source: 
>   address payable public owner;
>   uint256 public constant decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private constant _precision = 10 ** decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        59
Source: 
>   uint256 public constant decimals = 18;
>   uint256 private constant _precision = 10 ** decimals;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        61
Source: 
>   
>   bool ableToClaim;
>   ^^^^^^^^^^^^^^^^
>   bool sellSystem;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        62
Source: 
>   bool ableToClaim;
>   bool sellSystem;
>   ^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        90
Source: 
>     
>     owner.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        90
Source: 
>     
>     owner.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        102
Source: 
>           if(value != 0){
>              Token.transfer(msg.sender, value);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        111
Source: 
>     users[msg.sender].accountBalance = users[msg.sender].accountBalance.sub(value);
>     Token.transfer(msg.sender, value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        126
Source: 
>     require(msg.sender == owner);
>     Token.transfer(msg.sender, Token.balanceOf(address(this)));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        126
Source: 
>     require(msg.sender == owner);
>     Token.transfer(msg.sender, Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        130
Source: 
>   function availableTokens() public view returns(uint256) {
>     return Token.balanceOf(address(this));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        55
Source: 
> 
>   uint256 public totalSold;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   ERC20 public Token;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        90
Source: 
>     
>     owner.transfer(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        85
Source: 
>     
>     totalSold = totalSold.add(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     users[msg.sender].accountBalance = users[msg.sender].accountBalance.add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        86
Source: 
>     totalSold = totalSold.add(amount);
>     users[msg.sender].accountBalance = users[msg.sender].accountBalance.add(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        88
Source: 
>      
>     allUsers.push(msg.sender);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AgnosticPrivateSale
Line:        110
Source: 
>     uint256 value = users[msg.sender].accountBalance;
>     users[msg.sender].accountBalance = users[msg.sender].accountBalance.sub(value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Token.transfer(msg.sender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        102
Source: 
>           if(value != 0){
>              Token.transfer(msg.sender, value);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        111
Source: 
>     users[msg.sender].accountBalance = users[msg.sender].accountBalance.sub(value);
>     Token.transfer(msg.sender, value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        126
Source: 
>     require(msg.sender == owner);
>     Token.transfer(msg.sender, Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AgnosticPrivateSale
Line:        59
Source: 
>   uint256 public constant decimals = 18;
>   uint256 private constant _precision = 10 ** decimals;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
