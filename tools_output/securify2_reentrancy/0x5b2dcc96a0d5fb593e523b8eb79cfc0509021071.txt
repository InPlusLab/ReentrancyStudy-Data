pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    rPepeToKEK
Line:        69
Source: 
>     uint256 public currentStakingRate;
>     address public KEK = 0x31AEe7Db3b390bAaD34213C173A9df0dd11D84bd;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public RPepe = 0x0e9b56D2233ea2b5883861754435f9C51Dbca141;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    rPepeToKEK
Line:        70
Source: 
>     address public KEK = 0x31AEe7Db3b390bAaD34213C173A9df0dd11D84bd;
>     address public RPepe = 0x0e9b56D2233ea2b5883861754435f9C51Dbca141;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    rPepeToKEK
Line:        73
Source: 
>     uint256 public totalRewards;
>     uint256 private basePercent = 100;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        26
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     if (a == 0) {
>         ^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        30
Source: 
>     uint256 c = a * b;
>     assert(c / a == b);
>            ^^^^^^^^^^
>     return c;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    rPepeToKEK
Line:        100
Source: 
>     // ------------------------------------------------------------------------
>     function Stake(uint256 _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    rPepeToKEK
Line:        200
Source: 
>     // ------------------------------------------------------------------------
>     function PendingReward(address _caller) public view returns(uint256 _pendingReward){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _totalStakedTime = (now.sub(users[_caller].lastClaimedDate)).div(1 hours); // in hours

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    rPepeToKEK
Line:        254
Source: 
>     //// utility function from RPepe
>     function findTwoPointFivePercent(uint256 value) public view returns (uint256)  {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 roundValue = value.ceil(basePercent);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    rPepeToKEK
Line:        211
Source: 
>     // ------------------------------------------------------------------------
>     function YourActiveStake(address _user) external view returns(uint256 _activeStake){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].activeDeposit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    rPepeToKEK
Line:        218
Source: 
>     // ------------------------------------------------------------------------
>     function YourTotalStakes(address _user) external view returns(uint256 _totalStakes){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].totalDeposits;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    rPepeToKEK
Line:        225
Source: 
>     // ------------------------------------------------------------------------
>     function TotalStakeRewardsClaimed(address _user) external view returns(uint256 _totalEarned){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].totalGained;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    rPepeToKEK
Line:        232
Source: 
>     // ------------------------------------------------------------------------
>     function YourStakingRate(address _user) external view returns(uint256 _stakingRate){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].rate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        29
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     assert(c / a == b);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        53
Source: 
>   function ceil(uint a, uint m) internal pure returns (uint r) {
>     return (a + m - 1) / m * m;
>            ^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    rPepeToKEK
Line:        157
Source: 
>         // send tokens from KEK to the user
>         require(IKEK(KEK).claimRewards(_pendingReward, msg.sender));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        65
Source: 
> pragma solidity 0.6.12;
> contract rPepeToKEK {
> ^^^^^^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        69
Source: 
>     uint256 public currentStakingRate;
>     address public KEK = 0x31AEe7Db3b390bAaD34213C173A9df0dd11D84bd;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public RPepe = 0x0e9b56D2233ea2b5883861754435f9C51Dbca141;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        70
Source: 
>     address public KEK = 0x31AEe7Db3b390bAaD34213C173A9df0dd11D84bd;
>     address public RPepe = 0x0e9b56D2233ea2b5883861754435f9C51Dbca141;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        100
Source: 
>     // ------------------------------------------------------------------------
>     function Stake(uint256 _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        120
Source: 
>     // ------------------------------------------------------------------------
>     function ClaimStakedTokens() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(users[msg.sender].activeDeposit > 0, "no running stake");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        123
Source: 
>         
>         uint256 _currentDeposit = users[msg.sender].activeDeposit;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        142
Source: 
>     // ------------------------------------------------------------------------
>     function ClaimReward() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(PendingReward(msg.sender) > 0, "nothing pending to claim");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        145
Source: 
>     
>         uint256 _pendingReward = PendingReward(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        166
Source: 
>     
>     function Exit() external{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(PendingReward(msg.sender) > 0)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        200
Source: 
>     // ------------------------------------------------------------------------
>     function PendingReward(address _caller) public view returns(uint256 _pendingReward){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _totalStakedTime = (now.sub(users[_caller].lastClaimedDate)).div(1 hours); // in hours

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        201
Source: 
>     function PendingReward(address _caller) public view returns(uint256 _pendingReward){
>         uint256 _totalStakedTime = (now.sub(users[_caller].lastClaimedDate)).div(1 hours); // in hours
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        211
Source: 
>     // ------------------------------------------------------------------------
>     function YourActiveStake(address _user) external view returns(uint256 _activeStake){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].activeDeposit;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        218
Source: 
>     // ------------------------------------------------------------------------
>     function YourTotalStakes(address _user) external view returns(uint256 _totalStakes){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].totalDeposits;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        225
Source: 
>     // ------------------------------------------------------------------------
>     function TotalStakeRewardsClaimed(address _user) external view returns(uint256 _totalEarned){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].totalGained;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    rPepeToKEK
Line:        232
Source: 
>     // ------------------------------------------------------------------------
>     function YourStakingRate(address _user) external view returns(uint256 _stakingRate){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].rate;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    rPepeToKEK
Line:        85
Source: 
>     
>     mapping(address => DepositedToken) users;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    rPepeToKEK
Line:        177
Source: 
>     function _updateStakingRate() private{
>         uint256 originalRewards = 49000000 * 10 ** 18;
>                                   ^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    rPepeToKEK
Line:        183
Source: 
>         
>         if(rewardsRemoved >= 12250000 * 10 ** 18 && rewardsRemoved < 24500000 * 10 ** 18) { // less than 25% but greater than 50%
>                                                                      ^^^^^^^^
>             currentStakingRate =  5e15; // 0.005 per hour

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    rPepeToKEK
Line:        186
Source: 
>         }
>         else if(rewardsRemoved >= 24500000 * 10 ** 18 && rewardsRemoved < 34300000 * 10 ** 18){ // less than equal to 50% but greater than 70%
>                                   ^^^^^^^^
>             currentStakingRate = 2e15; // 0.002 per hour

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    rPepeToKEK
Line:        186
Source: 
>         }
>         else if(rewardsRemoved >= 24500000 * 10 ** 18 && rewardsRemoved < 34300000 * 10 ** 18){ // less than equal to 50% but greater than 70%
>                                                                           ^^^^^^^^
>             currentStakingRate = 2e15; // 0.002 per hour

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    rPepeToKEK
Line:        189
Source: 
>         }
>         else if(rewardsRemoved >= 34300000 * 10 ** 18 && rewardsRemoved < 44100000 * 10 ** 18){ // less than equal to 70% but greater than 90%
>                                   ^^^^^^^^
>             currentStakingRate = 1e15; // 0.001 per hour

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    rPepeToKEK
Line:        189
Source: 
>         }
>         else if(rewardsRemoved >= 34300000 * 10 ** 18 && rewardsRemoved < 44100000 * 10 ** 18){ // less than equal to 70% but greater than 90%
>                                                                           ^^^^^^^^
>             currentStakingRate = 1e15; // 0.001 per hour

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    rPepeToKEK
Line:        192
Source: 
>         }
>         else if(rewardsRemoved >= 44100000 * 10 ** 18) {
>                                   ^^^^^^^^
>             currentStakingRate = 5e14; // 0.0005 per hour

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rPepeToKEK
Line:        103
Source: 
>         // transfer tokens from user to the contract balance
>         require(IKEK(RPepe).transferFrom(msg.sender, address(this), _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rPepeToKEK
Line:        180
Source: 
>         // check the current volume of the rewards
>         uint256 rewardsAvailable = IKEK(KEK).stakingRewardsAvailable();
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 rewardsRemoved = originalRewards.sub(rewardsAvailable);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rPepeToKEK
Line:        131
Source: 
>         // transfer staked tokens
>         require(IKEK(RPepe).transfer(msg.sender, _currentDeposit));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    rPepeToKEK
Line:        157
Source: 
>         // send tokens from KEK to the user
>         require(IKEK(KEK).claimRewards(_pendingReward, msg.sender));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    rPepeToKEK
Line:        72
Source: 
>     
>     uint256 public totalRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private basePercent = 100;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    rPepeToKEK
Line:        148
Source: 
>         // add claimed reward to global stats
>         totalRewards = totalRewards.add(_pendingReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // add the reward to total claimed rewards

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    rPepeToKEK
Line:        150
Source: 
>         // add the reward to total claimed rewards
>         users[msg.sender].totalGained = users[msg.sender].totalGained.add(_pendingReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // update lastClaim amount

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    rPepeToKEK
Line:        152
Source: 
>         // update lastClaim amount
>         users[msg.sender].lastClaimedDate = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // reset previous rewards

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    rPepeToKEK
Line:        154
Source: 
>         // reset previous rewards
>         users[msg.sender].pendingGains = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    rPepeToKEK
Line:        161
Source: 
>         // update staking rate
>         users[msg.sender].rate = currentStakingRate;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        243
Source: 
>         // check if we have any pending reward, add it to pendingGains variable
>         users[msg.sender].pendingGains = PendingReward(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[msg.sender].rate = currentStakingRate; // rate for stakers will be fixed at time of staking

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        244
Source: 
>         users[msg.sender].pendingGains = PendingReward(msg.sender);
>         users[msg.sender].rate = currentStakingRate; // rate for stakers will be fixed at time of staking
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        246
Source: 
>             
>         users[msg.sender].activeDeposit = users[msg.sender].activeDeposit.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[msg.sender].totalDeposits = users[msg.sender].totalDeposits.add(_amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        247
Source: 
>         users[msg.sender].activeDeposit = users[msg.sender].activeDeposit.add(_amount);
>         users[msg.sender].totalDeposits = users[msg.sender].totalDeposits.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[msg.sender].startTime = now;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        248
Source: 
>         users[msg.sender].totalDeposits = users[msg.sender].totalDeposits.add(_amount);
>         users[msg.sender].startTime = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         users[msg.sender].lastClaimedDate = now;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        249
Source: 
>         users[msg.sender].startTime = now;
>         users[msg.sender].lastClaimedDate = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        184
Source: 
>         if(rewardsRemoved >= 12250000 * 10 ** 18 && rewardsRemoved < 24500000 * 10 ** 18) { // less than 25% but greater than 50%
>             currentStakingRate =  5e15; // 0.005 per hour
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        187
Source: 
>         else if(rewardsRemoved >= 24500000 * 10 ** 18 && rewardsRemoved < 34300000 * 10 ** 18){ // less than equal to 50% but greater than 70%
>             currentStakingRate = 2e15; // 0.002 per hour
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        190
Source: 
>         else if(rewardsRemoved >= 34300000 * 10 ** 18 && rewardsRemoved < 44100000 * 10 ** 18){ // less than equal to 70% but greater than 90%
>             currentStakingRate = 1e15; // 0.001 per hour
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    rPepeToKEK
Line:        193
Source: 
>         else if(rewardsRemoved >= 44100000 * 10 ** 18) {
>             currentStakingRate = 5e14; // 0.0005 per hour
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
