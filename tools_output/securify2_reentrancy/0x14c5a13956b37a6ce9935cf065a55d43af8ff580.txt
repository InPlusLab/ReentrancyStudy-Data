Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Minter
Line:        264
Source: 
>      */
>     function createMintRequest(address receiver, bytes32 barId, uint256 barSize, uint256 value) onlyVault external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         index = index.add(1);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Minter
Line:        294
Source: 
>     modifier onlyVault() {
>         require(registry.isVault(msg.sender), "Caller is not a vault");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        44
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Minter
Line:        294
Source: 
>     modifier onlyVault() {
>         require(registry.isVault(msg.sender), "Caller is not a vault");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Minter
Line:        302
Source: 
>     modifier onlySignee() {
>         require(registry.isSignee(msg.sender), "Caller is not a signee");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Minter
Line:        278
Source: 
>         request.signed = true;
>         token.mint(request.receiver, request.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit MintRequestSigned(

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Minter
Line:        168
Source: 
> 
>     uint256 public index;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Minter
Line:        265
Source: 
>     function createMintRequest(address receiver, bytes32 barId, uint256 barSize, uint256 value) onlyVault external {
>         index = index.add(1);
>         ^^^^^^^^^^^^^^^^^^^^
>         requests[index] = MintRequest(index, receiver, msg.sender, value, barId, barSize, false);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Minter
Line:        266
Source: 
>         index = index.add(1);
>         requests[index] = MintRequest(index, receiver, msg.sender, value, barId, barSize, false);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit MintRequestCreated(msg.sender, index, receiver, barId, barSize, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Minter
Line:        277
Source: 
>         require(!request.signed, "Request was signed previosuly");
>         request.signed = true;
>         ^^^^^^^^^^^^^^^^^^^^^
>         token.mint(request.receiver, request.value);

[0m
