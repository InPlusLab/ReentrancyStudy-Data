[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OraclizeBuffer
Line:        103
Source: 
>         _buf.capacity = capacity; // Allocate space for the buffer data
>         assembly {
>         ^^^^^^^^^^
>             let ptr := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OraclizeBuffer
Line:        138
Source: 
>         uint len = _data.length;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OraclizeBuffer
Line:        146
Source: 
>         for(; len >= 32; len -= 32) { // Copy word-length chunks while possible
>             assembly {
>             ^^^^^^^^^^
>                 mstore(dest, mload(src))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OraclizeBuffer
Line:        153
Source: 
>         uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes
>         assembly {
>         ^^^^^^^^^^
>             let srcpart := and(mload(src), not(mask))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OraclizeBuffer
Line:        173
Source: 
>         }
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    OraclizeBuffer
Line:        195
Source: 
>         uint mask = 256 ** _len - 1;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        867
Source: 
>     function getCodeSize(address _addr) view internal returns (uint _size) {
>         assembly {
>         ^^^^^^^^^^
>             _size := extcodesize(_addr)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1104
Source: 
>         bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
>         assembly {
>         ^^^^^^^^^^
>             mstore(unonce, 0x20)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1116
Source: 
>         bytes memory delay = new bytes(32);
>         assembly {
>         ^^^^^^^^^^
>             mstore(add(delay, 0x20), _delay)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1124
Source: 
>         bytes memory delay_bytes8_left = new bytes(8);
>         assembly {
>         ^^^^^^^^^^
>             let x := mload(add(delay_bytes8, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1154
Source: 
>         sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);
>         assembly {
>         ^^^^^^^^^^
>             sigr := mload(add(sigr_, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1263
Source: 
>         while (i < (32 + _fromOffset + _length)) {
>             assembly {
>             ^^^^^^^^^^
>                 let tmp := mload(add(_from, i))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1287
Source: 
>         address addr;
>         assembly {
>         ^^^^^^^^^^
>             let size := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1313
Source: 
>         */
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(_sig, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1345
Source: 
>     function safeMemoryCleaner() internal pure {
>         assembly {
>         ^^^^^^^^^^
>             let fmem := mload(0x40)

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    PoliTokenFund
Line:        2134
Source: 
> 		require(daiToken.transferFrom(msg.sender, address(this), _daiAmount));
> 		require(tokenContract.transfer(msg.sender, _poliAmount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    PoliTokenFund
Line:        2152
Source: 
> 		// execute the sale - paying the seller first
> 		require(tokenContract.transferFrom(msg.sender, address(this), _poliAmount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(daiToken.transfer(msg.sender, _daiAmount));

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PoliToken
Line:        1514
Source: 
> 	// Storage
> 	string public name = "CoolToken";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string public symbol = "COOL";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PoliToken
Line:        1515
Source: 
> 	string public name = "CoolToken";
> 	string public symbol = "COOL";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string	public standard = "CoolToken v1.0";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PoliToken
Line:        1516
Source: 
> 	string public symbol = "COOL";
> 	string	public standard = "CoolToken v1.0";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public totalSupply; // number of tokens

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    usingOraclize
Line:        388
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1711
Source: 
>      */
>     function maxFixedAdd() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 28948022309329048855892746252171976963317496166410141009864396001978282409983;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1719
Source: 
>      */
>     function maxFixedSub() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return -28948022309329048855892746252171976963317496166410141009864396001978282409984;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1737
Source: 
>      */
>     function maxFixedMul() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 240615969168004498257251713877715648331380787511296;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1749
Source: 
>      */
>     function maxFixedDiv() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 57896044618658097711785492504343953926634992332820282;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1786
Source: 
>      */
>     function fromFixed(int256 x)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1854
Source: 
>      */
>     function newFixed(int256 x, uint8 _originDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1868
Source: 
>      */
>     function fromFixed(int256 x, uint8 _destinationDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1889
Source: 
>      */
>     function newFixedFraction(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         int256 numerator, 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1943
Source: 
>      */
>     function abs(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (x >= 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1965
Source: 
>      */
>     function add(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         int256 z = x + y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1976
Source: 
>      */
>     function subtract(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return add(x,-y);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoliToken
Line:        1548
Source: 
> 	// ERC20 Transfer
> 	function transfer(address _to, uint _value) public returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// trigger exception if the sender doesn't have enough

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoliToken
Line:        1567
Source: 
> 	// ERC-20 Delegated Transfer
> 	function approve(address _spender, uint _value) public returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allowance[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoliToken
Line:        1573
Source: 
> 
> 	function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// require that _from has enough tokens and allowance is big enough

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoliToken
Line:        1599
Source: 
> 
>   	function getHolderCount() public view returns(uint holderCount) {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	return holderList.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1711
Source: 
>      */
>     function maxFixedAdd() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 28948022309329048855892746252171976963317496166410141009864396001978282409983;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1719
Source: 
>      */
>     function maxFixedSub() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return -28948022309329048855892746252171976963317496166410141009864396001978282409984;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1737
Source: 
>      */
>     function maxFixedMul() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 240615969168004498257251713877715648331380787511296;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1749
Source: 
>      */
>     function maxFixedDiv() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 57896044618658097711785492504343953926634992332820282;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1786
Source: 
>      */
>     function fromFixed(int256 x)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1854
Source: 
>      */
>     function newFixed(int256 x, uint8 _originDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1868
Source: 
>      */
>     function fromFixed(int256 x, uint8 _destinationDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1889
Source: 
>      */
>     function newFixedFraction(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         int256 numerator, 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1943
Source: 
>      */
>     function abs(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (x >= 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1965
Source: 
>      */
>     function add(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         int256 z = x + y;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1976
Source: 
>      */
>     function subtract(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return add(x,-y);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    usingOraclize
Line:        388
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoliTokenFund
Line:        2163
Source: 
> 	// Exchange Rate Methods
> 	function accrueGrowth() public returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// permit only the admin to cause the poli to accrue growth

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PoliTokenFund
Line:        2188
Source: 
> 	// __callback is called only in updatePublicOutcome(), which itself is only called by accrueGrowth()
> 	function __callback(bytes32 _queryId, string memory _result) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == oraclize_cbAddress());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1711
Source: 
>      */
>     function maxFixedAdd() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 28948022309329048855892746252171976963317496166410141009864396001978282409983;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1719
Source: 
>      */
>     function maxFixedSub() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return -28948022309329048855892746252171976963317496166410141009864396001978282409984;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1737
Source: 
>      */
>     function maxFixedMul() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 240615969168004498257251713877715648331380787511296;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1749
Source: 
>      */
>     function maxFixedDiv() public pure returns(int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return 57896044618658097711785492504343953926634992332820282;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1786
Source: 
>      */
>     function fromFixed(int256 x)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1854
Source: 
>      */
>     function newFixed(int256 x, uint8 _originDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1868
Source: 
>      */
>     function fromFixed(int256 x, uint8 _destinationDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1889
Source: 
>      */
>     function newFixedFraction(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         int256 numerator, 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FixidityLib
Line:        1943
Source: 
>      */
>     function abs(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (x >= 0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    usingOraclize
Line:        406
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1854
Source: 
>      */
>     function newFixed(int256 x, uint8 _originDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1868
Source: 
>      */
>     function fromFixed(int256 x, uint8 _destinationDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1976
Source: 
>      */
>     function subtract(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return add(x,-y);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        2060
Source: 
>      */
>     function divide(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (y == fixed1()) return x;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoliToken
Line:        1548
Source: 
> 	// ERC20 Transfer
> 	function transfer(address _to, uint _value) public returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// trigger exception if the sender doesn't have enough

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoliToken
Line:        1573
Source: 
> 
> 	function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		// require that _from has enough tokens and allowance is big enough

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1854
Source: 
>      */
>     function newFixed(int256 x, uint8 _originDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1868
Source: 
>      */
>     function fromFixed(int256 x, uint8 _destinationDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1976
Source: 
>      */
>     function subtract(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return add(x,-y);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        2060
Source: 
>      */
>     function divide(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (y == fixed1()) return x;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PoliTokenFund
Line:        2142
Source: 
> 
> 	function sellTokens(uint _poliAmount) external returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint _daiAmount = toDAI(_poliAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1854
Source: 
>      */
>     function newFixed(int256 x, uint8 _originDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1868
Source: 
>      */
>     function fromFixed(int256 x, uint8 _destinationDigits)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        1976
Source: 
>      */
>     function subtract(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return add(x,-y);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FixidityLib
Line:        2060
Source: 
>      */
>     function divide(int256 x, int256 y) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (y == fixed1()) return x;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        384
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        388
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1786
Source: 
>      */
>     function fromFixed(int256 x)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1914
Source: 
>      */
>     function integer(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (x / fixed1()) * fixed1(); // Can't overflow

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1928
Source: 
>      */
>     function fractional(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return x - (x / fixed1()) * fixed1(); // Can't overflow

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoliToken
Line:        1567
Source: 
> 	// ERC-20 Delegated Transfer
> 	function approve(address _spender, uint _value) public returns (bool success) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allowance[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoliToken
Line:        1594
Source: 
> 	// Holder Helpers
>   	function isHolder(address _holderAddress) public view returns(bool isIndeed) {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	if(holderList.length == 0) return false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1786
Source: 
>      */
>     function fromFixed(int256 x)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1914
Source: 
>      */
>     function integer(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (x / fixed1()) * fixed1(); // Can't overflow

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1928
Source: 
>      */
>     function fractional(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return x - (x / fixed1()) * fixed1(); // Can't overflow

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        384
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        388
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PoliTokenFund
Line:        2188
Source: 
> 	// __callback is called only in updatePublicOutcome(), which itself is only called by accrueGrowth()
> 	function __callback(bytes32 _queryId, string memory _result) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == oraclize_cbAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1786
Source: 
>      */
>     function fromFixed(int256 x)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1914
Source: 
>      */
>     function integer(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (x / fixed1()) * fixed1(); // Can't overflow

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixidityLib
Line:        1928
Source: 
>      */
>     function fractional(int256 x) public pure returns (int256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return x - (x / fixed1()) * fixed1(); // Can't overflow

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2009
Source: 
>         // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)
>         int256 x1y1 = x1 * y1;
>                       ^^^^^^^
>         if (x1 != 0) assert(x1y1 / x1 == y1); // Overflow x1y1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2014
Source: 
>         // solium-disable-next-line mixedcase
>         int256 fixed_x1y1 = x1y1 * fixed1();
>                             ^^^^^^^^^^^^^^^
>         if (x1y1 != 0) assert(fixed_x1y1 / x1y1 == fixed1()); // Overflow x1y1 * fixed1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2018
Source: 
> 
>         int256 x2y1 = x2 * y1;
>                       ^^^^^^^
>         if (x2 != 0) assert(x2y1 / x2 == y1); // Overflow x2y1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2021
Source: 
> 
>         int256 x1y2 = x1 * y2;
>                       ^^^^^^^
>         if (x1 != 0) assert(x1y2 / x1 == y2); // Overflow x1y2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2026
Source: 
>         y2 = y2 / mulPrecision();
>         int256 x2y2 = x2 * y2;
>                       ^^^^^^^
>         if (x2 != 0) assert(x2y2 / x2 == y2); // Overflow x2y2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        1929
Source: 
>     function fractional(int256 x) public pure returns (int256) {
>         return x - (x / fixed1()) * fixed1(); // Can't overflow
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        1915
Source: 
>     function integer(int256 x) public pure returns (int256) {
>         return (x / fixed1()) * fixed1(); // Can't overflow
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2009
Source: 
>         // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)
>         int256 x1y1 = x1 * y1;
>                       ^^^^^^^
>         if (x1 != 0) assert(x1y1 / x1 == y1); // Overflow x1y1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2014
Source: 
>         // solium-disable-next-line mixedcase
>         int256 fixed_x1y1 = x1y1 * fixed1();
>                             ^^^^^^^^^^^^^^^
>         if (x1y1 != 0) assert(fixed_x1y1 / x1y1 == fixed1()); // Overflow x1y1 * fixed1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2018
Source: 
> 
>         int256 x2y1 = x2 * y1;
>                       ^^^^^^^
>         if (x2 != 0) assert(x2y1 / x2 == y1); // Overflow x2y1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2021
Source: 
> 
>         int256 x1y2 = x1 * y2;
>                       ^^^^^^^
>         if (x1 != 0) assert(x1y2 / x1 == y2); // Overflow x1y2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2026
Source: 
>         y2 = y2 / mulPrecision();
>         int256 x2y2 = x2 * y2;
>                       ^^^^^^^
>         if (x2 != 0) assert(x2y2 / x2 == y2); // Overflow x2y2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        1929
Source: 
>     function fractional(int256 x) public pure returns (int256) {
>         return x - (x / fixed1()) * fixed1(); // Can't overflow
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        1915
Source: 
>     function integer(int256 x) public pure returns (int256) {
>         return (x / fixed1()) * fixed1(); // Can't overflow
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        1779
Source: 
>         assert(x >= minNewFixed());
>         return x * fixed1();
>                ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        1842
Source: 
>             assert(x >= minInt256()/uint128(10)**uint128(decimalDifference));
>             return x*(uint128(10)**uint128(decimalDifference));
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2009
Source: 
>         // (x1 + x2) * (y1 + y2) = (x1 * y1) + (x1 * y2) + (x2 * y1) + (x2 * y2)
>         int256 x1y1 = x1 * y1;
>                       ^^^^^^^
>         if (x1 != 0) assert(x1y1 / x1 == y1); // Overflow x1y1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2014
Source: 
>         // solium-disable-next-line mixedcase
>         int256 fixed_x1y1 = x1y1 * fixed1();
>                             ^^^^^^^^^^^^^^^
>         if (x1y1 != 0) assert(fixed_x1y1 / x1y1 == fixed1()); // Overflow x1y1 * fixed1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2018
Source: 
> 
>         int256 x2y1 = x2 * y1;
>                       ^^^^^^^
>         if (x2 != 0) assert(x2y1 / x2 == y1); // Overflow x2y1

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2021
Source: 
> 
>         int256 x1y2 = x1 * y2;
>                       ^^^^^^^
>         if (x1 != 0) assert(x1y2 / x1 == y2); // Overflow x1y2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        2026
Source: 
>         y2 = y2 / mulPrecision();
>         int256 x2y2 = x2 * y2;
>                       ^^^^^^^
>         if (x2 != 0) assert(x2y2 / x2 == y2); // Overflow x2y2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        1929
Source: 
>     function fractional(int256 x) public pure returns (int256) {
>         return x - (x / fixed1()) * fixed1(); // Can't overflow
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FixidityLib
Line:        1915
Source: 
>     function integer(int256 x) public pure returns (int256) {
>         return (x / fixed1()) * fixed1(); // Can't overflow
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        394
Source: 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        402
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        863
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    solcChecker
Line:        36
Source: 
> // Dummy contract only used to emit to end-user they are using wrong solc
> contract solcChecker {
> ^^^^^^^^^^^^^^^^^^^^^^
> /* INCOMPATIBLE SOLC: import the following instead: "github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol" */ function f(bytes calldata x) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        47
Source: 
>     function getPrice(string memory _datasource) public returns (uint _dsprice);
>     function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getPrice(string memory _datasource, uint _gasLimit) public returns (uint _dsprice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        52
Source: 
>     function query2(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) public payable returns (bytes32 _id);
>     function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        53
Source: 
>     function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        54
Source: 
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);
>     function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeBuffer
Line:        92
Source: 
> 
>     struct buffer {
>     ^^^^^^^^^^^^^^^
>         bytes buf;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        280
Source: 
> */
> contract usingOraclize {
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        287
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        288
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        289
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        291
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        292
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        294
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        295
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        299
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        300
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        302
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        303
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        305
Source: 
> 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        306
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        318
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        326
Source: 
> 
>     function oraclize_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _networkID; // NOTE: Silence the warning and remain backwards compatible

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        331
Source: 
> 
>     function oraclize_setNetworkName(string memory _network_name) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oraclize_network_name = _network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        335
Source: 
> 
>     function oraclize_getNetworkName() internal view returns (string memory _networkName) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize_network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        339
Source: 
> 
>     function oraclize_setNetwork() internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        384
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        388
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        393
Source: 
> 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        397
Source: 
> 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        401
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        409
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        417
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource,_gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        425
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        433
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        441
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        449
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        457
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        465
Source: 
> 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        474
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        483
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        492
Source: 
> 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        501
Source: 
> 
>     function oraclize_query(string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        507
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        513
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        519
Source: 
> 
>     function oraclize_query(string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        525
Source: 
> 
>     function oraclize_query(string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        532
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        539
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        546
Source: 
> 
>     function oraclize_query(string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        553
Source: 
> 
>     function oraclize_query(string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        561
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        569
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        577
Source: 
> 
>     function oraclize_query(string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        585
Source: 
> 
>     function oraclize_query(string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        594
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        603
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        612
Source: 
> 
>     function oraclize_query(string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        621
Source: 
> 
>     function oraclize_query(string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        631
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        641
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        651
Source: 
> 
>     function oraclize_query(string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        661
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        670
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        679
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        688
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        697
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        703
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        709
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        715
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        721
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        728
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        735
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        742
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        749
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        757
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        765
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        773
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        781
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        790
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        799
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        808
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        817
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        827
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        837
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        847
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        857
Source: 
> 
>     function oraclize_setProof(byte _proofP) oraclizeAPI internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.setProofType(_proofP);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        862
Source: 
> 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.cbAddress();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        872
Source: 
> 
>     function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.setCustomGasPrice(_gasPrice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        876
Source: 
> 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.randomDS_getSessionPubKeyHash();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        968
Source: 
>     function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {
>         bytes memory _ba = bytes(_a);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bb = bytes(_b);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        969
Source: 
>         bytes memory _ba = bytes(_a);
>         bytes memory _bb = bytes(_b);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bc = bytes(_c);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        970
Source: 
>         bytes memory _bb = bytes(_b);
>         bytes memory _bc = bytes(_c);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bd = bytes(_d);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        971
Source: 
>         bytes memory _bc = bytes(_c);
>         bytes memory _bd = bytes(_d);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _be = bytes(_e);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        972
Source: 
>         bytes memory _bd = bytes(_d);
>         bytes memory _be = bytes(_e);
>         ^^^^^^^^^^^^^^^^
>         string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1096
Source: 
> 
>     function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((_nbytes > 0) && (_nbytes <= 32));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1103
Source: 
>         bytes memory sessionKeyHash = new bytes(32);
>         bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1119
Source: 
>         }
>         bytes memory delay_bytes8 = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(delay, 24, 8, delay_bytes8, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1123
Source: 
>         bytes32 queryId = oraclize_query("random", args, _customGasLimit);
>         bytes memory delay_bytes8_left = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1139
Source: 
> 
>     function oraclize_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oraclize_randomDS_args[_queryId] = _commitment;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1167
Source: 
> 
>     function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool sigok;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1172
Source: 
>         copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);
>         bytes memory appkey1_pubkey = new bytes(64);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1177
Source: 
>         copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);
>         bytes memory CODEHASH = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";
>         ^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1184
Source: 
>         // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)
>         bytes memory LEDGERKEY = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";
>         ^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory tosign3 = new bytes(1 + 65);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1194
Source: 
> 
>     function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Random DS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1217
Source: 
> 
>     function oraclize_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1276
Source: 
>     */
>     function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         /*

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixidityLib
Line:        2014
Source: 
>         // solium-disable-next-line mixedcase
>         int256 fixed_x1y1 = x1y1 * fixed1();
>         ^^^^^^^^^^^^^^^^^
>         if (x1y1 != 0) assert(fixed_x1y1 / x1y1 == fixed1()); // Overflow x1y1 * fixed1

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2124
Source: 
>   	function buyTokens(uint _poliAmount) external returns (bool success) {
> 		uint _daiAmount = toDAI(_poliAmount);
>   ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2143
Source: 
> 	function sellTokens(uint _poliAmount) external returns (bool success) {
> 		uint _daiAmount = toDAI(_poliAmount);
>   ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2178
Source: 
>             // calculate query month string
>             string memory _queryIndex = getOracleQueryIndex();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2181
Source: 
>         	// fire off oracle query - good only through 2020
>             string memory _jsonQueryStr = append("xml(https://www.ncdc.noaa.gov/cag/global/time-series/globe/land_ocean/all/12/1880-2020/data.xml).dataCollection.data.", _queryIndex, ".value");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        		oraclize_query("URL", _jsonQueryStr);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2188
Source: 
> 	// __callback is called only in updatePublicOutcome(), which itself is only called by accrueGrowth()
> 	function __callback(bytes32 _queryId, string memory _result) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == oraclize_cbAddress());

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2211
Source: 
> 	function toDAI(uint _poliAmount) internal view returns (uint dai) {
> 	    int _dai = ((int(_poliAmount).newFixed()).multiply(int(tokenPrice))).convertFixed(24, 18); // Poli prices are stored in 24 digits; DAI has 18 digits
>      ^^^^^^^^
> 	    return uint(_dai);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2218
Source: 
>   		// r = (20% - 16% * [anomaly in global average surface temperature in degrees Celsius])
>   		int _yIntercept = int(20).newFixed().divide(int(100).newFixed());
>     ^^^^^^^^^^^^^^^
>   		int _slope = int(16).newFixed().divide(int(100).newFixed());

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2219
Source: 
>   		int _yIntercept = int(20).newFixed().divide(int(100).newFixed());
>   		int _slope = int(16).newFixed().divide(int(100).newFixed());
>     ^^^^^^^^^^
>   		int _rate = _yIntercept.subtract(lastPublicOutcome.multiply(_slope));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2220
Source: 
>   		int _slope = int(16).newFixed().divide(int(100).newFixed());
>   		int _rate = _yIntercept.subtract(lastPublicOutcome.multiply(_slope));
>     ^^^^^^^^^
>   		return _rate;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2225
Source: 
>   	function updatePrice() internal view returns (uint price) {
>   		int _price = int(tokenPrice).multiply((lastGrowthRate.divide((int(12).newFixed())).add(1000000000000000000000000)));
>     ^^^^^^^^^^
>   		return uint(_price);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2230
Source: 
>   	function updateCapitalizationRatio() internal view returns (uint ratio) {
>   		int _liabilities = int(tokenPrice).multiply(int(tokenContract.totalSupply().sub(tokenContract.balanceOf(address(this))).sub(tokenContract.balanceOf(admin))).newFixed()); // in DAI
>     ^^^^^^^^^^^^^^^^
>   		if (_liabilities == 0) return 1000000000000000000000000; // if no liabilities, return "100%"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2233
Source: 
> 
>   		int _assets = int(daiToken.balanceOf(address(this))).newFixed(); // in DAI
>     ^^^^^^^^^^^
>   		int _ratio = _assets.divide(_liabilities);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2234
Source: 
>   		int _assets = int(daiToken.balanceOf(address(this))).newFixed(); // in DAI
>   		int _ratio = _assets.divide(_liabilities);
>     ^^^^^^^^^^
>   		return uint(_ratio);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2245
Source: 
> 	function getOracleQueryIndex() internal view returns (string memory query) {
> 		uint _firstUpdateIndex = 1683; // index number corresponding to the May 12th, 11:00am EDT release of the monthly NOAA data
>   ^^^^^^^^^^^^^^^^^^^^^^
> 		uint _firstUpdateDateTime = 1589295600; // unix timestamp corresponding to the May 12th, 11:00am EDT release of the monthly NOAA data

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2246
Source: 
> 		uint _firstUpdateIndex = 1683; // index number corresponding to the May 12th, 11:00am EDT release of the monthly NOAA data
> 		uint _firstUpdateDateTime = 1589295600; // unix timestamp corresponding to the May 12th, 11:00am EDT release of the monthly NOAA data
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint _daysSinceFirstUpdate = diffDays(_firstUpdateDateTime, now);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2247
Source: 
> 		uint _firstUpdateDateTime = 1589295600; // unix timestamp corresponding to the May 12th, 11:00am EDT release of the monthly NOAA data
> 		uint _daysSinceFirstUpdate = diffDays(_firstUpdateDateTime, now);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint _roundedMonthsSinceFirstUpdate = uint(_daysSinceFirstUpdate) / 30; // casting explicitly as uint here gives the floor of the quotient using integer division

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2248
Source: 
> 		uint _daysSinceFirstUpdate = diffDays(_firstUpdateDateTime, now);
> 		uint _roundedMonthsSinceFirstUpdate = uint(_daysSinceFirstUpdate) / 30; // casting explicitly as uint here gives the floor of the quotient using integer division
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint _queryIndex = _firstUpdateIndex + _roundedMonthsSinceFirstUpdate; // this should increment by 1 each month, starting after the May 12, 2020 release, which itself corresponds to "1683"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2249
Source: 
> 		uint _roundedMonthsSinceFirstUpdate = uint(_daysSinceFirstUpdate) / 30; // casting explicitly as uint here gives the floor of the quotient using integer division
> 		uint _queryIndex = _firstUpdateIndex + _roundedMonthsSinceFirstUpdate; // this should increment by 1 each month, starting after the May 12, 2020 release, which itself corresponds to "1683"
>   ^^^^^^^^^^^^^^^^
> 		string memory _queryIndexStr = uint2str(_queryIndex);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2250
Source: 
> 		uint _queryIndex = _firstUpdateIndex + _roundedMonthsSinceFirstUpdate; // this should increment by 1 each month, starting after the May 12, 2020 release, which itself corresponds to "1683"
> 		string memory _queryIndexStr = uint2str(_queryIndex);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _queryIndexStr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2256
Source: 
>         require(fromTimestamp <= toTimestamp);
>         uint _hoursPerDay = 24;
>         ^^^^^^^^^^^^^^^^^
>         uint _secondsPerDay = _hoursPerDay.mul(60).mul(60);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2257
Source: 
>         uint _hoursPerDay = 24;
>         uint _secondsPerDay = _hoursPerDay.mul(60).mul(60);
>         ^^^^^^^^^^^^^^^^^^^
>         _days = (toTimestamp.sub(fromTimestamp)) / _secondsPerDay;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2262
Source: 
>     function parseSignedInt(string memory _str, uint _digits) internal pure returns (int _int) {
>     	string memory _unsignedStr = "";
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     	uint _unsignedInt = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2263
Source: 
>     	string memory _unsignedStr = "";
>     	uint _unsignedInt = 0;
>      ^^^^^^^^^^^^^^^^^
>     	int _signedInt = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2264
Source: 
>     	uint _unsignedInt = 0;
>     	int _signedInt = 0;
>      ^^^^^^^^^^^^^^
>     	int _signedIntFixed = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2265
Source: 
>     	int _signedInt = 0;
>     	int _signedIntFixed = 0;
>      ^^^^^^^^^^^^^^^^^^^
>     	string memory _posNeg = getPosNeg(_str);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2266
Source: 
>     	int _signedIntFixed = 0;
>     	string memory _posNeg = getPosNeg(_str);
>      ^^^^^^^^^^^^^^^^^^^^^
>     	if (compareStrings(_posNeg, "")) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2280
Source: 
>     function getPosNeg(string memory _str) internal pure returns (string memory sign) {
>     	string memory _firstChar = substring(_str, 0, 1);
>      ^^^^^^^^^^^^^^^^^^^^^^^^
>     	string memory _sign = "";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PoliTokenFund
Line:        2281
Source: 
>     	string memory _firstChar = substring(_str, 0, 1);
>     	string memory _sign = "";
>      ^^^^^^^^^^^^^^^^^^^
>     	if (compareStrings(_firstChar, "-")) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        284
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        287
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        288
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        289
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        291
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        292
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        294
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        295
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        299
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        300
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        302
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        303
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        305
Source: 
> 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        306
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        318
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                            ^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        318
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                                              ^^^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        318
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                                                                     ^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        321
Source: 
>         require((_proof[0] == "L") && (_proof[1] == "P") && (uint8(_proof[2]) == uint8(1)));
>         bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
>         ^^^^^^^^^^^^^^^^^^
>         require(proofVerified);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PoliTokenFund
Line:        2082
Source: 
> 	// Storage
> 	address admin;
>  ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        403
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        411
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        435
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        443
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        467
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        476
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        663
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        672
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FixidityLib
Line:        1655
Source: 
>     function fixed1() public pure returns(int256) {
>         return 1000000000000000000000000;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FixidityLib
Line:        1664
Source: 
>     function mulPrecision() public pure returns(int256) {
>         return 1000000000000;
>                ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FixidityLib
Line:        1761
Source: 
>     function maxFixedDivisor() public pure returns(int256) {
>         return 1000000000000000000000000000000000000000000000000;
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PoliTokenFund
Line:        2225
Source: 
>   	function updatePrice() internal view returns (uint price) {
>   		int _price = int(tokenPrice).multiply((lastGrowthRate.divide((int(12).newFixed())).add(1000000000000000000000000)));
>                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
>   		return uint(_price);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PoliTokenFund
Line:        2231
Source: 
>   		int _liabilities = int(tokenPrice).multiply(int(tokenContract.totalSupply().sub(tokenContract.balanceOf(address(this))).sub(tokenContract.balanceOf(admin))).newFixed()); // in DAI
>   		if (_liabilities == 0) return 1000000000000000000000000; // if no liabilities, return "100%"
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    PoliTokenFund
Line:        2273
Source: 
>     		_unsignedInt = parseInt(_unsignedStr, _digits);
>     		_signedInt = int(_unsignedInt).multiply(-1000000000000000000000000);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^
>     	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    usingOraclize
Line:        406
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    usingOraclize
Line:        406
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        394
Source: 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        402
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        863
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PoliTokenFund
Line:        2130
Source: 
> 		// ensure that poliFund has the required balance to transfer to buyer
> 	    require(tokenContract.balanceOf(address(this)) >= _poliAmount);
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PoliTokenFund
Line:        2133
Source: 
> 		// execute the purchase
> 		require(daiToken.transferFrom(msg.sender, address(this), _daiAmount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(tokenContract.transfer(msg.sender, _poliAmount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PoliTokenFund
Line:        2134
Source: 
> 		require(daiToken.transferFrom(msg.sender, address(this), _daiAmount));
> 		require(tokenContract.transfer(msg.sender, _poliAmount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PoliTokenFund
Line:        2149
Source: 
> 		// ensure that poliFund has the required balance to transfer to buyer
> 		require(daiToken.balanceOf(address(this)) >= _daiAmount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PoliTokenFund
Line:        2152
Source: 
> 		// execute the sale - paying the seller first
> 		require(tokenContract.transferFrom(msg.sender, address(this), _poliAmount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(daiToken.transfer(msg.sender, _daiAmount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PoliTokenFund
Line:        2153
Source: 
> 		require(tokenContract.transferFrom(msg.sender, address(this), _poliAmount));
> 		require(daiToken.transfer(msg.sender, _daiAmount));
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PoliTokenFund
Line:        2233
Source: 
> 
>   		int _assets = int(daiToken.balanceOf(address(this))).newFixed(); // in DAI
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   		int _ratio = _assets.divide(_liabilities);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    usingOraclize
Line:        406
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoliTokenFund
Line:        2230
Source: 
>   	function updateCapitalizationRatio() internal view returns (uint ratio) {
>   		int _liabilities = int(tokenPrice).multiply(int(tokenContract.totalSupply().sub(tokenContract.balanceOf(address(this))).sub(tokenContract.balanceOf(admin))).newFixed()); // in DAI
>                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   		if (_liabilities == 0) return 1000000000000000000000000; // if no liabilities, return "100%"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoliTokenFund
Line:        2230
Source: 
>   	function updateCapitalizationRatio() internal view returns (uint ratio) {
>   		int _liabilities = int(tokenPrice).multiply(int(tokenContract.totalSupply().sub(tokenContract.balanceOf(address(this))).sub(tokenContract.balanceOf(admin))).newFixed()); // in DAI
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   		if (_liabilities == 0) return 1000000000000000000000000; // if no liabilities, return "100%"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PoliTokenFund
Line:        2230
Source: 
>   	function updateCapitalizationRatio() internal view returns (uint ratio) {
>   		int _liabilities = int(tokenPrice).multiply(int(tokenContract.totalSupply().sub(tokenContract.balanceOf(address(this))).sub(tokenContract.balanceOf(admin))).newFixed()); // in DAI
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   		if (_liabilities == 0) return 1000000000000000000000000; // if no liabilities, return "100%"

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1060
Source: 
>         while (j != 0) {
>             len++;
>             ^^^
>             j /= 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1075
Source: 
>         OraclizeBuffer.buffer memory buf;
>         OraclizeBuffer.init(buf, 1024);
>                             ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1087
Source: 
>         OraclizeBuffer.buffer memory buf;
>         OraclizeBuffer.init(buf, 1024);
>                             ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1158
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                                                         ^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1335
Source: 
>         */
>         if (v < 27) {
>             ^
>             v += 27;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    usingOraclize
Line:        284
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PoliTokenFund
Line:        2082
Source: 
> 	// Storage
> 	address admin;
>  ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PoliTokenFund
Line:        2084
Source: 
> 
> 	DaiToken public daiToken; // to interact with DAI token contract, using the interface above
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	PoliToken public tokenContract;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PoliTokenFund
Line:        2085
Source: 
> 	DaiToken public daiToken; // to interact with DAI token contract, using the interface above
> 	PoliToken public tokenContract;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public tokenPrice; // price 'p' at which polis can be redeemed for DAI (DAI/poli); each period, this price grows with the lastGrowthRate 'd' like this: p[t1] = p[t0] * (1 + d[t1]/12)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PoliTokenFund
Line:        2086
Source: 
> 	PoliToken public tokenContract;
> 	uint public tokenPrice; // price 'p' at which polis can be redeemed for DAI (DAI/poli); each period, this price grows with the lastGrowthRate 'd' like this: p[t1] = p[t0] * (1 + d[t1]/12)
>  ^^^^^^^^^^^^^^^^^^^^^^
> 	uint public tokensIssued;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PoliTokenFund
Line:        2087
Source: 
> 	uint public tokenPrice; // price 'p' at which polis can be redeemed for DAI (DAI/poli); each period, this price grows with the lastGrowthRate 'd' like this: p[t1] = p[t0] * (1 + d[t1]/12)
> 	uint public tokensIssued;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        284
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        210
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        216
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        210
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        216
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        210
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        216
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PoliTokenFund
Line:        2136
Source: 
> 
> 	    tokensIssued += _poliAmount;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PoliTokenFund
Line:        2155
Source: 
> 
> 		tokensIssued -= _poliAmount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingOraclize
Line:        390
Source: 
>       _myid; _result; _proof;
>       oraclize_randomDS_args[bytes32(0)] = bytes32(0);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PoliToken
Line:        1568
Source: 
> 	function approve(address _spender, uint _value) public returns (bool success) {
> 		allowance[msg.sender][_spender] = _value;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingOraclize
Line:        390
Source: 
>       _myid; _result; _proof;
>       oraclize_randomDS_args[bytes32(0)] = bytes32(0);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        394
Source: 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        398
Source: 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        402
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        406
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        410
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        414
Source: 
>         }
>         return oraclize.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        418
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource,_gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        422
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        426
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        430
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        434
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        438
Source: 
>         }
>         return oraclize.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        442
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        446
Source: 
>         }
>         return oraclize.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        450
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        454
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        458
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        462
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        466
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        471
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        475
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        480
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        484
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        489
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        493
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        498
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        662
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        667
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        671
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        676
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        680
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        685
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        689
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        694
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        863
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        877
Source: 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>         return oraclize.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FixidityLib
Line:        1791
Source: 
>     {
>         return x / fixed1();
>                    ^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        340
Source: 
>     function oraclize_setNetwork() internal returns (bool _networkSet) {
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        345
Source: 
>         }
>         if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        350
Source: 
>         }
>         if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        355
Source: 
>         }
>         if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        360
Source: 
>         }
>         if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) > 0) { //goerli testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        365
Source: 
>         }
>         if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        369
Source: 
>         }
>         if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        373
Source: 
>         }
>         if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        398
Source: 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        410
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        414
Source: 
>         }
>         return oraclize.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        418
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource,_gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        422
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        426
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        430
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        434
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        438
Source: 
>         }
>         return oraclize.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        442
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        446
Source: 
>         }
>         return oraclize.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        450
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        454
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        458
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        462
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        466
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        471
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        475
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        480
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        484
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        489
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        493
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        498
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        662
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        667
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        671
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        676
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        680
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        685
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        689
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        694
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        309
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        313
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        877
Source: 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>         return oraclize.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1158
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1162
Source: 
>         } else {
>             (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (address(uint160(uint256(keccak256(_pubkey)))) == signer);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1199
Source: 
>         }
>         bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
>                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!proofVerified) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1341
Source: 
>         }
>         return safer_ecrecover(_hash, v, r, s);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FixidityLib
Line:        1791
Source: 
>     {
>         return x / fixed1();
>                    ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        284
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        285
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        287
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        288
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        289
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        291
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        292
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        294
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        295
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        299
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        300
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        302
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        303
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        306
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        210
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        216
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PoliToken
Line:        1514
Source: 
> 	// Storage
> 	string public name = "CoolToken";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string public symbol = "COOL";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PoliToken
Line:        1515
Source: 
> 	string public name = "CoolToken";
> 	string public symbol = "COOL";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	string	public standard = "CoolToken v1.0";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PoliToken
Line:        1516
Source: 
> 	string public symbol = "COOL";
> 	string	public standard = "CoolToken v1.0";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint public totalSupply; // number of tokens

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PoliToken
Line:        1517
Source: 
> 	string	public standard = "CoolToken v1.0";
> 	uint public totalSupply; // number of tokens
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => uint) public balanceOf; // _owner => _balance

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        210
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        216
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        287
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        288
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        289
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        291
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        292
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        294
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        295
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        296
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        298
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        300
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        302
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        303
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        306
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    PoliTokenFund
Line:        2092
Source: 
> 	uint public lastGrowthTime = now;
> 	uint public capitalizationRatio = uint(int(1).newFixed()); // the degree to which this contract is funded; 1*10^24 == 100% funded
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        210
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        211
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        212
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        213
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        214
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        215
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        216
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
