[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        38
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        43
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        74
Source: 
>     }
>     function owner() public view returns (address payable) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>     }
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        88
Source: 
>     }
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        84
Source: 
>     }
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        88
Source: 
>     }
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        132
Source: 
> 	/// Stake yeld. Whenever you do so, the stake timestamp is restarted if you had any previous stakes
> 	function stakeYeld(uint256 _amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		yeld.transferFrom(msg.sender, address(this), _amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        138
Source: 
> 
> 	function unstake(uint256 _amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 userBalance = stakes[msg.sender].yeldBalance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        148
Source: 
>   /// Checks how much YELD the user currently has and sends him some eth based on that
>   function redeemETH() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(now >= stakes[msg.sender].timestamp + timeBetweenRedeems, 'You must wait at least a day after the snapshot to redeem your earnings');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        158
Source: 
> 
>   function setYeld(address _yeld) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yeld = IERC20(_yeld);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        162
Source: 
> 
> 	function extractETHIfStuck() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner().transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        166
Source: 
> 
>   function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(_token).transfer(msg.sender, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        88
Source: 
>     }
>     function transferOwnership(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RetirementYeldTreasury
Line:        132
Source: 
> 	/// Stake yeld. Whenever you do so, the stake timestamp is restarted if you had any previous stakes
> 	function stakeYeld(uint256 _amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		yeld.transferFrom(msg.sender, address(this), _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RetirementYeldTreasury
Line:        138
Source: 
> 
> 	function unstake(uint256 _amount) public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 userBalance = stakes[msg.sender].yeldBalance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        158
Source: 
> 
>   function setYeld(address _yeld) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     yeld = IERC20(_yeld);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        166
Source: 
> 
>   function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(_token).transfer(msg.sender, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RetirementYeldTreasury
Line:        133
Source: 
> 	function stakeYeld(uint256 _amount) public {
> 		yeld.transferFrom(msg.sender, address(this), _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		stakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance.add(_amount));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        113
Source: 
>   IERC20 yeld;
>   uint256 public constant timeBetweenRedeems = 1 days;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        112
Source: 
>   using SafeMath for uint256;
>   IERC20 yeld;
>   ^^^^^^^^^^^
>   uint256 public constant timeBetweenRedeems = 1 days;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    RetirementYeldTreasury
Line:        155
Source: 
>     stakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance);
>     msg.sender.transfer(earnings);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        163
Source: 
> 	function extractETHIfStuck() public onlyOwner {
>     owner().transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        155
Source: 
>     stakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance);
>     msg.sender.transfer(earnings);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        163
Source: 
> 	function extractETHIfStuck() public onlyOwner {
>     owner().transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        155
Source: 
>     stakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance);
>     msg.sender.transfer(earnings);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        163
Source: 
> 	function extractETHIfStuck() public onlyOwner {
>     owner().transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        133
Source: 
> 	function stakeYeld(uint256 _amount) public {
> 		yeld.transferFrom(msg.sender, address(this), _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		stakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance.add(_amount));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        144
Source: 
> 		totalStaked = totalStaked.sub(_amount);
> 		yeld.transfer(msg.sender, _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        151
Source: 
>     // Calculate his holdings % in 1 per 10^18% instead of 1 per 100%
>     uint256 burnedTokens = yeld.balanceOf(address(0));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 userPercentage = stakes[msg.sender].yeldBalance.mul(1e18).div(yeld.totalSupply().sub(burnedTokens));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        152
Source: 
>     uint256 burnedTokens = yeld.balanceOf(address(0));
>     uint256 userPercentage = stakes[msg.sender].yeldBalance.mul(1e18).div(yeld.totalSupply().sub(burnedTokens));
>                                                                           ^^^^^^^^^^^^^^^^^^
>     uint256 earnings = address(this).balance.mul(userPercentage).div(1e18);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        167
Source: 
>   function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {
>     IERC20(_token).transfer(msg.sender, _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RetirementYeldTreasury
Line:        121
Source: 
> 	mapping(address => Stake) public stakes;
> 	uint256 public totalStaked;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    RetirementYeldTreasury
Line:        135
Source: 
> 		stakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance.add(_amount));
> 		totalStaked = totalStaked.add(_amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        133
Source: 
> 	function stakeYeld(uint256 _amount) public {
> 		yeld.transferFrom(msg.sender, address(this), _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		stakes[msg.sender] = Stake(now, stakes[msg.sender].yeldBalance.add(_amount));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        144
Source: 
> 		totalStaked = totalStaked.sub(_amount);
> 		yeld.transfer(msg.sender, _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        163
Source: 
> 	function extractETHIfStuck() public onlyOwner {
>     owner().transfer(address(this).balance);
>     ^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    RetirementYeldTreasury
Line:        167
Source: 
>   function extractTokensIfStuck(address _token, uint256 _amount) public onlyOwner {
>     IERC20(_token).transfer(msg.sender, _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
