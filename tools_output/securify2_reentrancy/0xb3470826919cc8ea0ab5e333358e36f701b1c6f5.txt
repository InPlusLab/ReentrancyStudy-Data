Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        115
Source: 
>      */
>     function token() public view returns (IERC20) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _token;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        122
Source: 
>      */
>     function beneficiary() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _beneficiary;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        129
Source: 
>      */
>     function startTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _startTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        133
Source: 
>     
>     function lastRelease() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _lastRelease;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenTimelock
Line:        140
Source: 
>      */
>     function release() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenTimelock
Line:        175
Source: 
>     
>     function updateBeneficiary(address newBeneficiary) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == _beneficiary);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        195
Source: 
>           l /= pow2;
>           l += h * ((-pow2) / pow2 + 1);
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>           uint r = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        197
Source: 
>           uint r = 1;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        197
Source: 
>           uint r = 1;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        198
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        198
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        199
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        199
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        200
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        200
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        201
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        201
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        202
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        202
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        203
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        203
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           r *= 2 - z * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        204
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>                    ^^^^^
>           return l * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        204
Source: 
>           r *= 2 - z * r;
>           r *= 2 - z * r;
>           ^^^^^^^^^^^^^^
>           return l * r;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        205
Source: 
>           r *= 2 - z * r;
>           return l * r;
>                  ^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    TokenTimelock
Line:        210
Source: 
>           uint mm = mulmod (x, y, uint (-1));
>           l = x * y;
>               ^^^^^
>           h = mm - l;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenTimelock
Line:        145
Source: 
>         if(!_vestingStarted) {
>             _totalTokens = _token.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _vestingStarted = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenTimelock
Line:        160
Source: 
> 
>         _token.transfer(_beneficiary, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenTimelock
Line:        183
Source: 
>         require(msg.sender == _beneficiary);
>         _totalTokens = _token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    TokenTimelock
Line:        103
Source: 
> 
>     constructor (IERC20 token) public {
>                  ^^^^^^^^^^^^
>         _token = token;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenTimelock
Line:        187
Source: 
>     function mulDiv (uint x, uint y, uint z) public pure returns (uint) {
>           (uint l, uint h) = fullMul (x, y);
>            ^^^^^^
>           assert (h < z);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenTimelock
Line:        208
Source: 
>     
>     function fullMul (uint x, uint y) private pure returns (uint l, uint h) {
>                                                             ^^^^^^
>           uint mm = mulmod (x, y, uint (-1));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.6.10;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenTimelock
Line:        145
Source: 
>         if(!_vestingStarted) {
>             _totalTokens = _token.balanceOf(address(this));
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _vestingStarted = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenTimelock
Line:        170
Source: 
>         require(daysSinceStart >= 720);
>         uint amount = _token.balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _token.transfer(_beneficiary, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenTimelock
Line:        183
Source: 
>         require(msg.sender == _beneficiary);
>         _totalTokens = _token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenTimelock
Line:        160
Source: 
> 
>         _token.transfer(_beneficiary, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    TokenTimelock
Line:        171
Source: 
>         uint amount = _token.balanceOf(address(this));
>         _token.transfer(_beneficiary, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    TokenTimelock
Line:        98
Source: 
>     // Total tokens the contract holds
>     uint private _totalTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenTimelock
Line:        160
Source: 
> 
>         _token.transfer(_beneficiary, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenTimelock
Line:        171
Source: 
>         uint amount = _token.balanceOf(address(this));
>         _token.transfer(_beneficiary, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        106
Source: 
>         _beneficiary = msg.sender;
>         _startTime = block.timestamp;
>                      ^^^^^^^^^^^^^^^
>         _lastRelease = block.timestamp;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        107
Source: 
>         _startTime = block.timestamp;
>         _lastRelease = block.timestamp;
>                        ^^^^^^^^^^^^^^^
>         _totalDays = 720;   // 2 years (24 months of 30 days)

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenTimelock
Line:        156
Source: 
>         
>         _lastRelease = block.timestamp;
>                        ^^^^^^^^^^^^^^^
>         

[0m
