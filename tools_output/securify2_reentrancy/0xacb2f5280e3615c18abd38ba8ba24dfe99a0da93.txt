pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    HelixNebula
Line:        121
Source: 
>     
>   uint votecost=10000 szabo; //1 szabo =0.000001 ether
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint HelixPrice=100000 szabo; //0.1 ether

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    HelixNebula
Line:        122
Source: 
>   uint votecost=10000 szabo; //1 szabo =0.000001 ether
>   uint HelixPrice=100000 szabo; //0.1 ether
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint trigger=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    HelixNebula
Line:        123
Source: 
>   uint HelixPrice=100000 szabo; //0.1 ether
>   uint trigger=0;
>   ^^^^^^^^^^^^^^
>   struct votedata{

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        73
Source: 
>  
>    function GetMinedTokens() public view returns(uint){
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return totalSupply;  //it means how much people help each others

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        77
Source: 
> 
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balances[msg.sender] >= _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        85
Source: 
> 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 allowance = allowed[_from][msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        97
Source: 
> 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        101
Source: 
> 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        107
Source: 
> 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        152
Source: 
>   }
>   function create(string memory _name,uint _lang,string memory story,address payable _ethaddress,string memory pass) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes memory EmptyStringstory = bytes(story); 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        183
Source: 
> 
>   function GetRandomHuman(uint _randseed,uint _decimals,uint _lang) public view returns(string memory,string memory,int,address,uint,uint){  
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint[] memory points=new uint[](Humans.length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        225
Source: 
>   }
>   function GetVotedata(uint id) view public returns(int256,uint)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        240
Source: 
>   }
>   function vote(uint id,uint vtype) public payable returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        271
Source: 
>   
>   function SendTransaction(address payable _adr,address payable _referraladr,bool _hasreferral) public payable{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_hasreferral == true){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        284
Source: 
>   
>   function destroy(uint id) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if(msg.sender==wallet){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebula
Line:        294
Source: 
>   
>   function GetStroyByindex(uint _index)view public returns(uint,string memory,string memory,uint,address)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebula
Line:        183
Source: 
> 
>   function GetRandomHuman(uint _randseed,uint _decimals,uint _lang) public view returns(string memory,string memory,int,address,uint,uint){  
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint[] memory points=new uint[](Humans.length);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebula
Line:        225
Source: 
>   }
>   function GetVotedata(uint id) view public returns(int256,uint)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebula
Line:        240
Source: 
>   }
>   function vote(uint id,uint vtype) public payable returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebula
Line:        284
Source: 
>   
>   function destroy(uint id) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if(msg.sender==wallet){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebula
Line:        77
Source: 
> 
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balances[msg.sender] >= _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebula
Line:        85
Source: 
> 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 allowance = allowed[_from][msg.sender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebula
Line:        97
Source: 
> 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebula
Line:        101
Source: 
> 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebula
Line:        107
Source: 
> 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebula
Line:        152
Source: 
>   }
>   function create(string memory _name,uint _lang,string memory story,address payable _ethaddress,string memory pass) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes memory EmptyStringstory = bytes(story); 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebula
Line:        271
Source: 
>   
>   function SendTransaction(address payable _adr,address payable _referraladr,bool _hasreferral) public payable{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_hasreferral == true){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebula
Line:        294
Source: 
>   
>   function GetStroyByindex(uint _index)view public returns(uint,string memory,string memory,uint,address)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    HelixNebula
Line:        201
Source: 
>       }
>       uint randnumber=(_randseed  * maxlengthpoint)/_decimals;
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    HelixNebula
Line:        258
Source: 
>         
>         wallet.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(vtype==1){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    HelixNebula
Line:        86
Source: 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>         uint256 allowance = allowed[_from][msg.sender];
>         ^^^^^^^^^^^^^^^^^
>         require(balances[_from] >= _value && allowance >= _value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        73
Source: 
>  
>    function GetMinedTokens() public view returns(uint){
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return totalSupply;  //it means how much people help each others

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        122
Source: 
>   uint votecost=10000 szabo; //1 szabo =0.000001 ether
>   uint HelixPrice=100000 szabo; //0.1 ether
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint trigger=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        124
Source: 
>   uint trigger=0;
>   struct votedata{
>   ^^^^^^^^^^^^^^^^
>       uint hid;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        142
Source: 
>   votedata[] public voters;
>   Human[] public Humans;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint public nextId = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        145
Source: 
>   
>   function DeleteVotesByid(uint _id) internal{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      for(uint i = 0; i < voters.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        153
Source: 
>   function create(string memory _name,uint _lang,string memory story,address payable _ethaddress,string memory pass) public {
>     bytes memory EmptyStringstory = bytes(story); 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(EmptyStringstory.length > 4,"null story"); //prevent from add null story.

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        175
Source: 
>   }
>   function GetdatePoint(uint _dtime) view internal returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        uint timetemp=block.timestamp - _dtime;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        183
Source: 
> 
>   function GetRandomHuman(uint _randseed,uint _decimals,uint _lang) public view returns(string memory,string memory,int,address,uint,uint){  
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint[] memory points=new uint[](Humans.length);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        225
Source: 
>   }
>   function GetVotedata(uint id) view public returns(int256,uint)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        227
Source: 
>   {
>      uint Vcost=votecost;
>      ^^^^^^^^^^
>      uint votecounts=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        243
Source: 
>     uint votecounts=0;
>     uint Vcost=votecost;
>     ^^^^^^^^^^
>     for(uint i = 0; i < voters.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        271
Source: 
>   
>   function SendTransaction(address payable _adr,address payable _referraladr,bool _hasreferral) public payable{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_hasreferral == true){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebula
Line:        294
Source: 
>   
>   function GetStroyByindex(uint _index)view public returns(uint,string memory,string memory,uint,address)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HelixNebula
Line:        55
Source: 
> //////////////////////////Token Layer////////////////////////////////////////////////
>     address payable wallet;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant private MAX_UINT256 = 2**256 - 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HelixNebula
Line:        121
Source: 
>     
>   uint votecost=10000 szabo; //1 szabo =0.000001 ether
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint HelixPrice=100000 szabo; //0.1 ether

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HelixNebula
Line:        122
Source: 
>   uint votecost=10000 szabo; //1 szabo =0.000001 ether
>   uint HelixPrice=100000 szabo; //0.1 ether
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint trigger=0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HelixNebula
Line:        123
Source: 
>   uint HelixPrice=100000 szabo; //0.1 ether
>   uint trigger=0;
>   ^^^^^^^^^^^^^^
>   struct votedata{

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebula
Line:        122
Source: 
>   uint votecost=10000 szabo; //1 szabo =0.000001 ether
>   uint HelixPrice=100000 szabo; //0.1 ether
>                   ^^^^^^^^^^^^
>   uint trigger=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    HelixNebula
Line:        258
Source: 
>         
>         wallet.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(vtype==1){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    HelixNebula
Line:        279
Source: 
>         
>         _adr.transfer(msg.value*9/10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wallet.transfer(msg.value/10);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    HelixNebula
Line:        280
Source: 
>         _adr.transfer(msg.value*9/10);
>         wallet.transfer(msg.value/10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    HelixNebula
Line:        258
Source: 
>         
>         wallet.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(vtype==1){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    HelixNebula
Line:        279
Source: 
>         
>         _adr.transfer(msg.value*9/10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         wallet.transfer(msg.value/10);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    HelixNebula
Line:        280
Source: 
>         _adr.transfer(msg.value*9/10);
>         wallet.transfer(msg.value/10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    HelixNebula
Line:        274
Source: 
>             balances[_referraladr] += (msg.value*(10**7))/HelixPrice;
>             totalSupply += (msg.value*(10**7))/HelixPrice;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    HelixNebula
Line:        277
Source: 
>         balances[msg.sender] += (msg.value*(10**7))/HelixPrice; 
>         totalSupply += (msg.value*(10**7))/HelixPrice; //Helix nebula token is being made, when help to someone
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HelixNebula
Line:        102
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HelixNebula
Line:        148
Source: 
>       if(voters[i].hid == _id) {
>             delete voters[i];
>             ^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HelixNebula
Line:        155
Source: 
>     require(EmptyStringstory.length > 4,"null story"); //prevent from add null story.
>     Humans.push(Human(nextId, _name,_lang,0,0,story,block.timestamp,_ethaddress,msg.sender,pass));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HelixNebula
Line:        162
Source: 
>         DeleteVotesByid(Humans[0].id);
>         delete Humans[0];
>         ^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HelixNebula
Line:        169
Source: 
>             DeleteVotesByid(Humans[i].id);
>             delete Humans[i];
>             ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HelixNebula
Line:        173
Source: 
>     // and so remove the humans have not enough point
>     nextId++;
>     ^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HelixNebula
Line:        273
Source: 
>         if(_hasreferral == true){
>             balances[_referraladr] += (msg.value*(10**7))/HelixPrice;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalSupply += (msg.value*(10**7))/HelixPrice;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    HelixNebula
Line:        60
Source: 
> 
>     string public name;                   
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;                

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    HelixNebula
Line:        61
Source: 
>     string public name;                   
>     uint8 public decimals;                
>     ^^^^^^^^^^^^^^^^^^^^^
>     string public symbol;                 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    HelixNebula
Line:        62
Source: 
>     uint8 public decimals;                
>     string public symbol;                 
>     ^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    HelixNebula
Line:        123
Source: 
>   uint HelixPrice=100000 szabo; //0.1 ether
>   uint trigger=0;
>   ^^^^^^^^^^^^^^
>   struct votedata{

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebula
Line:        176
Source: 
>   function GetdatePoint(uint _dtime) view internal returns(uint){
>        uint timetemp=block.timestamp - _dtime;
>                      ^^^^^^^^^^^^^^^
>        uint tdays=timetemp/(3600*24);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebula
Line:        207
Source: 
>           if(tempnumber<randnumber && randnumber<tempnumber+points[i] && points[i] !=0){
>               uint timetemp=block.timestamp - Humans[i].timestamp;
>                             ^^^^^^^^^^^^^^^
>               uint tdays=timetemp/(3600*24);

[0m
