Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Lerp
Line:        18
Source: 
>     mapping (address => uint256) public wards;
>     function rely(address usr) external auth { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Lerp
Line:        19
Source: 
>     function rely(address usr) external auth { wards[usr] = 1; }
>     function deny(address usr) external auth { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth { require(wards[msg.sender] == 1); _; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Lerp
Line:        30
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lerp
Line:        59
Source: 
>         require(!done, "Lerp/finished");
>         target.file(what, start);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         startTime = block.timestamp;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lerp
Line:        73
Source: 
>             //   = end * t + start - start * t [Avoids overflow by moving the subtraction to the end]
>             target.file(what, sub(add(mul(end, t) / WAD, start), mul(start, t) / WAD));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lerp
Line:        76
Source: 
>             // Set the end value and de-auth yourself
>             target.file(what, end);
>             ^^^^^^^^^^^^^^^^^^^^^^
>             target.deny(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Lerp
Line:        77
Source: 
>             target.file(what, end);
>             target.deny(address(this));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             done = true;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Lerp
Line:        22
Source: 
> 
>     uint256 constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lerp
Line:        59
Source: 
>         require(!done, "Lerp/finished");
>         target.file(what, start);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         startTime = block.timestamp;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lerp
Line:        73
Source: 
>             //   = end * t + start - start * t [Avoids overflow by moving the subtraction to the end]
>             target.file(what, sub(add(mul(end, t) / WAD, start), mul(start, t) / WAD));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lerp
Line:        76
Source: 
>             // Set the end value and de-auth yourself
>             target.file(what, end);
>             ^^^^^^^^^^^^^^^^^^^^^^
>             target.deny(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Lerp
Line:        77
Source: 
>             target.file(what, end);
>             target.deny(address(this));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             done = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Lerp
Line:        24
Source: 
>     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Lerp
Line:        27
Source: 
>     function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Lerp
Line:        30
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Lerp
Line:        41
Source: 
>     bool public done;
>     uint256 public startTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Lerp
Line:        78
Source: 
>             target.deny(address(this));
>             done = true;
>             ^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Lerp
Line:        60
Source: 
>         target.file(what, start);
>         startTime = block.timestamp;
>                     ^^^^^^^^^^^^^^^
>         started = true;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Lerp
Line:        66
Source: 
>         require(started, "Lerp/not-started");
>         require(block.timestamp > startTime, "Lerp/no-time-elasped");
>                 ^^^^^^^^^^^^^^^
>         require(!done, "Lerp/finished");

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Lerp
Line:        68
Source: 
>         require(!done, "Lerp/finished");
>         if (block.timestamp < add(startTime, duration)) {
>             ^^^^^^^^^^^^^^^
>             // 0 <= t < WAD

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Lerp
Line:        70
Source: 
>             // 0 <= t < WAD
>             uint256 t = mul(WAD, sub(block.timestamp, startTime)) / duration;
>                                      ^^^^^^^^^^^^^^^
>             // y = (end - start) * t + start [Linear Interpolation]

[0m
