Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinResolver
Line:        318
Source: 
> 
>     function rebuildCache() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32[] memory requiredAddresses = resolverAddressesRequired();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SynthRedeemer
Line:        735
Source: 
> 
>     function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addresses = new bytes32[](2);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SynthRedeemer
Line:        749
Source: 
> 
>     function totalSupply(IERC20 synthProxy) public view returns (uint supplyInsUSD) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supplyInsUSD = synthProxy.totalSupply().multiplyDecimal(redemptions[address(synthProxy)]);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AddressResolver
Line:        273
Source: 
>         require(address(issuer) != address(0), "Cannot find Issuer address");
>         return address(issuer.synths(key));
>                        ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SynthRedeemer
Line:        750
Source: 
>     function totalSupply(IERC20 synthProxy) public view returns (uint supplyInsUSD) {
>         supplyInsUSD = synthProxy.totalSupply().multiplyDecimal(redemptions[address(synthProxy)]);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SynthRedeemer
Line:        754
Source: 
>     function balanceOf(IERC20 synthProxy, address account) external view returns (uint balanceInsUSD) {
>         balanceInsUSD = synthProxy.balanceOf(account).multiplyDecimal(redemptions[address(synthProxy)]);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SynthRedeemer
Line:        778
Source: 
>         require(amountOfSynth > 0, "No balance of synth to redeem");
>         issuer().burnForRedemption(address(synthProxy), msg.sender, amountOfSynth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amountInsUSD = amountOfSynth.multiplyDecimal(rateToRedeem);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SynthRedeemer
Line:        780
Source: 
>         uint amountInsUSD = amountOfSynth.multiplyDecimal(rateToRedeem);
>         sUSD().transfer(msg.sender, amountInsUSD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SynthRedeemed(address(synthProxy), msg.sender, amountOfSynth, amountInsUSD);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SynthRedeemer
Line:        764
Source: 
>     function redeem(IERC20 synthProxy) external {
>         _redeem(synthProxy, synthProxy.balanceOf(msg.sender));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SynthRedeemer
Line:        770
Source: 
>         // but this is a useful error message to the user
>         require(synthProxy.balanceOf(msg.sender) >= amountOfSynth, "Insufficient balance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _redeem(synthProxy, amountOfSynth);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SynthRedeemer
Line:        788
Source: 
>         require(rateToRedeem > 0, "No rate for synth to redeem");
>         uint totalSynthSupply = synthProxy.totalSupply();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint supplyInsUSD = totalSynthSupply.multiplyDecimal(rateToRedeem);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SynthRedeemer
Line:        790
Source: 
>         uint supplyInsUSD = totalSynthSupply.multiplyDecimal(rateToRedeem);
>         require(sUSD().balanceOf(address(this)) >= supplyInsUSD, "sUSD must first be supplied");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         redemptions[synthProxyAddress] = rateToRedeem;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    AddressResolver
Line:        245
Source: 
>         for (uint i = 0; i < destinations.length; i++) {
>             destinations[i].rebuildCache();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        325
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        338
Source: 
>             // false if our cache is invalid or if the resolver doesn't have the required address
>             if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return false;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        325
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        338
Source: 
>             // false if our cache is invalid or if the resolver doesn't have the required address
>             if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return false;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    SynthRedeemer
Line:        759
Source: 
>         for (uint i = 0; i < synthProxies.length; i++) {
>             _redeem(synthProxies[i], synthProxies[i].balanceOf(msg.sender));
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        64
Source: 
> 
>     function nominateNewOwner(address _owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nominatedOwner = _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressResolver
Line:        270
Source: 
> 
>     function getSynth(bytes32 key) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IIssuer issuer = IIssuer(repository["Issuer"]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SynthRedeemer
Line:        749
Source: 
> 
>     function totalSupply(IERC20 synthProxy) public view returns (uint supplyInsUSD) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supplyInsUSD = synthProxy.totalSupply().multiplyDecimal(redemptions[address(synthProxy)]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SynthRedeemer
Line:        753
Source: 
> 
>     function balanceOf(IERC20 synthProxy, address account) external view returns (uint balanceInsUSD) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balanceInsUSD = synthProxy.balanceOf(account).multiplyDecimal(redemptions[address(synthProxy)]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SynthRedeemer
Line:        763
Source: 
> 
>     function redeem(IERC20 synthProxy) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _redeem(synthProxy, synthProxy.balanceOf(msg.sender));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SynthRedeemer
Line:        767
Source: 
> 
>     function redeemPartial(IERC20 synthProxy, uint amountOfSynth) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // technically this check isn't necessary - Synth.burn would fail due to safe sub,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        251
Source: 
> 
>     function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < names.length; i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        260
Source: 
> 
>     function getAddress(bytes32 name) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return repository[name];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        264
Source: 
> 
>     function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _foundAddress = repository[name];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        478
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MixinResolver
Line:        325
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SynthRedeemer
Line:        788
Source: 
>         require(rateToRedeem > 0, "No rate for synth to redeem");
>         uint totalSynthSupply = synthProxy.totalSupply();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint supplyInsUSD = totalSynthSupply.multiplyDecimal(rateToRedeem);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SynthRedeemer
Line:        790
Source: 
>         uint supplyInsUSD = totalSynthSupply.multiplyDecimal(rateToRedeem);
>         require(sUSD().balanceOf(address(this)) >= supplyInsUSD, "sUSD must first be supplied");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         redemptions[synthProxyAddress] = rateToRedeem;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressResolver
Line:        265
Source: 
>     function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {
>         address _foundAddress = repository[name];
>         ^^^^^^^^^^^^^^^^^^^^^
>         require(_foundAddress != address(0), reason);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MixinResolver
Line:        349
Source: 
>     function requireAndGetAddress(bytes32 name) internal view returns (address) {
>         address _foundAddress = addressCache[name];
>         ^^^^^^^^^^^^^^^^^^^^^
>         require(_foundAddress != address(0), string(abi.encodePacked("Missing address: ", name)));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        51
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MixinResolver
Line:        338
Source: 
>             // false if our cache is invalid or if the resolver doesn't have the required address
>             if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return false;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SynthRedeemer
Line:        750
Source: 
>     function totalSupply(IERC20 synthProxy) public view returns (uint supplyInsUSD) {
>         supplyInsUSD = synthProxy.totalSupply().multiplyDecimal(redemptions[address(synthProxy)]);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SynthRedeemer
Line:        754
Source: 
>     function balanceOf(IERC20 synthProxy, address account) external view returns (uint balanceInsUSD) {
>         balanceInsUSD = synthProxy.balanceOf(account).multiplyDecimal(redemptions[address(synthProxy)]);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SynthRedeemer
Line:        759
Source: 
>         for (uint i = 0; i < synthProxies.length; i++) {
>             _redeem(synthProxies[i], synthProxies[i].balanceOf(msg.sender));
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SynthRedeemer
Line:        764
Source: 
>     function redeem(IERC20 synthProxy) external {
>         _redeem(synthProxy, synthProxy.balanceOf(msg.sender));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SynthRedeemer
Line:        770
Source: 
>         // but this is a useful error message to the user
>         require(synthProxy.balanceOf(msg.sender) >= amountOfSynth, "Insufficient balance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _redeem(synthProxy, amountOfSynth);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SynthRedeemer
Line:        788
Source: 
>         require(rateToRedeem > 0, "No rate for synth to redeem");
>         uint totalSynthSupply = synthProxy.totalSupply();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint supplyInsUSD = totalSynthSupply.multiplyDecimal(rateToRedeem);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SynthRedeemer
Line:        790
Source: 
>         uint supplyInsUSD = totalSynthSupply.multiplyDecimal(rateToRedeem);
>         require(sUSD().balanceOf(address(this)) >= supplyInsUSD, "sUSD must first be supplied");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         redemptions[synthProxyAddress] = rateToRedeem;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressResolver
Line:        245
Source: 
>         for (uint i = 0; i < destinations.length; i++) {
>             destinations[i].rebuildCache();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressResolver
Line:        273
Source: 
>         require(address(issuer) != address(0), "Cannot find Issuer address");
>         return address(issuer.synths(key));
>                        ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MixinResolver
Line:        325
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SynthRedeemer
Line:        778
Source: 
>         require(amountOfSynth > 0, "No balance of synth to redeem");
>         issuer().burnForRedemption(address(synthProxy), msg.sender, amountOfSynth);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amountInsUSD = amountOfSynth.multiplyDecimal(rateToRedeem);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SynthRedeemer
Line:        780
Source: 
>         uint amountInsUSD = amountOfSynth.multiplyDecimal(rateToRedeem);
>         sUSD().transfer(msg.sender, amountInsUSD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SynthRedeemed(address(synthProxy), msg.sender, amountOfSynth, amountInsUSD);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        56
Source: 
>     address public owner;
>     address public nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        534
Source: 
>     /* The number representing 1.0. */
>     uint public constant UNIT = 10**uint(decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        537
Source: 
>     /* The number representing 1.0 for higher fidelity numbers. */
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        538
Source: 
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        534
Source: 
>     /* The number representing 1.0. */
>     uint public constant UNIT = 10**uint(decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        537
Source: 
>     /* The number representing 1.0 for higher fidelity numbers. */
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        538
Source: 
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        534
Source: 
>     /* The number representing 1.0. */
>     uint public constant UNIT = 10**uint(decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        537
Source: 
>     /* The number representing 1.0 for higher fidelity numbers. */
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        538
Source: 
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        534
Source: 
>     /* The number representing 1.0. */
>     uint public constant UNIT = 10**uint(decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        537
Source: 
>     /* The number representing 1.0 for higher fidelity numbers. */
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeDecimalMath
Line:        538
Source: 
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        65
Source: 
>     function nominateNewOwner(address _owner) external onlyOwner {
>         nominatedOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnerNominated(_owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressResolver
Line:        236
Source: 
>             address destination = destinations[i];
>             repository[name] = destination;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit AddressImported(name, destination);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinResolver
Line:        326
Source: 
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>             addressCache[name] = destination;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CacheUpdated(name, destination);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SynthRedeemer
Line:        791
Source: 
>         require(sUSD().balanceOf(address(this)) >= supplyInsUSD, "sUSD must first be supplied");
>         redemptions[synthProxyAddress] = rateToRedeem;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SynthDeprecated(address(synthProxy), rateToRedeem, totalSynthSupply, supplyInsUSD);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SynthRedeemer
Line:        780
Source: 
>         uint amountInsUSD = amountOfSynth.multiplyDecimal(rateToRedeem);
>         sUSD().transfer(msg.sender, amountInsUSD);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit SynthRedeemed(address(synthProxy), msg.sender, amountOfSynth, amountInsUSD);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        538
Source: 
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        538
Source: 
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        538
Source: 
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SynthRedeemer
Line:        726
Source: 
> 
>     bytes32 public constant CONTRACT_NAME = "SynthRedeemer";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        530
Source: 
>     /* Number of decimal places in the representations. */
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant highPrecisionDecimals = 27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        531
Source: 
>     uint8 public constant decimals = 18;
>     uint8 public constant highPrecisionDecimals = 27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeDecimalMath
Line:        538
Source: 
>     uint public constant PRECISE_UNIT = 10**uint(highPrecisionDecimals);
>     uint private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR = 10**uint(highPrecisionDecimals - decimals);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
