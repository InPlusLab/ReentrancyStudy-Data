Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RampInstantPool
Line:        179
Source: 
> 
>     function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return withdrawFunds(_to, availableFunds());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RampInstantPool
Line:        183
Source: 
> 
>     function setLimits(
>      ^^^^^^^^^^^^^^^^^^
>         uint256 _minAmount,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RampInstantPool
Line:        192
Source: 
> 
>     function setSwapsContract(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^
>         address payable _swapsContract

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RampInstantTokenPool
Line:        406
Source: 
> 
>     function sendFundsToSwap(
>      ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _amount

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RampInstantTokenPool
Line:        413
Source: 
>     /** ERC-223 token fallback function */
>     function tokenFallback(address _from, uint _value, bytes memory _data) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_data.length == 0, "tokens with data not supported");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    RampInstantTokenPool
Line:        373
Source: 
>  */
> contract RampInstantTokenPool is RampInstantPool, ERC777TokenRecipient {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        45
Source: 
> 
>     function changeOwner(address _newOwner) external onlyOwner {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RampInstantPool
Line:        179
Source: 
> 
>     function withdrawAllFunds(address payable _to) public onlyOwner returns (bool success) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return withdrawFunds(_to, availableFunds());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    RampInstantTokenPool
Line:        399
Source: 
> 
>     function withdrawFunds(
>      ^^^^^^^^^^^^^^^^^^^^^^
>         address payable _to,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RampInstantPool
Line:        203
Source: 
> 
>     function releaseSwap(
>      ^^^^^^^^^^^^^^^^^^^^
>         address payable _receiver,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RampInstantPool
Line:        218
Source: 
> 
>     function returnSwap(
>      ^^^^^^^^^^^^^^^^^^^
>         address _receiver,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC777TokenRecipient
Line:        344
Source: 
> 
>     function canImplementInterfaceForAddress(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _interfaceHash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RampInstantTokenPool
Line:        413
Source: 
>     /** ERC-223 token fallback function */
>     function tokenFallback(address _from, uint _value, bytes memory _data) public {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_data.length == 0, "tokens with data not supported");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RampInstantTokenPool
Line:        421
Source: 
>     /** ERC-777 token received hook */
>     function tokensReceived(
>      ^^^^^^^^^^^^^^^^^^^^^^^
>         address /*_operator*/,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    RampInstantPool
Line:        260
Source: 
>         require(
>             RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "pool asset type doesn't match swap contract"

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RampInstantPoolInterface
Line:        81
Source: 
> 
>     uint16 public ASSET_TYPE;
>      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RampInstantEscrowsPoolInterface
Line:        100
Source: 
> 
>     uint16 public ASSET_TYPE;
>      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    RampInstantPool
Line:        140
Source: 
>     uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;
>     uint16 public ASSET_TYPE;
>      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ERC777TokenRecipient
Line:        327
Source: 
>     );
>     bytes32 internal constant ERC777TokenRecipientERC1820Hash = keccak256(
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         abi.encodePacked("ERC777TokensRecipient")

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RampInstantPool
Line:        246
Source: 
> 
>     modifier isWithinLimits(uint256 _amount) {
>                              ^^^^^^^^^^^^^^^
>         require(_amount >= minSwapAmount && _amount <= maxSwapAmount, "amount outside swap limits");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RampInstantPool
Line:        251
Source: 
> 
>     modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {
>                              ^^^^^^^^^^^^^^^^^^
>         require(_minAmount <= _maxAmount, "min limit over max limit");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RampInstantPool
Line:        251
Source: 
> 
>     modifier validateLimits(uint256 _minAmount, uint256 _maxAmount) {
>                                                  ^^^^^^^^^^^^^^^^^^
>         require(_minAmount <= _maxAmount, "min limit over max limit");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RampInstantPool
Line:        257
Source: 
> 
>     modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_swapsContract != address(0), "null swaps contract address");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RampInstantPool
Line:        257
Source: 
> 
>     modifier validateSwapsContract(address payable _swapsContract, uint16 _assetType) {
>                                                                     ^^^^^^^^^^^^^^^^^
>         require(_swapsContract != address(0), "null swaps contract address");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    RampInstantPool
Line:        260
Source: 
>         require(
>             RampInstantEscrowsPoolInterface(_swapsContract).ASSET_TYPE() == _assetType,
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "pool asset type doesn't match swap contract"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RampInstantTokenPool
Line:        403
Source: 
>     ) public onlyOwner returns (bool success) {
>         return token.transfer(_to, _amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RampInstantTokenPool
Line:        396
Source: 
>     function availableFunds() public view returns(uint256) {
>         return token.balanceOf(address(this));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RampInstantPool
Line:        209
Source: 
>     ) external onlyOwner {
>         RampInstantEscrowsPoolInterface(swapsContract).release(
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(this),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RampInstantPool
Line:        224
Source: 
>     ) external onlyOwner {
>         RampInstantEscrowsPoolInterface(swapsContract).returnFunds(
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             address(this),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC777TokenRecipient
Line:        336
Source: 
>         if (_doSetErc1820Registry) {
>             ERC1820REGISTRY.setInterfaceImplementer(
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 address(this),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RampInstantTokenPool
Line:        409
Source: 
>     ) public onlyActive onlySwapsContract isWithinLimits(_amount) returns(bool success) {
>         return token.transfer(swapsContract, _amount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RampInstantPool
Line:        140
Source: 
>     uint256 constant private MAX_SWAP_AMOUNT_LIMIT = 1 << 240;
>     uint16 public ASSET_TYPE;
>      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RampInstantPool
Line:        142
Source: 
> 
>     address payable public swapsContract;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public minSwapAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RampInstantPool
Line:        143
Source: 
>     address payable public swapsContract;
>     uint256 public minSwapAmount;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public maxSwapAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RampInstantPool
Line:        144
Source: 
>     uint256 public minSwapAmount;
>     uint256 public maxSwapAmount;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 public paymentDetailsHash;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RampInstantPool
Line:        145
Source: 
>     uint256 public maxSwapAmount;
>     bytes32 public paymentDetailsHash;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    RampInstantTokenPool
Line:        376
Source: 
>     uint16 internal constant TOKEN_TYPE_ID = 2;
>     Erc20Token public token;
>      ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    RampInstantPoolInterface
Line:        81
Source: 
> 
>     uint16 public ASSET_TYPE;
>      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RampInstantPoolInterface
Line:        81
Source: 
> 
>     uint16 public ASSET_TYPE;
>      ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    RampInstantPool
Line:        145
Source: 
>     uint256 public maxSwapAmount;
>     bytes32 public paymentDetailsHash;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
