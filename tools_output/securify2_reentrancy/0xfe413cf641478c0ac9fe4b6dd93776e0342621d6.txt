Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Pb
Line:        538
Source: 
>         v = buf.idx;  // use v to save one additional uint variable
>         assembly {
>         ^^^^^^^^^^
>             tmp := mload(add(add(bb, 32), v)) // load 10 bytes from buf.b[buf.idx] to tmp

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Pb
Line:        544
Source: 
>         for (uint i=0; i<10; i++) {
>             assembly {
>             ^^^^^^^^^^
>                 b := byte(i, tmp)  // don't use tmp[i] because it does bound check and costs extra

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Pb
Line:        565
Source: 
>         uint bufBStart = buf.idx;
>         assembly {
>         ^^^^^^^^^^
>             bStart := add(b, 32)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Pb
Line:        570
Source: 
>         for (uint i=0; i<len; i+=32) {
>             assembly{
>             ^^^^^^^^^
>                 mstore(add(bStart, i), mload(add(bufBStart, i)))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Pb
Line:        614
Source: 
>         require(b.length <= 32);  // b's length must be smaller than or equal to 32
>         assembly { v := mload(add(b, 32)) }  // load all 32bytes to v
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         v = v >> (8 * (32 - b.length));  // only first b.length is valid

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Pb
Line:        625
Source: 
>         //load 32bytes then shift right 12 bytes
>         assembly { v := div(mload(add(b, 32)), 0x1000000000000000000000000) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Pb
Line:        630
Source: 
>         require(b.length == 32);
>         assembly { v := mload(add(b, 32)) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        195
Source: 
> 
>     Roles.Role private _pausers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        210
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        214
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        210
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        214
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        251
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        274
Source: 
>      */
>     function pause() public onlyPauser whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        282
Source: 
>      */
>     function unpause() public onlyPauser whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        314
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        339
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        348
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        210
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        214
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        251
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        274
Source: 
>      */
>     function pause() public onlyPauser whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        282
Source: 
>      */
>     function unpause() public onlyPauser whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        314
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        339
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        348
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        115
Source: 
>     function safeTransfer(IERC20 token, address to, uint256 value) internal {
>         require(token.transfer(to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SGN
Line:        929
Source: 
> 
>         (bool initialized, , , uint256 status, , , ) = dPoSContract.getCandidateInfo(msgSender);
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SGN
Line:        896
Source: 
>     modifier onlyValidSidechain() {
>         require(dPoSContract.isValidDPoS(), 'DPoS is not valid');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SafeERC20
Line:        119
Source: 
>     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
>         require(token.transferFrom(from, to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SGN
Line:        896
Source: 
>     modifier onlyValidSidechain() {
>         require(dPoSContract.isValidDPoS(), 'DPoS is not valid');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SGN
Line:        965
Source: 
>         require(
>             dPoSContract.validateMultiSigMessage(_rewardRequest),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'Validator sigs verification failed'

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SGN
Line:        979
Source: 
> 
>         dPoSContract.redeemMiningReward(reward.receiver, reward.cumulativeMiningReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         celerToken.safeTransfer(reward.receiver, newServiceReward);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        206
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        210
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        206
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        210
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        348
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        206
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        210
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        348
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SGN
Line:        946
Source: 
>      */
>     function subscribe(uint256 _amount) external whenNotPaused onlyValidSidechain {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address msgSender = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SGN
Line:        963
Source: 
>      */
>     function redeemReward(bytes calldata _rewardRequest) external whenNotPaused onlyValidSidechain {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SGN
Line:        916
Source: 
>      */
>     function drainToken(uint256 _amount) external whenPaused onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         celerToken.safeTransfer(msg.sender, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SGN
Line:        926
Source: 
>      */
>     function updateSidechainAddr(bytes calldata _sidechainAddr) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address msgSender = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SGN
Line:        896
Source: 
>     modifier onlyValidSidechain() {
>         require(dPoSContract.isValidDPoS(), 'DPoS is not valid');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SGN
Line:        965
Source: 
>         require(
>             dPoSContract.validateMultiSigMessage(_rewardRequest),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'Validator sigs verification failed'

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SGN
Line:        979
Source: 
> 
>         dPoSContract.redeemMiningReward(reward.receiver, reward.cumulativeMiningReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         celerToken.safeTransfer(reward.receiver, newServiceReward);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    PbSgn
Line:        666
Source: 
>     struct MultiSigMessage {
>         bytes msg;   // tag: 1
>         ^^^^^^^^^
>         bytes[] sigs;   // tag: 2

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    SGN
Line:        929
Source: 
> 
>         (bool initialized, , , uint256 status, , , ) = dPoSContract.getCandidateInfo(msgSender);
>          ^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SGN
Line:        929
Source: 
> 
>         (bool initialized, , , uint256 status, , , ) = dPoSContract.getCandidateInfo(msgSender);
>          ^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        115
Source: 
>     function safeTransfer(IERC20 token, address to, uint256 value) internal {
>         require(token.transfer(to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SGN
Line:        929
Source: 
> 
>         (bool initialized, , , uint256 status, , , ) = dPoSContract.getCandidateInfo(msgSender);
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SGN
Line:        896
Source: 
>     modifier onlyValidSidechain() {
>         require(dPoSContract.isValidDPoS(), 'DPoS is not valid');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        119
Source: 
>     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
>         require(token.transferFrom(from, to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SGN
Line:        896
Source: 
>     modifier onlyValidSidechain() {
>         require(dPoSContract.isValidDPoS(), 'DPoS is not valid');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SGN
Line:        965
Source: 
>         require(
>             dPoSContract.validateMultiSigMessage(_rewardRequest),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             'Validator sigs verification failed'

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SGN
Line:        979
Source: 
> 
>         dPoSContract.redeemMiningReward(reward.receiver, reward.cumulativeMiningReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         celerToken.safeTransfer(reward.receiver, newServiceReward);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Pb
Line:        501
Source: 
>     function fromBytes(bytes memory raw) internal pure returns (Buffer memory buf) {
>         buf.b = raw;
>         ^^^
>         buf.idx = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Pb
Line:        547
Source: 
>             }
>             v |= (b & 0x7F) << (i * 7);
>                   ^
>             if (b & 0x80 == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Pb
Line:        587
Source: 
>         while (buf.idx < end) {
>             tmp[i] = decVarint(buf);
>                 ^
>             i++;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    PbSgn
Line:        674
Source: 
>         uint[] memory cnts = buf.cntTags(2);
>         m.sigs = new bytes[](cnts[2]);
>         ^
>         cnts[2] = 0;  // reset counter for later use

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    PbSgn
Line:        702
Source: 
>         uint[] memory cnts = buf.cntTags(2);
>         m.sigs = new bytes[](cnts[2]);
>         ^
>         cnts[2] = 0;  // reset counter for later use

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    PbSgn
Line:        730
Source: 
>         uint[] memory cnts = buf.cntTags(2);
>         m.sigs = new bytes[](cnts[2]);
>         ^
>         cnts[2] = 0;  // reset counter for later use

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    PbSgn
Line:        761
Source: 
>         uint[] memory cnts = buf.cntTags(5);
>         m.penalizedDelegators = new AccountAmtPair[](cnts[4]);
>         ^
>         cnts[4] = 0;  // reset counter for later use

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    PbSgn
Line:        806
Source: 
>             else if (tag == 1) {
>                 m.account = Pb._address(buf.decBytes());
>                 ^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    PbSgn
Line:        830
Source: 
>             else if (tag == 1) {
>                 m.receiver = Pb._address(buf.decBytes());
>                 ^
>             }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        242
Source: 
> 
>     bool private _paused;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SGN
Line:        884
Source: 
> 
>     IERC20 public celerToken;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     IDPoS public dPoSContract;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SGN
Line:        885
Source: 
>     IERC20 public celerToken;
>     IDPoS public dPoSContract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public subscriptionDeposits;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    SGN
Line:        887
Source: 
>     mapping(address => uint256) public subscriptionDeposits;
>     uint256 public servicePool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public redeemedServiceReward;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        195
Source: 
> 
>     Roles.Role private _pausers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        161
Source: 
> 
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        171
Source: 
> 
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        161
Source: 
> 
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        171
Source: 
> 
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        275
Source: 
>     function pause() public onlyPauser whenNotPaused {
>         _paused = true;
>         ^^^^^^^^^^^^^^
>         emit Paused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        283
Source: 
>     function unpause() public onlyPauser whenPaused {
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>         emit Unpaused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        161
Source: 
> 
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        171
Source: 
> 
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        275
Source: 
>     function pause() public onlyPauser whenNotPaused {
>         _paused = true;
>         ^^^^^^^^^^^^^^
>         emit Paused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        283
Source: 
>     function unpause() public onlyPauser whenPaused {
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>         emit Unpaused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SGN
Line:        949
Source: 
> 
>         servicePool = servicePool.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         subscriptionDeposits[msgSender] = subscriptionDeposits[msgSender].add(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SGN
Line:        976
Source: 
>         require(servicePool >= newServiceReward, 'Service pool is smaller than new service reward');
>         redeemedServiceReward[reward.receiver] = reward.cumulativeServiceReward;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         servicePool = servicePool.sub(newServiceReward);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SGN
Line:        977
Source: 
>         redeemedServiceReward[reward.receiver] = reward.cumulativeServiceReward;
>         servicePool = servicePool.sub(newServiceReward);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        115
Source: 
>     function safeTransfer(IERC20 token, address to, uint256 value) internal {
>         require(token.transfer(to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        119
Source: 
>     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
>         require(token.transferFrom(from, to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        126
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        127
Source: 
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>         require(token.approve(spender, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        131
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        132
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        136
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        137
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pb
Line:        525
Source: 
>         WireType wire;
>         while (hasMore(buf)) {
>                ^^^^^^^^^^^^
>             (tag, wire) = decKey(buf);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        671
Source: 
>     function decMultiSigMessage(bytes memory raw) internal pure returns (MultiSigMessage memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        679
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        699
Source: 
>     function decPenaltyRequest(bytes memory raw) internal pure returns (PenaltyRequest memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        707
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        727
Source: 
>     function decRewardRequest(bytes memory raw) internal pure returns (RewardRequest memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        735
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        758
Source: 
>     function decPenalty(bytes memory raw) internal pure returns (Penalty memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        768
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        798
Source: 
>     function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        802
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        822
Source: 
>     function decReward(bytes memory raw) internal pure returns (Reward memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        826
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        115
Source: 
>     function safeTransfer(IERC20 token, address to, uint256 value) internal {
>         require(token.transfer(to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        119
Source: 
>     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
>         require(token.transferFrom(from, to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        126
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        127
Source: 
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>         require(token.approve(spender, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        131
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        132
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        136
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        137
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pb
Line:        525
Source: 
>         WireType wire;
>         while (hasMore(buf)) {
>                ^^^^^^^^^^^^
>             (tag, wire) = decKey(buf);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        671
Source: 
>     function decMultiSigMessage(bytes memory raw) internal pure returns (MultiSigMessage memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        679
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        699
Source: 
>     function decPenaltyRequest(bytes memory raw) internal pure returns (PenaltyRequest memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        707
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        727
Source: 
>     function decRewardRequest(bytes memory raw) internal pure returns (RewardRequest memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        735
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        758
Source: 
>     function decPenalty(bytes memory raw) internal pure returns (Penalty memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        768
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        798
Source: 
>     function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        802
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        822
Source: 
>     function decReward(bytes memory raw) internal pure returns (Reward memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        826
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        115
Source: 
>     function safeTransfer(IERC20 token, address to, uint256 value) internal {
>         require(token.transfer(to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        119
Source: 
>     function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
>         require(token.transferFrom(from, to, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        126
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        127
Source: 
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>         require(token.approve(spender, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        131
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        132
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        136
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        137
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pb
Line:        525
Source: 
>         WireType wire;
>         while (hasMore(buf)) {
>                ^^^^^^^^^^^^
>             (tag, wire) = decKey(buf);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        671
Source: 
>     function decMultiSigMessage(bytes memory raw) internal pure returns (MultiSigMessage memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        679
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        699
Source: 
>     function decPenaltyRequest(bytes memory raw) internal pure returns (PenaltyRequest memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        707
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        727
Source: 
>     function decRewardRequest(bytes memory raw) internal pure returns (RewardRequest memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        735
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        758
Source: 
>     function decPenalty(bytes memory raw) internal pure returns (Penalty memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        768
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        798
Source: 
>     function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        802
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        822
Source: 
>     function decReward(bytes memory raw) internal pure returns (Reward memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        826
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        126
Source: 
>         // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, value));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        127
Source: 
>         require((value == 0) || (token.allowance(address(this), spender) == 0));
>         require(token.approve(spender, value));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        131
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        132
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        136
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(token.approve(spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        137
Source: 
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>         require(token.approve(spender, newAllowance));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        671
Source: 
>     function decMultiSigMessage(bytes memory raw) internal pure returns (MultiSigMessage memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        679
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        699
Source: 
>     function decPenaltyRequest(bytes memory raw) internal pure returns (PenaltyRequest memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        707
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        758
Source: 
>     function decPenalty(bytes memory raw) internal pure returns (Penalty memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        768
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        798
Source: 
>     function decAccountAmtPair(bytes memory raw) internal pure returns (AccountAmtPair memory m) {
>         Pb.Buffer memory buf = Pb.fromBytes(raw);
>                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PbSgn
Line:        802
Source: 
>         Pb.WireType wire;
>         while (buf.hasMore()) {
>                ^^^^^^^^^^^^^
>             (tag, wire) = buf.decKey();

[0m
