[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Utils
Line:        1449
Source: 
>     function _validateContractAddress(address _contract) private view {
>         assembly {
>         ^^^^^^^^^^
>             if iszero(extcodesize(_contract)) { revert(0, 0) }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Utils
Line:        1501
Source: 
>         uint256 parsed;
>         assembly { parsed := mload(add(_data, 32)) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return parsed;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @return An array of increments
>     function calculateTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        327
Source: 
>     /// @return An array of decrements
>     function calculateTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        346
Source: 
>     /// @return An array of increments
>     function calculateNetworkTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        365
Source: 
>     /// @return An array of decrements
>     function calculateNetworkTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        383
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        429
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        462
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        517
Source: 
>     /// @param _addresses The _addresses param from the cancel method
>     function validateCancel(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        603
Source: 
>     /// proportion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        639
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @return An array of increments
>     function calculateTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        327
Source: 
>     /// @return An array of decrements
>     function calculateTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        346
Source: 
>     /// @return An array of increments
>     function calculateNetworkTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        365
Source: 
>     /// @return An array of decrements
>     function calculateNetworkTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        383
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        429
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        462
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        517
Source: 
>     /// @param _addresses The _addresses param from the cancel method
>     function validateCancel(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        603
Source: 
>     /// proportion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        639
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KyberSwapDapp
Line:        1542
Source: 
>     /// @notice See Utils._performNetworkTrade for method details
>     function tokenReceiver(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory /* _assetIds */,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KyberSwapDapp
Line:        1555
Source: 
>     /// @notice See Utils._performNetworkTrade for method details
>     function trade(
>     ^^^^^^^^^^^^^^^
>         address[] memory _assetIds,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @return An array of increments
>     function calculateTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        327
Source: 
>     /// @return An array of decrements
>     function calculateTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        346
Source: 
>     /// @return An array of increments
>     function calculateNetworkTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        365
Source: 
>     /// @return An array of decrements
>     function calculateNetworkTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        383
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        429
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        462
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        517
Source: 
>     /// @param _addresses The _addresses param from the cancel method
>     function validateCancel(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Utils
Line:        639
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BrokerExtension
Line:        176
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KyberSwapDapp
Line:        1584
Source: 
> 
>         kyberNetworkProxy.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             srcAssetId,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    BrokerExtension
Line:        176
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    KyberSwapDapp
Line:        1584
Source: 
> 
>         kyberNetworkProxy.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             srcAssetId,

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils
Line:        665
Source: 
>     /// @param _assetId The address of the token to query
>     function externalBalance(address _assetId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_assetId == ETHER_ADDR) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KyberSwapDapp
Line:        1531
Source: 
> 
>     function setKyberNetworkProxy(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _kyberNetworkProxyAddress

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Utils
Line:        665
Source: 
>     /// @param _assetId The address of the token to query
>     function externalBalance(address _assetId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_assetId == ETHER_ADDR) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @return An array of increments
>     function calculateTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        327
Source: 
>     /// @return An array of decrements
>     function calculateTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        346
Source: 
>     /// @return An array of increments
>     function calculateNetworkTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        365
Source: 
>     /// @return An array of decrements
>     function calculateNetworkTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        383
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        429
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        462
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        517
Source: 
>     /// @param _addresses The _addresses param from the cancel method
>     function validateCancel(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        548
Source: 
>     /// @return The hash of the offer
>     function hashOffer(
>     ^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        573
Source: 
>     /// @param _amount The number of tokens to approve
>     function approveTokenTransfer(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _assetId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        603
Source: 
>     /// proportion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        639
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        676
Source: 
>     /// @param _assetId The address of the token to query
>     function tokenBalance(address _assetId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(_assetId).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        691
Source: 
>     /// EIP712 specification
>     function validateSignature(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _hash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        721
Source: 
>     /// @param _address The address to check
>     function validateAddress(address _address) public pure {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_address != address(0), "Invalid address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @return An array of increments
>     function calculateTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        327
Source: 
>     /// @return An array of decrements
>     function calculateTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        346
Source: 
>     /// @return An array of increments
>     function calculateNetworkTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        365
Source: 
>     /// @return An array of decrements
>     function calculateNetworkTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        383
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        429
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        462
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        517
Source: 
>     /// @param _addresses The _addresses param from the cancel method
>     function validateCancel(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        548
Source: 
>     /// @return The hash of the offer
>     function hashOffer(
>     ^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        573
Source: 
>     /// @param _amount The number of tokens to approve
>     function approveTokenTransfer(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _assetId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        603
Source: 
>     /// proportion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        639
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        676
Source: 
>     /// @param _assetId The address of the token to query
>     function tokenBalance(address _assetId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(_assetId).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        691
Source: 
>     /// EIP712 specification
>     function validateSignature(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _hash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        721
Source: 
>     /// @param _address The address to check
>     function validateAddress(address _address) public pure {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_address != address(0), "Invalid address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KyberSwapDapp
Line:        1542
Source: 
>     /// @notice See Utils._performNetworkTrade for method details
>     function tokenReceiver(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory /* _assetIds */,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KyberSwapDapp
Line:        1555
Source: 
>     /// @notice See Utils._performNetworkTrade for method details
>     function trade(
>     ^^^^^^^^^^^^^^^
>         address[] memory _assetIds,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        307
Source: 
>     /// @return An array of increments
>     function calculateTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        327
Source: 
>     /// @return An array of decrements
>     function calculateTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        346
Source: 
>     /// @return An array of increments
>     function calculateNetworkTradeIncrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        365
Source: 
>     /// @return An array of decrements
>     function calculateNetworkTradeDecrements(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        383
Source: 
>     /// @param _addresses Addresses from `trade`
>     function validateTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        429
Source: 
>     /// @param _operator Address of the `BrokerV2.operator`
>     function validateNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        462
Source: 
>     /// @param _marketDapps See `BrokerV2.marketDapps`
>     function performNetworkTrades(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        517
Source: 
>     /// @param _addresses The _addresses param from the cancel method
>     function validateCancel(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        548
Source: 
>     /// @return The hash of the offer
>     function hashOffer(
>     ^^^^^^^^^^^^^^^^^^^
>         uint256[] memory _values,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        573
Source: 
>     /// @param _amount The number of tokens to approve
>     function approveTokenTransfer(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _assetId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        603
Source: 
>     /// proportion burnt on transfer will have a different amount received.
>     function transferTokensIn(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _user,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        639
Source: 
>     /// @param _amount The number of tokens to transfer
>     function transferTokensOut(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _receivingAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        676
Source: 
>     /// @param _assetId The address of the token to query
>     function tokenBalance(address _assetId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return ERC20(_assetId).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        691
Source: 
>     /// EIP712 specification
>     function validateSignature(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _hash,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Utils
Line:        721
Source: 
>     /// @param _address The address to check
>     function validateAddress(address _address) public pure {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_address != address(0), "Invalid address");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        281
Source: 
> 
>     uint256 private constant mask8 = ~(~uint256(0) << 8);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask16 = ~(~uint256(0) << 16);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        282
Source: 
>     uint256 private constant mask8 = ~(~uint256(0) << 8);
>     uint256 private constant mask16 = ~(~uint256(0) << 16);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask24 = ~(~uint256(0) << 24);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        283
Source: 
>     uint256 private constant mask16 = ~(~uint256(0) << 16);
>     uint256 private constant mask24 = ~(~uint256(0) << 24);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask32 = ~(~uint256(0) << 32);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        284
Source: 
>     uint256 private constant mask24 = ~(~uint256(0) << 24);
>     uint256 private constant mask32 = ~(~uint256(0) << 32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask40 = ~(~uint256(0) << 40);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        285
Source: 
>     uint256 private constant mask32 = ~(~uint256(0) << 32);
>     uint256 private constant mask40 = ~(~uint256(0) << 40);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask48 = ~(~uint256(0) << 48);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        286
Source: 
>     uint256 private constant mask40 = ~(~uint256(0) << 40);
>     uint256 private constant mask48 = ~(~uint256(0) << 48);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask56 = ~(~uint256(0) << 56);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        287
Source: 
>     uint256 private constant mask48 = ~(~uint256(0) << 48);
>     uint256 private constant mask56 = ~(~uint256(0) << 56);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask120 = ~(~uint256(0) << 120);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        288
Source: 
>     uint256 private constant mask56 = ~(~uint256(0) << 56);
>     uint256 private constant mask120 = ~(~uint256(0) << 120);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask128 = ~(~uint256(0) << 128);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        289
Source: 
>     uint256 private constant mask120 = ~(~uint256(0) << 120);
>     uint256 private constant mask128 = ~(~uint256(0) << 128);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask136 = ~(~uint256(0) << 136);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        290
Source: 
>     uint256 private constant mask128 = ~(~uint256(0) << 128);
>     uint256 private constant mask136 = ~(~uint256(0) << 136);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask144 = ~(~uint256(0) << 144);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Utils
Line:        291
Source: 
>     uint256 private constant mask136 = ~(~uint256(0) << 136);
>     uint256 private constant mask144 = ~(~uint256(0) << 144);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        117
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ReentrancyGuard
Line:        133
Source: 
>     /// @dev counter to allow mutex lock with only one SSTORE operation
>     uint256 private _guardCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        238
Source: 
>     // ));
>     bytes32 public constant DOMAIN_SEPARATOR = 0x14f697e312cdba1c10a1eb5c87d96fa22b63aef9dc39592568387471319ea630;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        252
Source: 
>     // ));
>     bytes32 public constant OFFER_TYPEHASH = 0xf845c83a8f7964bc8dd1a092d28b83573b35be97630a5b8a3b8ae2ae79cd9260;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        261
Source: 
>     // ));
>     bytes32 public constant CANCEL_TYPEHASH = 0x46f6d088b1f0ff5a05c3f232c4567f2df96958e05457e6c0e1221dcee7d69c18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        275
Source: 
>     // ));
>     bytes32 public constant FILL_TYPEHASH = 0x5f59dbc3412a4575afed909d028055a91a4250ce92235f6790c155a4b2669e99;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        279
Source: 
>     // compatibility
>     address private constant ETHER_ADDR = address(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        281
Source: 
> 
>     uint256 private constant mask8 = ~(~uint256(0) << 8);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask16 = ~(~uint256(0) << 16);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        282
Source: 
>     uint256 private constant mask8 = ~(~uint256(0) << 8);
>     uint256 private constant mask16 = ~(~uint256(0) << 16);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask24 = ~(~uint256(0) << 24);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        283
Source: 
>     uint256 private constant mask16 = ~(~uint256(0) << 16);
>     uint256 private constant mask24 = ~(~uint256(0) << 24);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask32 = ~(~uint256(0) << 32);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        284
Source: 
>     uint256 private constant mask24 = ~(~uint256(0) << 24);
>     uint256 private constant mask32 = ~(~uint256(0) << 32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask40 = ~(~uint256(0) << 40);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        285
Source: 
>     uint256 private constant mask32 = ~(~uint256(0) << 32);
>     uint256 private constant mask40 = ~(~uint256(0) << 40);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask48 = ~(~uint256(0) << 48);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        286
Source: 
>     uint256 private constant mask40 = ~(~uint256(0) << 40);
>     uint256 private constant mask48 = ~(~uint256(0) << 48);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask56 = ~(~uint256(0) << 56);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        287
Source: 
>     uint256 private constant mask48 = ~(~uint256(0) << 48);
>     uint256 private constant mask56 = ~(~uint256(0) << 56);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask120 = ~(~uint256(0) << 120);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        288
Source: 
>     uint256 private constant mask56 = ~(~uint256(0) << 56);
>     uint256 private constant mask120 = ~(~uint256(0) << 120);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask128 = ~(~uint256(0) << 128);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        289
Source: 
>     uint256 private constant mask120 = ~(~uint256(0) << 120);
>     uint256 private constant mask128 = ~(~uint256(0) << 128);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask136 = ~(~uint256(0) << 136);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        290
Source: 
>     uint256 private constant mask128 = ~(~uint256(0) << 128);
>     uint256 private constant mask136 = ~(~uint256(0) << 136);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask144 = ~(~uint256(0) << 144);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        291
Source: 
>     uint256 private constant mask136 = ~(~uint256(0) << 136);
>     uint256 private constant mask144 = ~(~uint256(0) << 144);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ReentrancyGuard
Line:        133
Source: 
>     /// @dev counter to allow mutex lock with only one SSTORE operation
>     uint256 private _guardCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BrokerExtension
Line:        168
Source: 
> contract BrokerExtension is ReentrancyGuard {
>     Broker public broker;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        238
Source: 
>     // ));
>     bytes32 public constant DOMAIN_SEPARATOR = 0x14f697e312cdba1c10a1eb5c87d96fa22b63aef9dc39592568387471319ea630;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        252
Source: 
>     // ));
>     bytes32 public constant OFFER_TYPEHASH = 0xf845c83a8f7964bc8dd1a092d28b83573b35be97630a5b8a3b8ae2ae79cd9260;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        261
Source: 
>     // ));
>     bytes32 public constant CANCEL_TYPEHASH = 0x46f6d088b1f0ff5a05c3f232c4567f2df96958e05457e6c0e1221dcee7d69c18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        275
Source: 
>     // ));
>     bytes32 public constant FILL_TYPEHASH = 0x5f59dbc3412a4575afed909d028055a91a4250ce92235f6790c155a4b2669e99;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        279
Source: 
>     // compatibility
>     address private constant ETHER_ADDR = address(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        281
Source: 
> 
>     uint256 private constant mask8 = ~(~uint256(0) << 8);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask16 = ~(~uint256(0) << 16);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        282
Source: 
>     uint256 private constant mask8 = ~(~uint256(0) << 8);
>     uint256 private constant mask16 = ~(~uint256(0) << 16);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask24 = ~(~uint256(0) << 24);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        283
Source: 
>     uint256 private constant mask16 = ~(~uint256(0) << 16);
>     uint256 private constant mask24 = ~(~uint256(0) << 24);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask32 = ~(~uint256(0) << 32);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        284
Source: 
>     uint256 private constant mask24 = ~(~uint256(0) << 24);
>     uint256 private constant mask32 = ~(~uint256(0) << 32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask40 = ~(~uint256(0) << 40);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        285
Source: 
>     uint256 private constant mask32 = ~(~uint256(0) << 32);
>     uint256 private constant mask40 = ~(~uint256(0) << 40);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask48 = ~(~uint256(0) << 48);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        286
Source: 
>     uint256 private constant mask40 = ~(~uint256(0) << 40);
>     uint256 private constant mask48 = ~(~uint256(0) << 48);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask56 = ~(~uint256(0) << 56);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        287
Source: 
>     uint256 private constant mask48 = ~(~uint256(0) << 48);
>     uint256 private constant mask56 = ~(~uint256(0) << 56);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask120 = ~(~uint256(0) << 120);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        288
Source: 
>     uint256 private constant mask56 = ~(~uint256(0) << 56);
>     uint256 private constant mask120 = ~(~uint256(0) << 120);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask128 = ~(~uint256(0) << 128);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        289
Source: 
>     uint256 private constant mask120 = ~(~uint256(0) << 120);
>     uint256 private constant mask128 = ~(~uint256(0) << 128);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask136 = ~(~uint256(0) << 136);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        290
Source: 
>     uint256 private constant mask128 = ~(~uint256(0) << 128);
>     uint256 private constant mask136 = ~(~uint256(0) << 136);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask144 = ~(~uint256(0) << 144);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        291
Source: 
>     uint256 private constant mask136 = ~(~uint256(0) << 136);
>     uint256 private constant mask144 = ~(~uint256(0) << 144);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ReentrancyGuard
Line:        133
Source: 
>     /// @dev counter to allow mutex lock with only one SSTORE operation
>     uint256 private _guardCounter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BrokerExtension
Line:        168
Source: 
> contract BrokerExtension is ReentrancyGuard {
>     Broker public broker;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    KyberSwapDapp
Line:        1523
Source: 
> 
>     KyberNetworkProxy public kyberNetworkProxy;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address private constant ETHER_ADDR = address(0);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    KyberSwapDapp
Line:        1524
Source: 
>     KyberNetworkProxy public kyberNetworkProxy;
>     address private constant ETHER_ADDR = address(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address private constant KYBER_ETHER_ADDR = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    KyberSwapDapp
Line:        1525
Source: 
>     address private constant ETHER_ADDR = address(0);
>     address private constant KYBER_ETHER_ADDR = address(0x00eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        238
Source: 
>     // ));
>     bytes32 public constant DOMAIN_SEPARATOR = 0x14f697e312cdba1c10a1eb5c87d96fa22b63aef9dc39592568387471319ea630;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        252
Source: 
>     // ));
>     bytes32 public constant OFFER_TYPEHASH = 0xf845c83a8f7964bc8dd1a092d28b83573b35be97630a5b8a3b8ae2ae79cd9260;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        261
Source: 
>     // ));
>     bytes32 public constant CANCEL_TYPEHASH = 0x46f6d088b1f0ff5a05c3f232c4567f2df96958e05457e6c0e1221dcee7d69c18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        275
Source: 
>     // ));
>     bytes32 public constant FILL_TYPEHASH = 0x5f59dbc3412a4575afed909d028055a91a4250ce92235f6790c155a4b2669e99;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        279
Source: 
>     // compatibility
>     address private constant ETHER_ADDR = address(0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        281
Source: 
> 
>     uint256 private constant mask8 = ~(~uint256(0) << 8);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask16 = ~(~uint256(0) << 16);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        282
Source: 
>     uint256 private constant mask8 = ~(~uint256(0) << 8);
>     uint256 private constant mask16 = ~(~uint256(0) << 16);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask24 = ~(~uint256(0) << 24);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        283
Source: 
>     uint256 private constant mask16 = ~(~uint256(0) << 16);
>     uint256 private constant mask24 = ~(~uint256(0) << 24);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask32 = ~(~uint256(0) << 32);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        284
Source: 
>     uint256 private constant mask24 = ~(~uint256(0) << 24);
>     uint256 private constant mask32 = ~(~uint256(0) << 32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask40 = ~(~uint256(0) << 40);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        285
Source: 
>     uint256 private constant mask32 = ~(~uint256(0) << 32);
>     uint256 private constant mask40 = ~(~uint256(0) << 40);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask48 = ~(~uint256(0) << 48);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        286
Source: 
>     uint256 private constant mask40 = ~(~uint256(0) << 40);
>     uint256 private constant mask48 = ~(~uint256(0) << 48);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask56 = ~(~uint256(0) << 56);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        287
Source: 
>     uint256 private constant mask48 = ~(~uint256(0) << 48);
>     uint256 private constant mask56 = ~(~uint256(0) << 56);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask120 = ~(~uint256(0) << 120);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        288
Source: 
>     uint256 private constant mask56 = ~(~uint256(0) << 56);
>     uint256 private constant mask120 = ~(~uint256(0) << 120);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask128 = ~(~uint256(0) << 128);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        289
Source: 
>     uint256 private constant mask120 = ~(~uint256(0) << 120);
>     uint256 private constant mask128 = ~(~uint256(0) << 128);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask136 = ~(~uint256(0) << 136);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        290
Source: 
>     uint256 private constant mask128 = ~(~uint256(0) << 128);
>     uint256 private constant mask136 = ~(~uint256(0) << 136);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant mask144 = ~(~uint256(0) << 144);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Utils
Line:        291
Source: 
>     uint256 private constant mask136 = ~(~uint256(0) << 136);
>     uint256 private constant mask144 = ~(~uint256(0) << 144);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ReentrancyGuard
Line:        150
Source: 
>         _guardCounter += 1;
>         uint256 localCounter = _guardCounter;
>         ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    KyberSwapDapp
Line:        1584
Source: 
> 
>         kyberNetworkProxy.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             srcAssetId,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    KyberSwapDapp
Line:        1584
Source: 
> 
>         kyberNetworkProxy.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             srcAssetId,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BrokerExtension
Line:        176
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BrokerExtension
Line:        176
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    KyberSwapDapp
Line:        1584
Source: 
> 
>         kyberNetworkProxy.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             srcAssetId,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BrokerExtension
Line:        176
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    KyberSwapDapp
Line:        1584
Source: 
> 
>         kyberNetworkProxy.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             srcAssetId,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    BrokerExtension
Line:        176
Source: 
>     modifier onlyOwner() {
>         require(broker.owner() == msg.sender, "Invalid msg.sender");
>                 ^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    KyberSwapDapp
Line:        1584
Source: 
> 
>         kyberNetworkProxy.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             srcAssetId,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        1471
Source: 
> 
>         (success, returnData) = _contract.call(_payload);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Contract call failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        677
Source: 
>     function tokenBalance(address _assetId) public view returns (uint256) {
>         return ERC20(_assetId).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        996
Source: 
> 
>         marketDapp.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _assetIds,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Utils
Line:        988
Source: 
>         } else {
>             tokenReceiver = marketDapp.tokenReceiver(_assetIds, _dataValues, _addresses);
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             approveTokenTransfer(

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BrokerExtension
Line:        183
Source: 
>         require(address(broker) == address(0), "Broker already set");
>         broker = Broker(_brokerAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        149
Source: 
>     modifier nonReentrant() {
>         _guardCounter += 1;
>         ^^^^^^^^^^^^^^^^^^
>         uint256 localCounter = _guardCounter;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BrokerExtension
Line:        183
Source: 
>         require(address(broker) == address(0), "Broker already set");
>         broker = Broker(_brokerAddress);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    KyberSwapDapp
Line:        1584
Source: 
> 
>         kyberNetworkProxy.trade.value(ethValue)(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             srcAssetId,

[0m
