pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        340
Source: 
> 	// Token Contract
> 	IERC20 tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public noStakeReleaseAmount = 166666.67 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        341
Source: 
> 	IERC20 tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);
> 	uint256 public noStakeReleaseAmount = 166666.67 ether;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public stakeReleaseFirstBatchAmount = 83333.33 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        342
Source: 
> 	uint256 public noStakeReleaseAmount = 166666.67 ether;
> 	uint256 public stakeReleaseFirstBatchAmount = 83333.33 ether;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public stakeReleaseSecondBatchAmount = 87500 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        343
Source: 
> 	uint256 public stakeReleaseFirstBatchAmount = 83333.33 ether;
> 	uint256 public stakeReleaseSecondBatchAmount = 87500 ether;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        219
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        238
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        247
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        219
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        238
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        247
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        400
Source: 
> 
> 	function updateReceivingAddress(address payable _address) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		receivingAddress = _address;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        408
Source: 
> 
> 	function whitelistAddresses(address[] memory _addresses, bool[] memory _isStaking) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(status == ContractStatus.INIT);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        423
Source: 
> 
> 	function updateTicketSize(uint256 _amount) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(status == ContractStatus.INIT);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        429
Source: 
> 
> 	function acceptDeposit() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(status == ContractStatus.INIT);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        456
Source: 
> 
> 	function refund(address payable _address) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(whitelist[_address].hasDeposited);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        466
Source: 
> 
> 	function refundMultiple(address payable[] memory _addresses) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < _addresses.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        478
Source: 
> 
> 	function releaseFirstBatchTokens(uint256 _count) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(status == ContractStatus.ACCEPT_DEPOSIT);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        512
Source: 
> 
>     function releaseSecondBatchTokens(uint256 _count) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(status == ContractStatus.FIRST_BATCH_TOKEN_RELEASED);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        533
Source: 
> 
> 	function withdrawTokens() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(status == ContractStatus.SECOND_BATCH_TOKEN_RELEASED);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        500
Source: 
> 			if (dIndex == depositAddresses.length) {
> 				receivingAddress.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				stakeStart = block.timestamp;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        536
Source: 
> 
> 		tokenContract.transfer(receivingAddress, tokenContract.balanceOf(address(this)));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        536
Source: 
> 
> 		tokenContract.transfer(receivingAddress, tokenContract.balanceOf(address(this)));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        485
Source: 
> 					// Is staking
> 					tokenContract.transfer(depositAddresses[dIndex], stakeReleaseFirstBatchAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 					secondBatchAddresses.push(depositAddresses[dIndex]);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        491
Source: 
> 					// Not staking
> 					tokenContract.transfer(depositAddresses[dIndex], noStakeReleaseAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        517
Source: 
> 		for (uint256 i = 0; i < _count; i++) {
> 			tokenContract.transfer(secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit TokenReleased(block.timestamp, secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);

[0m
[0;35mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Conflict
Contract:    PublicSaleWaitlistContract
Line:        470
Source: 
> 				delete whitelist[_addresses[i]];
> 				_addresses[i].transfer(ticketSize);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				depositCount = depositCount.sub(1);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        400
Source: 
> 
> 	function updateReceivingAddress(address payable _address) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		receivingAddress = _address;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        423
Source: 
> 
> 	function updateTicketSize(uint256 _amount) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(status == ContractStatus.INIT);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        408
Source: 
> 
> 	function whitelistAddresses(address[] memory _addresses, bool[] memory _isStaking) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(status == ContractStatus.INIT);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        485
Source: 
> 					// Is staking
> 					tokenContract.transfer(depositAddresses[dIndex], stakeReleaseFirstBatchAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 					secondBatchAddresses.push(depositAddresses[dIndex]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        491
Source: 
> 					// Not staking
> 					tokenContract.transfer(depositAddresses[dIndex], noStakeReleaseAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        517
Source: 
> 		for (uint256 i = 0; i < _count; i++) {
> 			tokenContract.transfer(secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit TokenReleased(block.timestamp, secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        448
Source: 
> 
> 		msg.sender.transfer(msg.value.sub(ticketSize));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		whitelist[msg.sender].hasDeposited = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        500
Source: 
> 			if (dIndex == depositAddresses.length) {
> 				receivingAddress.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				stakeStart = block.timestamp;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        391
Source: 
> 	// Duration of stake
> 	uint256 constant stakeDuration = 30 days;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        340
Source: 
> 	// Token Contract
> 	IERC20 tokenContract = IERC20(0x03042482d64577A7bdb282260e2eA4c8a89C064B);
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 public noStakeReleaseAmount = 166666.67 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        346
Source: 
> 	// Receiving Address
> 	address payable receivingAddress = 0x6359EAdBB84C8f7683E26F392A1573Ab6a37B4b4;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        360
Source: 
> 	// Whitelist
> 	mapping(address => WhitelistDetail) whitelist;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        377
Source: 
> 	// Addresses that deposited
> 	address[] depositAddresses;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 dIndex = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        378
Source: 
> 	address[] depositAddresses;
> 	uint256 dIndex = 0;
>  ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        381
Source: 
> 	// Addresses for second batch release
> 	address[] secondBatchAddresses;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	uint256 sIndex = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        382
Source: 
> 	address[] secondBatchAddresses;
> 	uint256 sIndex = 0;
>  ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        391
Source: 
> 	// Duration of stake
> 	uint256 constant stakeDuration = 30 days;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        448
Source: 
> 
> 		msg.sender.transfer(msg.value.sub(ticketSize));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		whitelist[msg.sender].hasDeposited = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        460
Source: 
> 		delete whitelist[_address];
> 		_address.transfer(ticketSize);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		depositCount = depositCount.sub(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        470
Source: 
> 				delete whitelist[_addresses[i]];
> 				_addresses[i].transfer(ticketSize);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				depositCount = depositCount.sub(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        500
Source: 
> 			if (dIndex == depositAddresses.length) {
> 				receivingAddress.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				stakeStart = block.timestamp;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        460
Source: 
> 		delete whitelist[_address];
> 		_address.transfer(ticketSize);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		depositCount = depositCount.sub(1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        470
Source: 
> 				delete whitelist[_addresses[i]];
> 				_addresses[i].transfer(ticketSize);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				depositCount = depositCount.sub(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        500
Source: 
> 			if (dIndex == depositAddresses.length) {
> 				receivingAddress.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				stakeStart = block.timestamp;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        448
Source: 
> 
> 		msg.sender.transfer(msg.value.sub(ticketSize));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		whitelist[msg.sender].hasDeposited = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        460
Source: 
> 		delete whitelist[_address];
> 		_address.transfer(ticketSize);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		depositCount = depositCount.sub(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        470
Source: 
> 				delete whitelist[_addresses[i]];
> 				_addresses[i].transfer(ticketSize);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				depositCount = depositCount.sub(1);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        500
Source: 
> 			if (dIndex == depositAddresses.length) {
> 				receivingAddress.transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				stakeStart = block.timestamp;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        485
Source: 
> 					// Is staking
> 					tokenContract.transfer(depositAddresses[dIndex], stakeReleaseFirstBatchAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 					secondBatchAddresses.push(depositAddresses[dIndex]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        491
Source: 
> 					// Not staking
> 					tokenContract.transfer(depositAddresses[dIndex], noStakeReleaseAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        517
Source: 
> 		for (uint256 i = 0; i < _count; i++) {
> 			tokenContract.transfer(secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit TokenReleased(block.timestamp, secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        536
Source: 
> 
> 		tokenContract.transfer(receivingAddress, tokenContract.balanceOf(address(this)));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        536
Source: 
> 
> 		tokenContract.transfer(receivingAddress, tokenContract.balanceOf(address(this)));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PublicSaleWaitlistContract
Line:        394
Source: 
> 	// Time that staking starts
> 	uint256 public stakeStart;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        485
Source: 
> 					// Is staking
> 					tokenContract.transfer(depositAddresses[dIndex], stakeReleaseFirstBatchAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 					secondBatchAddresses.push(depositAddresses[dIndex]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        491
Source: 
> 					// Not staking
> 					tokenContract.transfer(depositAddresses[dIndex], noStakeReleaseAmount);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        517
Source: 
> 		for (uint256 i = 0; i < _count; i++) {
> 			tokenContract.transfer(secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit TokenReleased(block.timestamp, secondBatchAddresses[sIndex], stakeReleaseSecondBatchAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PublicSaleWaitlistContract
Line:        536
Source: 
> 
> 		tokenContract.transfer(receivingAddress, tokenContract.balanceOf(address(this)));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    PublicSaleWaitlistContract
Line:        501
Source: 
> 				receivingAddress.transfer(address(this).balance);
> 				stakeStart = block.timestamp;
>                  ^^^^^^^^^^^^^^^
> 				status = ContractStatus.FIRST_BATCH_TOKEN_RELEASED;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    PublicSaleWaitlistContract
Line:        514
Source: 
> 		require(status == ContractStatus.FIRST_BATCH_TOKEN_RELEASED);
> 		require(block.timestamp > (stakeStart + stakeDuration));
>           ^^^^^^^^^^^^^^^
> 

[0m
