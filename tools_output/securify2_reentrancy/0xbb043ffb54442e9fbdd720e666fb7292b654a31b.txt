pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        42
Source: 
> 
>     function setOwner(address owner_)
>                          ^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        50
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        42
Source: 
> 
>     function setOwner(address owner_)
>                          ^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        50
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ChainLogConnector
Line:        97
Source: 
> 
>     function setCat() public {
>                          ^^^^^
>         require(vat.wards(cat) == 0, "cat-did-not-change");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ChainLogConnector
Line:        114
Source: 
>     // this does not suppose to happen, but just in case
>     function upgradeChainLog() public auth {
>                          ^^^^^^^^^^^^^^^^^^^
>         address newChainLog = chainLog.getAddress("CHANGELOG");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    ChainLogConnector
Line:        101
Source: 
>         address val;
>         (bool catExist,) = address(chainLog).call(abi.encodeWithSignature("getAddress(bytes32)", bytes32("MCD_CAT")));
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(catExist) val = chainLog.getAddress("MCD_CAT");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        42
Source: 
> 
>     function setOwner(address owner_)
>                          ^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        50
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        42
Source: 
> 
>     function setOwner(address owner_)
>                          ^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        50
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ChainLogConnector
Line:        98
Source: 
>     function setCat() public {
>         require(vat.wards(cat) == 0, "cat-did-not-change");
>                                      ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ChainLogConnector
Line:        101
Source: 
>         address val;
>         (bool catExist,) = address(chainLog).call(abi.encodeWithSignature("getAddress(bytes32)", bytes32("MCD_CAT")));
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(catExist) val = chainLog.getAddress("MCD_CAT");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ChainLogConnector
Line:        102
Source: 
>         (bool catExist,) = address(chainLog).call(abi.encodeWithSignature("getAddress(bytes32)", bytes32("MCD_CAT")));
>         if(catExist) val = chainLog.getAddress("MCD_CAT");
>                                                 ^^^^^^^^^^
>         if(! catExist || val == address(0x0)) val = chainLog.getAddress("MCD_DOG");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ChainLogConnector
Line:        103
Source: 
>         if(catExist) val = chainLog.getAddress("MCD_CAT");
>         if(! catExist || val == address(0x0)) val = chainLog.getAddress("MCD_DOG");
>                                                                          ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ChainLogConnector
Line:        106
Source: 
>         require(val != address(0), "zero-val");
>         require(vat.wards(val) == 1, "new-cat-is-not-authorized");
>                                      ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ChainLogConnector
Line:        101
Source: 
>         address val;
>         (bool catExist,) = address(chainLog).call(abi.encodeWithSignature("getAddress(bytes32)", bytes32("MCD_CAT")));
>                               ^^^^^^^^^^^^^
>         if(catExist) val = chainLog.getAddress("MCD_CAT");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSAuth
Line:        34
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>                          ^^^^^^^^^^
>     address      public  owner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DSAuth
Line:        35
Source: 
>     DSAuthority  public  authority;
>     address      public  owner;
>                          ^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ChainLogConnector
Line:        86
Source: 
>     VatLike public vat;
>     ChainLogLike public chainLog;
>  ^^^^^^^^^^^^^^^^^^
>     address public cat;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ChainLogConnector
Line:        89
Source: 
> 
>     constructor(address vat_, address chainLog_) public {
> ^^^^^^^^^^^^^^^^^^
>         vat = VatLike(vat_);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DSAuth
Line:        71
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                                         ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainLogConnector
Line:        98
Source: 
>     function setCat() public {
>         require(vat.wards(cat) == 0, "cat-did-not-change");
>                                      ^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainLogConnector
Line:        102
Source: 
>         (bool catExist,) = address(chainLog).call(abi.encodeWithSignature("getAddress(bytes32)", bytes32("MCD_CAT")));
>         if(catExist) val = chainLog.getAddress("MCD_CAT");
>                                                 ^^^^^^^^^^
>         if(! catExist || val == address(0x0)) val = chainLog.getAddress("MCD_DOG");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainLogConnector
Line:        103
Source: 
>         if(catExist) val = chainLog.getAddress("MCD_CAT");
>         if(! catExist || val == address(0x0)) val = chainLog.getAddress("MCD_DOG");
>                                                                          ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ChainLogConnector
Line:        106
Source: 
>         require(val != address(0), "zero-val");
>         require(vat.wards(val) == 1, "new-cat-is-not-authorized");
>                                      ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ChainLogConnector
Line:        115
Source: 
>     function upgradeChainLog() public auth {
>         address newChainLog = chainLog.getAddress("CHANGELOG");
>                                                    ^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        34
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>                          ^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ChainLogConnector
Line:        89
Source: 
> 
>     constructor(address vat_, address chainLog_) public {
> ^^^^^^^^^^^^^^^^^^
>         vat = VatLike(vat_);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        47
Source: 
>         owner = owner_;
>         emit LogSetOwner(owner);
>      ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        54
Source: 
>     {
>         authority = authority_;
>                              ^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        47
Source: 
>         owner = owner_;
>         emit LogSetOwner(owner);
>      ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        54
Source: 
>     {
>         authority = authority_;
>                              ^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ChainLogConnector
Line:        117
Source: 
> 
>         chainLog = ChainLogLike(newChainLog);
>                              ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ChainLogConnector
Line:        110
Source: 
> 
>         emit NewCat(val);
>          ^^^^^^^^^
>     }

[0m
