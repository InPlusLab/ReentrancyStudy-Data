Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ETHRUN
Line:        293
Source: 
>     }
> }


[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETHRUN
Line:        55
Source: 
>         LEVEL_PRICE[1] = 0.10 ether;
>         LEVEL_PRICE[2] = 0.20 ether;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[3] = 0.40 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETHRUN
Line:        56
Source: 
>         LEVEL_PRICE[2] = 0.20 ether;
>         LEVEL_PRICE[3] = 0.40 ether;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[4] = 0.80 ether;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHRUN
Line:        183
Source: 
> 
>                     for(uint j = 1; j <= 8; j++) {
>                                             ^^^^^^
>                         users[user].levelExpired[j] = oldSC.viewUserLevelExpired(user, j);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHRUN
Line:        293
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                    

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETHRUN
Line:        293
Source: 
>     }
> }


[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ETHRUN
Line:        263
Source: 
>             if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {
>                 if(i < 62) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>                     referrals[(i+1)*2] = users[referrals[i]].referral[0];

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ETHRUN
Line:        190
Source: 
>             }
>             else break;
>                     ^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ETHRUN
Line:        195
Source: 
>     function syncClose() external {
>         require(address(oldSC) != address(0), 'Initialize already closed');
>                ^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, 'Access denied');

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ETHRUN
Line:        198
Source: 
> 
>         oldSC = ETHRUN(0);
>    ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ETHRUN
Line:        213
Source: 
>             referer1 = userList[users[_user].referrerID];
>             referer = userList[users[referer1].referrerID];
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHRUN
Line:        293
Source: 
>     }
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                    

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETHRUN
Line:        293
Source: 
>     }
> }


[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETHRUN
Line:        190
Source: 
>             }
>             else break;
>                     ^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETHRUN
Line:        195
Source: 
>     function syncClose() external {
>         require(address(oldSC) != address(0), 'Initialize already closed');
>                ^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, 'Access denied');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETHRUN
Line:        198
Source: 
> 
>         oldSC = ETHRUN(0);
>    ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ETHRUN
Line:        213
Source: 
>             referer1 = userList[users[_user].referrerID];
>             referer = userList[users[referer1].referrerID];
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        55
Source: 
>         LEVEL_PRICE[1] = 0.10 ether;
>         LEVEL_PRICE[2] = 0.20 ether;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[3] = 0.40 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        56
Source: 
>         LEVEL_PRICE[2] = 0.20 ether;
>         LEVEL_PRICE[3] = 0.40 ether;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[4] = 0.80 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        57
Source: 
>         LEVEL_PRICE[3] = 0.40 ether;
>         LEVEL_PRICE[4] = 0.80 ether;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[5] = 1.60 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        62
Source: 
>         LEVEL_PRICE[8] = 12.80 ether;
>         LEVEL_PRICE[9] = 25.60 ether;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[10] = 51.20 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        65
Source: 
> 
>         UserStruct memory userStruct;
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currUserID++;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        68
Source: 
> 
>         userStruct = UserStruct({
>                    ^^^^^^^^^^^^^^
>             isExist: true,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        71
Source: 
>             id: currUserID,
>             referrerID: 0,
>         ^^^^^^^^^^^^^^^^^^
>             referral: new address[](0)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        74
Source: 
>         });
>         users[ownerWallet] = userStruct;
>                                     ^^^^
>         userList[currUserID] = ownerWallet;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        173
Source: 
>                 
>                 address ref = oldSC.userList(referrerID);
>   ^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETHRUN
Line:        194
Source: 
> 
>     function syncClose() external {
>                   ^^^^^^^^^^^^
>         require(address(oldSC) != address(0), 'Initialize already closed');

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        48
Source: 
>     event prolongateLevelEvent(address indexed _user, uint _level, uint _time);
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        48
Source: 
>     event prolongateLevelEvent(address indexed _user, uint _level, uint _time);
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^
>     event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        49
Source: 
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>     event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>                                                       ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        55
Source: 
>         LEVEL_PRICE[1] = 0.10 ether;
>         LEVEL_PRICE[2] = 0.20 ether;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[3] = 0.40 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        56
Source: 
>         LEVEL_PRICE[2] = 0.20 ether;
>         LEVEL_PRICE[3] = 0.40 ether;
>            ^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[4] = 0.80 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        57
Source: 
>         LEVEL_PRICE[3] = 0.40 ether;
>         LEVEL_PRICE[4] = 0.80 ether;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[5] = 1.60 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        58
Source: 
>         LEVEL_PRICE[4] = 0.80 ether;
>         LEVEL_PRICE[5] = 1.60 ether;
>                      ^^^^^^^^^^^^^^^
>         LEVEL_PRICE[6] = 3.20 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        59
Source: 
>         LEVEL_PRICE[5] = 1.60 ether;
>         LEVEL_PRICE[6] = 3.20 ether;
>                                   ^^
>         LEVEL_PRICE[7] = 6.40 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ETHRUN
Line:        61
Source: 
>         LEVEL_PRICE[7] = 6.40 ether;
>         LEVEL_PRICE[8] = 12.80 ether;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         LEVEL_PRICE[9] = 25.60 ether;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHRUN
Line:        263
Source: 
>             if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {
>                 if(i < 62) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>                     referrals[(i+1)*2] = users[referrals[i]].referral[0];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETHRUN
Line:        263
Source: 
>             if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {
>                 if(i < 62) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>                     referrals[(i+1)*2] = users[referrals[i]].referral[0];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETHRUN
Line:        263
Source: 
>             if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {
>                 if(i < 62) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>                     referrals[(i+1)*2] = users[referrals[i]].referral[0];

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETHRUN
Line:        190
Source: 
>             }
>             else break;
>                     ^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETHRUN
Line:        195
Source: 
>     function syncClose() external {
>         require(address(oldSC) != address(0), 'Initialize already closed');
>                ^^^^^^^^^^^^^^^^^
>         require(msg.sender == ownerWallet, 'Access denied');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ETHRUN
Line:        198
Source: 
> 
>         oldSC = ETHRUN(0);
>    ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ETHRUN
Line:        213
Source: 
>             referer1 = userList[users[_user].referrerID];
>             referer = userList[users[referer1].referrerID];
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ETHRUN
Line:        263
Source: 
>             if(users[referrals[i]].referral.length == REFERRER_1_LEVEL_LIMIT) {
>                 if(i < 62) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>                     referrals[(i+1)*2] = users[referrals[i]].referral[0];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ETHRUN
Line:        213
Source: 
>             referer1 = userList[users[_user].referrerID];
>             referer = userList[users[referer1].referrerID];
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
