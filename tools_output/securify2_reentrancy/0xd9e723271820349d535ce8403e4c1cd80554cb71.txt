[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnershipUnsafe(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>     /// @dev  Become effective owner (if dedicated so by previous owner)
>     function claimOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "Restricted to new owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnershipUnsafe(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>     /// @dev  Become effective owner (if dedicated so by previous owner)
>     function claimOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "Restricted to new owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Whitelist
Line:        120
Source: 
>     /// @param _admin An Ethereum address
>     function addAdmin(address _admin) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_admin != address(0x0), "Whitelist admin is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Whitelist
Line:        132
Source: 
>     /// @param _admin An Ethereum address
>     function removeAdmin(address _admin) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_admin != address(0x0), "Whitelist admin is zero");  // Necessary?

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnershipUnsafe(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>     /// @dev  Become effective owner (if dedicated so by previous owner)
>     function claimOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "Restricted to new owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnershipUnsafe(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>     /// @dev  Become effective owner (if dedicated so by previous owner)
>     function claimOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "Restricted to new owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ProfitSharing
Line:        520
Source: 
>     /// @dev Withdraw profit share
>     function withdrawProfitShare() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _withdrawProfitShare(msg.sender, msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ProfitSharing
Line:        524
Source: 
> 
>     function withdrawProfitShareTo(address payable _beneficiary) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _withdrawProfitShare(msg.sender, _beneficiary);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnershipUnsafe(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>     /// @dev  Become effective owner (if dedicated so by previous owner)
>     function claimOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "Restricted to new owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ProfitSharing
Line:        520
Source: 
>     /// @dev Withdraw profit share
>     function withdrawProfitShare() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _withdrawProfitShare(msg.sender, msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ProfitSharing
Line:        524
Source: 
> 
>     function withdrawProfitShareTo(address payable _beneficiary) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _withdrawProfitShare(msg.sender, _beneficiary);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        592
Source: 
>     /// @param _minter Ethereum address of minter authority
>     function setMinter(address _minter) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(minter == address(0x0), "Minter has already been set");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        602
Source: 
>     /// @param _amount The amount of minted token units
>     function mint(address _to, uint _amount) public onlyMinter canMint onlyWhitelisted(_to) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (accounts[_to].balance == 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        615
Source: 
>     /// @dev Finish minting -- this should be irreversible
>     function finishMinting() public onlyMinter canMint {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalSupplyIsFixed = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        665
Source: 
>     /// @dev  Self destruct can only be called by crowdsale contract in case the goal wasn't reached
>     function destruct() public onlyMinter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TokenDestroyed();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        673
Source: 
>     /// @param _newAddress  address of new account
>     function recoverToken(address _oldAddress, address _newAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        695
Source: 
>     /// @return  Token amount
>     function totalSupply() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        702
Source: 
>     /// @return           Token amount
>     function balanceOf(address _investor) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return accounts[_investor].balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        710
Source: 
>     /// @return           Allowed token amount
>     function allowance(address _investor, address _spender) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowance_[_investor][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        719
Source: 
>     /// @return          Always true
>     function approve(address _spender, uint _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _approve(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        728
Source: 
>     /// @return          Always true
>     function increaseAllowance(address _spender, uint _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(allowance_[msg.sender][_spender] + _amount >= _amount, "Allowance overflow");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        739
Source: 
>     /// @return          Always true
>     function decreaseAllowance(address _spender, uint _amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= allowance_[msg.sender][_spender], "Amount exceeds allowance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        767
Source: 
>     /// @return          True iff a transfer with given pramaters would succeed
>     function canTransferFrom(address _spender, address _from, address _to, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view returns (bool)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        778
Source: 
>     /// @return        Always true
>     function transfer(address _to, uint _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _transfer(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrToken
Line:        788
Source: 
>     /// @return        Always true
>     function transferFrom(address _from, address _to, uint _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= allowance_[_from][msg.sender], "Amount exceeds allowance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnershipUnsafe(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>     /// @dev  Become effective owner (if dedicated so by previous owner)
>     function claimOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "Restricted to new owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1035
Source: 
>     /// @param amounts List of token units each recipient will receive
>     function distributeTokensViaPublicSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1049
Source: 
>     /// @param amounts List of token units each recipient will receive
>     function distributeTokensViaPrivateSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1073
Source: 
>     /// @return Time in seconds until sale gets closed, or 0 if sale was closed
>     function timeRemaining() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (hasClosed()) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1121
Source: 
>     /// @param _newOpeningTime new openingTime of the crowdsale
>     function changeOpeningTime(uint _newOpeningTime) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now < openingTime, "Sale has started already");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1136
Source: 
>     /// @param _newClosingTime new closingTime of the crowdsale
>     function changeClosingTime(uint _newClosingTime) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!hasClosed(), "Sale has already ended");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1148
Source: 
>     /// @dev Finalize, i.e. end token minting phase and enable token transfers
>     function finalize() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!isFinalized, "Sale has already been finalized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        42
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnership(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        52
Source: 
>     /// @param _newOwner  Ethereum address to transfer ownership to
>     function transferOwnershipUnsafe(address _newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_newOwner != address(0x0), "New owner is zero");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        59
Source: 
>     /// @dev  Become effective owner (if dedicated so by previous owner)
>     function claimOwnership() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == newOwner, "Restricted to new owner");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1073
Source: 
>     /// @return Time in seconds until sale gets closed, or 0 if sale was closed
>     function timeRemaining() public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (hasClosed()) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1121
Source: 
>     /// @param _newOpeningTime new openingTime of the crowdsale
>     function changeOpeningTime(uint _newOpeningTime) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now < openingTime, "Sale has started already");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintingCrowdsale
Line:        1136
Source: 
>     /// @param _newClosingTime new closingTime of the crowdsale
>     function changeClosingTime(uint _newClosingTime) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!hasClosed(), "Sale has already ended");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrCrowdsale
Line:        1295
Source: 
>     /// @dev Investors can claim refunds here if crowdsale was unsuccessful
>     function claimRefund() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         refundInvestor(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrCrowdsale
Line:        1300
Source: 
>     /// @dev Overwritten. Kill the token if goal was missed
>     function finalize() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         super.finalize();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrCrowdsale
Line:        1308
Source: 
> 
>     function distributeTokensViaPublicSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StokrCrowdsale
Line:        1320
Source: 
> 
>     function distributeTokensViaPrivateSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ProfitSharing
Line:        545
Source: 
>         accounts[_investor].profitShare = 0;
>         _beneficiary.transfer(withdrawnProfitShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Whitelisted
Line:        188
Source: 
>     modifier onlyWhitelisted(address _address) {
>         require(whitelist.isWhitelisted(_address), "Address is not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StokrToken
Line:        757
Source: 
>             && _value <= accounts[_from].balance
>             && whitelist.isWhitelisted(_from)
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             && whitelist.isWhitelisted(_to);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StokrToken
Line:        758
Source: 
>             && whitelist.isWhitelisted(_from)
>             && whitelist.isWhitelisted(_to);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Whitelisted
Line:        188
Source: 
>     modifier onlyWhitelisted(address _address) {
>         require(whitelist.isWhitelisted(_address), "Address is not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1092
Source: 
> 
>         uint etherRate = rateSource.etherRate();
>                          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1113
Source: 
> 
>         token.mint(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         forwardFunds();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1196
Source: 
>     function forwardFunds() internal {
>         companyWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1153
Source: 
>         if (tokenReservePerMill > 0) {
>             token.mint(reserveAccount, tokenSold().mul(tokenReservePerMill).div(1000));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1155
Source: 
>         }
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         isFinalized = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1092
Source: 
> 
>         uint etherRate = rateSource.etherRate();
>                          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1113
Source: 
> 
>         token.mint(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         forwardFunds();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1196
Source: 
>     function forwardFunds() internal {
>         companyWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1153
Source: 
>         if (tokenReservePerMill > 0) {
>             token.mint(reserveAccount, tokenSold().mul(tokenReservePerMill).div(1000));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1155
Source: 
>         }
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         isFinalized = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1352
Source: 
>             investments[_investor] = 0;
>             _investor.transfer(investment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1304
Source: 
>         if (!goalReached()) {
>             StokrToken(address(token)).destruct();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1186
Source: 
>             tokenRemaining = tokenRemaining.sub(amount);
>             token.mint(beneficiary, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProfitSharing
Line:        495
Source: 
>     /// @return A positive number
>     function profitShareOwing(address _investor) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!totalSupplyIsFixed || totalSupply_ == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProfitSharing
Line:        510
Source: 
>     /// @param _investor An Ethereum address
>     function updateProfitShare(address _investor) public onlyWhenTotalSupplyIsFixed {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint newProfitShare = profitShareOwing(_investor);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProfitSharing
Line:        529
Source: 
>     /// @dev Withdraw profit share
>     function withdrawProfitShares(address payable[] calldata _investors)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProfitSharing
Line:        495
Source: 
>     /// @return A positive number
>     function profitShareOwing(address _investor) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!totalSupplyIsFixed || totalSupply_ == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProfitSharing
Line:        510
Source: 
>     /// @param _investor An Ethereum address
>     function updateProfitShare(address _investor) public onlyWhenTotalSupplyIsFixed {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint newProfitShare = profitShareOwing(_investor);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ProfitSharing
Line:        529
Source: 
>     /// @dev Withdraw profit share
>     function withdrawProfitShares(address payable[] calldata _investors)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintableToken
Line:        602
Source: 
>     /// @param _amount The amount of minted token units
>     function mint(address _to, uint _amount) public onlyMinter canMint onlyWhitelisted(_to) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (accounts[_to].balance == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StokrToken
Line:        673
Source: 
>     /// @param _newAddress  address of new account
>     function recoverToken(address _oldAddress, address _newAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StokrToken
Line:        778
Source: 
>     /// @return        Always true
>     function transfer(address _to, uint _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _transfer(msg.sender, _to, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StokrToken
Line:        788
Source: 
>     /// @return        Always true
>     function transferFrom(address _from, address _to, uint _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= allowance_[_from][msg.sender], "Amount exceeds allowance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1035
Source: 
>     /// @param amounts List of token units each recipient will receive
>     function distributeTokensViaPublicSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1049
Source: 
>     /// @param amounts List of token units each recipient will receive
>     function distributeTokensViaPrivateSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1035
Source: 
>     /// @param amounts List of token units each recipient will receive
>     function distributeTokensViaPublicSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1049
Source: 
>     /// @param amounts List of token units each recipient will receive
>     function distributeTokensViaPrivateSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1308
Source: 
> 
>     function distributeTokensViaPublicSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1320
Source: 
> 
>     function distributeTokensViaPrivateSale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory beneficiaries,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ProfitSharing
Line:        524
Source: 
> 
>     function withdrawProfitShareTo(address payable _beneficiary) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _withdrawProfitShare(msg.sender, _beneficiary);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StokrToken
Line:        702
Source: 
>     /// @return           Token amount
>     function balanceOf(address _investor) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return accounts[_investor].balance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StokrToken
Line:        710
Source: 
>     /// @return           Allowed token amount
>     function allowance(address _investor, address _spender) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowance_[_investor][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StokrToken
Line:        719
Source: 
>     /// @return          Always true
>     function approve(address _spender, uint _value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _approve(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StokrToken
Line:        750
Source: 
>     /// @return        True iff a transfer with given pramaters would succeed
>     function canTransfer(address _from, address _to, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view returns (bool)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StokrToken
Line:        767
Source: 
>     /// @return          True iff a transfer with given pramaters would succeed
>     function canTransferFrom(address _spender, address _from, address _to, uint _value)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view returns (bool)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StokrCrowdsaleFactory
Line:        1371
Source: 
> 
>     function createNewCrowdsale(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         StokrToken token,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        318
Source: 
> 
>         uint c = a * b;
>                  ^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MintingCrowdsale
Line:        1092
Source: 
> 
>         uint etherRate = rateSource.etherRate();
>                          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MintingCrowdsale
Line:        1113
Source: 
> 
>         token.mint(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         forwardFunds();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MintingCrowdsale
Line:        1153
Source: 
>         if (tokenReservePerMill > 0) {
>             token.mint(reserveAccount, tokenSold().mul(tokenReservePerMill).div(1000));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MintingCrowdsale
Line:        1155
Source: 
>         }
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         isFinalized = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MintingCrowdsale
Line:        1092
Source: 
> 
>         uint etherRate = rateSource.etherRate();
>                          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MintingCrowdsale
Line:        1113
Source: 
> 
>         token.mint(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         forwardFunds();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MintingCrowdsale
Line:        1153
Source: 
>         if (tokenReservePerMill > 0) {
>             token.mint(reserveAccount, tokenSold().mul(tokenReservePerMill).div(1000));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MintingCrowdsale
Line:        1155
Source: 
>         }
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         isFinalized = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    ProfitSharing
Line:        545
Source: 
>         accounts[_investor].profitShare = 0;
>         _beneficiary.transfer(withdrawnProfitShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1352
Source: 
>             investments[_investor] = 0;
>             _investor.transfer(investment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StokrToken
Line:        637
Source: 
>     string public symbol;
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1125
Source: 
> 
>         uint _newClosingTime = _newOpeningTime + (closingTime - openingTime);
>         ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Whitelisted
Line:        187
Source: 
>     /// @dev Ensure only whitelisted addresses can call
>     modifier onlyWhitelisted(address _address) {
>                              ^^^^^^^^^^^^^^^^
>         require(whitelist.isWhitelisted(_address), "Address is not whitelisted");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MintingCrowdsale
Line:        871
Source: 
>     // Maximum Time of offering period after extension
>     uint constant MAXOFFERINGPERIOD = 183 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ProfitSharing
Line:        545
Source: 
>         accounts[_investor].profitShare = 0;
>         _beneficiary.transfer(withdrawnProfitShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1196
Source: 
>     function forwardFunds() internal {
>         companyWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    StokrCrowdsale
Line:        1352
Source: 
>             investments[_investor] = 0;
>             _investor.transfer(investment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    ProfitSharing
Line:        545
Source: 
>         accounts[_investor].profitShare = 0;
>         _beneficiary.transfer(withdrawnProfitShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1196
Source: 
>     function forwardFunds() internal {
>         companyWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1352
Source: 
>             investments[_investor] = 0;
>             _investor.transfer(investment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ProfitSharing
Line:        545
Source: 
>         accounts[_investor].profitShare = 0;
>         _beneficiary.transfer(withdrawnProfitShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1196
Source: 
>     function forwardFunds() internal {
>         companyWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    StokrCrowdsale
Line:        1352
Source: 
>             investments[_investor] = 0;
>             _investor.transfer(investment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Whitelisted
Line:        188
Source: 
>     modifier onlyWhitelisted(address _address) {
>         require(whitelist.isWhitelisted(_address), "Address is not whitelisted");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MintingCrowdsale
Line:        978
Source: 
>         require(address(_token) != address(0x0), "Token address is zero");
>         require(_token.minter() == address(0x0), "Token has another minter");
>                 ^^^^^^^^^^^^^^^
>         require(_tokenCapOfPublicSale > 0, "Cap of public sale is zero");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1092
Source: 
> 
>         uint etherRate = rateSource.etherRate();
>                          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MintingCrowdsale
Line:        978
Source: 
>         require(address(_token) != address(0x0), "Token address is zero");
>         require(_token.minter() == address(0x0), "Token has another minter");
>                 ^^^^^^^^^^^^^^^
>         require(_tokenCapOfPublicSale > 0, "Cap of public sale is zero");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1092
Source: 
> 
>         uint etherRate = rateSource.etherRate();
>                          ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StokrToken
Line:        757
Source: 
>             && _value <= accounts[_from].balance
>             && whitelist.isWhitelisted(_from)
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             && whitelist.isWhitelisted(_to);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StokrToken
Line:        758
Source: 
>             && whitelist.isWhitelisted(_from)
>             && whitelist.isWhitelisted(_to);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1113
Source: 
> 
>         token.mint(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         forwardFunds();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1186
Source: 
>             tokenRemaining = tokenRemaining.sub(amount);
>             token.mint(beneficiary, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1153
Source: 
>         if (tokenReservePerMill > 0) {
>             token.mint(reserveAccount, tokenSold().mul(tokenReservePerMill).div(1000));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1155
Source: 
>         }
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         isFinalized = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1113
Source: 
> 
>         token.mint(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         forwardFunds();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1186
Source: 
>             tokenRemaining = tokenRemaining.sub(amount);
>             token.mint(beneficiary, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1153
Source: 
>         if (tokenReservePerMill > 0) {
>             token.mint(reserveAccount, tokenSold().mul(tokenReservePerMill).div(1000));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1155
Source: 
>         }
>         token.finishMinting();
>         ^^^^^^^^^^^^^^^^^^^^^
>         isFinalized = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StokrCrowdsale
Line:        1304
Source: 
>         if (!goalReached()) {
>             StokrToken(address(token)).destruct();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StokrCrowdsaleFactory
Line:        1399
Source: 
> 
>         crowdsale.transferOwnershipUnsafe(msg.sender);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        18
Source: 
>     // (has to claim ownership first to become effective owner)
>     address public newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Whitelisted
Line:        179
Source: 
> 
>     Whitelist public whitelist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        18
Source: 
>     // (has to claim ownership first to become effective owner)
>     address public newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitSharing
Line:        366
Source: 
>     // Authority who is allowed to deposit profits [wei] on this
>     address public profitDepositor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitSharing
Line:        370
Source: 
>     // (so, that they don't need to withdraw it by themselves)
>     address public profitDistributor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitSharing
Line:        375
Source: 
>     // this value will never decrease
>     uint public totalProfits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        18
Source: 
>     // (has to claim ownership first to become effective owner)
>     address public newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Whitelisted
Line:        179
Source: 
> 
>     Whitelist public whitelist;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenRecoverable
Line:        223
Source: 
>     // Address that can do the TokenRecovery
>     address public tokenRecoverer;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitSharing
Line:        366
Source: 
>     // Authority who is allowed to deposit profits [wei] on this
>     address public profitDepositor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitSharing
Line:        370
Source: 
>     // (so, that they don't need to withdraw it by themselves)
>     address public profitDistributor;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitSharing
Line:        375
Source: 
>     // this value will never decrease
>     uint public totalProfits;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitSharing
Line:        379
Source: 
>     // the investors' profit shares aren't determined
>     bool public totalSupplyIsFixed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ProfitSharing
Line:        382
Source: 
>     // Total amount of tokens
>     uint internal totalSupply_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintableToken
Line:        567
Source: 
> 
>     address public minter;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint public numberOfInvestors = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        18
Source: 
>     // (has to claim ownership first to become effective owner)
>     address public newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        874
Source: 
>     // Ether rate oracle contract providing the price of an Ether in EUR cents
>     RateSource public rateSource;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        880
Source: 
>     // One token is expected to consist of 10^18 token units.
>     MintableToken public token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        886
Source: 
>     // for the respective type of sale
>     uint public tokenCapOfPublicSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public tokenCapOfPrivateSale;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        887
Source: 
>     uint public tokenCapOfPublicSale;
>     uint public tokenCapOfPrivateSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public tokenRemainingForPublicSale;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        888
Source: 
>     uint public tokenCapOfPrivateSale;
>     uint public tokenRemainingForPublicSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public tokenRemainingForPrivateSale;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        889
Source: 
>     uint public tokenRemainingForPublicSale;
>     uint public tokenRemainingForPrivateSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        892
Source: 
>     // Prices are in Euro cents (i.e. 1/100 EUR)
>     uint public tokenPrice;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        895
Source: 
>     // The minimum amount of tokens a purchaser has to buy via one transaction
>     uint public tokenPurchaseMinimum;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        898
Source: 
>     // The maximum total amount of tokens a purchaser may buy during start phase
>     uint public tokenPurchaseLimit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        904
Source: 
>     // Public sale period
>     uint public openingTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public closingTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        905
Source: 
>     uint public openingTime;
>     uint public closingTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public limitEndTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        906
Source: 
>     uint public closingTime;
>     uint public limitEndTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        909
Source: 
>     // Ethereum address where invested funds will be transferred to
>     address payable public companyWallet;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        912
Source: 
>     // Amount and receiver of reserved tokens
>     uint public tokenReservePerMill;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public reserveAccount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        913
Source: 
>     uint public tokenReservePerMill;
>     address public reserveAccount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        18
Source: 
>     // (has to claim ownership first to become effective owner)
>     address public newOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        874
Source: 
>     // Ether rate oracle contract providing the price of an Ether in EUR cents
>     RateSource public rateSource;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        880
Source: 
>     // One token is expected to consist of 10^18 token units.
>     MintableToken public token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        886
Source: 
>     // for the respective type of sale
>     uint public tokenCapOfPublicSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public tokenCapOfPrivateSale;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        887
Source: 
>     uint public tokenCapOfPublicSale;
>     uint public tokenCapOfPrivateSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public tokenRemainingForPublicSale;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        888
Source: 
>     uint public tokenCapOfPrivateSale;
>     uint public tokenRemainingForPublicSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public tokenRemainingForPrivateSale;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        889
Source: 
>     uint public tokenRemainingForPublicSale;
>     uint public tokenRemainingForPrivateSale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        892
Source: 
>     // Prices are in Euro cents (i.e. 1/100 EUR)
>     uint public tokenPrice;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        895
Source: 
>     // The minimum amount of tokens a purchaser has to buy via one transaction
>     uint public tokenPurchaseMinimum;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        898
Source: 
>     // The maximum total amount of tokens a purchaser may buy during start phase
>     uint public tokenPurchaseLimit;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        904
Source: 
>     // Public sale period
>     uint public openingTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public closingTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        905
Source: 
>     uint public openingTime;
>     uint public closingTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint public limitEndTime;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        906
Source: 
>     uint public closingTime;
>     uint public limitEndTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        909
Source: 
>     // Ethereum address where invested funds will be transferred to
>     address payable public companyWallet;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        912
Source: 
>     // Amount and receiver of reserved tokens
>     uint public tokenReservePerMill;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public reserveAccount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MintingCrowdsale
Line:        913
Source: 
>     uint public tokenReservePerMill;
>     address public reserveAccount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1213
Source: 
>     // Soft cap in token units
>     uint public tokenGoal;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ProfitSharing
Line:        379
Source: 
>     // the investors' profit shares aren't determined
>     bool public totalSupplyIsFixed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ProfitSharing
Line:        382
Source: 
>     // Total amount of tokens
>     uint internal totalSupply_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ProfitSharing
Line:        545
Source: 
>         accounts[_investor].profitShare = 0;
>         _beneficiary.transfer(withdrawnProfitShare);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1196
Source: 
>     function forwardFunds() internal {
>         companyWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1352
Source: 
>             investments[_investor] = 0;
>             _investor.transfer(investment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    MintingCrowdsale
Line:        1196
Source: 
>     function forwardFunds() internal {
>         companyWallet.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ownable
Line:        71
Source: 
> 
>             owner = _newOwner;
>             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ownable
Line:        73
Source: 
>         }
>         newOwner = address(0x0);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitSharing
Line:        513
Source: 
> 
>         accounts[_investor].lastTotalProfits = totalProfits;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accounts[_investor].profitShare = newProfitShare;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ProfitSharing
Line:        514
Source: 
>         accounts[_investor].lastTotalProfits = totalProfits;
>         accounts[_investor].profitShare = newProfitShare;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StokrToken
Line:        806
Source: 
>     {
>         allowance_[_from][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StokrToken
Line:        831
Source: 
> 
>         accounts[_from].balance = accounts[_from].balance.sub(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accounts[_to].balance = accounts[_to].balance.add(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StokrToken
Line:        832
Source: 
>         accounts[_from].balance = accounts[_from].balance.sub(_value);
>         accounts[_to].balance = accounts[_to].balance.add(_value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ownable
Line:        71
Source: 
> 
>             owner = _newOwner;
>             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ownable
Line:        73
Source: 
>         }
>         newOwner = address(0x0);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1111
Source: 
> 
>         tokenRemainingForPublicSale = tokenRemainingForPublicSale.sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1041
Source: 
>     {
>         tokenRemainingForPublicSale =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             distributeTokens(tokenRemainingForPublicSale, beneficiaries, amounts, true);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1055
Source: 
>     {
>         tokenRemainingForPrivateSale =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             distributeTokens(tokenRemainingForPrivateSale, beneficiaries, amounts, false);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ownable
Line:        71
Source: 
> 
>             owner = _newOwner;
>             ^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Ownable
Line:        73
Source: 
>         }
>         newOwner = address(0x0);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1111
Source: 
> 
>         tokenRemainingForPublicSale = tokenRemainingForPublicSale.sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1041
Source: 
>     {
>         tokenRemainingForPublicSale =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             distributeTokens(tokenRemainingForPublicSale, beneficiaries, amounts, true);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    MintingCrowdsale
Line:        1055
Source: 
>     {
>         tokenRemainingForPrivateSale =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             distributeTokens(tokenRemainingForPrivateSale, beneficiaries, amounts, false);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StokrCrowdsale
Line:        1351
Source: 
>         if (investment > 0) {
>             investments[_investor] = 0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _investor.transfer(investment);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitSharing
Line:        513
Source: 
> 
>         accounts[_investor].lastTotalProfits = totalProfits;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accounts[_investor].profitShare = newProfitShare;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitSharing
Line:        514
Source: 
>         accounts[_investor].lastTotalProfits = totalProfits;
>         accounts[_investor].profitShare = newProfitShare;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ProfitSharing
Line:        544
Source: 
> 
>         accounts[_investor].profitShare = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _beneficiary.transfer(withdrawnProfitShare);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StokrToken
Line:        635
Source: 
> 
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
>     string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StokrToken
Line:        636
Source: 
>     string public name;
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StokrToken
Line:        637
Source: 
>     string public symbol;
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
