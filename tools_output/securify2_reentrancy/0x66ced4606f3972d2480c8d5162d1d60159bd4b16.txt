Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.9. Changing pragma version to 0.6.9....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        88
Source: 
>     
>     uint ONE_MONTH = 60*60*24*30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint MAX_MONTHS = 12;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        92
Source: 
>     
>     address public LIQUIDITY_TOKEN  = 0xEE89ea23c18410F2b57e7abc6eb24cfcdE4f49B0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public REWARD_TOKEN  = 0xbBB38bE7c6D954320c0297c06Ab3265a950CDF89;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        93
Source: 
>     address public LIQUIDITY_TOKEN  = 0xEE89ea23c18410F2b57e7abc6eb24cfcdE4f49B0;
>     address public REWARD_TOKEN  = 0xbBB38bE7c6D954320c0297c06Ab3265a950CDF89;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        127
Source: 
>     
>     function setRewardLevels(uint[3] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        rewardLevels = input;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        130
Source: 
>     }
>     function setpoolLevels(uint[3] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        poolLevels = input;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        133
Source: 
>     }
>     function setMonthLevels(uint[3] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        monthLevels = input;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        136
Source: 
>     }
>     function setBaseRateLookup(uint[4] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        baseRateLookup = input;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        139
Source: 
>     }
>     function setMultiplierLookup(uint[4][4] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        multiplierLookup = input;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        142
Source: 
>     }
>     function setMaxMonths(uint input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        MAX_MONTHS = input;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        145
Source: 
>     }
>      function getMaxMonths() view public returns(uint){
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        return MAX_MONTHS;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        151
Source: 
>     
>     function getAllocatedRewards() view public returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allocatedRewards;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        155
Source: 
>     
>     function getUnallocatedRewards() view public returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return unallocatedRewards;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        84
Source: 
> 
> contract UniBOMBLiquidReward is Ownable{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        77
Source: 
> 
>     function setOwner(address _owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit TransferOwnership(owner, _owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        127
Source: 
>     
>     function setRewardLevels(uint[3] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        rewardLevels = input;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        130
Source: 
>     }
>     function setpoolLevels(uint[3] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        poolLevels = input;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        133
Source: 
>     }
>     function setMonthLevels(uint[3] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        monthLevels = input;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        136
Source: 
>     }
>     function setBaseRateLookup(uint[4] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        baseRateLookup = input;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        139
Source: 
>     }
>     function setMultiplierLookup(uint[4][4] memory input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        multiplierLookup = input;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        142
Source: 
>     }
>     function setMaxMonths(uint input ) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        MAX_MONTHS = input;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        160
Source: 
>     
>       function findOnePercent(uint256 value) public pure returns (uint256)  {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 roundValue = value.ceil(100);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        168
Source: 
>         //(this)must be whitelisted on ubomb
>      function topupReward (uint amount)  external {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(ERC20Token(REWARD_TOKEN).transferFrom(address(msg.sender), address(this), amount),"tokenXferFail");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        185
Source: 
>     
>     function calcReward(uint stakeMonths, uint stakeTokens)  public returns (uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        233
Source: 
>     
>     function lockLiquidity(uint idx, uint stakeMonths, uint stakeTokens) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        255
Source: 
>     
>     function rewardTask(uint idx, uint renewMonths) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        215
Source: 
>     //baserate
>     function getpoolLevelsIndex(uint eth) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        223
Source: 
>     
>      function getMonthsIndex(uint month) public view returns (uint) {
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        12
Source: 
>     }
>     uint c = a * b;
>              ^^^^^
>     assert(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        169
Source: 
>      function topupReward (uint amount)  external {
>        require(ERC20Token(REWARD_TOKEN).transferFrom(address(msg.sender), address(this), amount),"tokenXferFail");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        //calc actual deposit amount due to BOMB burn

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        178
Source: 
>      function removeReward ()  external onlyOwner {
>        require(ERC20Token(REWARD_TOKEN).transferFrom(address(this), address(msg.sender), unallocatedRewards),"tokenXferFail");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        unallocatedRewards = 0;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        237
Source: 
>         require(stakeMonths <= MAX_MONTHS,"tooManyMonths");
>         require(ERC20Token(LIQUIDITY_TOKEN).transferFrom(address(msg.sender), address(this), stakeTokens),"tokenXferFail");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        277
Source: 
>             }
>             ERC20Token(REWARD_TOKEN).approve(address(this),reward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20Token(REWARD_TOKEN).transferFrom(address(this), address(msg.sender), reward);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        278
Source: 
>             ERC20Token(REWARD_TOKEN).approve(address(this),reward);
>             ERC20Token(REWARD_TOKEN).transferFrom(address(this), address(msg.sender), reward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        88
Source: 
>     
>     uint ONE_MONTH = 60*60*24*30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint MAX_MONTHS = 12;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        89
Source: 
>     uint ONE_MONTH = 60*60*24*30;
>     uint MAX_MONTHS = 12;
>     ^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        92
Source: 
>     
>     address public LIQUIDITY_TOKEN  = 0xEE89ea23c18410F2b57e7abc6eb24cfcdE4f49B0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public REWARD_TOKEN  = 0xbBB38bE7c6D954320c0297c06Ab3265a950CDF89;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        93
Source: 
>     address public LIQUIDITY_TOKEN  = 0xEE89ea23c18410F2b57e7abc6eb24cfcdE4f49B0;
>     address public REWARD_TOKEN  = 0xbBB38bE7c6D954320c0297c06Ab3265a950CDF89;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        88
Source: 
>     
>     uint ONE_MONTH = 60*60*24*30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint MAX_MONTHS = 12;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        89
Source: 
>     uint ONE_MONTH = 60*60*24*30;
>     uint MAX_MONTHS = 12;
>     ^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        96
Source: 
>     uint[3] public rewardLevels = [10000,20000,30000];
>     uint[3] public poolLevels = [100000000000000000000,1000000000000000000000,10000000000000000000000];
>                                  ^^^^^^^^^^^^^^^^^^^^^
>     uint[3] public monthLevels = [3,6,12];

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        96
Source: 
>     uint[3] public rewardLevels = [10000,20000,30000];
>     uint[3] public poolLevels = [100000000000000000000,1000000000000000000000,10000000000000000000000];
>                                                        ^^^^^^^^^^^^^^^^^^^^^^
>     uint[3] public monthLevels = [3,6,12];

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        96
Source: 
>     uint[3] public rewardLevels = [10000,20000,30000];
>     uint[3] public poolLevels = [100000000000000000000,1000000000000000000000,10000000000000000000000];
>                                                                               ^^^^^^^^^^^^^^^^^^^^^^^
>     uint[3] public monthLevels = [3,6,12];

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        200
Source: 
>         
>         uint reward = (amountTokens.mul(months).mul(baseRate).mul(multiplier)).div(1000000);
>                                                                                    ^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        169
Source: 
>      function topupReward (uint amount)  external {
>        require(ERC20Token(REWARD_TOKEN).transferFrom(address(msg.sender), address(this), amount),"tokenXferFail");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        //calc actual deposit amount due to BOMB burn

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        178
Source: 
>      function removeReward ()  external onlyOwner {
>        require(ERC20Token(REWARD_TOKEN).transferFrom(address(this), address(msg.sender), unallocatedRewards),"tokenXferFail");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        unallocatedRewards = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        187
Source: 
>         
>         (uint tokens, uint eth, uint time) = Uniswap2PairContract(LIQUIDITY_TOKEN).getReserves();
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        191
Source: 
> 
>         uint liquidityTotalSupply = ERC20Token(LIQUIDITY_TOKEN).totalSupply();
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        237
Source: 
>         require(stakeMonths <= MAX_MONTHS,"tooManyMonths");
>         require(ERC20Token(LIQUIDITY_TOKEN).transferFrom(address(msg.sender), address(this), stakeTokens),"tokenXferFail");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        277
Source: 
>             }
>             ERC20Token(REWARD_TOKEN).approve(address(this),reward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20Token(REWARD_TOKEN).transferFrom(address(this), address(msg.sender), reward);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        278
Source: 
>             ERC20Token(REWARD_TOKEN).approve(address(this),reward);
>             ERC20Token(REWARD_TOKEN).transferFrom(address(this), address(msg.sender), reward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        298
Source: 
>         totalUniswapLiquidity -= liquidityRewardData[msg.sender][idx].quantity;
>         ERC20Token(LIQUIDITY_TOKEN).approve(address(this),liquidityRewardData[msg.sender][idx].quantity);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20Token(LIQUIDITY_TOKEN).transferFrom(address(this),address(msg.sender),liquidityRewardData[msg.sender][idx].quantity);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        299
Source: 
>         ERC20Token(LIQUIDITY_TOKEN).approve(address(this),liquidityRewardData[msg.sender][idx].quantity);
>         ERC20Token(LIQUIDITY_TOKEN).transferFrom(address(this),address(msg.sender),liquidityRewardData[msg.sender][idx].quantity);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityRewardData[msg.sender][idx].quantity = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        107
Source: 
>     
>     uint public allocatedRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public totalUniswapLiquidity;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        108
Source: 
>     uint public allocatedRewards;
>     uint public totalUniswapLiquidity;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint public unallocatedRewards;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        109
Source: 
>     uint public totalUniswapLiquidity;
>     uint public unallocatedRewards;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UniBOMBLiquidReward
Line:        174
Source: 
>        
>        unallocatedRewards += actual;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      } 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeMath
Line:        36
Source: 
>     uint d = sub(c,1);
>     return mul(div(d,m),m);
>                ^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        277
Source: 
>             }
>             ERC20Token(REWARD_TOKEN).approve(address(this),reward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             ERC20Token(REWARD_TOKEN).transferFrom(address(this), address(msg.sender), reward);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        278
Source: 
>             ERC20Token(REWARD_TOKEN).approve(address(this),reward);
>             ERC20Token(REWARD_TOKEN).transferFrom(address(this), address(msg.sender), reward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        298
Source: 
>         totalUniswapLiquidity -= liquidityRewardData[msg.sender][idx].quantity;
>         ERC20Token(LIQUIDITY_TOKEN).approve(address(this),liquidityRewardData[msg.sender][idx].quantity);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20Token(LIQUIDITY_TOKEN).transferFrom(address(this),address(msg.sender),liquidityRewardData[msg.sender][idx].quantity);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniBOMBLiquidReward
Line:        299
Source: 
>         ERC20Token(LIQUIDITY_TOKEN).approve(address(this),liquidityRewardData[msg.sender][idx].quantity);
>         ERC20Token(LIQUIDITY_TOKEN).transferFrom(address(this),address(msg.sender),liquidityRewardData[msg.sender][idx].quantity);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityRewardData[msg.sender][idx].quantity = 0;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    UniBOMBLiquidReward
Line:        263
Source: 
>             
>         if( liquidityRewardData[msg.sender][idx].timestamp.add( liquidityRewardData[msg.sender][idx].stakeMonths.mul(ONE_MONTH)) <= block.timestamp){
>                                                                                                                                     ^^^^^^^^^^^^^^^
>             

[0m
