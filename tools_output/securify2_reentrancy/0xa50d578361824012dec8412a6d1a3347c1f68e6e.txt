[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Custodian
Line:        116
Source: 
>   
>     function requestUnlock(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _lockId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Custodian
Line:        160
Source: 
>     
>     function completeUnlock(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _requestMsgHash,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Custodian
Line:        215
Source: 
> 
>     function deleteUncompletableRequest(bytes32 _requestMsgHash) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Request storage request = requestMap[_requestMsgHash];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Custodian
Line:        226
Source: 
>   
>     function extendRequestTimeLock(bytes32 _requestMsgHash) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Request storage request = requestMap[_requestMsgHash];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        311
Source: 
> 
>     function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_proposedCustodian != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        311
Source: 
> 
>     function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_proposedCustodian != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        376
Source: 
>     
>     function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_proposedImpl != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        389
Source: 
>    
>     function confirmImplChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl = getImplChangeReq(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        311
Source: 
> 
>     function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_proposedCustodian != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        376
Source: 
>     
>     function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_proposedImpl != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        389
Source: 
>    
>     function confirmImplChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl = getImplChangeReq(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        445
Source: 
>     
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.totalSupply();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        450
Source: 
>    
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.balanceOf(_owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        455
Source: 
>     
>     function emitTransfer(address _from, address _to, uint256 _value) public onlyImpl {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_from, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        460
Source: 
>     
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.transferWithSender(msg.sender, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        465
Source: 
>     
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        469
Source: 
> 
>     function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(_owner, _spender, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        473
Source: 
> 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.approveWithSender(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        477
Source: 
>  
>     function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        481
Source: 
> 
>     function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Proxy
Line:        485
Source: 
> 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.allowance(_owner, _spender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        311
Source: 
> 
>     function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_proposedCustodian != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        376
Source: 
>     
>     function requestImplChange(address _proposedImpl) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_proposedImpl != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        389
Source: 
>    
>     function confirmImplChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl = getImplChangeReq(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Store
Line:        505
Source: 
> 
>     function setTotalSupply(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _newTotalSupply

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Store
Line:        514
Source: 
> 
>     function setAllowance(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Store
Line:        525
Source: 
> 
>     function setBalance(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Store
Line:        535
Source: 
> 
>     function addBalance(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        311
Source: 
> 
>     function requestCustodianChange(address _proposedCustodian) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_proposedCustodian != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        601
Source: 
>    
>     function approveWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        617
Source: 
>    
>     function increaseApprovalWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        638
Source: 
>     
>     function decreaseApprovalWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        659
Source: 
>     
>     function requestPrint(address _receiver, uint256 _value) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_receiver != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        673
Source: 
>    
>     function confirmPrint(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PendingPrint storage print = pendingPrintMap[_lockId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        695
Source: 
>  
>     function burn(uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 balanceOfSender = erc20Store.balances(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        708
Source: 
>   
>     function batchTransfer(address[] memory _tos, uint256[] memory _values) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_tos.length == _values.length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        733
Source: 
>     
>     function enableSweep(uint8[] memory _vs, bytes32[] memory _rs, bytes32[] memory _ss, address _to) public onlySweeper {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        765
Source: 
>     
>     function replaySweep(address[] memory _froms, address _to) public onlySweeper {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        792
Source: 
>    
>     function transferFromWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        820
Source: 
> 
>     function transferWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        842
Source: 
>     
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Store.totalSupply();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        847
Source: 
>    
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Store.balances(_owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Impl
Line:        852
Source: 
>    
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Store.allowed(_owner, _spender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrintLimiter
Line:        905
Source: 
> 
>     function limitedPrint(address _receiver, uint256 _value) public onlyLimitedPrinter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalSupply = erc20Impl.totalSupply();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrintLimiter
Line:        914
Source: 
> 
>     function requestCeilingRaise(uint256 _raiseBy) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_raiseBy != 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrintLimiter
Line:        926
Source: 
> 
>     function confirmCeilingRaise(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         PendingCeilingRaise storage pendingRaise = pendingRaiseMap[_lockId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrintLimiter
Line:        945
Source: 
>   
>     function lowerCeiling(uint256 _lowerBy) public onlyLimitedPrinter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newCeiling = totalSupplyCeiling - _lowerBy;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrintLimiter
Line:        955
Source: 
>    
>     function confirmPrintProxy(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl.confirmPrint(_lockId);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PrintLimiter
Line:        960
Source: 
>    
>     function confirmCustodianChangeProxy(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl.confirmCustodianChange(_lockId);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        611
Source: 
>         require(_spender != address(0));
>         erc20Store.setAllowance(_sender, _spender, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        612
Source: 
>         erc20Store.setAllowance(_sender, _spender, _value);
>         erc20Proxy.emitApproval(_sender, _spender, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        627
Source: 
>         require(_spender != address(0)); 
>         uint256 currentAllowance = erc20Store.allowed(_sender, _spender);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newAllowance = currentAllowance + _addedValue;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        632
Source: 
> 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        633
Source: 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        648
Source: 
>         require(_spender != address(0)); 
>         uint256 currentAllowance = erc20Store.allowed(_sender, _spender);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newAllowance = currentAllowance - _subtractedValue;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        653
Source: 
> 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        654
Source: 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        683
Source: 
> 
>         uint256 supply = erc20Store.totalSupply();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newSupply = supply + value;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        686
Source: 
>         if (newSupply >= supply) {
>           erc20Store.setTotalSupply(newSupply);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           erc20Store.addBalance(receiver, value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        687
Source: 
>           erc20Store.setTotalSupply(newSupply);
>           erc20Store.addBalance(receiver, value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        690
Source: 
>           emit PrintingConfirmed(_lockId, receiver, value);
>           erc20Proxy.emitTransfer(address(0), receiver, value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        696
Source: 
>     function burn(uint256 _value) public returns (bool success) {
>         uint256 balanceOfSender = erc20Store.balances(msg.sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        699
Source: 
> 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        702
Source: 
> 
>         erc20Proxy.emitTransfer(msg.sender, address(0), _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        712
Source: 
>         uint256 numTransfers = _tos.length;
>         uint256 senderBalance = erc20Store.balances(msg.sender);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        727
Source: 
> 
>         erc20Store.setBalance(msg.sender, senderBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        760
Source: 
>         if (sweptBalance > 0) {
>           erc20Store.addBalance(_to, sweptBalance);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        787
Source: 
>         if (sweptBalance > 0) {
>             erc20Store.addBalance(_to, sweptBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        804
Source: 
> 
>         uint256 balanceOfFrom = erc20Store.balances(_from);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfFrom);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        807
Source: 
> 
>         uint256 senderAllowance = erc20Store.allowed(_from, _sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= senderAllowance);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        810
Source: 
> 
>         erc20Store.setBalance(_from, balanceOfFrom - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.addBalance(_to, _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        811
Source: 
>         erc20Store.setBalance(_from, balanceOfFrom - _value);
>         erc20Store.addBalance(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        813
Source: 
> 
>         erc20Store.setAllowance(_from, _sender, senderAllowance - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        815
Source: 
> 
>         erc20Proxy.emitTransfer(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        830
Source: 
>         require(_to != address(0)); 
>         uint256 balanceOfSender = erc20Store.balances(_sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        833
Source: 
> 
>         erc20Store.setBalance(_sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.addBalance(_to, _value);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        834
Source: 
>         erc20Store.setBalance(_sender, balanceOfSender - _value);
>         erc20Store.addBalance(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        836
Source: 
> 
>         erc20Proxy.emitTransfer(_sender, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        843
Source: 
>     function totalSupply() public view returns (uint256) {
>         return erc20Store.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        848
Source: 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>         return erc20Store.balances(_owner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    ERC20Impl
Line:        853
Source: 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>         return erc20Store.allowed(_owner, _spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Impl
Line:        722
Source: 
>             senderBalance -= v;
>             erc20Store.addBalance(to, v);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Impl
Line:        724
Source: 
>           }
>           erc20Proxy.emitTransfer(msg.sender, to, v);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Impl
Line:        747
Source: 
> 
>             uint256 fromBalance = erc20Store.balances(from);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Impl
Line:        752
Source: 
> 
>               erc20Store.setBalance(from, 0);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Impl
Line:        754
Source: 
> 
>               erc20Proxy.emitTransfer(from, _to, fromBalance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Impl
Line:        774
Source: 
>             if (sweptSet[from]) {
>                 uint256 fromBalance = erc20Store.balances(from);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Impl
Line:        779
Source: 
> 
>                     erc20Store.setBalance(from, 0);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    ERC20Impl
Line:        781
Source: 
> 
>                     erc20Proxy.emitTransfer(from, _to, fromBalance);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    Custodian
Line:        205
Source: 
>            
>             (success,) = callbackAddress.call(abi.encodeWithSelector(callbackSelector, lockId));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20Impl
Line:        747
Source: 
> 
>             uint256 fromBalance = erc20Store.balances(from);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20Impl
Line:        752
Source: 
> 
>               erc20Store.setBalance(from, 0);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20Impl
Line:        754
Source: 
> 
>               erc20Proxy.emitTransfer(from, _to, fromBalance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    ERC20Impl
Line:        760
Source: 
>         if (sweptBalance > 0) {
>           erc20Store.addBalance(_to, sweptBalance);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Custodian
Line:        205
Source: 
>            
>             (success,) = callbackAddress.call(abi.encodeWithSelector(callbackSelector, lockId));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        389
Source: 
>    
>     function confirmImplChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl = getImplChangeReq(_lockId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        389
Source: 
>    
>     function confirmImplChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl = getImplChangeReq(_lockId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Proxy
Line:        450
Source: 
>    
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.balanceOf(_owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        389
Source: 
>    
>     function confirmImplChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl = getImplChangeReq(_lockId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CustodianUpgradeable
Line:        324
Source: 
>    
>     function confirmCustodianChange(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         custodian = getCustodianChangeReq(_lockId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        601
Source: 
>    
>     function approveWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        617
Source: 
>    
>     function increaseApprovalWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        638
Source: 
>     
>     function decreaseApprovalWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        733
Source: 
>     
>     function enableSweep(uint8[] memory _vs, bytes32[] memory _rs, bytes32[] memory _ss, address _to) public onlySweeper {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        765
Source: 
>     
>     function replaySweep(address[] memory _froms, address _to) public onlySweeper {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_to != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        792
Source: 
>    
>     function transferFromWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        820
Source: 
> 
>     function transferWithSender(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _sender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        847
Source: 
>    
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Store.balances(_owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Impl
Line:        852
Source: 
>    
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Store.allowed(_owner, _spender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PrintLimiter
Line:        905
Source: 
> 
>     function limitedPrint(address _receiver, uint256 _value) public onlyLimitedPrinter {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 totalSupply = erc20Impl.totalSupply();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PrintLimiter
Line:        955
Source: 
>    
>     function confirmPrintProxy(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl.confirmPrint(_lockId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PrintLimiter
Line:        960
Source: 
>    
>     function confirmCustodianChangeProxy(bytes32 _lockId) public onlyCustodian {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Impl.confirmCustodianChange(_lockId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Custodian
Line:        116
Source: 
>   
>     function requestUnlock(
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 _lockId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Custodian
Line:        215
Source: 
> 
>     function deleteUncompletableRequest(bytes32 _requestMsgHash) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Request storage request = requestMap[_requestMsgHash];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Custodian
Line:        226
Source: 
>   
>     function extendRequestTimeLock(bytes32 _requestMsgHash) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Request storage request = requestMap[_requestMsgHash];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Proxy
Line:        455
Source: 
>     
>     function emitTransfer(address _from, address _to, uint256 _value) public onlyImpl {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(_from, _to, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Proxy
Line:        460
Source: 
>     
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.transferWithSender(msg.sender, _to, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Proxy
Line:        465
Source: 
>     
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Proxy
Line:        469
Source: 
> 
>     function emitApproval(address _owner, address _spender, uint256 _value) public onlyImpl {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(_owner, _spender, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Proxy
Line:        473
Source: 
> 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.approveWithSender(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Proxy
Line:        477
Source: 
>  
>     function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Proxy
Line:        481
Source: 
> 
>     function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Proxy
Line:        485
Source: 
> 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return erc20Impl.allowance(_owner, _spender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Store
Line:        505
Source: 
> 
>     function setTotalSupply(
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _newTotalSupply

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Store
Line:        514
Source: 
> 
>     function setAllowance(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Store
Line:        525
Source: 
> 
>     function setBalance(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Store
Line:        535
Source: 
> 
>     function addBalance(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20Impl
Line:        659
Source: 
>     
>     function requestPrint(address _receiver, uint256 _value) public returns (bytes32 lockId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_receiver != address(0));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Custodian
Line:        196
Source: 
>                 
>                 success = msg.sender.send(address(this).balance);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.10;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Custodian
Line:        60
Source: 
>   
>     uint256 public requestCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Custodian
Line:        63
Source: 
>    
>     mapping (address => bool) public signerSet;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Custodian
Line:        66
Source: 
>     
>     mapping (bytes32 => Request) public requestMap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Custodian
Line:        69
Source: 
>    
>     mapping (address => mapping (bytes4 => uint256)) public lastCompletedIdxs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Custodian
Line:        72
Source: 
>    
>     uint256 public defaultTimeLock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Custodian
Line:        75
Source: 
>    
>     uint256 public extendedTimeLock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    Custodian
Line:        78
Source: 
>    
>     address public primary;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LockRequestable
Line:        245
Source: 
>    
>     uint256 public lockRequestCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        290
Source: 
>   
>     address public custodian;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        293
Source: 
>     
>     mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LockRequestable
Line:        245
Source: 
>    
>     uint256 public lockRequestCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        290
Source: 
>   
>     address public custodian;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        293
Source: 
>     
>     mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        359
Source: 
>    
>     ERC20Impl public erc20Impl;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        362
Source: 
>    
>     mapping (bytes32 => ImplChangeRequest) public implChangeReqs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LockRequestable
Line:        245
Source: 
>    
>     uint256 public lockRequestCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        290
Source: 
>   
>     address public custodian;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        293
Source: 
>     
>     mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        359
Source: 
>    
>     ERC20Impl public erc20Impl;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        362
Source: 
>    
>     mapping (bytes32 => ImplChangeRequest) public implChangeReqs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Proxy
Line:        421
Source: 
>    
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Proxy
Line:        424
Source: 
>     
>     string public symbol;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Proxy
Line:        427
Source: 
>     
>     uint8 public decimals;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LockRequestable
Line:        245
Source: 
>    
>     uint256 public lockRequestCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        290
Source: 
>   
>     address public custodian;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        293
Source: 
>     
>     mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        359
Source: 
>    
>     ERC20Impl public erc20Impl;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20ImplUpgradeable
Line:        362
Source: 
>    
>     mapping (bytes32 => ImplChangeRequest) public implChangeReqs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Store
Line:        492
Source: 
> 
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Store
Line:        495
Source: 
>    
>     mapping (address => uint256) public balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Store
Line:        498
Source: 
>    
>     mapping (address => mapping (address => uint256)) public allowed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LockRequestable
Line:        245
Source: 
>    
>     uint256 public lockRequestCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        290
Source: 
>   
>     address public custodian;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    CustodianUpgradeable
Line:        293
Source: 
>     
>     mapping (bytes32 => CustodianChangeRequest) public custodianChangeReqs;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Impl
Line:        554
Source: 
> 
>     ERC20Proxy public erc20Proxy;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Impl
Line:        557
Source: 
> 
>     ERC20Store public erc20Store;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Impl
Line:        560
Source: 
>    
>     address public sweeper;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Impl
Line:        563
Source: 
>     
>     bytes32 public sweepMsg;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Impl
Line:        566
Source: 
>     
>     mapping (address => bool) public sweptSet;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    ERC20Impl
Line:        569
Source: 
>     
>     mapping (bytes32 => PendingPrint) public pendingPrintMap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    LockRequestable
Line:        245
Source: 
>    
>     uint256 public lockRequestCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PrintLimiter
Line:        870
Source: 
>   
>     ERC20Impl public erc20Impl;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PrintLimiter
Line:        873
Source: 
>    
>     address public custodian;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PrintLimiter
Line:        875
Source: 
> 
>     address public limitedPrinter;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PrintLimiter
Line:        877
Source: 
> 
>     uint256 public totalSupplyCeiling;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PrintLimiter
Line:        879
Source: 
> 
>     mapping (bytes32 => PendingCeilingRaise) public pendingRaiseMap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Custodian
Line:        196
Source: 
>                 
>                 success = msg.sender.send(address(this).balance);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Custodian
Line:        196
Source: 
>                 
>                 success = msg.sender.send(address(this).balance);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Custodian
Line:        205
Source: 
>            
>             (success,) = callbackAddress.call(abi.encodeWithSelector(callbackSelector, lockId));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Proxy
Line:        446
Source: 
>     function totalSupply() public view returns (uint256) {
>         return erc20Impl.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Proxy
Line:        451
Source: 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>         return erc20Impl.balanceOf(_owner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Proxy
Line:        461
Source: 
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>         return erc20Impl.transferWithSender(msg.sender, _to, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Proxy
Line:        466
Source: 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>         return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Proxy
Line:        474
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>         return erc20Impl.approveWithSender(msg.sender, _spender, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Proxy
Line:        478
Source: 
>     function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {
>         return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Proxy
Line:        482
Source: 
>     function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {
>         return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Proxy
Line:        486
Source: 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>         return erc20Impl.allowance(_owner, _spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        611
Source: 
>         require(_spender != address(0));
>         erc20Store.setAllowance(_sender, _spender, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        612
Source: 
>         erc20Store.setAllowance(_sender, _spender, _value);
>         erc20Proxy.emitApproval(_sender, _spender, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        627
Source: 
>         require(_spender != address(0)); 
>         uint256 currentAllowance = erc20Store.allowed(_sender, _spender);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newAllowance = currentAllowance + _addedValue;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        632
Source: 
> 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        633
Source: 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        648
Source: 
>         require(_spender != address(0)); 
>         uint256 currentAllowance = erc20Store.allowed(_sender, _spender);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newAllowance = currentAllowance - _subtractedValue;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        653
Source: 
> 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        654
Source: 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        683
Source: 
> 
>         uint256 supply = erc20Store.totalSupply();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newSupply = supply + value;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        686
Source: 
>         if (newSupply >= supply) {
>           erc20Store.setTotalSupply(newSupply);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           erc20Store.addBalance(receiver, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        687
Source: 
>           erc20Store.setTotalSupply(newSupply);
>           erc20Store.addBalance(receiver, value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        690
Source: 
>           emit PrintingConfirmed(_lockId, receiver, value);
>           erc20Proxy.emitTransfer(address(0), receiver, value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        696
Source: 
>     function burn(uint256 _value) public returns (bool success) {
>         uint256 balanceOfSender = erc20Store.balances(msg.sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        699
Source: 
> 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        702
Source: 
> 
>         erc20Proxy.emitTransfer(msg.sender, address(0), _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        712
Source: 
>         uint256 numTransfers = _tos.length;
>         uint256 senderBalance = erc20Store.balances(msg.sender);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        722
Source: 
>             senderBalance -= v;
>             erc20Store.addBalance(to, v);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        724
Source: 
>           }
>           erc20Proxy.emitTransfer(msg.sender, to, v);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        727
Source: 
> 
>         erc20Store.setBalance(msg.sender, senderBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        747
Source: 
> 
>             uint256 fromBalance = erc20Store.balances(from);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        752
Source: 
> 
>               erc20Store.setBalance(from, 0);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        754
Source: 
> 
>               erc20Proxy.emitTransfer(from, _to, fromBalance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        760
Source: 
>         if (sweptBalance > 0) {
>           erc20Store.addBalance(_to, sweptBalance);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        774
Source: 
>             if (sweptSet[from]) {
>                 uint256 fromBalance = erc20Store.balances(from);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        779
Source: 
> 
>                     erc20Store.setBalance(from, 0);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        781
Source: 
> 
>                     erc20Proxy.emitTransfer(from, _to, fromBalance);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        787
Source: 
>         if (sweptBalance > 0) {
>             erc20Store.addBalance(_to, sweptBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        804
Source: 
> 
>         uint256 balanceOfFrom = erc20Store.balances(_from);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfFrom);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        807
Source: 
> 
>         uint256 senderAllowance = erc20Store.allowed(_from, _sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= senderAllowance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        810
Source: 
> 
>         erc20Store.setBalance(_from, balanceOfFrom - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.addBalance(_to, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        811
Source: 
>         erc20Store.setBalance(_from, balanceOfFrom - _value);
>         erc20Store.addBalance(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        813
Source: 
> 
>         erc20Store.setAllowance(_from, _sender, senderAllowance - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        815
Source: 
> 
>         erc20Proxy.emitTransfer(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        830
Source: 
>         require(_to != address(0)); 
>         uint256 balanceOfSender = erc20Store.balances(_sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        833
Source: 
> 
>         erc20Store.setBalance(_sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.addBalance(_to, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        834
Source: 
>         erc20Store.setBalance(_sender, balanceOfSender - _value);
>         erc20Store.addBalance(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        836
Source: 
> 
>         erc20Proxy.emitTransfer(_sender, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        843
Source: 
>     function totalSupply() public view returns (uint256) {
>         return erc20Store.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        848
Source: 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>         return erc20Store.balances(_owner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ERC20Impl
Line:        853
Source: 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>         return erc20Store.allowed(_owner, _spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PrintLimiter
Line:        906
Source: 
>     function limitedPrint(address _receiver, uint256 _value) public onlyLimitedPrinter {
>         uint256 totalSupply = erc20Impl.totalSupply();
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newTotalSupply = totalSupply + _value;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PrintLimiter
Line:        911
Source: 
>         require(newTotalSupply <= totalSupplyCeiling);
>         erc20Impl.confirmPrint(erc20Impl.requestPrint(_receiver, _value));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PrintLimiter
Line:        911
Source: 
>         require(newTotalSupply <= totalSupplyCeiling);
>         erc20Impl.confirmPrint(erc20Impl.requestPrint(_receiver, _value));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PrintLimiter
Line:        956
Source: 
>     function confirmPrintProxy(bytes32 _lockId) public onlyCustodian {
>         erc20Impl.confirmPrint(_lockId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    PrintLimiter
Line:        961
Source: 
>     function confirmCustodianChangeProxy(bytes32 _lockId) public onlyCustodian {
>         erc20Impl.confirmCustodianChange(_lockId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Custodian
Line:        196
Source: 
>                 
>                 success = msg.sender.send(address(this).balance);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Custodian
Line:        205
Source: 
>            
>             (success,) = callbackAddress.call(abi.encodeWithSelector(callbackSelector, lockId));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        611
Source: 
>         require(_spender != address(0));
>         erc20Store.setAllowance(_sender, _spender, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        612
Source: 
>         erc20Store.setAllowance(_sender, _spender, _value);
>         erc20Proxy.emitApproval(_sender, _spender, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        627
Source: 
>         require(_spender != address(0)); 
>         uint256 currentAllowance = erc20Store.allowed(_sender, _spender);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newAllowance = currentAllowance + _addedValue;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        632
Source: 
> 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        633
Source: 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        648
Source: 
>         require(_spender != address(0)); 
>         uint256 currentAllowance = erc20Store.allowed(_sender, _spender);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newAllowance = currentAllowance - _subtractedValue;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        653
Source: 
> 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        654
Source: 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        683
Source: 
> 
>         uint256 supply = erc20Store.totalSupply();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newSupply = supply + value;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        686
Source: 
>         if (newSupply >= supply) {
>           erc20Store.setTotalSupply(newSupply);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           erc20Store.addBalance(receiver, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        687
Source: 
>           erc20Store.setTotalSupply(newSupply);
>           erc20Store.addBalance(receiver, value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        690
Source: 
>           emit PrintingConfirmed(_lockId, receiver, value);
>           erc20Proxy.emitTransfer(address(0), receiver, value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        696
Source: 
>     function burn(uint256 _value) public returns (bool success) {
>         uint256 balanceOfSender = erc20Store.balances(msg.sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        699
Source: 
> 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        702
Source: 
> 
>         erc20Proxy.emitTransfer(msg.sender, address(0), _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        712
Source: 
>         uint256 numTransfers = _tos.length;
>         uint256 senderBalance = erc20Store.balances(msg.sender);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        722
Source: 
>             senderBalance -= v;
>             erc20Store.addBalance(to, v);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        724
Source: 
>           }
>           erc20Proxy.emitTransfer(msg.sender, to, v);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        727
Source: 
> 
>         erc20Store.setBalance(msg.sender, senderBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        747
Source: 
> 
>             uint256 fromBalance = erc20Store.balances(from);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        752
Source: 
> 
>               erc20Store.setBalance(from, 0);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        754
Source: 
> 
>               erc20Proxy.emitTransfer(from, _to, fromBalance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        760
Source: 
>         if (sweptBalance > 0) {
>           erc20Store.addBalance(_to, sweptBalance);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        774
Source: 
>             if (sweptSet[from]) {
>                 uint256 fromBalance = erc20Store.balances(from);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        779
Source: 
> 
>                     erc20Store.setBalance(from, 0);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        781
Source: 
> 
>                     erc20Proxy.emitTransfer(from, _to, fromBalance);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        787
Source: 
>         if (sweptBalance > 0) {
>             erc20Store.addBalance(_to, sweptBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        804
Source: 
> 
>         uint256 balanceOfFrom = erc20Store.balances(_from);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfFrom);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        807
Source: 
> 
>         uint256 senderAllowance = erc20Store.allowed(_from, _sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= senderAllowance);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        810
Source: 
> 
>         erc20Store.setBalance(_from, balanceOfFrom - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.addBalance(_to, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        811
Source: 
>         erc20Store.setBalance(_from, balanceOfFrom - _value);
>         erc20Store.addBalance(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        813
Source: 
> 
>         erc20Store.setAllowance(_from, _sender, senderAllowance - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        815
Source: 
> 
>         erc20Proxy.emitTransfer(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        830
Source: 
>         require(_to != address(0)); 
>         uint256 balanceOfSender = erc20Store.balances(_sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        833
Source: 
> 
>         erc20Store.setBalance(_sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.addBalance(_to, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        834
Source: 
>         erc20Store.setBalance(_sender, balanceOfSender - _value);
>         erc20Store.addBalance(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        836
Source: 
> 
>         erc20Proxy.emitTransfer(_sender, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        843
Source: 
>     function totalSupply() public view returns (uint256) {
>         return erc20Store.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        848
Source: 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>         return erc20Store.balances(_owner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ERC20Impl
Line:        853
Source: 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>         return erc20Store.allowed(_owner, _spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PrintLimiter
Line:        906
Source: 
>     function limitedPrint(address _receiver, uint256 _value) public onlyLimitedPrinter {
>         uint256 totalSupply = erc20Impl.totalSupply();
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newTotalSupply = totalSupply + _value;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PrintLimiter
Line:        911
Source: 
>         require(newTotalSupply <= totalSupplyCeiling);
>         erc20Impl.confirmPrint(erc20Impl.requestPrint(_receiver, _value));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PrintLimiter
Line:        911
Source: 
>         require(newTotalSupply <= totalSupplyCeiling);
>         erc20Impl.confirmPrint(erc20Impl.requestPrint(_receiver, _value));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PrintLimiter
Line:        956
Source: 
>     function confirmPrintProxy(bytes32 _lockId) public onlyCustodian {
>         erc20Impl.confirmPrint(_lockId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PrintLimiter
Line:        961
Source: 
>     function confirmCustodianChangeProxy(bytes32 _lockId) public onlyCustodian {
>         erc20Impl.confirmCustodianChange(_lockId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        627
Source: 
>         require(_spender != address(0)); 
>         uint256 currentAllowance = erc20Store.allowed(_sender, _spender);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newAllowance = currentAllowance + _addedValue;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        648
Source: 
>         require(_spender != address(0)); 
>         uint256 currentAllowance = erc20Store.allowed(_sender, _spender);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newAllowance = currentAllowance - _subtractedValue;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        683
Source: 
> 
>         uint256 supply = erc20Store.totalSupply();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newSupply = supply + value;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        696
Source: 
>     function burn(uint256 _value) public returns (bool success) {
>         uint256 balanceOfSender = erc20Store.balances(msg.sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        712
Source: 
>         uint256 numTransfers = _tos.length;
>         uint256 senderBalance = erc20Store.balances(msg.sender);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        747
Source: 
> 
>             uint256 fromBalance = erc20Store.balances(from);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        774
Source: 
>             if (sweptSet[from]) {
>                 uint256 fromBalance = erc20Store.balances(from);
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        804
Source: 
> 
>         uint256 balanceOfFrom = erc20Store.balances(_from);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfFrom);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        807
Source: 
> 
>         uint256 senderAllowance = erc20Store.allowed(_from, _sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= senderAllowance);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ERC20Impl
Line:        830
Source: 
>         require(_to != address(0)); 
>         uint256 balanceOfSender = erc20Store.balances(_sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PrintLimiter
Line:        906
Source: 
>     function limitedPrint(address _receiver, uint256 _value) public onlyLimitedPrinter {
>         uint256 totalSupply = erc20Impl.totalSupply();
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newTotalSupply = totalSupply + _value;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PrintLimiter
Line:        911
Source: 
>         require(newTotalSupply <= totalSupplyCeiling);
>         erc20Impl.confirmPrint(erc20Impl.requestPrint(_receiver, _value));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Custodian
Line:        196
Source: 
>                 
>                 success = msg.sender.send(address(this).balance);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Proxy
Line:        446
Source: 
>     function totalSupply() public view returns (uint256) {
>         return erc20Impl.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Proxy
Line:        451
Source: 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>         return erc20Impl.balanceOf(_owner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Proxy
Line:        461
Source: 
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>         return erc20Impl.transferWithSender(msg.sender, _to, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Proxy
Line:        466
Source: 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>         return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Proxy
Line:        474
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>         return erc20Impl.approveWithSender(msg.sender, _spender, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Proxy
Line:        478
Source: 
>     function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {
>         return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Proxy
Line:        482
Source: 
>     function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {
>         return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Proxy
Line:        486
Source: 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>         return erc20Impl.allowance(_owner, _spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        611
Source: 
>         require(_spender != address(0));
>         erc20Store.setAllowance(_sender, _spender, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        612
Source: 
>         erc20Store.setAllowance(_sender, _spender, _value);
>         erc20Proxy.emitApproval(_sender, _spender, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        632
Source: 
> 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        633
Source: 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        653
Source: 
> 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        654
Source: 
>         erc20Store.setAllowance(_sender, _spender, newAllowance);
>         erc20Proxy.emitApproval(_sender, _spender, newAllowance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        686
Source: 
>         if (newSupply >= supply) {
>           erc20Store.setTotalSupply(newSupply);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           erc20Store.addBalance(receiver, value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        687
Source: 
>           erc20Store.setTotalSupply(newSupply);
>           erc20Store.addBalance(receiver, value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        690
Source: 
>           emit PrintingConfirmed(_lockId, receiver, value);
>           erc20Proxy.emitTransfer(address(0), receiver, value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        699
Source: 
> 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        702
Source: 
> 
>         erc20Proxy.emitTransfer(msg.sender, address(0), _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        722
Source: 
>             senderBalance -= v;
>             erc20Store.addBalance(to, v);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        724
Source: 
>           }
>           erc20Proxy.emitTransfer(msg.sender, to, v);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        727
Source: 
> 
>         erc20Store.setBalance(msg.sender, senderBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        752
Source: 
> 
>               erc20Store.setBalance(from, 0);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        754
Source: 
> 
>               erc20Proxy.emitTransfer(from, _to, fromBalance);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        760
Source: 
>         if (sweptBalance > 0) {
>           erc20Store.addBalance(_to, sweptBalance);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        779
Source: 
> 
>                     erc20Store.setBalance(from, 0);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        781
Source: 
> 
>                     erc20Proxy.emitTransfer(from, _to, fromBalance);
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        787
Source: 
>         if (sweptBalance > 0) {
>             erc20Store.addBalance(_to, sweptBalance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        810
Source: 
> 
>         erc20Store.setBalance(_from, balanceOfFrom - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.addBalance(_to, _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        811
Source: 
>         erc20Store.setBalance(_from, balanceOfFrom - _value);
>         erc20Store.addBalance(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        813
Source: 
> 
>         erc20Store.setAllowance(_from, _sender, senderAllowance - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        815
Source: 
> 
>         erc20Proxy.emitTransfer(_from, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        833
Source: 
> 
>         erc20Store.setBalance(_sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.addBalance(_to, _value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        834
Source: 
>         erc20Store.setBalance(_sender, balanceOfSender - _value);
>         erc20Store.addBalance(_to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        836
Source: 
> 
>         erc20Proxy.emitTransfer(_sender, _to, _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        843
Source: 
>     function totalSupply() public view returns (uint256) {
>         return erc20Store.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        848
Source: 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>         return erc20Store.balances(_owner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ERC20Impl
Line:        853
Source: 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>         return erc20Store.allowed(_owner, _spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PrintLimiter
Line:        911
Source: 
>         require(newTotalSupply <= totalSupplyCeiling);
>         erc20Impl.confirmPrint(erc20Impl.requestPrint(_receiver, _value));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PrintLimiter
Line:        956
Source: 
>     function confirmPrintProxy(bytes32 _lockId) public onlyCustodian {
>         erc20Impl.confirmPrint(_lockId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PrintLimiter
Line:        961
Source: 
>     function confirmCustodianChangeProxy(bytes32 _lockId) public onlyCustodian {
>         erc20Impl.confirmCustodianChange(_lockId);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Custodian
Line:        196
Source: 
>                 
>                 success = msg.sender.send(address(this).balance);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Custodian
Line:        205
Source: 
>            
>             (success,) = callbackAddress.call(abi.encodeWithSelector(callbackSelector, lockId));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Proxy
Line:        446
Source: 
>     function totalSupply() public view returns (uint256) {
>         return erc20Impl.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Proxy
Line:        451
Source: 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>         return erc20Impl.balanceOf(_owner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Proxy
Line:        461
Source: 
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>         return erc20Impl.transferWithSender(msg.sender, _to, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Proxy
Line:        466
Source: 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>         return erc20Impl.transferFromWithSender(msg.sender, _from, _to, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Proxy
Line:        474
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>         return erc20Impl.approveWithSender(msg.sender, _spender, _value);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Proxy
Line:        478
Source: 
>     function increaseApproval(address _spender, uint256 _addedValue) public returns (bool success) {
>         return erc20Impl.increaseApprovalWithSender(msg.sender, _spender, _addedValue);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Proxy
Line:        482
Source: 
>     function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool success) {
>         return erc20Impl.decreaseApprovalWithSender(msg.sender, _spender, _subtractedValue);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Proxy
Line:        486
Source: 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>         return erc20Impl.allowance(_owner, _spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        696
Source: 
>     function burn(uint256 _value) public returns (bool success) {
>         uint256 balanceOfSender = erc20Store.balances(msg.sender);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_value <= balanceOfSender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        699
Source: 
> 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        700
Source: 
>         erc20Store.setBalance(msg.sender, balanceOfSender - _value);
>         erc20Store.setTotalSupply(erc20Store.totalSupply() - _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        702
Source: 
> 
>         erc20Proxy.emitTransfer(msg.sender, address(0), _value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        712
Source: 
>         uint256 numTransfers = _tos.length;
>         uint256 senderBalance = erc20Store.balances(msg.sender);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        843
Source: 
>     function totalSupply() public view returns (uint256) {
>         return erc20Store.totalSupply();
>                ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        848
Source: 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>         return erc20Store.balances(_owner);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    ERC20Impl
Line:        853
Source: 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>         return erc20Store.allowed(_owner, _spender);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Custodian
Line:        200
Source: 
>          
>             lastCompletedIdxs[callbackAddress][callbackSelector] = request.idx;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LockRequestable
Line:        253
Source: 
>     function generateLockId() internal returns (bytes32 lockId) {
>         return keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount));
>                                                                                       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CustodianUpgradeable
Line:        316
Source: 
> 
>         custodianChangeReqs[lockId] = CustodianChangeRequest({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             proposedNew: _proposedCustodian

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LockRequestable
Line:        253
Source: 
>     function generateLockId() internal returns (bytes32 lockId) {
>         return keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount));
>                                                                                       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CustodianUpgradeable
Line:        316
Source: 
> 
>         custodianChangeReqs[lockId] = CustodianChangeRequest({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             proposedNew: _proposedCustodian

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        381
Source: 
> 
>         implChangeReqs[lockId] = ImplChangeRequest({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             proposedNew: _proposedImpl

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LockRequestable
Line:        253
Source: 
>     function generateLockId() internal returns (bytes32 lockId) {
>         return keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount));
>                                                                                       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CustodianUpgradeable
Line:        316
Source: 
> 
>         custodianChangeReqs[lockId] = CustodianChangeRequest({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             proposedNew: _proposedCustodian

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        381
Source: 
> 
>         implChangeReqs[lockId] = ImplChangeRequest({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             proposedNew: _proposedImpl

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LockRequestable
Line:        253
Source: 
>     function generateLockId() internal returns (bytes32 lockId) {
>         return keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount));
>                                                                                       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CustodianUpgradeable
Line:        316
Source: 
> 
>         custodianChangeReqs[lockId] = CustodianChangeRequest({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             proposedNew: _proposedCustodian

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20ImplUpgradeable
Line:        381
Source: 
> 
>         implChangeReqs[lockId] = ImplChangeRequest({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             proposedNew: _proposedImpl

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LockRequestable
Line:        253
Source: 
>     function generateLockId() internal returns (bytes32 lockId) {
>         return keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount));
>                                                                                       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CustodianUpgradeable
Line:        316
Source: 
> 
>         custodianChangeReqs[lockId] = CustodianChangeRequest({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             proposedNew: _proposedCustodian

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20Impl
Line:        664
Source: 
> 
>         pendingPrintMap[lockId] = PendingPrint({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             receiver: _receiver,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LockRequestable
Line:        253
Source: 
>     function generateLockId() internal returns (bytes32 lockId) {
>         return keccak256(abi.encodePacked(blockhash(block.number - 1), address(this), ++lockRequestCount));
>                                                                                       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PrintLimiter
Line:        919
Source: 
> 
>         pendingRaiseMap[lockId] = PendingCeilingRaise({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             raiseBy: _raiseBy

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Custodian
Line:        187
Source: 
> 
>         if (request.extended && ((block.timestamp - request.timestamp) < extendedTimeLock)) {
>                                   ^^^^^^^^^^^^^^^
>             emit TimeLocked(request.timestamp + extendedTimeLock, _requestMsgHash);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Custodian
Line:        190
Source: 
>             return false;
>         } else if ((block.timestamp - request.timestamp) < defaultTimeLock) {
>                     ^^^^^^^^^^^^^^^
>             emit TimeLocked(request.timestamp + defaultTimeLock, _requestMsgHash);

[0m
