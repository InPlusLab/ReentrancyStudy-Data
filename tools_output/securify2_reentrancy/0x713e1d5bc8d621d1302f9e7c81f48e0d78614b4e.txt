Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    EtherTron
Line:        145
Source: 
> 			users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
> 			inviter2.transfer(reward2);
>    ^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        318
Source: 
> 	}
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        318
Source: 
> 	}
> }


[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherTron
Line:        117
Source: 
> 		uint secondsGone = now.sub(user.timestamp);
> 		if (secondsGone == 0 || user.timestamp == 0) return;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if(now < startDate) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherTron
Line:        208
Source: 
> 	function withdraw() external payable {
> 		require(now > startDate);
>           ^^^^^^^^^^^^^^^^^
> 		checkout(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherTron
Line:        273
Source: 
> 	
> 	function _setLastRefLink(uint32 newRefLink) external payable restricted {
>                                                                         ^^
> 		lastRefLink = newRefLink;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherTron
Line:        318
Source: 
> 	}
> }
>                                                     

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherTron
Line:        318
Source: 
> 	}
> }
>                                                                                                                                                                   

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherTron
Line:        117
Source: 
> 		uint secondsGone = now.sub(user.timestamp);
> 		if (secondsGone == 0 || user.timestamp == 0) return;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if(now < startDate) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherTron
Line:        281
Source: 
> 
> 	function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>                                                           ^^^^^^^^^^^
> 		if (a == 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherTron
Line:        293
Source: 
> 
> 	function div(uint256 a, uint256 b) internal pure returns (uint256) {
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(b > 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherTron
Line:        300
Source: 
> 
> 	function sub(uint256 a, uint256 b) internal pure returns (uint256) {
>                                                   ^^^^^^^^^^^^^^^^^^^
> 		require(b <= a);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherTron
Line:        318
Source: 
> 	}
> }
>                                                                                                                                                                                                                                                                         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EtherTron
Line:        173
Source: 
> 			setRefLink(refLink);
> 			if(now < startDate) {
>                 ^^^^^^^^
> 				user.tier = 2;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EtherTron
Line:        188
Source: 
> 
> 		totalInvested = totalInvested.add(msg.value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		user.investment = user.investment.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    EtherTron
Line:        196
Source: 
> 		checkout(msg.sender);
> 		User storage user = users[msg.sender];
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(user.balance > 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        270
Source: 
> 	function _setOwnersPart(uint newPart) external payable restricted {
> 		ownersPart = newPart;
>    ^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        273
Source: 
> 	
> 	function _setLastRefLink(uint32 newRefLink) external payable restricted {
>                                                                         ^^
> 		lastRefLink = newRefLink;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        281
Source: 
> 
> 	function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>                                                           ^^^^^^^^^^^
> 		if (a == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        293
Source: 
> 
> 	function div(uint256 a, uint256 b) internal pure returns (uint256) {
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(b > 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        300
Source: 
> 
> 	function sub(uint256 a, uint256 b) internal pure returns (uint256) {
>                                                   ^^^^^^^^^^^^^^^^^^^
> 		require(b <= a);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        314
Source: 
> 
> 	function mod(uint256 a, uint256 b) internal pure returns (uint256) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(b != 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        318
Source: 
> 	}
> }
>                                                     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        318
Source: 
> 	}
> }
>                                                                                                                                                                   

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherTron
Line:        318
Source: 
> 	}
> }
>                                                                                                                                                                                                                                                                         

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        90
Source: 
> 		lastRefLink = lastRefLink + 1;
> 		user.refLink = lastRefLink;
>                               
> 		links[lastRefLink] = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        91
Source: 
> 		user.refLink = lastRefLink;
> 		links[lastRefLink] = msg.sender;
>                              ^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        93
Source: 
> 
> 		setInviter(refLink);
>                   ^^^^
> 	}

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        96
Source: 
> 
> 	function setInviter(uint32 refLink) private {
>               ^^^^^^^^^^^^^^^^^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        96
Source: 
> 
> 	function setInviter(uint32 refLink) private {
>                                          ^^^^^
> 		User storage user = users[msg.sender];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        97
Source: 
> 	function setInviter(uint32 refLink) private {
> 		User storage user = users[msg.sender];
>                           ^^^^^^^^^^^^^^
> 		address payable inviter1 = links[refLink] == address(0x0) ||

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        98
Source: 
> 		User storage user = users[msg.sender];
> 		address payable inviter1 = links[refLink] == address(0x0) ||
>           ^^^^^^^^^^^^^^^^^^^^^^
> 		 links[refLink] == msg.sender ? owner : links[refLink];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        98
Source: 
> 		User storage user = users[msg.sender];
> 		address payable inviter1 = links[refLink] == address(0x0) ||
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		 links[refLink] == msg.sender ? owner : links[refLink];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        99
Source: 
> 		address payable inviter1 = links[refLink] == address(0x0) ||
> 		 links[refLink] == msg.sender ? owner : links[refLink];
>  ^^^^^^^^^^^^^^^^^^^
> 		user.inviter = inviter1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        99
Source: 
> 		address payable inviter1 = links[refLink] == address(0x0) ||
> 		 links[refLink] == msg.sender ? owner : links[refLink];
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		user.inviter = inviter1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        100
Source: 
> 		 links[refLink] == msg.sender ? owner : links[refLink];
> 		user.inviter = inviter1;
>        ^^^^^^^^^^^^^^^^^^^
> 		user.inviterLink = inviter1 == owner ? 1 : refLink;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherTron
Line:        101
Source: 
> 		user.inviter = inviter1;
> 		user.inviterLink = inviter1 == owner ? 1 : refLink;
>                                  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherTron
Line:        173
Source: 
> 			setRefLink(refLink);
> 			if(now < startDate) {
>                 ^^^^^^^^
> 				user.tier = 2;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherTron
Line:        188
Source: 
> 
> 		totalInvested = totalInvested.add(msg.value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		user.investment = user.investment.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherTron
Line:        196
Source: 
> 		checkout(msg.sender);
> 		User storage user = users[msg.sender];
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(user.balance > 0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherTron
Line:        203
Source: 
> 		refSpreader(user.inviter, amount);
> 		totalInvested = totalInvested.add(amount);
>                                     ^^^^^^^^
> 		owner.transfer(amount.mul(ownersPart).div(100));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherTron
Line:        206
Source: 
> 	}
> 
> 
> 	function withdraw() external payable {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherTron
Line:        230
Source: 
> 	function () external payable {
> 		deposit(0);
>             ^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherTron
Line:        247
Source: 
> 	
> 	function _setRates(uint rate0, uint rate1, uint rate2) external payable restricted {
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		rates[0] = rate0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        257
Source: 
> 		refReward[2] = reward3;
> 		refReward[3] = reward4;
>     ^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        273
Source: 
> 	
> 	function _setLastRefLink(uint32 newRefLink) external payable restricted {
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lastRefLink = newRefLink;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        173
Source: 
> 			setRefLink(refLink);
> 			if(now < startDate) {
>                 ^^^^^^^^
> 				user.tier = 2;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        188
Source: 
> 
> 		totalInvested = totalInvested.add(msg.value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		user.investment = user.investment.add(msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        196
Source: 
> 		checkout(msg.sender);
> 		User storage user = users[msg.sender];
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(user.balance > 0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        203
Source: 
> 		refSpreader(user.inviter, amount);
> 		totalInvested = totalInvested.add(amount);
>                                     ^^^^^^^^
> 		owner.transfer(amount.mul(ownersPart).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        206
Source: 
> 	}
> 
> 
> 	function withdraw() external payable {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        230
Source: 
> 	function () external payable {
> 		deposit(0);
>             ^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        247
Source: 
> 	
> 	function _setRates(uint rate0, uint rate1, uint rate2) external payable restricted {
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		rates[0] = rate0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherTron
Line:        266
Source: 
> 	function _setStartDate(uint newStartDate) external payable restricted {
> 		startDate = newStartDate;
>                 ^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        173
Source: 
> 			setRefLink(refLink);
> 			if(now < startDate) {
>                 ^^^^^^^^
> 				user.tier = 2;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        188
Source: 
> 
> 		totalInvested = totalInvested.add(msg.value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		user.investment = user.investment.add(msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        196
Source: 
> 		checkout(msg.sender);
> 		User storage user = users[msg.sender];
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(user.balance > 0);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        203
Source: 
> 		refSpreader(user.inviter, amount);
> 		totalInvested = totalInvested.add(amount);
>                                     ^^^^^^^^
> 		owner.transfer(amount.mul(ownersPart).div(100));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        206
Source: 
> 	}
> 
> 
> 	function withdraw() external payable {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        230
Source: 
> 	function () external payable {
> 		deposit(0);
>             ^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        247
Source: 
> 	
> 	function _setRates(uint rate0, uint rate1, uint rate2) external payable restricted {
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		rates[0] = rate0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        257
Source: 
> 		refReward[2] = reward3;
> 		refReward[3] = reward4;
>     ^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        266
Source: 
> 	function _setStartDate(uint newStartDate) external payable restricted {
> 		startDate = newStartDate;
>                 ^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherTron
Line:        273
Source: 
> 	
> 	function _setLastRefLink(uint32 newRefLink) external payable restricted {
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lastRefLink = newRefLink;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherTron
Line:        173
Source: 
> 			setRefLink(refLink);
> 			if(now < startDate) {
>                 ^^^^^^^^
> 				user.tier = 2;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherTron
Line:        188
Source: 
> 
> 		totalInvested = totalInvested.add(msg.value);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		user.investment = user.investment.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherTron
Line:        196
Source: 
> 		checkout(msg.sender);
> 		User storage user = users[msg.sender];
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(user.balance > 0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherTron
Line:        203
Source: 
> 		refSpreader(user.inviter, amount);
> 		totalInvested = totalInvested.add(amount);
>                                     ^^^^^^^^
> 		owner.transfer(amount.mul(ownersPart).div(100));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherTron
Line:        206
Source: 
> 	}
> 
> 
> 	function withdraw() external payable {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    EtherTron
Line:        230
Source: 
> 	function () external payable {
> 		deposit(0);
>             ^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        149
Source: 
> 		if (inviter3 != address(0x0)) {
> 			refSum = refSum.sub(refReward[2]);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			uint reward3 = amount.mul(refReward[2]).div(100);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        151
Source: 
> 			uint reward3 = amount.mul(refReward[2]).div(100);
> 			users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
>                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			inviter3.transfer(reward3);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        152
Source: 
> 			users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
> 			inviter3.transfer(reward3);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        170
Source: 
> 		checkout(msg.sender);
> 		User storage user = users[msg.sender];
>                              ^^^^^^^^^^^
> 		if (user.refLink == 0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        182
Source: 
> 			if (user.inviter == address(0x0)) {
> 				setInviter(refLink);
>           ^^^^^^^^^^^^^^
> 			}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        193
Source: 
> 
> 	function reinvest() external payable {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(now > startDate);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        200
Source: 
> 		user.balance = 0;
> 		user.investment = user.investment.add(amount);
>                                             ^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        224
Source: 
> 		require(msg.value == tierPrices[user.tier + 1]);
> 		checkout(msg.sender);
>                     ^^^
> 		user.tier++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherTron
Line:        226
Source: 
> 		user.tier++;
> 		owner.transfer(msg.value);
>                             
> 	}

[0m
