Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Etherpower
Line:        108
Source: 
>     uint secondsGone = now.sub(user.timestamp);
>     if (secondsGone == 0 || user.timestamp == 0) return;
>         ^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        228
Source: 
>         uint256 c = a * b;
>         require(c / a == b);
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherpower
Line:        63
Source: 
> 
>   function changeOwner(address payable newOwner) public restricted {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherpower
Line:        67
Source: 
>   }
>   function setFees(address _fees, uint256 _value) public restricted {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if(address(this).balance>=_value){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherpower
Line:        162
Source: 
> 
>   function deposit(uint64 refLink) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value >= minDeposit);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherpower
Line:        188
Source: 
> 
>   function reinvest() public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(now > 1595937600);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Etherpower
Line:        204
Source: 
>   // no separate withdraws like other scam projects
>   function withdraw() public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     checkout(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherpower
Line:        63
Source: 
> 
>   function changeOwner(address payable newOwner) public restricted {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherpower
Line:        73
Source: 
> 
>   function setRefLink(uint64 refLink) public returns (uint64) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     User storage user = users[msg.sender];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Etherpower
Line:        162
Source: 
> 
>   function deposit(uint64 refLink) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value >= minDeposit);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Etherpower
Line:        67
Source: 
>   }
>   function setFees(address _fees, uint256 _value) public restricted {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if(address(this).balance>=_value){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Etherpower
Line:        127
Source: 
>       users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
>       inviter1.transfer(reward1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Etherpower
Line:        134
Source: 
>       users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
>       inviter2.transfer(reward2);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Etherpower
Line:        141
Source: 
>       users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
>       inviter3.transfer(reward3);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Etherpower
Line:        148
Source: 
>       users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
>       inviter4.transfer(reward4);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherpower
Line:        39
Source: 
>   
>   event withdrawEvent(address indexed _player, uint256 indexed _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event reinvestEvent(address indexed _player, uint256 indexed _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherpower
Line:        40
Source: 
>   event withdrawEvent(address indexed _player, uint256 indexed _amount);
>   event reinvestEvent(address indexed _player, uint256 indexed _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event investmentEvent(address indexed _player, uint256 indexed _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Etherpower
Line:        41
Source: 
>   event reinvestEvent(address indexed _player, uint256 indexed _amount);
>   event investmentEvent(address indexed _player, uint256 indexed _amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        69
Source: 
>       if(address(this).balance>=_value){
>         address(uint160(_fees)).transfer(_value);    
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        127
Source: 
>       users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
>       inviter1.transfer(reward1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        134
Source: 
>       users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
>       inviter2.transfer(reward2);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        141
Source: 
>       users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
>       inviter3.transfer(reward3);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        148
Source: 
>       users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
>       inviter4.transfer(reward4);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        155
Source: 
>       users[inviter5].totalRefReward = users[inviter5].totalRefReward.add(reward5);
>       inviter5.transfer(reward5);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        159
Source: 
>     if (refSum == 0) return;
>     owner.transfer(amount.mul(refSum).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        184
Source: 
>     user.investment = user.investment.add(msg.value);
>     owner.transfer(msg.value.mul(ownersPart).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit investmentEvent(msg.sender, msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        199
Source: 
>     totalInvested = totalInvested.add(msg.value);
>     owner.transfer(amount.mul(ownersPart).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit reinvestEvent(msg.sender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        212
Source: 
>     user.balance = 0;
>     msg.sender.transfer(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit withdrawEvent(msg.sender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Etherpower
Line:        69
Source: 
>       if(address(this).balance>=_value){
>         address(uint160(_fees)).transfer(_value);    
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        127
Source: 
>       users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
>       inviter1.transfer(reward1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        134
Source: 
>       users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
>       inviter2.transfer(reward2);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        141
Source: 
>       users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
>       inviter3.transfer(reward3);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        148
Source: 
>       users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
>       inviter4.transfer(reward4);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        155
Source: 
>       users[inviter5].totalRefReward = users[inviter5].totalRefReward.add(reward5);
>       inviter5.transfer(reward5);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        159
Source: 
>     if (refSum == 0) return;
>     owner.transfer(amount.mul(refSum).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        184
Source: 
>     user.investment = user.investment.add(msg.value);
>     owner.transfer(msg.value.mul(ownersPart).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit investmentEvent(msg.sender, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Etherpower
Line:        199
Source: 
>     totalInvested = totalInvested.add(msg.value);
>     owner.transfer(amount.mul(ownersPart).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit reinvestEvent(msg.sender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        69
Source: 
>       if(address(this).balance>=_value){
>         address(uint160(_fees)).transfer(_value);    
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        127
Source: 
>       users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
>       inviter1.transfer(reward1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        134
Source: 
>       users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
>       inviter2.transfer(reward2);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        141
Source: 
>       users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
>       inviter3.transfer(reward3);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        148
Source: 
>       users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
>       inviter4.transfer(reward4);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        155
Source: 
>       users[inviter5].totalRefReward = users[inviter5].totalRefReward.add(reward5);
>       inviter5.transfer(reward5);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        159
Source: 
>     if (refSum == 0) return;
>     owner.transfer(amount.mul(refSum).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        184
Source: 
>     user.investment = user.investment.add(msg.value);
>     owner.transfer(msg.value.mul(ownersPart).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit investmentEvent(msg.sender, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        199
Source: 
>     totalInvested = totalInvested.add(msg.value);
>     owner.transfer(amount.mul(ownersPart).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit reinvestEvent(msg.sender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Etherpower
Line:        212
Source: 
>     user.balance = 0;
>     msg.sender.transfer(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit withdrawEvent(msg.sender, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Etherpower
Line:        127
Source: 
>       users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
>       inviter1.transfer(reward1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Etherpower
Line:        134
Source: 
>       users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
>       inviter2.transfer(reward2);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Etherpower
Line:        141
Source: 
>       users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
>       inviter3.transfer(reward3);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Etherpower
Line:        148
Source: 
>       users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
>       inviter4.transfer(reward4);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Etherpower
Line:        155
Source: 
>       users[inviter5].totalRefReward = users[inviter5].totalRefReward.add(reward5);
>       inviter5.transfer(reward5);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Etherpower
Line:        159
Source: 
>     if (refSum == 0) return;
>     owner.transfer(amount.mul(refSum).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Etherpower
Line:        184
Source: 
>     user.investment = user.investment.add(msg.value);
>     owner.transfer(msg.value.mul(ownersPart).div(100));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit investmentEvent(msg.sender, msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherpower
Line:        111
Source: 
>     uint profit = user.investment.mul(secondsGone).div(rateDivider);
>     user.balance = user.balance.add(profit);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     user.timestamp = user.timestamp.add(secondsGone);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherpower
Line:        112
Source: 
>     user.balance = user.balance.add(profit);
>     user.timestamp = user.timestamp.add(secondsGone);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherpower
Line:        126
Source: 
>       uint reward1 = amount.mul(refReward[0]).div(100);
>       users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       inviter1.transfer(reward1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherpower
Line:        133
Source: 
>       uint reward2 = amount.mul(refReward[1]).div(100);
>       users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       inviter2.transfer(reward2);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherpower
Line:        140
Source: 
>       uint reward3 = amount.mul(refReward[2]).div(100);
>       users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       inviter3.transfer(reward3);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherpower
Line:        147
Source: 
>       uint reward4 = amount.mul(refReward[3]).div(100);
>       users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       inviter4.transfer(reward4);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherpower
Line:        154
Source: 
>       uint reward5 = amount.mul(refReward[4]).div(100);
>       users[inviter5].totalRefReward = users[inviter5].totalRefReward.add(reward5);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       inviter5.transfer(reward5);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Etherpower
Line:        182
Source: 
> 
>     totalInvested = totalInvested.add(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     user.investment = user.investment.add(msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Etherpower
Line:        183
Source: 
>     totalInvested = totalInvested.add(msg.value);
>     user.investment = user.investment.add(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner.transfer(msg.value.mul(ownersPart).div(100));

[0m
