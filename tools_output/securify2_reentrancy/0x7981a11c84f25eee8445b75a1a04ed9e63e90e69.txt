Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        10
Source: 
>   uint256 exchangeFee;
>   uint256 SafeTime = 2 hours; // atomic swap timeOut
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        30
Source: 
> 
>   function updateExchangeFeeAddress (address payable newAddress) public returns (bool status) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(owner == msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        36
Source: 
> 
>   function updateExchangeFee (uint256 newExchangeFee) public returns (bool status) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(owner == msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        46
Source: 
>   // ETH Owner make Ether deposit
>   function createSwap(bytes20 _secretHash, address payable _participantAddress) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        63
Source: 
>   // ETH Owner make Ether deposit
>   function createSwapTarget(bytes20 _secretHash, address payable _participantAddress, address payable _targetWallet) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        78
Source: 
> 
>   function getBalance(address _ownerAddress) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return swaps[_ownerAddress][msg.sender].balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        83
Source: 
>   // Get target wallet (buyer check)
>   function getTargetWallet(address _ownerAddress) public view returns (address) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return swaps[_ownerAddress][msg.sender].targetWallet;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        91
Source: 
>   // BTC Owner receive +1 reputation
>   function withdraw(bytes32 _secret, address _ownerAddress) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Swap memory swap = swaps[_ownerAddress][msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        112
Source: 
>   // BTC Owner receive +1 reputation
>   function withdrawNoMoney(bytes32 _secret, address participantAddress) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Swap memory swap = swaps[msg.sender][participantAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        133
Source: 
>   // BTC Owner receive +1 reputation
>   function withdrawOther(bytes32 _secret, address _ownerAddress, address participantAddress) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Swap memory swap = swaps[_ownerAddress][participantAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        155
Source: 
>   // ETH Owner receive secret
>   function getSecret(address _participantAddress) public view returns (bytes32) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return swaps[msg.sender][_participantAddress].secret;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        167
Source: 
>   // BTC Owner gets -1 reputation
>   function refund(address _participantAddress) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Swap memory swap = swaps[msg.sender][_participantAddress];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    SGCDEXETHSwap
Line:        36
Source: 
> 
>   function updateExchangeFee (uint256 newExchangeFee) public returns (bool status) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(owner == msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        30
Source: 
> 
>   function updateExchangeFeeAddress (address payable newAddress) public returns (bool status) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(owner == msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        46
Source: 
>   // ETH Owner make Ether deposit
>   function createSwap(bytes20 _secretHash, address payable _participantAddress) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value > 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        63
Source: 
>   // ETH Owner make Ether deposit
>   function createSwapTarget(bytes20 _secretHash, address payable _participantAddress, address payable _targetWallet) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value > 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        78
Source: 
> 
>   function getBalance(address _ownerAddress) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return swaps[_ownerAddress][msg.sender].balance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        83
Source: 
>   // Get target wallet (buyer check)
>   function getTargetWallet(address _ownerAddress) public view returns (address) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return swaps[_ownerAddress][msg.sender].targetWallet;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        155
Source: 
>   // ETH Owner receive secret
>   function getSecret(address _participantAddress) public view returns (bytes32) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return swaps[msg.sender][_participantAddress].secret;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        198
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        102
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        103
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        123
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        124
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        145
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        146
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        10
Source: 
>   uint256 exchangeFee;
>   uint256 SafeTime = 2 hours; // atomic swap timeOut
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1
Source: 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 
> contract SGCDEXETHSwap {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        8
Source: 
>   address public owner;
>   address payable exchangeFeeAddress;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 exchangeFee;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        9
Source: 
>   address payable exchangeFeeAddress;
>   uint256 exchangeFee;
>   ^^^^^^^^^^^^^^^^^^^
>   uint256 SafeTime = 2 hours; // atomic swap timeOut

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        10
Source: 
>   uint256 exchangeFee;
>   uint256 SafeTime = 2 hours; // atomic swap timeOut
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SGCDEXETHSwap
Line:        102
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SGCDEXETHSwap
Line:        103
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SGCDEXETHSwap
Line:        123
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SGCDEXETHSwap
Line:        124
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SGCDEXETHSwap
Line:        145
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    SGCDEXETHSwap
Line:        146
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        173
Source: 
> 
>     msg.sender.transfer(swap.balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        102
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        103
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        123
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        124
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        145
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        146
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        102
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        103
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        123
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        124
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        145
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        146
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        173
Source: 
> 
>     msg.sender.transfer(swap.balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        145
Source: 
> 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     exchangeFeeAddress.transfer(tradeFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        146
Source: 
>     swap.targetWallet.transfer(balanceAfterDeduction);
>     exchangeFeeAddress.transfer(tradeFee);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        148
Source: 
> 
>     swaps[_ownerAddress][participantAddress].balance = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     swaps[_ownerAddress][participantAddress].secret = _secret;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    SGCDEXETHSwap
Line:        149
Source: 
>     swaps[_ownerAddress][participantAddress].balance = 0;
>     swaps[_ownerAddress][participantAddress].secret = _secret;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
