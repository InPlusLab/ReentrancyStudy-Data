[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ETH_8
Line:        115
Source: 
>         // solium-disable-next-line security/no-inline-assembly
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(data, 20)) 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    ETH_8
Line:        86
Source: 
>     address payable public owner;
>     address payable public teamWallet = 0x947fEa6f44e8b514DfE2f1Bb8bc2a86FD493874f;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(uint256 => mapping(address => User)) public users;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        16
Source: 
>     // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
>     if (_a == 0) {
>         ^^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        21
Source: 
>     c = _a * _b;
>     assert(c / _a == _b);
>            ^^^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    ETH_8
Line:        215
Source: 
>             dailyTotalInvest = dailyTotalInvest.add(investable);
>             if(dailyTotalInvest == dailyLimit){
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 waiting = waiting.add(1 days);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ETH_8
Line:        291
Source: 
>     
>     function virtualInvest(address from, uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_8
Line:        276
Source: 
> 
>     function changeTeamFee(uint256 feeRate) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_8
Line:        281
Source: 
>     
>     function changeDailyLimit(uint256 newLimit) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ETH_8
Line:        286
Source: 
>     
>     function changeReferrerFee(uint256 feeRate) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETH_8
Line:        235
Source: 
>     
>     function getUserInterest(address wallet) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         User memory user = users[wave][wallet];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ETH_8
Line:        291
Source: 
>     
>     function virtualInvest(address from, uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        20
Source: 
> 
>     c = _a * _b;
>         ^^^^^^^
>     assert(c / _a == _b);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    ETH_8
Line:        224
Source: 
>         uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
>         investor.referrer.transfer(refAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETH_8
Line:        53
Source: 
> 
> contract ETH_8 {
> ^^^^^^^^^^^^^^^^
>     using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETH_8
Line:        57
Source: 
>     uint256 constant public ONE_HUNDRED_PERCENTS = 10000;               // 100%
>     uint256[] public DAILY_INTEREST = [111, 133, 222, 333, 444];        // 1.11%, 2.22%, 3.33%, 4.44%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[] public REFERRAL_AMOUNT_CLASS = [1 ether, 10 ether, 20 ether ];               // 1ether, 10ether, 20ether

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETH_8
Line:        58
Source: 
>     uint256[] public DAILY_INTEREST = [111, 133, 222, 333, 444];        // 1.11%, 2.22%, 3.33%, 4.44%
>     uint256[] public REFERRAL_AMOUNT_CLASS = [1 ether, 10 ether, 20 ether ];               // 1ether, 10ether, 20ether
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public MARKETING_AND_TEAM_FEE = 1000;                       // 10%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ETH_8
Line:        59
Source: 
>     uint256[] public REFERRAL_AMOUNT_CLASS = [1 ether, 10 ether, 20 ether ];               // 1ether, 10ether, 20ether
>     uint256 public MARKETING_AND_TEAM_FEE = 1000;                       // 10%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public referralPercents = 1000;                             // 10%

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.8;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETH_8
Line:        192
Source: 
>         uint256 marketingAndTeamFee = investment.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);
>         teamWallet.transfer(marketingAndTeamFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(from, marketingAndTeamFee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETH_8
Line:        224
Source: 
>         uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
>         investor.referrer.transfer(refAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETH_8
Line:        132
Source: 
>         }
>         from.transfer(dividendsSum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit UserDividendPayed(from, dividendsSum);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    ETH_8
Line:        224
Source: 
>         uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
>         investor.referrer.transfer(refAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    ETH_8
Line:        192
Source: 
>         uint256 marketingAndTeamFee = investment.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);
>         teamWallet.transfer(marketingAndTeamFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(from, marketingAndTeamFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETH_8
Line:        132
Source: 
>         }
>         from.transfer(dividendsSum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit UserDividendPayed(from, dividendsSum);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETH_8
Line:        192
Source: 
>         uint256 marketingAndTeamFee = investment.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);
>         teamWallet.transfer(marketingAndTeamFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(from, marketingAndTeamFee);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    ETH_8
Line:        224
Source: 
>         uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
>         investor.referrer.transfer(refAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ETH_8
Line:        132
Source: 
>         }
>         from.transfer(dividendsSum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit UserDividendPayed(from, dividendsSum);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ETH_8
Line:        192
Source: 
>         uint256 marketingAndTeamFee = investment.mul(MARKETING_AND_TEAM_FEE).div(ONE_HUNDRED_PERCENTS);
>         teamWallet.transfer(marketingAndTeamFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit FeePayed(from, marketingAndTeamFee);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    ETH_8
Line:        224
Source: 
>         uint256 refAmount = investment.mul(referralPercents).div(ONE_HUNDRED_PERCENTS);
>         investor.referrer.transfer(refAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        124
Source: 
>         
>         totalDividend = totalDividend.add(dividendsSum);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(this).balance <= dividendsSum) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        126
Source: 
>         if (address(this).balance <= dividendsSum) {
>             wave = wave.add(1);
>             ^^^^^^^^^^^^^^^^^^
>             totalInvest = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        127
Source: 
>             wave = wave.add(1);
>             totalInvest = 0;
>             ^^^^^^^^^^^^^^^
>             totalDividend = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        128
Source: 
>             totalInvest = 0;
>             totalDividend = 0;
>             ^^^^^^^^^^^^^^^^^
>             dividendsSum = address(this).balance;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        143
Source: 
>             uint256 withdrawRate = dividendRate(wallet, i);
>             user.deposits[i].withdrawedRate = user.deposits[i].withdrawedRate.add(withdrawRate);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             user.deposits[i].lastPayment = max(now, user.deposits[i].lastPayment);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        144
Source: 
>             user.deposits[i].withdrawedRate = user.deposits[i].withdrawedRate.add(withdrawRate);
>             user.deposits[i].lastPayment = max(now, user.deposits[i].lastPayment);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             sum = sum.add(user.deposits[i].amount.mul(withdrawRate).div(ONE_HUNDRED_PERCENTS));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        168
Source: 
>             ) {
>                 user.referrer = newReferrer;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 emit ReferrerAdded(from, newReferrer);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        172
Source: 
>             
>             user.isInvestor = true;
>             ^^^^^^^^^^^^^^^^^^^^^^
>             user.interest = getUserInterest(from);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        173
Source: 
>             user.isInvestor = true;
>             user.interest = getUserInterest(from);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit InvestorAdded(from);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        185
Source: 
>         
>         totalInvest = totalInvest.add(investment);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        202
Source: 
>         if(now > waiting.add(1 days)){
>             waiting = now;
>             ^^^^^^^^^^^^^
>             dailyTotalInvest = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        203
Source: 
>             waiting = now;
>             dailyTotalInvest = 0;
>             ^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        207
Source: 
>             uint256 investable = min(investment, dailyLimit.sub(dailyTotalInvest));
>             user.deposits.push(Deposit({
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 amount: investable,

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        214
Source: 
>             investment = investment.sub(investable);
>             dailyTotalInvest = dailyTotalInvest.add(investable);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if(dailyTotalInvest == dailyLimit){

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        216
Source: 
>             if(dailyTotalInvest == dailyLimit){
>                 waiting = waiting.add(1 days);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 dailyTotalInvest = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        217
Source: 
>                 waiting = waiting.add(1 days);
>                 dailyTotalInvest = 0;
>                 ^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        227
Source: 
>         User storage referrer = users[wave][investor.referrer];
>         referrer.referralAmount = referrer.referralAmount.add(investment);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 newInterest = getUserInterest(investor.referrer);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        230
Source: 
>         if(newInterest != referrer.interest){ 
>             referrer.dividend = getDividends(investor.referrer);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             referrer.interest = newInterest;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ETH_8
Line:        231
Source: 
>             referrer.dividend = getDividends(investor.referrer);
>             referrer.interest = newInterest;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ETH_8
Line:        140
Source: 
>         sum = user.dividend;
>         user.dividend = 0;
>         ^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < user.deposits.length; i++) {

[0m
