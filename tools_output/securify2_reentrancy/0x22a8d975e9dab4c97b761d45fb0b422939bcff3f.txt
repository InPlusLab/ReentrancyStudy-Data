Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        200
Source: 
> 
>     Roles.Role private _pausers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        127
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        136
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        215
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        219
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        215
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        219
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        255
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        278
Source: 
>      */
>     function pause(uint256 selfDestructPeriod) public onlyPauser whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        287
Source: 
>      */
>     function unpause() public onlyPauser whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        215
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        219
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        255
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        278
Source: 
>      */
>     function pause(uint256 selfDestructPeriod) public onlyPauser whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        287
Source: 
>      */
>     function unpause() public onlyPauser whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableDestroyable
Line:        297
Source: 
> 
>     function destroy() public whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(selfDestructAt <= now);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        127
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        136
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        215
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        219
Source: 
> 
>     function renouncePauser() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _removePauser(msg.sender);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        255
Source: 
>      */
>     function paused() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        278
Source: 
>      */
>     function pause(uint256 selfDestructPeriod) public onlyPauser whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        287
Source: 
>      */
>     function unpause() public onlyPauser whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableDestroyable
Line:        297
Source: 
> 
>     function destroy() public whenPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(selfDestructAt <= now);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UBIVault
Line:        354
Source: 
> 
>     function claimUBIOwner(address payable[] memory citizens, bool onlyOne) public onlyOwner returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool allRequestedCitizensGotPayout = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UBIVault
Line:        364
Source: 
> 
>     function claimUBIPublic(bool onlyOne) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(claimUBI(msg.sender, onlyOne), "There is no claimable UBI available for your account");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UBIVault
Line:        368
Source: 
> 
>     function createUseablePasswords(bytes32[] memory _useablePasswordHashes) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint256 i = 0; i < _useablePasswordHashes.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UBIVault
Line:        387
Source: 
>     */
>     function createUBI(uint256 adjustedEuroCentInWei) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> //        uint256 adjustedDollarInWei = adjustedEuroCentInWei.mul(100);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UBIVault
Line:        418
Source: 
> 
>     function registerCitizenOwner(address newCitizen) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newCitizen != address(0) , "NewCitizen cannot be the 0 address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UBIVault
Line:        423
Source: 
> 
>     function registerCitizenPublic(bytes32 password) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 passwordHash = keccak256(abi.encodePacked(password));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UBIVault
Line:        436
Source: 
>     ///@dev availableEther is truncated (rounded down), the remainder becomes available for maintenancePool
>     function sponsorVault(bytes32 message) public payable whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         moneyReceived(message);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    UBIVault
Line:        464
Source: 
>         promisedEther = promisedEther.sub(income);
>         citizen.transfer(income);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogUBIClaimed(msg.sender, income, citizen);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        136
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        211
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        215
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        211
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        215
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        211
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        215
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        136
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        211
Source: 
> 
>     function isPauser(address account) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        215
Source: 
> 
>     function addPauser(address account) public onlyPauser {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UBIVault
Line:        354
Source: 
> 
>     function claimUBIOwner(address payable[] memory citizens, bool onlyOne) public onlyOwner returns(bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool allRequestedCitizensGotPayout = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UBIVault
Line:        364
Source: 
> 
>     function claimUBIPublic(bool onlyOne) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(claimUBI(msg.sender, onlyOne), "There is no claimable UBI available for your account");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UBIVault
Line:        387
Source: 
>     */
>     function createUBI(uint256 adjustedEuroCentInWei) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> //        uint256 adjustedDollarInWei = adjustedEuroCentInWei.mul(100);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pausable
Line:        278
Source: 
>      */
>     function pause(uint256 selfDestructPeriod) public onlyPauser whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _paused = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    UBIVault
Line:        436
Source: 
>     ///@dev availableEther is truncated (rounded down), the remainder becomes available for maintenancePool
>     function sponsorVault(bytes32 message) public payable whenNotPaused {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         moneyReceived(message);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    UBIVault
Line:        464
Source: 
>         promisedEther = promisedEther.sub(income);
>         citizen.transfer(income);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogUBIClaimed(msg.sender, income, citizen);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    UBIVault
Line:        330
Source: 
>     uint256 public promisedEther;
>     uint256 lastPayout;
>     ^^^^^^^^^^^^^^^^^^
>     uint256[] public paymentsCycle;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    UBIVault
Line:        464
Source: 
>         promisedEther = promisedEther.sub(income);
>         citizen.transfer(income);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogUBIClaimed(msg.sender, income, citizen);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    UBIVault
Line:        464
Source: 
>         promisedEther = promisedEther.sub(income);
>         citizen.transfer(income);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogUBIClaimed(msg.sender, income, citizen);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    UBIVault
Line:        473
Source: 
>       availableEther = availableEther.add(increaseInAvailableEther);
>       maintenancePool.transfer(msg.value - increaseInAvailableEther);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit LogVaultSponsored(msg.sender, message, msg.value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UBIVault
Line:        464
Source: 
>         promisedEther = promisedEther.sub(income);
>         citizen.transfer(income);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogUBIClaimed(msg.sender, income, citizen);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    UBIVault
Line:        473
Source: 
>       availableEther = availableEther.add(increaseInAvailableEther);
>       maintenancePool.transfer(msg.value - increaseInAvailableEther);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit LogVaultSponsored(msg.sender, message, msg.value);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    UBIVault
Line:        456
Source: 
>         } else if(incomeClaims > 1) {
>             for(uint256 index; index < incomeClaims; index++) {
>                                                      ^^^^^
>                 income = income.add(paymentsCycle[paymentsCycleLength - incomeClaims + index]);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        242
Source: 
> 
>     uint256 public selfDestructAt;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Paused(address account);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UBIVault
Line:        322
Source: 
>     mapping(bytes32 => bool) public usedPasswordHashes;
>     uint8 public amountOfBasicIncomeCanBeIncreased;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public amountOfBasicIncome;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UBIVault
Line:        324
Source: 
>     uint256 public amountOfBasicIncome;
>     uint256 public amountOfCitizens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public euroCentInWei;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UBIVault
Line:        326
Source: 
>     uint256 public euroCentInWei;
>     uint256 public availableEther;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address payable public maintenancePool;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UBIVault
Line:        329
Source: 
>     uint256 public minimumPeriod;
>     uint256 public promisedEther;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 lastPayout;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UBIVault
Line:        330
Source: 
>     uint256 public promisedEther;
>     uint256 lastPayout;
>     ^^^^^^^^^^^^^^^^^^
>     uint256[] public paymentsCycle;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        200
Source: 
> 
>     Roles.Role private _pausers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    UBIVault
Line:        464
Source: 
>         promisedEther = promisedEther.sub(income);
>         citizen.transfer(income);
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogUBIClaimed(msg.sender, income, citizen);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    UBIVault
Line:        473
Source: 
>       availableEther = availableEther.add(increaseInAvailableEther);
>       maintenancePool.transfer(msg.value - increaseInAvailableEther);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit LogVaultSponsored(msg.sender, message, msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted call to selfdestruct
Description: Calls to selfdestruct that can be triggered by any user
             must be inspected.
Type:        Warning
Contract:    PausableDestroyable
Line:        300
Source: 
>         // send remaining funds to address 0, to prevent the owner from taking the funds himself (and steal the funds from the vault)
>         selfdestruct(address(0));
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        169
Source: 
> 
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        179
Source: 
> 
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        169
Source: 
> 
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        179
Source: 
> 
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        279
Source: 
>     function pause(uint256 selfDestructPeriod) public onlyPauser whenNotPaused {
>         _paused = true;
>         ^^^^^^^^^^^^^^
>         selfDestructAt = now + selfDestructPeriod;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        280
Source: 
>         _paused = true;
>         selfDestructAt = now + selfDestructPeriod;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Paused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        288
Source: 
>     function unpause() public onlyPauser whenPaused {
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>         emit Unpaused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        169
Source: 
> 
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        179
Source: 
> 
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        279
Source: 
>     function pause(uint256 selfDestructPeriod) public onlyPauser whenNotPaused {
>         _paused = true;
>         ^^^^^^^^^^^^^^
>         selfDestructAt = now + selfDestructPeriod;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        280
Source: 
>         _paused = true;
>         selfDestructAt = now + selfDestructPeriod;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Paused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        288
Source: 
>     function unpause() public onlyPauser whenPaused {
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>         emit Unpaused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        169
Source: 
> 
>         role.bearer[account] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        179
Source: 
> 
>         role.bearer[account] = false;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        279
Source: 
>     function pause(uint256 selfDestructPeriod) public onlyPauser whenNotPaused {
>         _paused = true;
>         ^^^^^^^^^^^^^^
>         selfDestructAt = now + selfDestructPeriod;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        280
Source: 
>         _paused = true;
>         selfDestructAt = now + selfDestructPeriod;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Paused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        288
Source: 
>     function unpause() public onlyPauser whenPaused {
>         _paused = false;
>         ^^^^^^^^^^^^^^^
>         emit Unpaused(msg.sender);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UBIVault
Line:        462
Source: 
>         }
>         rightFromPaymentCycle[citizen] = paymentsCycleLength;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         promisedEther = promisedEther.sub(income);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UBIVault
Line:        463
Source: 
>         rightFromPaymentCycle[citizen] = paymentsCycleLength;
>         promisedEther = promisedEther.sub(income);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         citizen.transfer(income);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UBIVault
Line:        484
Source: 
>         require(rightFromPaymentCycle[newCitizen] == 0, "Citizen already registered");
>         rightFromPaymentCycle[newCitizen] = paymentsCycle.length;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         amountOfCitizens++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UBIVault
Line:        485
Source: 
>         rightFromPaymentCycle[newCitizen] = paymentsCycle.length;
>         amountOfCitizens++;
>         ^^^^^^^^^^^^^^^^^^
>         emit LogCitizenRegistered(newCitizen);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    UBIVault
Line:        472
Source: 
>       uint256 increaseInAvailableEther = msg.value.mul(95) / 100;
>       availableEther = availableEther.add(increaseInAvailableEther);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       maintenancePool.transfer(msg.value - increaseInAvailableEther);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    UBIVault
Line:        426
Source: 
>         require(useablePasswordHashes[passwordHash] && !usedPasswordHashes[passwordHash], "Password is not known or already used");
>         usedPasswordHashes[passwordHash] = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         registerCitizen(msg.sender);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Pausable
Line:        242
Source: 
> 
>     uint256 public selfDestructAt;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event Paused(address account);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UBIVault
Line:        325
Source: 
>     uint256 public amountOfCitizens;
>     uint256 public euroCentInWei;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public availableEther;

[0m
