[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        65
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        100
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        65
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        91
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        100
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Curve
Line:        689
Source: 
>       */
>     function isCurveActive() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (active_ && init_) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Curve
Line:        701
Source: 
>       */
>     function requiredCollateral(uint256 _initialSupply)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        100
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Curve
Line:        765
Source: 
>       */
>     function mint(
>     ^^^^^^^^^^^^^^
>         uint256 _amount, 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Curve
Line:        795
Source: 
>       */
>     function mintTo(
>     ^^^^^^^^^^^^^^^^
>         uint256 _amount, 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Curve
Line:        826
Source: 
>       */
>     function redeem(uint256 _amount, uint256 _minCollateralReward)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Curve
Line:        659
Source: 
>      */
>     function buyPrice(uint256 _amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Curve
Line:        676
Source: 
>      */
>     function sellReward(uint256 _amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Curve
Line:        701
Source: 
>       */
>     function requiredCollateral(uint256 _initialSupply)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Curve
Line:        736
Source: 
>         // Checks the curve has the correct permissions on the given token
>         require(bzz_.isMinter(address(this)), "Curve is not minter");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Gets the total supply of the token

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Curve
Line:        738
Source: 
>         // Gets the total supply of the token
>         uint256 initialSupply = bzz_.totalSupply();
>                                 ^^^^^^^^^^^^^^^^^^
>         // The curve requires that the initial supply is at least the expected

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Curve
Line:        750
Source: 
>         require(
>             dai_.transferFrom(msg.sender, address(this), price),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Failed to collateralized the curve"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Curve
Line:        838
Source: 
>         // Burns the number of tokens (fails - no bool return)
>         bzz_.burnFrom(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Transfers the reward from the curve to the collateral token

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Curve
Line:        841
Source: 
>         require(
>             dai_.transfer(msg.sender, reward),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transferring collateral failed"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Curve
Line:        862
Source: 
>         // Removes the curve as a minter on the token
>         bzz_.renounceMinter();
>         ^^^^^^^^^^^^^^^^^^^^^
>         // Irreversibly shuts down the curve

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    I_Token
Line:        365
Source: 
>  */
> interface I_Token {
> ^^^^^^^^^^^^^^^^^^^
>     // -------------------------------------------------------------------------

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    I_Curve
Line:        449
Source: 
>  */
> interface I_Curve {
> ^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Curve
Line:        589
Source: 
>     // Emitted when tokens are minted
>     event mintTokens(
>     ^^^^^^^^^^^^^^^^^
>         address indexed buyer,      // The address of the buyer

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Curve
Line:        596
Source: 
>     // Emitted when tokens are minted
>     event mintTokensTo(
>     ^^^^^^^^^^^^^^^^^^^
>         address indexed buyer,      // The address of the buyer

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Curve
Line:        604
Source: 
>     // Emitted when tokens are burnt
>     event burnTokens(
>     ^^^^^^^^^^^^^^^^^
>         address indexed seller,     // The address of the seller

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Curve
Line:        611
Source: 
>     // Emitted when the curve is permanently shut down
>     event shutDownOccurred(address indexed owner);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Curve
Line:        993
Source: 
>             _primitiveFunction(_currentSupply.sub(_amount)));
>         uint256 realized_price = deltaR.div(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         return (deltaR, realized_price);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        37
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        116
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        195
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Curve
Line:        910
Source: 
>     uint256 internal constant _N = 5;
>     uint256 internal constant _MARKET_OPENING_SUPPLY = 62500000 * _BZZ_SCALE;
>                                                        ^^^^^^^^
>     // Equation for curve: 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Curve
Line:        665
Source: 
>     {
>         collateralRequired = _mint(_amount, bzz_.totalSupply());
>                                             ^^^^^^^^^^^^^^^^^^
>         return collateralRequired;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Curve
Line:        682
Source: 
>     {
>         (collateralReward, ) = _withdraw(_amount, bzz_.totalSupply());
>                                                   ^^^^^^^^^^^^^^^^^^
>         return collateralReward;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Curve
Line:        736
Source: 
>         // Checks the curve has the correct permissions on the given token
>         require(bzz_.isMinter(address(this)), "Curve is not minter");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Gets the total supply of the token

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Curve
Line:        738
Source: 
>         // Gets the total supply of the token
>         uint256 initialSupply = bzz_.totalSupply();
>                                 ^^^^^^^^^^^^^^^^^^
>         // The curve requires that the initial supply is at least the expected

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Curve
Line:        750
Source: 
>         require(
>             dai_.transferFrom(msg.sender, address(this), price),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Failed to collateralized the curve"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Curve
Line:        896
Source: 
>         require(
>             dai_.transferFrom(msg.sender, address(this), price),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transferring collateral failed"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Curve
Line:        900
Source: 
>         // Mints the user their tokens
>         require(bzz_.mint(_to, _amount), "Minting tokens failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^
>         // Returns the price the user will pay for buy

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Curve
Line:        841
Source: 
>         require(
>             dai_.transfer(msg.sender, reward),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Transferring collateral failed"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Curve
Line:        838
Source: 
>         // Burns the number of tokens (fails - no bool return)
>         bzz_.burnFrom(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Transfers the reward from the curve to the collateral token

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Curve
Line:        862
Source: 
>         // Removes the curve as a minter on the token
>         bzz_.renounceMinter();
>         ^^^^^^^^^^^^^^^^^^^^^
>         // Irreversibly shuts down the curve

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Curve
Line:        575
Source: 
>     // Stores if the curve has been initialised
>     bool internal init_;
>     ^^^^^^^^^^^^^^^^^^^
>     // The active state of the curve (false after emergency shutdown)

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Curve
Line:        577
Source: 
>     // The active state of the curve (false after emergency shutdown)
>     bool internal active_;
>     ^^^^^^^^^^^^^^^^^^^^^
>     // Mutex guard for state modifying functions

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Curve
Line:        631
Source: 
>         // Any calls to nonReentrant after this point will fail
>         status_ = _ENTERED;
>         ^^^^^^^^^^^^^^^^^^
>         // Function executes

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Curve
Line:        635
Source: 
>         // Status set to not entered
>         status_ = _NOT_ENTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Curve
Line:        631
Source: 
>         // Any calls to nonReentrant after this point will fail
>         status_ = _ENTERED;
>         ^^^^^^^^^^^^^^^^^^
>         // Function executes

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Curve
Line:        635
Source: 
>         // Status set to not entered
>         status_ = _NOT_ENTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Curve
Line:        631
Source: 
>         // Any calls to nonReentrant after this point will fail
>         status_ = _ENTERED;
>         ^^^^^^^^^^^^^^^^^^
>         // Function executes

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Curve
Line:        635
Source: 
>         // Status set to not entered
>         status_ = _NOT_ENTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Curve
Line:        754
Source: 
>         // Sets the Curve to being active and initialised
>         active_ = true;
>         ^^^^^^^^^^^^^^
>         init_ = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Curve
Line:        755
Source: 
>         active_ = true;
>         init_ = true;
>         ^^^^^^^^^^^^
>     }

[0m
