Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.16. Changing pragma version to 0.5.16....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    RevolutionFactory
Line:        15
Source: 
> 
>   address public owner = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Revolution
Line:        311
Source: 
>       // and Does the Bastille have more cakes left than the amount to be distributed ?
>       if (trial.opened == false &&
>           ^^^^^^^^^^^^^^^^^^^^^
>           trial.matchesCriteria == true ) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Revolution
Line:        312
Source: 
>       if (trial.opened == false &&
>           trial.matchesCriteria == true ) {
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint distributed = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RevolutionFactory
Line:        22
Source: 
> 
>   function createRevolution(string memory _criteria, string memory _hashtag, uint _distributionBlockPeriod, uint _distributionAmount, bool _testingMode) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // check that we don't already have a revolution with this hashtag

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RevolutionFactory
Line:        31
Source: 
> 
>   function getRevolution(string memory _hashtag) public view returns (Revolution) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return revolutions[_hashtag];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    RevolutionFactory
Line:        36
Source: 
> 
>   function lockRevolution(string memory _hashtag) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // will irreversibly lock a Revolution given by its hashtag

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Revolution
Line:        131
Source: 
> 
>   function lock() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>     // will irreversibly lock this Revolution

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Revolution
Line:        339
Source: 
> 
>   function getScaleAmount(bool _vote, address _citizen) public view returns (uint) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Revolution
Line:        350
Source: 
> 
>   function trialStatus(address _citizen) public view returns(bool opened, bool matchesCriteria, uint sansculotteScale, uint privilegedScale, string memory name) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Revolution
Line:        358
Source: 
> 
>   function getName(address payable _citizen) public view returns (string memory name) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return names[_citizen];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Revolution
Line:        369
Source: 
> 
>   function voteAndSetName(bool _vote, address payable _citizen, string memory _name) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     vote(_vote, _citizen);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Revolution
Line:        323
Source: 
>         if (distributed > 0) {
>           if (citizen.send(distributed)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^
>             bastilleBalance -= distributed;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RevolutionFactory
Line:        22
Source: 
> 
>   function createRevolution(string memory _criteria, string memory _hashtag, uint _distributionBlockPeriod, uint _distributionAmount, bool _testingMode) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // check that we don't already have a revolution with this hashtag

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RevolutionFactory
Line:        31
Source: 
> 
>   function getRevolution(string memory _hashtag) public view returns (Revolution) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return revolutions[_hashtag];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    RevolutionFactory
Line:        36
Source: 
> 
>   function lockRevolution(string memory _hashtag) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // will irreversibly lock a Revolution given by its hashtag

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Revolution
Line:        339
Source: 
> 
>   function getScaleAmount(bool _vote, address _citizen) public view returns (uint) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Revolution
Line:        350
Source: 
> 
>   function trialStatus(address _citizen) public view returns(bool opened, bool matchesCriteria, uint sansculotteScale, uint privilegedScale, string memory name) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Revolution
Line:        358
Source: 
> 
>   function getName(address payable _citizen) public view returns (string memory name) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return names[_citizen];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Revolution
Line:        363
Source: 
> 
>   function setName(address payable _citizen, string memory _name) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == _citizen);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Revolution
Line:        369
Source: 
> 
>   function voteAndSetName(bool _vote, address payable _citizen, string memory _name) public payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     vote(_vote, _citizen);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Revolution
Line:        280
Source: 
>     if (blocksSince < distributionBlockPeriod) {
>       threshold *= blocksSince / distributionBlockPeriod;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       // threshold is now between 0 and probabilityPercent% of 1 million

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Revolution
Line:        323
Source: 
>         if (distributed > 0) {
>           if (citizen.send(distributed)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^
>             bastilleBalance -= distributed;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    RevolutionFactory
Line:        19
Source: 
> 
>   mapping(string => Revolution) revolutions;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Revolution
Line:        275
Source: 
>     uint probabilityPercent = 50;
>     uint million = 1000000;
>                    ^^^^^^^
>     uint threshold = million * probabilityPercent / 100;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Revolution
Line:        323
Source: 
>         if (distributed > 0) {
>           if (citizen.send(distributed)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^
>             bastilleBalance -= distributed;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Revolution
Line:        323
Source: 
>         if (distributed > 0) {
>           if (citizen.send(distributed)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^
>             bastilleBalance -= distributed;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Revolution
Line:        323
Source: 
>         if (distributed > 0) {
>           if (citizen.send(distributed)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^
>             bastilleBalance -= distributed;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    RevolutionFactory
Line:        41
Source: 
>     require(msg.sender == owner);
>     revolutions[_hashtag].lock();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Revolution
Line:        103
Source: 
>   // This is the amount of cakes in the Bastille
>   uint public bastilleBalance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Revolution
Line:        323
Source: 
>         if (distributed > 0) {
>           if (citizen.send(distributed)) {
>               ^^^^^^^^^^^^^^^^^^^^^^^^^
>             bastilleBalance -= distributed;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Revolution
Line:        151
Source: 
>     if (_vote != trial.matchesCriteria) {
>       trial.opened = true;
>       ^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Revolution
Line:        156
Source: 
>       emit TrialOpened('TrialOpened', _citizen);
>       citizens.push(_citizen);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       trial.citizen = _citizen;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Revolution
Line:        157
Source: 
>       citizens.push(_citizen);
>       trial.citizen = _citizen;
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       trial.lastLotteryBlock = block.number;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Revolution
Line:        158
Source: 
>       trial.citizen = _citizen;
>       trial.lastLotteryBlock = block.number;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Revolution
Line:        167
Source: 
>     // record the vote
>     scale.voters.push(msg.sender);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     scale.votes[msg.sender] += msg.value;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Revolution
Line:        324
Source: 
>           if (citizen.send(distributed)) {
>             bastilleBalance -= distributed;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit Distribution('Distribution', citizen, distributed);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Revolution
Line:        241
Source: 
>     // distribute cakes to the Bastille
>     bastilleBalance += remainingRewardCakes;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Revolution
Line:        377
Source: 
>     require(locked == false);
>     bastilleBalance += msg.value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RevolutionFactory
Line:        25
Source: 
>     if (address(revolutions[_hashtag]) == address(0)) {
>       revolutions[_hashtag] = new Revolution(msg.sender, _criteria, _hashtag, _distributionBlockPeriod, _distributionAmount, _testingMode);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       hashtags.push(_hashtag);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    RevolutionFactory
Line:        26
Source: 
>       revolutions[_hashtag] = new Revolution(msg.sender, _criteria, _hashtag, _distributionBlockPeriod, _distributionAmount, _testingMode);
>       hashtags.push(_hashtag);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Revolution
Line:        334
Source: 
>     // Remember when this distribution happened.
>     lastDistributionBlockNumber = block.number;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Revolution
Line:        192
Source: 
>     Trial storage trial = trials[_citizen];
>     trial.opened = false;
>     ^^^^^^^^^^^^^^^^^^^^
>     // Issue a verdict : is this citizen a sans-culotte or a privileged ?

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Revolution
Line:        197
Source: 
>     JusticeScale storage loserScale = trial.sansculotteScale;
>     trial.matchesCriteria = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // .. unless they get more votes on their sans-culotte scale than on their privileged scale.

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Revolution
Line:        202
Source: 
>       loserScale = trial.privilegedScale;
>       trial.matchesCriteria = true;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Revolution
Line:        226
Source: 
>       // Send them back
>       winnerScale.votes[voter]=0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^
>       // FIXME : handle the case of failure to send winningCakes

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Revolution
Line:        249
Source: 
>       address payable voter = loserScale.voters[i];
>       loserScale.votes[voter]=0;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Revolution
Line:        284
Source: 
>     // remember current block
>     trial.lastLotteryBlock = block.number;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if(pseudoRandomNumber(million) < threshold) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Revolution
Line:        228
Source: 
>       // FIXME : handle the case of failure to send winningCakes
>       voter.send(winningCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^^
>       // How many cakes from the loser scale are to be rewarded to this winner citizen ?

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Revolution
Line:        236
Source: 
>       // FIXME : handle the failure of sending rewardCakes
>       voter.send(rewardCakes);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>       remainingRewardCakes -= rewardCakes;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Revolution
Line:        53
Source: 
>   // e.g. : "a sans-culotte"
>   string public criteria;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Revolution
Line:        259
Source: 
>     // random integer between 0 and 1 million
>     uint randomHash = uint(keccak256(abi.encodePacked(block.difficulty,block.timestamp)));
>                                                                        ^^^^^^^^^^^^^^^
>     return randomHash % _max;

[0m
