pragma directive defines a prior version to 0.5.11. Changing pragma version to 0.5.11....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    bidder
Line:        90
Source: 
> contract bidder is Ownable {
>     Auction Hyatt = Auction(0xcFD5096A1eD092a60C8aC76336Bb5Ac19b1BC53A);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        33
Source: 
>     */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bidder
Line:        92
Source: 
> 
>     function bid() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         if(Hyatt.topBidder() != address(this)){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bidder
Line:        103
Source: 
> 
>     function withdraw() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Hyatt.withdraw( Hyatt.balances(address(this)) );

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    bidder
Line:        107
Source: 
> 
>     function drain(uint256 _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Token(0xeb269732ab75A6fD61Ea60b06fE994cD32a83549).transfer(owner, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Auction
Line:        83
Source: 
>     
>     function setExpireTime (uint256 _expireTime) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require (msg.sender == wallet);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Auction
Line:        61
Source: 
>     
>     function deposit (uint256 _amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now <= expireTime);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    bidder
Line:        107
Source: 
> 
>     function drain(uint256 _amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Token(0xeb269732ab75A6fD61Ea60b06fE994cD32a83549).transfer(owner, _amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Auction
Line:        63
Source: 
>         require(now <= expireTime);
>         require(Token(usdxAddr).transferFrom(msg.sender, address(this), _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] += _amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Auction
Line:        75
Source: 
>         balances[msg.sender] -= _amount;
>         require(Token(usdxAddr).transfer(msg.sender, _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    bidder
Line:        89
Source: 
> 
> contract bidder is Ownable {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Auction Hyatt = Auction(0xcFD5096A1eD092a60C8aC76336Bb5Ac19b1BC53A);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    bidder
Line:        90
Source: 
> contract bidder is Ownable {
>     Auction Hyatt = Auction(0xcFD5096A1eD092a60C8aC76336Bb5Ac19b1BC53A);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    bidder
Line:        90
Source: 
> contract bidder is Ownable {
>     Auction Hyatt = Auction(0xcFD5096A1eD092a60C8aC76336Bb5Ac19b1BC53A);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Auction
Line:        63
Source: 
>         require(now <= expireTime);
>         require(Token(usdxAddr).transferFrom(msg.sender, address(this), _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] += _amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Auction
Line:        75
Source: 
>         balances[msg.sender] -= _amount;
>         require(Token(usdxAddr).transfer(msg.sender, _amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Auction
Line:        80
Source: 
>         require(now > expireTime);
>         require(Token(usdxAddr).transfer(wallet, highestBid));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bidder
Line:        93
Source: 
>     function bid() public {
>         if(Hyatt.topBidder() != address(this)){
>            ^^^^^^^^^^^^^^^^^
>             uint256 amount = Hyatt.highestBid() + 1 - Hyatt.balances(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bidder
Line:        94
Source: 
>         if(Hyatt.topBidder() != address(this)){
>             uint256 amount = Hyatt.highestBid() + 1 - Hyatt.balances(address(this));
>                              ^^^^^^^^^^^^^^^^^^
>             Hyatt.deposit( amount );

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bidder
Line:        94
Source: 
>         if(Hyatt.topBidder() != address(this)){
>             uint256 amount = Hyatt.highestBid() + 1 - Hyatt.balances(address(this));
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             Hyatt.deposit( amount );

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    bidder
Line:        104
Source: 
>     function withdraw() public onlyOwner {
>         Hyatt.withdraw( Hyatt.balances(address(this)) );
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bidder
Line:        95
Source: 
>             uint256 amount = Hyatt.highestBid() + 1 - Hyatt.balances(address(this));
>             Hyatt.deposit( amount );
>             ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bidder
Line:        100
Source: 
>     constructor() public {
>         Token(0xeb269732ab75A6fD61Ea60b06fE994cD32a83549).approve(address(Hyatt), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bidder
Line:        104
Source: 
>     function withdraw() public onlyOwner {
>         Hyatt.withdraw( Hyatt.balances(address(this)) );
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    bidder
Line:        108
Source: 
>     function drain(uint256 _amount) public onlyOwner {
>         Token(0xeb269732ab75A6fD61Ea60b06fE994cD32a83549).transfer(owner, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Auction
Line:        49
Source: 
>     address public usdxAddr;
>     address public topBidder;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public wallet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Auction
Line:        51
Source: 
>     address public wallet;
>     uint256 public highestBid;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public expireTime;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    bidder
Line:        100
Source: 
>     constructor() public {
>         Token(0xeb269732ab75A6fD61Ea60b06fE994cD32a83549).approve(address(Hyatt), uint256(-1));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    bidder
Line:        108
Source: 
>     function drain(uint256 _amount) public onlyOwner {
>         Token(0xeb269732ab75A6fD61Ea60b06fE994cD32a83549).transfer(owner, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
