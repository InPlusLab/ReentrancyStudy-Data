Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    MileWallet
Line:        281
Source: 
>     function bytesToAddress(bytes memory bys) private pure returns (address addr) {
>         assembly {
>         ^^^^^^^^^^
>             addr := mload(add(bys, 20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MileWallet
Line:        28
Source: 
> 
>     uint REFERRER_1_LEVEL_LIMIT = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint PERIOD_LENGTH = 100 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    MileWallet
Line:        29
Source: 
>     uint REFERRER_1_LEVEL_LIMIT = 2;
>     uint PERIOD_LENGTH = 100 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MileWallet
Line:        154
Source: 
>     
>     function syncWithOldSC(uint limit) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(oldSC) != address(0), 'Initialize closed');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MileWallet
Line:        272
Source: 
> 
>     function viewUserReferral(address _user) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referral;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MileWallet
Line:        276
Source: 
> 
>     function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].levelExpired[_level];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MileWallet
Line:        230
Source: 
>         if(users[referer].levelExpired[_level] >= now) {
>             sent = address(uint160(referer)).send(LEVEL_PRICE[_level]);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MileWallet
Line:        159
Source: 
>         for(uint i = 0; i < limit; i++) {
>             address user = oldSC.userList(oldSCUserId);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (bool isExist,, uint referrerID) = oldSC.users(user);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MileWallet
Line:        160
Source: 
>             address user = oldSC.userList(oldSCUserId);
>             (bool isExist,, uint referrerID) = oldSC.users(user);
>                                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MileWallet
Line:        165
Source: 
>                 
>                 address ref = oldSC.userList(referrerID);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MileWallet
Line:        176
Source: 
>                     for(uint j = 1; j <= 8; j++) {
>                         users[user].levelExpired[j] = oldSC.viewUserLevelExpired(user, j);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MileWallet
Line:        272
Source: 
> 
>     function viewUserReferral(address _user) public view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].referral;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MileWallet
Line:        276
Source: 
> 
>     function viewUserLevelExpired(address _user, uint _level) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return users[_user].levelExpired[_level];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MileWallet
Line:        159
Source: 
>         for(uint i = 0; i < limit; i++) {
>             address user = oldSC.userList(oldSCUserId);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (bool isExist,, uint referrerID) = oldSC.users(user);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MileWallet
Line:        160
Source: 
>             address user = oldSC.userList(oldSCUserId);
>             (bool isExist,, uint referrerID) = oldSC.users(user);
>                                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MileWallet
Line:        165
Source: 
>                 
>                 address ref = oldSC.userList(referrerID);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MileWallet
Line:        176
Source: 
>                     for(uint j = 1; j <= 8; j++) {
>                         users[user].levelExpired[j] = oldSC.viewUserLevelExpired(user, j);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        28
Source: 
> 
>     uint REFERRER_1_LEVEL_LIMIT = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint PERIOD_LENGTH = 100 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        29
Source: 
>     uint REFERRER_1_LEVEL_LIMIT = 2;
>     uint PERIOD_LENGTH = 100 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        31
Source: 
> 
>     mapping(uint => uint) public LEVEL_PRICE;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        37
Source: 
> 
>     event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event buyLevelEvent(address indexed _user, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        38
Source: 
>     event regLevelEvent(address indexed _user, address indexed _referrer, uint _time);
>     event buyLevelEvent(address indexed _user, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event prolongateLevelEvent(address indexed _user, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        39
Source: 
>     event buyLevelEvent(address indexed _user, uint _level, uint _time);
>     event prolongateLevelEvent(address indexed _user, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        40
Source: 
>     event prolongateLevelEvent(address indexed _user, uint _level, uint _time);
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        41
Source: 
>     event getMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>     event lostMoneyForLevelEvent(address indexed _user, address indexed _referral, uint _level, uint _time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        143
Source: 
> 
>             for(uint l =_level - 1; l > 0; l--) require(users[msg.sender].levelExpired[l] >= now, 'Buy the previous level');
>                 ^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MileWallet
Line:        160
Source: 
>             address user = oldSC.userList(oldSCUserId);
>             (bool isExist,, uint referrerID) = oldSC.users(user);
>              ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MileWallet
Line:        18
Source: 
>     MileWallet public oldSC = MileWallet(0x07D03e87A7dB6c3C87d3D631B3c00A57b9c6E8f1);
>     uint oldSCUserId = 1;
>     ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MileWallet
Line:        28
Source: 
> 
>     uint REFERRER_1_LEVEL_LIMIT = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint PERIOD_LENGTH = 100 days;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MileWallet
Line:        29
Source: 
>     uint REFERRER_1_LEVEL_LIMIT = 2;
>     uint PERIOD_LENGTH = 100 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    MileWallet
Line:        230
Source: 
>         if(users[referer].levelExpired[_level] >= now) {
>             sent = address(uint160(referer)).send(LEVEL_PRICE[_level]);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    MileWallet
Line:        230
Source: 
>         if(users[referer].levelExpired[_level] >= now) {
>             sent = address(uint160(referer)).send(LEVEL_PRICE[_level]);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    MileWallet
Line:        230
Source: 
>         if(users[referer].levelExpired[_level] >= now) {
>             sent = address(uint160(referer)).send(LEVEL_PRICE[_level]);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MileWallet
Line:        159
Source: 
>         for(uint i = 0; i < limit; i++) {
>             address user = oldSC.userList(oldSCUserId);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (bool isExist,, uint referrerID) = oldSC.users(user);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MileWallet
Line:        160
Source: 
>             address user = oldSC.userList(oldSCUserId);
>             (bool isExist,, uint referrerID) = oldSC.users(user);
>                                                ^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MileWallet
Line:        165
Source: 
>                 
>                 address ref = oldSC.userList(referrerID);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MileWallet
Line:        176
Source: 
>                     for(uint j = 1; j <= 8; j++) {
>                         users[user].levelExpired[j] = oldSC.viewUserLevelExpired(user, j);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    MileWallet
Line:        230
Source: 
>         if(users[referer].levelExpired[_level] >= now) {
>             sent = address(uint160(referer)).send(LEVEL_PRICE[_level]);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MileWallet
Line:        176
Source: 
>                     for(uint j = 1; j <= 8; j++) {
>                         users[user].levelExpired[j] = oldSC.viewUserLevelExpired(user, j);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
