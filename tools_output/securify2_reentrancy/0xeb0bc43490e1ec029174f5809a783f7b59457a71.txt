[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    StabinolPriceOracle
Line:        123
Source: 
>         }
>         if(_stolPriceWindow == 0){
>            ^^^^^^^^^^^^^^^^^^^^^
>             // First time price is calculated, set it to the twap price in USD

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        69
Source: 
>     
>     function governanceChangeFrequency(uint256 _freq) external onlyGovernance {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateFrequency = _freq;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    StabinolPriceOracle
Line:        113
Source: 
>                 // This is price in relationship to base pair
>                 lastTWAPPrice = ((cumuPrice - lastTWAPCumulativePrice) / (_blockTime - lastTWAPBlockTime) * 1e18) >> 112;
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 lastTWAPCumulativePrice = cumuPrice;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    StabinolPriceOracle
Line:        127
Source: 
>             // Now calculate USD price from ETH Price
>             _stolUSDPrice = getETHUSD() / 1e10 * lastTWAPPrice / 1e8;
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    StabinolPriceOracle
Line:        130
Source: 
>             // There is already a price window and price, use weighted averages to determine the weight
>             uint256 price = getETHUSD() / 1e10 * lastTWAPPrice / 1e8;
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _stolUSDPrice = (_stolUSDPrice * (_stolPriceWindow * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    StabinolPriceOracle
Line:        131
Source: 
>             uint256 price = getETHUSD() / 1e10 * lastTWAPPrice / 1e8;
>             _stolUSDPrice = (_stolUSDPrice * (_stolPriceWindow * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _stolUSDPrice += (price * (period * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    StabinolPriceOracle
Line:        132
Source: 
>             _stolUSDPrice = (_stolUSDPrice * (_stolPriceWindow * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);
>             _stolUSDPrice += (price * (period * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _stolPriceWindow = period; // Set the window to the new period

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabinolPriceOracle
Line:        79
Source: 
>         UniswapV2Pair pair = UniswapV2Pair(stolLiquidity);
>         (, uint112 reserve1, uint32 _blockTime) = pair.getReserves();
>                                                   ^^^^^^^^^^^^^^^^^^
>         if(reserve1 == 0){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabinolPriceOracle
Line:        96
Source: 
>                 if(_tokenIndex == 0){
>                     lastTWAPCumulativePrice = pair.price0CumulativeLast();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }else{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabinolPriceOracle
Line:        98
Source: 
>                 }else{
>                     lastTWAPCumulativePrice = pair.price1CumulativeLast();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabinolPriceOracle
Line:        108
Source: 
>                 if(_tokenIndex == 0){
>                     cumuPrice = pair.price0CumulativeLast();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }else{

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StabinolPriceOracle
Line:        110
Source: 
>                 }else{
>                     cumuPrice = pair.price1CumulativeLast();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StabinolPriceOracle
Line:        96
Source: 
>                 if(_tokenIndex == 0){
>                     lastTWAPCumulativePrice = pair.price0CumulativeLast();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }else{

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StabinolPriceOracle
Line:        98
Source: 
>                 }else{
>                     lastTWAPCumulativePrice = pair.price1CumulativeLast();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StabinolPriceOracle
Line:        108
Source: 
>                 if(_tokenIndex == 0){
>                     cumuPrice = pair.price0CumulativeLast();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }else{

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    StabinolPriceOracle
Line:        110
Source: 
>                 }else{
>                     cumuPrice = pair.price1CumulativeLast();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        60
Source: 
>         AggregatorV3Interface ethOracle = AggregatorV3Interface(CHAINLINK_ETH_ORACLE);
>         ( , int intEthPrice, , , ) = ethOracle.latestRoundData(); // We only want the answer 
>             ^^^^^^^^^^^^^^^
>         return uint256(intEthPrice) * 1e10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        60
Source: 
>         AggregatorV3Interface ethOracle = AggregatorV3Interface(CHAINLINK_ETH_ORACLE);
>         ( , int intEthPrice, , , ) = ethOracle.latestRoundData(); // We only want the answer 
>             ^^^^^^^^^^^^^^^
>         return uint256(intEthPrice) * 1e10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        79
Source: 
>         UniswapV2Pair pair = UniswapV2Pair(stolLiquidity);
>         (, uint112 reserve1, uint32 _blockTime) = pair.getReserves();
>            ^^^^^^^^^^^^^^^^
>         if(reserve1 == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        79
Source: 
>         UniswapV2Pair pair = UniswapV2Pair(stolLiquidity);
>         (, uint112 reserve1, uint32 _blockTime) = pair.getReserves();
>                              ^^^^^^^^^^^^^^^^^
>         if(reserve1 == 0){

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StabinolPriceOracle
Line:        32
Source: 
>     
>     address constant CHAINLINK_ETH_ORACLE = address(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant DIVISION_FACTOR = 100000;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StabinolPriceOracle
Line:        33
Source: 
>     address constant CHAINLINK_ETH_ORACLE = address(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);
>     uint256 constant DIVISION_FACTOR = 100000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        33
Source: 
>     address constant CHAINLINK_ETH_ORACLE = address(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);
>     uint256 constant DIVISION_FACTOR = 100000;
>                                        ^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        79
Source: 
>         UniswapV2Pair pair = UniswapV2Pair(stolLiquidity);
>         (, uint112 reserve1, uint32 _blockTime) = pair.getReserves();
>                                                   ^^^^^^^^^^^^^^^^^^
>         if(reserve1 == 0){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        96
Source: 
>                 if(_tokenIndex == 0){
>                     lastTWAPCumulativePrice = pair.price0CumulativeLast();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }else{

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        98
Source: 
>                 }else{
>                     lastTWAPCumulativePrice = pair.price1CumulativeLast();
>                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        108
Source: 
>                 if(_tokenIndex == 0){
>                     cumuPrice = pair.price0CumulativeLast();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }else{

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        110
Source: 
>                 }else{
>                     cumuPrice = pair.price1CumulativeLast();
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        60
Source: 
>         AggregatorV3Interface ethOracle = AggregatorV3Interface(CHAINLINK_ETH_ORACLE);
>         ( , int intEthPrice, , , ) = ethOracle.latestRoundData(); // We only want the answer 
>                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return uint256(intEthPrice) * 1e10;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        29
Source: 
>     uint256 private _tokenIndex = 0;
>     uint256 public lastSTOLPriceUpdate; // The last time the price was updated
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public updateFrequency = 10 minutes; // Oracle can be updated at least every 10 minutes

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        37
Source: 
>     address public stolLiquidity;
>     uint256 private lastTWAPCumulativePrice;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint32 private lastTWAPBlockTime;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        38
Source: 
>     uint256 private lastTWAPCumulativePrice;
>     uint32 private lastTWAPBlockTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private lastTWAPPrice;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    StabinolPriceOracle
Line:        39
Source: 
>     uint32 private lastTWAPBlockTime;
>     uint256 private lastTWAPPrice;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        76
Source: 
>         uint256 period = now - lastSTOLPriceUpdate; // Get the time between the last update and now
>         lastSTOLPriceUpdate = now;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         // We will use a combination of the Twap and weighted averages to determine the current price

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        83
Source: 
>             // Reset the oracle
>             _stolUSDPrice = 0;
>             ^^^^^^^^^^^^^^^^^
>             _stolPriceWindow = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        84
Source: 
>             _stolUSDPrice = 0;
>             _stolPriceWindow = 0;
>             ^^^^^^^^^^^^^^^^^^^^
>             lastTWAPBlockTime = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        85
Source: 
>             _stolPriceWindow = 0;
>             lastTWAPBlockTime = 0;
>             ^^^^^^^^^^^^^^^^^^^^^
>             lastTWAPCumulativePrice = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        86
Source: 
>             lastTWAPBlockTime = 0;
>             lastTWAPCumulativePrice = 0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _firstCapture = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        87
Source: 
>             lastTWAPCumulativePrice = 0;
>             _firstCapture = true;
>             ^^^^^^^^^^^^^^^^^^^^
>             emit NoLiquidity();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        96
Source: 
>                 if(_tokenIndex == 0){
>                     lastTWAPCumulativePrice = pair.price0CumulativeLast();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        100
Source: 
>                 }
>                 lastTWAPBlockTime = _blockTime;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _firstCapture = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        101
Source: 
>                 lastTWAPBlockTime = _blockTime;
>                 _firstCapture = false;
>                 ^^^^^^^^^^^^^^^^^^^^^
>                 emit FirstPriceCapture();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        98
Source: 
>                 }else{
>                     lastTWAPCumulativePrice = pair.price1CumulativeLast();
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        113
Source: 
>                 // This is price in relationship to base pair
>                 lastTWAPPrice = ((cumuPrice - lastTWAPCumulativePrice) / (_blockTime - lastTWAPBlockTime) * 1e18) >> 112;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 lastTWAPCumulativePrice = cumuPrice;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        114
Source: 
>                 lastTWAPPrice = ((cumuPrice - lastTWAPCumulativePrice) / (_blockTime - lastTWAPBlockTime) * 1e18) >> 112;
>                 lastTWAPCumulativePrice = cumuPrice;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 lastTWAPBlockTime = _blockTime;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        115
Source: 
>                 lastTWAPCumulativePrice = cumuPrice;
>                 lastTWAPBlockTime = _blockTime;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        125
Source: 
>             // First time price is calculated, set it to the twap price in USD
>             _stolPriceWindow = updateFrequency;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // Now calculate USD price from ETH Price

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        127
Source: 
>             // Now calculate USD price from ETH Price
>             _stolUSDPrice = getETHUSD() / 1e10 * lastTWAPPrice / 1e8;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        131
Source: 
>             uint256 price = getETHUSD() / 1e10 * lastTWAPPrice / 1e8;
>             _stolUSDPrice = (_stolUSDPrice * (_stolPriceWindow * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _stolUSDPrice += (price * (period * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        132
Source: 
>             _stolUSDPrice = (_stolUSDPrice * (_stolPriceWindow * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);
>             _stolUSDPrice += (price * (period * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _stolPriceWindow = period; // Set the window to the new period

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StabinolPriceOracle
Line:        133
Source: 
>             _stolUSDPrice += (price * (period * DIVISION_FACTOR / (_stolPriceWindow + period)) / DIVISION_FACTOR);
>             _stolPriceWindow = period; // Set the window to the new period
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
