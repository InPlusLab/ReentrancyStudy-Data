Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        14
Source: 
> contract Presale {
>   address payable public owner = msg.sender;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public startBlock = 11221812;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        15
Source: 
>   address payable public owner = msg.sender;
>   uint public startBlock = 11221812;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public duration = 120;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        16
Source: 
>   uint public startBlock = 11221812;
>   uint public duration = 120;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public min = 500 finney;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        17
Source: 
>   uint public duration = 120;
>   uint public min = 500 finney;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public max = 1000 finney;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        18
Source: 
>   uint public min = 500 finney;
>   uint public max = 1000 finney;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public price = 10 finney;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        19
Source: 
>   uint public max = 1000 finney;
>   uint public price = 10 finney;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public tokenAddress = 0xb3ef3ce629B6E81944f532580806B399Fe6f0Bd0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        20
Source: 
>   uint public price = 10 finney;
>   address public tokenAddress = 0xb3ef3ce629B6E81944f532580806B399Fe6f0Bd0;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bool finished;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Presale
Line:        40
Source: 
>       owner.transfer(msg.value);
>       token.transfer(msg.sender, msg.value / price * 1 ether);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Presale
Line:        35
Source: 
>     if (block.number > startBlock + duration) {
>       token.burn(token.balanceOf(address(this)));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       finished = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Presale
Line:        35
Source: 
>     if (block.number > startBlock + duration) {
>       token.burn(token.balanceOf(address(this)));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       finished = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Presale
Line:        40
Source: 
>       owner.transfer(msg.value);
>       token.transfer(msg.sender, msg.value / price * 1 ether);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Presale
Line:        39
Source: 
>       bought[msg.sender] += msg.value;
>       owner.transfer(msg.value);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(msg.sender, msg.value / price * 1 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Presale
Line:        21
Source: 
>   address public tokenAddress = 0xb3ef3ce629B6E81944f532580806B399Fe6f0Bd0;
>   bool finished;
>   ^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Presale
Line:        39
Source: 
>       bought[msg.sender] += msg.value;
>       owner.transfer(msg.value);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(msg.sender, msg.value / price * 1 ether);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Presale
Line:        39
Source: 
>       bought[msg.sender] += msg.value;
>       owner.transfer(msg.value);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(msg.sender, msg.value / price * 1 ether);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Presale
Line:        35
Source: 
>     if (block.number > startBlock + duration) {
>       token.burn(token.balanceOf(address(this)));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       finished = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Presale
Line:        35
Source: 
>     if (block.number > startBlock + duration) {
>       token.burn(token.balanceOf(address(this)));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       finished = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Presale
Line:        40
Source: 
>       owner.transfer(msg.value);
>       token.transfer(msg.sender, msg.value / price * 1 ether);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Presale
Line:        21
Source: 
>   address public tokenAddress = 0xb3ef3ce629B6E81944f532580806B399Fe6f0Bd0;
>   bool finished;
>   ^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Presale
Line:        35
Source: 
>     if (block.number > startBlock + duration) {
>       token.burn(token.balanceOf(address(this)));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       finished = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Presale
Line:        40
Source: 
>       owner.transfer(msg.value);
>       token.transfer(msg.sender, msg.value / price * 1 ether);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
