Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiAirdropINJ
Line:        55
Source: 
> 
>     function safeAddAmountsToAirdrop(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory to,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        69
Source: 
>         require(inj.allowance(msg.sender, address(this)) >= totalAmount, "not enough allowance");
>         inj.transferFrom(msg.sender, address(this), totalAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        74
Source: 
>         require(msg.sender == owner, "Only Owner");
>         require(inj.transfer(msg.sender, inj.balanceOf(address(this))), "Transfer failed");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        74
Source: 
>         require(msg.sender == owner, "Only Owner");
>         require(inj.transfer(msg.sender, inj.balanceOf(address(this))), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        79
Source: 
>         require(msg.sender == owner, "Only Owner");
>         require(token.transfer(msg.sender, token.balanceOf(address(this))), "Transfer failed");
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        79
Source: 
>         require(msg.sender == owner, "Only Owner");
>         require(token.transfer(msg.sender, token.balanceOf(address(this))), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        86
Source: 
>         claimableAmounts[msg.sender] = 0;
>         require(inj.transfer(msg.sender, amount), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        93
Source: 
>         claimableAmounts[_for] = 0;
>         require(inj.transfer(_for, amount), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MultiAirdropINJ
Line:        68
Source: 
>         }
>         require(inj.allowance(msg.sender, address(this)) >= totalAmount, "not enough allowance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         inj.transferFrom(msg.sender, address(this), totalAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        96
Source: 
>     
>     function transferOwnerShip(address newOwner) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, "Only Owner");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MultiAirdropINJ
Line:        77
Source: 
>     
>     function returnAnyToken(IERC20 token) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == owner, "Only Owner");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiAirdropINJ
Line:        68
Source: 
>         }
>         require(inj.allowance(msg.sender, address(this)) >= totalAmount, "not enough allowance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         inj.transferFrom(msg.sender, address(this), totalAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiAirdropINJ
Line:        69
Source: 
>         require(inj.allowance(msg.sender, address(this)) >= totalAmount, "not enough allowance");
>         inj.transferFrom(msg.sender, address(this), totalAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiAirdropINJ
Line:        86
Source: 
>         claimableAmounts[msg.sender] = 0;
>         require(inj.transfer(msg.sender, amount), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiAirdropINJ
Line:        93
Source: 
>         claimableAmounts[_for] = 0;
>         require(inj.transfer(_for, amount), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        68
Source: 
>         }
>         require(inj.allowance(msg.sender, address(this)) >= totalAmount, "not enough allowance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         inj.transferFrom(msg.sender, address(this), totalAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        74
Source: 
>         require(msg.sender == owner, "Only Owner");
>         require(inj.transfer(msg.sender, inj.balanceOf(address(this))), "Transfer failed");
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        74
Source: 
>         require(msg.sender == owner, "Only Owner");
>         require(inj.transfer(msg.sender, inj.balanceOf(address(this))), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        79
Source: 
>         require(msg.sender == owner, "Only Owner");
>         require(token.transfer(msg.sender, token.balanceOf(address(this))), "Transfer failed");
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        79
Source: 
>         require(msg.sender == owner, "Only Owner");
>         require(token.transfer(msg.sender, token.balanceOf(address(this))), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        86
Source: 
>         claimableAmounts[msg.sender] = 0;
>         require(inj.transfer(msg.sender, amount), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MultiAirdropINJ
Line:        93
Source: 
>         claimableAmounts[_for] = 0;
>         require(inj.transfer(_for, amount), "Transfer failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MultiAirdropINJ
Line:        69
Source: 
>         require(inj.allowance(msg.sender, address(this)) >= totalAmount, "not enough allowance");
>         inj.transferFrom(msg.sender, address(this), totalAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiAirdropINJ
Line:        92
Source: 
>         uint256 amount = claimableAmounts[_for];
>         claimableAmounts[_for] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(inj.transfer(_for, amount), "Transfer failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MultiAirdropINJ
Line:        69
Source: 
>         require(inj.allowance(msg.sender, address(this)) >= totalAmount, "not enough allowance");
>         inj.transferFrom(msg.sender, address(this), totalAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
