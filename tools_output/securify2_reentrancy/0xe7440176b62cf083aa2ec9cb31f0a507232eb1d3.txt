pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Link3D
Line:        147
Source: 
> 
>         assembly {
>         ^^^^^^^^^^
>             _referredBy := mload(add(x,20))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Link3D
Line:        96
Source: 
>   =====================================*/
>     string public name = "Link3D";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "L3D";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Link3D
Line:        97
Source: 
>     string public name = "Link3D";
>     string public symbol = "L3D";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Link3D
Line:        113
Source: 
>     address internal administrator;
>     uint256 public stakingRequirement = 10e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public releaseTime = 1593295200;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Link3D
Line:        114
Source: 
>     uint256 public stakingRequirement = 10e18;
>     uint256 public releaseTime = 1593295200;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        175
Source: 
>      */
>     function reinvest() public onlyStronghands() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // fetch dividends

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        199
Source: 
>      */
>     function exit() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         // get token count for caller & sell them all

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        279
Source: 
>      */
>     function transfer(address _toAddress, uint256 _amountOfTokens)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        321
Source: 
>      */
>     function totalLinkBalance() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _contract.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        328
Source: 
>      */
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        369
Source: 
>      */
>     function getReferralBalance(address _customerAddress) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return referralBalance_[_customerAddress];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        392
Source: 
>      */
>     function sellPrice() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // our calculation relies on the token supply, so we need supply.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        407
Source: 
>      */
>     function buyPrice() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (tokenSupply_ == 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        421
Source: 
>      */
>     function calculateTokensReceived(uint256 _ethereumToSpend)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Link3D
Line:        436
Source: 
>      */
>     function calculateEthereumReceived(uint256 _tokensToSell)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Link3D
Line:        165
Source: 
>     function distribute(uint256 amount) external {
>         _contract.transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitPerShare_ = SafeMath.add(

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Link3D
Line:        224
Source: 
>         // lambo delivery service
>         _contract.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Link3D
Line:        322
Source: 
>     function totalLinkBalance() public view returns (uint256) {
>         return _contract.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    Link3D
Line:        42
Source: 
> 
> contract Link3D {
> ^^^^^^^^^^^^^^^^^
>     /*=================================

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Link3D
Line:        164
Source: 
> 
>     function distribute(uint256 amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _contract.transferFrom(msg.sender, address(this), amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Link3D
Line:        279
Source: 
>      */
>     function transfer(address _toAddress, uint256 _amountOfTokens)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Link3D
Line:        421
Source: 
>      */
>     function calculateTokensReceived(uint256 _ethereumToSpend)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Link3D
Line:        139
Source: 
>      */
>     function onTokenTransfer(address _sender, uint _value, bytes calldata _data) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // make sure that only chainlink transferandcalls are supported

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Link3D
Line:        362
Source: 
>      */
>     function balanceOf(address _customerAddress) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokenBalanceLedger_[_customerAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Link3D
Line:        369
Source: 
>      */
>     function getReferralBalance(address _customerAddress) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return referralBalance_[_customerAddress];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Link3D
Line:        376
Source: 
>      */
>     function dividendsOf(address _customerAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        470
Source: 
>         uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);
>         uint256 _fee = _dividends * magnitude;
>                        ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        505
Source: 
>             // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder
>             profitPerShare_ += ((_dividends * magnitude) / (tokenSupply_));
>                                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        512
Source: 
>                     (_amountOfTokens *
>                         ((_dividends * magnitude) / (tokenSupply_))));
>                           ^^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        511
Source: 
>                 (_fee -
>                     (_amountOfTokens *
>                      ^^^^^^^^^^^^^^^^^
>                         ((_dividends * magnitude) / (tokenSupply_))));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        527
Source: 
>         int256 _updatedPayouts = (int256)(
>             (profitPerShare_ * _amountOfTokens) - _fee
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        496
Source: 
>             _dividends = SafeMath.add(_dividends, _referralBonus);
>             _fee = _dividends * magnitude;
>                    ^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        560
Source: 
>                                 (tokenPriceIncremental_ * 1e18) *
>                                 (_ethereum * 1e18)) +
>                                  ^^^^^^^^^^^^^^^^
>                             (((tokenPriceIncremental_)**2) *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        558
Source: 
>                         (_tokenPriceInitial**2) +
>                             (2 *
>                              ^^^
>                                 (tokenPriceIncremental_ * 1e18) *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        561
Source: 
>                                 (_ethereum * 1e18)) +
>                             (((tokenPriceIncremental_)**2) *
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                                 (tokenSupply_**2)) +

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        563
Source: 
>                                 (tokenSupply_**2)) +
>                             (2 *
>                              ^^^
>                                 (tokenPriceIncremental_) *

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        181
Source: 
>         address _customerAddress = msg.sender;
>         payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        384
Source: 
>                 (int256)(
>                     profitPerShare_ * tokenBalanceLedger_[_customerAddress]
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 ) - payoutsTo_[_customerAddress]

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        217
Source: 
>         // update dividend tracker
>         payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        242
Source: 
>         uint256 _ethereum = tokensToEthereum_(_tokens);
>         uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>                                            ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        254
Source: 
>         int256 _updatedPayouts = (int256)(
>             profitPerShare_ * _tokens + (_taxedEthereum * magnitude)
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        254
Source: 
>         int256 _updatedPayouts = (int256)(
>             profitPerShare_ * _tokens + (_taxedEthereum * magnitude)
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        263
Source: 
>                 profitPerShare_,
>                 (_dividends * magnitude) / tokenSupply_
>                  ^^^^^^^^^^^^^^^^^^^^^^
>             );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        590
Source: 
>             (((tokenPriceInitial_ +
>                 (tokenPriceIncremental_ * (_tokenSupply / 1e18))) -
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 tokenPriceIncremental_) * (tokens_ - 1e18)),

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        589
Source: 
>         uint256 _etherReceived = (SafeMath.sub(
>             (((tokenPriceInitial_ +
>              ^^^^^^^^^^^^^^^^^^^^^^
>                 (tokenPriceIncremental_ * (_tokenSupply / 1e18))) -

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        592
Source: 
>                 tokenPriceIncremental_) * (tokens_ - 1e18)),
>             (tokenPriceIncremental_ * ((tokens_**2 - tokens_) / 1e18)) / 2
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ) / 1e18);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        305
Source: 
>         payoutsTo_[_customerAddress] -= (int256)(
>             profitPerShare_ * _amountOfTokens
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         );

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        307
Source: 
>         );
>         payoutsTo_[_toAddress] += (int256)(profitPerShare_ * _amountOfTokens);
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        398
Source: 
>             uint256 _ethereum = tokensToEthereum_(1e18);
>             uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>                                                ^^^^^^^^^^^^^^^^^^
>             uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Link3D
Line:        443
Source: 
>         uint256 _ethereum = tokensToEthereum_(_tokensToSell);
>         uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>                                            ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Link3D
Line:        165
Source: 
>     function distribute(uint256 amount) external {
>         _contract.transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitPerShare_ = SafeMath.add(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Link3D
Line:        224
Source: 
>         // lambo delivery service
>         _contract.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        66
Source: 
>   ==============================*/
>     event onTokenPurchase(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        73
Source: 
> 
>     event onTokenSell(
>     ^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        79
Source: 
> 
>     event onReinvestment(
>     ^^^^^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        85
Source: 
> 
>     event onWithdraw(
>     ^^^^^^^^^^^^^^^^^
>         address indexed customerAddress,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        98
Source: 
>     string public symbol = "L3D";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant dividendFee_ = 10; // 10%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        99
Source: 
>     uint8 public constant decimals = 18;
>     uint8 internal constant dividendFee_ = 10; // 10%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant sellFee_ = 15; // 15%

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        100
Source: 
>     uint8 internal constant dividendFee_ = 10; // 10%
>     uint8 internal constant sellFee_ = 15; // 15%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant baseIncrease = 1e8;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        101
Source: 
>     uint8 internal constant sellFee_ = 15; // 15%
>     uint256 internal constant baseIncrease = 1e8;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant basePrice = 1e11;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        102
Source: 
>     uint256 internal constant baseIncrease = 1e8;
>     uint256 internal constant basePrice = 1e11;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant tokenPriceInitial_ = 50 * basePrice; // (1*10^11)/10^18 => 0,0000001

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        103
Source: 
>     uint256 internal constant basePrice = 1e11;
>     uint256 internal constant tokenPriceInitial_ = 50 * basePrice; // (1*10^11)/10^18 => 0,0000001
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant tokenPriceIncremental_ = 2 * baseIncrease; // (1*10^10)/10^18 => 0,00000001, 1e10/50 = 2*10e8

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        104
Source: 
>     uint256 internal constant tokenPriceInitial_ = 50 * basePrice; // (1*10^11)/10^18 => 0,0000001
>     uint256 internal constant tokenPriceIncremental_ = 2 * baseIncrease; // (1*10^10)/10^18 => 0,00000001, 1e10/50 = 2*10e8
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 internal constant magnitude = 2**64;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        105
Source: 
>     uint256 internal constant tokenPriceIncremental_ = 2 * baseIncrease; // (1*10^10)/10^18 => 0,00000001, 1e10/50 = 2*10e8
>     uint256 internal constant magnitude = 2**64;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address internal constant tokenAddress = address(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        106
Source: 
>     uint256 internal constant magnitude = 2**64;
>     address internal constant tokenAddress = address(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         0x514910771AF9Ca656af840dff83E8264EcF986CA  // chainlink token address

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        109
Source: 
>     );
>     ERC20 internal constant _contract = ERC20(tokenAddress);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        145
Source: 
>         bytes memory x = _data;
>         address _referredBy;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        177
Source: 
>         // fetch dividends
>         uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        180
Source: 
>         // pay out the dividends virtually
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         payoutsTo_[_customerAddress] += (int256)(_dividends * magnitude);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        188
Source: 
>         // dispatch a buy order with the virtualized "withdrawn dividends"
>         uint256 _tokens = purchaseTokens(_dividends, address(0x0), _customerAddress);
>         ^^^^^^^^^^^^^^^
>         emit onReinvestment(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        201
Source: 
>         // get token count for caller & sell them all
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokens = tokenBalanceLedger_[_customerAddress];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        202
Source: 
>         address _customerAddress = msg.sender;
>         uint256 _tokens = tokenBalanceLedger_[_customerAddress];
>         ^^^^^^^^^^^^^^^
>         if (_tokens > 0) sell(_tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        213
Source: 
>         // setup data
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _dividends = myDividends(false); // get ref. bonus later in the code

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        214
Source: 
>         address _customerAddress = msg.sender;
>         uint256 _dividends = myDividends(false); // get ref. bonus later in the code
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        238
Source: 
>         // setup data
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        240
Source: 
>         require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);
>         uint256 _tokens = _amountOfTokens;
>         ^^^^^^^^^^^^^^^
>         uint256 _ethereum = tokensToEthereum_(_tokens);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        241
Source: 
>         uint256 _tokens = _amountOfTokens;
>         uint256 _ethereum = tokensToEthereum_(_tokens);
>         ^^^^^^^^^^^^^^^^^
>         uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        242
Source: 
>         uint256 _ethereum = tokensToEthereum_(_tokens);
>         uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        243
Source: 
>         uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>         uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        253
Source: 
>         // update dividends tracker
>         int256 _updatedPayouts = (int256)(
>         ^^^^^^^^^^^^^^^^^^^^^^
>             profitPerShare_ * _tokens + (_taxedEthereum * magnitude)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        285
Source: 
>         // setup
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        336
Source: 
>     function myTokens() public view returns (uint256) {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return balanceOf(_customerAddress);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        351
Source: 
>     {
>         address _customerAddress = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        397
Source: 
>         } else {
>             uint256 _ethereum = tokensToEthereum_(1e18);
>             ^^^^^^^^^^^^^^^^^
>             uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        398
Source: 
>             uint256 _ethereum = tokensToEthereum_(1e18);
>             uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>             ^^^^^^^^^^^^^^^^^^
>             uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        399
Source: 
>             uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>             uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
>             ^^^^^^^^^^^^^^^^^^^^^^
>             return _taxedEthereum;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        411
Source: 
>         } else {
>             uint256 _ethereum = tokensToEthereum_(1e18);
>             ^^^^^^^^^^^^^^^^^
>             uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        412
Source: 
>             uint256 _ethereum = tokensToEthereum_(1e18);
>             uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);
>             ^^^^^^^^^^^^^^^^^^
>             uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        413
Source: 
>             uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);
>             uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);
>             ^^^^^^^^^^^^^^^^^^^^^^
>             return _taxedEthereum;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        426
Source: 
>     {
>         uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        427
Source: 
>         uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);
>         uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        428
Source: 
>         uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);
>         uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);
>         ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        442
Source: 
>         require(_tokensToSell <= tokenSupply_);
>         uint256 _ethereum = tokensToEthereum_(_tokensToSell);
>         ^^^^^^^^^^^^^^^^^
>         uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        443
Source: 
>         uint256 _ethereum = tokensToEthereum_(_tokensToSell);
>         uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        444
Source: 
>         uint256 _dividends = SafeMath.div((_ethereum*sellFee_), 100);
>         uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         return _taxedEthereum;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        458
Source: 
>         // data setup
>         address _customerAddress = _sender;
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _undividedDividends = SafeMath.div(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        459
Source: 
>         address _customerAddress = _sender;
>         uint256 _undividedDividends = SafeMath.div(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _incomingEthereum,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        463
Source: 
>         );
>         uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        464
Source: 
>         uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);
>         uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);
>         ^^^^^^^^^^^^^^^^^^
>         uint256 _taxedEthereum = SafeMath.sub(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        465
Source: 
>         uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);
>         uint256 _taxedEthereum = SafeMath.sub(
>         ^^^^^^^^^^^^^^^^^^^^^^
>             _incomingEthereum,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        469
Source: 
>         );
>         uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _fee = _dividends * magnitude;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        470
Source: 
>         uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);
>         uint256 _fee = _dividends * magnitude;
>         ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        526
Source: 
>         //really i know you think you do but you don't
>         int256 _updatedPayouts = (int256)(
>         ^^^^^^^^^^^^^^^^^^^^^^
>             (profitPerShare_ * _amountOfTokens) - _fee

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        552
Source: 
>     {
>         uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _tokensReceived = ((

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        553
Source: 
>         uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;
>         uint256 _tokensReceived = ((
>         ^^^^^^^^^^^^^^^^^^^^^^^
>             SafeMath.sub(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        587
Source: 
>         uint256 tokens_ = (_tokens + 1e18);
>         uint256 _tokenSupply = (tokenSupply_ + 1e18);
>         ^^^^^^^^^^^^^^^^^^^^
>         uint256 _etherReceived = (SafeMath.sub(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Link3D
Line:        588
Source: 
>         uint256 _tokenSupply = (tokenSupply_ + 1e18);
>         uint256 _etherReceived = (SafeMath.sub(
>         ^^^^^^^^^^^^^^^^^^^^^^
>             (((tokenPriceInitial_ +

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Link3D
Line:        165
Source: 
>     function distribute(uint256 amount) external {
>         _contract.transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitPerShare_ = SafeMath.add(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Link3D
Line:        224
Source: 
>         // lambo delivery service
>         _contract.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Link3D
Line:        322
Source: 
>     function totalLinkBalance() public view returns (uint256) {
>         return _contract.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Link3D
Line:        153
Source: 
> 
>         purchaseTokens(_value, _referredBy, _sender);
>                                ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Link3D
Line:        124
Source: 
>     uint256 internal tokenSupply_ = 0;
>     uint256 internal profitPerShare_;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Link3D
Line:        166
Source: 
>         _contract.transferFrom(msg.sender, address(this), amount);
>         profitPerShare_ = SafeMath.add(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             profitPerShare_,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Link3D
Line:        165
Source: 
>     function distribute(uint256 amount) external {
>         _contract.transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         profitPerShare_ = SafeMath.add(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Link3D
Line:        224
Source: 
>         // lambo delivery service
>         _contract.transfer(_customerAddress, _dividends);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Link3D
Line:        96
Source: 
>   =====================================*/
>     string public name = "Link3D";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public symbol = "L3D";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Link3D
Line:        97
Source: 
>     string public name = "Link3D";
>     string public symbol = "L3D";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Link3D
Line:        98
Source: 
>     string public symbol = "L3D";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 internal constant dividendFee_ = 10; // 10%

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Link3D
Line:        456
Source: 
>     ) internal returns (uint256) {
>         require((block.timestamp >= releaseTime) || (msg.sender == administrator));
>                  ^^^^^^^^^^^^^^^
>         // data setup

[0m
