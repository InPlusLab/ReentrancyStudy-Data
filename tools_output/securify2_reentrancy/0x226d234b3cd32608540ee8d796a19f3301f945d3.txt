Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Crowdfunding
Line:        180
Source: 
>     */
>     function getProject(string memory urlString) public view returns  (address payable projectStarter,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory projectTitle,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Project
Line:        336
Source: 
>       */
>     function getRefund() public inState(State.Expired) returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(contributions[msg.sender] > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Project
Line:        355
Source: 
>       */
>     function getDetailsWithoutState() public view returns 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     (

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Crowdfunding
Line:        180
Source: 
>     */
>     function getProject(string memory urlString) public view returns  (address payable projectStarter,
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string memory projectTitle,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Crowdfunding
Line:        195
Source: 
>     */
>     function getProjectCreator(string memory urlString) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return address(projectsByURL[urlString].creator);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Crowdfunding
Line:        205
Source: 
>       */
>     function startProject(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         string calldata title,

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Project
Line:        323
Source: 
> 
>         if (creator.send(totalRaised)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CreatorPaid(creator);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Project
Line:        342
Source: 
> 
>         if (!msg.sender.send(amountToRefund)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             contributions[msg.sender] = amountToRefund;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Crowdfunding
Line:        164
Source: 
>     // Mapping of vanity URLs to existing projects
>     mapping(string => Project) projectsByURL;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Project
Line:        266
Source: 
>     // Modifier to check current state
>     modifier inState(State _state) {
>                      ^^^^^^^^^^^^
>         require(state == _state);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Project
Line:        323
Source: 
> 
>         if (creator.send(totalRaised)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CreatorPaid(creator);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Project
Line:        342
Source: 
> 
>         if (!msg.sender.send(amountToRefund)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             contributions[msg.sender] = amountToRefund;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Project
Line:        323
Source: 
> 
>         if (creator.send(totalRaised)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CreatorPaid(creator);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Project
Line:        323
Source: 
> 
>         if (creator.send(totalRaised)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CreatorPaid(creator);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Project
Line:        342
Source: 
> 
>         if (!msg.sender.send(amountToRefund)) {
>              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             contributions[msg.sender] = amountToRefund;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Crowdfunding
Line:        189
Source: 
>         uint256 state) {
>         return projectsByURL[urlString].getDetailsWithoutState();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Project
Line:        251
Source: 
>     uint public amountGoal; // required to reach at least this much, else everyone gets refund
>     uint public completeAt;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public currentBalance;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    Project
Line:        323
Source: 
> 
>         if (creator.send(totalRaised)) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CreatorPaid(creator);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Project
Line:        309
Source: 
>         if (currentBalance >= amountGoal) {
>             state = State.Successful;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             payOut();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Project
Line:        321
Source: 
>         uint256 totalRaised = currentBalance;
>         currentBalance = 0;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Project
Line:        327
Source: 
>         } else {
>             currentBalance = totalRaised;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             state = State.Successful;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Project
Line:        328
Source: 
>             currentBalance = totalRaised;
>             state = State.Successful;
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Project
Line:        312
Source: 
>         } else if (now > raiseBy)  {
>             state = State.Expired;
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Crowdfunding
Line:        215
Source: 
>         Project newProject = new Project(msg.sender, title, description, urlString, raiseUntil, amountToRaise);
>         projects.push(newProject);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         projectsByURL[urlString] = newProject;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Crowdfunding
Line:        216
Source: 
>         projects.push(newProject);
>         projectsByURL[urlString] = newProject;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ProjectStarted(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Project
Line:        314
Source: 
>         }
>         completeAt = now;
>         ^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Project
Line:        251
Source: 
>     uint public amountGoal; // required to reach at least this much, else everyone gets refund
>     uint public completeAt;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public currentBalance;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Project
Line:        256
Source: 
>     string public description;
>     string public urlString;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     State public state = State.Fundraising; // initialize on create

[0m
