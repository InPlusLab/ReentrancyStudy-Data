Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        105
Source: 
>     /// @param owner Address of new owner.
>     function addOwner(address owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        119
Source: 
>     /// @param owner Address of owner.
>     function removeOwner(address owner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        139
Source: 
>     /// @param owner Address of new owner.
>     function replaceOwner(address owner, address newOwner)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        172
Source: 
>     /// @return Returns transaction ID.
>     function submitTransaction(address destination, uint value, bytes memory data)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        195
Source: 
>     /// @param transactionId Transaction ID.
>     function revokeConfirmation(uint transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        272
Source: 
>     /// @return Number of confirmations.
>     function getConfirmationCount(uint transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        287
Source: 
>     /// @return Total number of transactions after filters are applied.
>     function getTransactionCount(bool pending, bool executed)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        301
Source: 
>     /// @return List of owner addresses.
>     function getOwners()
>     ^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        312
Source: 
>     /// @return Returns array of owner addresses.
>     function getConfirmations(uint transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    KineMultiSigWallet
Line:        336
Source: 
>     /// @return Returns array of transaction IDs.
>     function getTransactionIds(uint from, uint to, bool pending, bool executed)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KineMultiSigWallet
Line:        214
Source: 
>             txn.executed = true;
>             (bool success, bytes memory returnData) = txn.destination.call.value(txn.value)(txn.data);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    KineMultiSigWallet
Line:        214
Source: 
>             txn.executed = true;
>             (bool success, bytes memory returnData) = txn.destination.call.value(txn.value)(txn.data);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    KineMultiSigWallet
Line:        214
Source: 
>             txn.executed = true;
>             (bool success, bytes memory returnData) = txn.destination.call.value(txn.value)(txn.data);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KineMultiSigWallet
Line:        272
Source: 
>     /// @return Number of confirmations.
>     function getConfirmationCount(uint transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KineMultiSigWallet
Line:        287
Source: 
>     /// @return Total number of transactions after filters are applied.
>     function getTransactionCount(bool pending, bool executed)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        172
Source: 
>     /// @return Returns transaction ID.
>     function submitTransaction(address destination, uint value, bytes memory data)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        227
Source: 
>     /// @return Confirmation status.
>     function isConfirmed(uint transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        312
Source: 
>     /// @return Returns array of owner addresses.
>     function getConfirmations(uint transactionId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        336
Source: 
>     /// @return Returns array of transaction IDs.
>     function getTransactionIds(uint from, uint to, bool pending, bool executed)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1
Source: 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 
> contract KineMultiSigWallet {

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        36
Source: 
> 
>     modifier ownerDoesNotExist(address owner) {
>                                ^^^^^^^^^^^^^
>         require(!isOwner[owner], "owner already exist");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        41
Source: 
> 
>     modifier ownerExists(address owner) {
>                          ^^^^^^^^^^^^^
>         require(isOwner[owner], "owner not exist");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        46
Source: 
> 
>     modifier transactionExists(uint transactionId) {
>                                ^^^^^^^^^^^^^^^^^^
>         require(transactions[transactionId].destination != address(0), "transaction not exist");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        51
Source: 
> 
>     modifier confirmed(uint transactionId, address owner) {
>                        ^^^^^^^^^^^^^^^^^^
>         require(confirmations[transactionId][owner], "transaction not confirmed");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        51
Source: 
> 
>     modifier confirmed(uint transactionId, address owner) {
>                                            ^^^^^^^^^^^^^
>         require(confirmations[transactionId][owner], "transaction not confirmed");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        56
Source: 
> 
>     modifier notConfirmed(uint transactionId, address owner) {
>                           ^^^^^^^^^^^^^^^^^^
>         require(!confirmations[transactionId][owner], "transaction already confirmed");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        56
Source: 
> 
>     modifier notConfirmed(uint transactionId, address owner) {
>                                               ^^^^^^^^^^^^^
>         require(!confirmations[transactionId][owner], "transaction already confirmed");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        61
Source: 
> 
>     modifier notExecuted(uint transactionId) {
>                          ^^^^^^^^^^^^^^^^^^
>         require(!transactions[transactionId].executed, "transaction already executed");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        66
Source: 
> 
>     modifier notNull(address _address) {
>                      ^^^^^^^^^^^^^^^^
>         require(_address != address(0), "empty address");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        71
Source: 
> 
>     modifier validRequirement(uint ownerCount, uint _required) {
>                               ^^^^^^^^^^^^^^^
>         require(ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0, "ownerCount/required not valid");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    KineMultiSigWallet
Line:        71
Source: 
> 
>     modifier validRequirement(uint ownerCount, uint _required) {
>                                                ^^^^^^^^^^^^^^
>         require(ownerCount <= MAX_OWNER_COUNT && _required <= ownerCount && _required != 0 && ownerCount != 0, "ownerCount/required not valid");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        214
Source: 
>             txn.executed = true;
>             (bool success, bytes memory returnData) = txn.destination.call.value(txn.value)(txn.data);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        214
Source: 
>             txn.executed = true;
>             (bool success, bytes memory returnData) = txn.destination.call.value(txn.value)(txn.data);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        214
Source: 
>             txn.executed = true;
>             (bool success, bytes memory returnData) = txn.destination.call.value(txn.value)(txn.data);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        22
Source: 
>     uint public required;
>     uint public transactionCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    KineMultiSigWallet
Line:        214
Source: 
>             txn.executed = true;
>             (bool success, bytes memory returnData) = txn.destination.call.value(txn.value)(txn.data);
>                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (success)

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KineMultiSigWallet
Line:        213
Source: 
>             Transaction storage txn = transactions[transactionId];
>             txn.executed = true;
>             ^^^^^^^^^^^^^^^^^^^
>             (bool success, bytes memory returnData) = txn.destination.call.value(txn.value)(txn.data);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KineMultiSigWallet
Line:        219
Source: 
>                 emit ExecutionFailure(transactionId, returnData);
>                 txn.executed = false;
>                 ^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KineMultiSigWallet
Line:        262
Source: 
>         });
>         transactionCount += 1;
>         ^^^^^^^^^^^^^^^^^^^^^
>         emit Submission(transactionId);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KineMultiSigWallet
Line:        256
Source: 
>         transactionId = transactionCount;
>         transactions[transactionId] = Transaction({
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         destination : destination,

[0m
