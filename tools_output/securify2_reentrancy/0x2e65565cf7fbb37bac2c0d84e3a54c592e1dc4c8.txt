Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        70
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { codehash := extcodehash(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (codehash != 0x0 && codehash != accountHash);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        179
Source: 
>     
>     function setSplit(uint _split) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        184
Source: 
>     
>     function setOneSplit(address _onesplit) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        189
Source: 
>     
>     function setGovernance(address _governance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        194
Source: 
>     
>     function setVault(address _token, address _vault) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        199
Source: 
>     
>     function setConverter(address _input, address _output, address _converter) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        204
Source: 
>     
>     function setStrategy(address _token, address _strategy) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        231
Source: 
>     
>     function withdrawAll(address _token) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        237
Source: 
>     // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>     function yearn(address _strategy, address _token, uint parts) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // This contract should never have value in it, but just incase since this is a public call

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Controller
Line:        260
Source: 
>     
>     function withdraw(address _token, uint _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == vaults[_token], "!vault");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        107
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Address
Line:        80
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        189
Source: 
>     
>     function setGovernance(address _governance) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        213
Source: 
>     
>     function earn(address _token, uint _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _strategy = strategies[_token];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Controller
Line:        260
Source: 
>     
>     function withdraw(address _token, uint _amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == vaults[_token], "!vault");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        179
Source: 
>     
>     function setSplit(uint _split) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        184
Source: 
>     
>     function setOneSplit(address _onesplit) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        194
Source: 
>     
>     function setVault(address _token, address _vault) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        199
Source: 
>     
>     function setConverter(address _input, address _output, address _converter) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        204
Source: 
>     
>     function setStrategy(address _token, address _strategy) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        227
Source: 
>     
>     function balanceOf(address _token) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Strategy(strategies[_token]).balanceOf();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        231
Source: 
>     
>     function withdrawAll(address _token) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "!governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Controller
Line:        237
Source: 
>     // Only allows to withdraw non-core strategy tokens ~ this is over and above normal yield
>     function yearn(address _strategy, address _token, uint parts) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // This contract should never have value in it, but just incase since this is a public call

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Controller
Line:        208
Source: 
>         if (_current != address(0)) {
>            Strategy(_current).withdrawAll();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        239
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Strategy(_strategy).withdraw(_token);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        241
Source: 
>         Strategy(_strategy).withdraw(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        247
Source: 
>             uint _expected;
>             _before = IERC20(_want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Controller
Line:        250
Source: 
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             _after = IERC20(_want).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_after > _before) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Address
Line:        80
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>          ^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        171
Source: 
>     uint public split = 5000;
>     uint public constant max = 10000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        206
Source: 
>         require(msg.sender == governance, "!governance");
>         address _current = strategies[_token];
>         ^^^^^^^^^^^^^^^^
>         if (_current != address(0)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        214
Source: 
>     function earn(address _token, uint _amount) public {
>         address _strategy = strategies[_token];
>         ^^^^^^^^^^^^^^^^^
>         address _want = Strategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        215
Source: 
>         address _strategy = strategies[_token];
>         address _want = Strategy(_strategy).want();
>         ^^^^^^^^^^^^^
>         if (_want != _token) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        239
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         Strategy(_strategy).withdraw(_token);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        241
Source: 
>         Strategy(_strategy).withdraw(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>         ^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        243
Source: 
>         if (_after > _before) {
>             uint _amount = _after.sub(_before);
>             ^^^^^^^^^^^^
>             address _want = Strategy(_strategy).want();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        244
Source: 
>             uint _amount = _after.sub(_before);
>             address _want = Strategy(_strategy).want();
>             ^^^^^^^^^^^^^
>             uint[] memory _distribution;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        245
Source: 
>             address _want = Strategy(_strategy).want();
>             uint[] memory _distribution;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint _expected;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        246
Source: 
>             uint[] memory _distribution;
>             uint _expected;
>             ^^^^^^^^^^^^^^
>             _before = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Controller
Line:        253
Source: 
>                 _amount = _after.sub(_before);
>                 uint _reward = _amount.mul(split).div(max);
>                 ^^^^^^^^^^^^
>                 earn(_want, _amount.sub(_reward));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        215
Source: 
>         address _strategy = strategies[_token];
>         address _want = Strategy(_strategy).want();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_want != _token) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        219
Source: 
>             IERC20(_token).safeTransfer(converter, _amount);
>             _amount = Converter(converter).convert(_strategy);
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             IERC20(_want).safeTransfer(_strategy, _amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        239
Source: 
>         // This contract should never have value in it, but just incase since this is a public call
>         uint _before = IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Strategy(_strategy).withdraw(_token);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        241
Source: 
>         Strategy(_strategy).withdraw(_token);
>         uint _after =  IERC20(_token).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_after > _before) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        244
Source: 
>             uint _amount = _after.sub(_before);
>             address _want = Strategy(_strategy).want();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint[] memory _distribution;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        247
Source: 
>             uint _expected;
>             _before = IERC20(_want).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Controller
Line:        250
Source: 
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             _after = IERC20(_want).balanceOf(address(this));
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (_after > _before) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        208
Source: 
>         if (_current != address(0)) {
>            Strategy(_current).withdrawAll();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        224
Source: 
>         }
>         Strategy(_strategy).deposit();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        228
Source: 
>     function balanceOf(address _token) external view returns (uint) {
>         return Strategy(strategies[_token]).balanceOf();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        233
Source: 
>         require(msg.sender == governance, "!governance");
>         Strategy(strategies[_token]).withdrawAll();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        240
Source: 
>         uint _before = IERC20(_token).balanceOf(address(this));
>         Strategy(_strategy).withdraw(_token);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after =  IERC20(_token).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        248
Source: 
>             _before = IERC20(_want).balanceOf(address(this));
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        249
Source: 
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _after = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Controller
Line:        262
Source: 
>         require(msg.sender == vaults[_token], "!vault");
>         Strategy(strategies[_token]).withdraw(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        71
Source: 
>         assembly { codehash := extcodehash(account) }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        208
Source: 
>         if (_current != address(0)) {
>            Strategy(_current).withdrawAll();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        233
Source: 
>         require(msg.sender == governance, "!governance");
>         Strategy(strategies[_token]).withdrawAll();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Controller
Line:        249
Source: 
>             (_expected, _distribution) = OneSplitAudit(onesplit).getExpectedReturn(_token, _want, _amount, parts, 0);
>             OneSplitAudit(onesplit).swap(_token, _want, _amount, _expected, _distribution, 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _after = IERC20(_want).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Address
Line:        80
Source: 
>         // solhint-disable-next-line avoid-call-value
>         (bool success, ) = recipient.call.value(amount)("");
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "Address: unable to send value, recipient may have reverted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        98
Source: 
>     function safeApprove(IERC20 token, address spender, uint256 value) internal {
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
