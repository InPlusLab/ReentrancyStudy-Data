Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.13. Changing pragma version to 0.5.13....
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    MathUint
Line:        72
Source: 
>         c = a * b;
>         require(a == 0 || c / a == b, "MUL_OVERFLOW");
>                           ^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    MovingAveragePriceProvider
Line:        202
Source: 
>         // Get the current price. Use the history array as a circular buffer
>         history[updateIndex] = provider.usd2lrc(defaultValue);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateIndex = (updateIndex + 1) % numMovingAverageDataPoints;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MovingAveragePriceProvider
Line:        185
Source: 
> 
>     function usd2lrc(uint usd)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    MathUint
Line:        71
Source: 
>     {
>         c = a * b;
>             ^^^^^
>         require(a == 0 || c / a == b, "MUL_OVERFLOW");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MovingAveragePriceProvider
Line:        202
Source: 
>         // Get the current price. Use the history array as a circular buffer
>         history[updateIndex] = provider.usd2lrc(defaultValue);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateIndex = (updateIndex + 1) % numMovingAverageDataPoints;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MovingAveragePriceProvider
Line:        177
Source: 
>         // Fill in the initial data points with the current LRC costs
>         uint currentConversion = provider.usd2lrc(defaultValue);
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < numMovingAverageDataPoints; i++) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MovingAveragePriceProvider
Line:        202
Source: 
>         // Get the current price. Use the history array as a circular buffer
>         history[updateIndex] = provider.usd2lrc(defaultValue);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateIndex = (updateIndex + 1) % numMovingAverageDataPoints;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MovingAveragePriceProvider
Line:        151
Source: 
>     uint internal movingAverage;
>     uint internal updateIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MovingAveragePriceProvider
Line:        202
Source: 
>         // Get the current price. Use the history array as a circular buffer
>         history[updateIndex] = provider.usd2lrc(defaultValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateIndex = (updateIndex + 1) % numMovingAverageDataPoints;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MovingAveragePriceProvider
Line:        203
Source: 
>         history[updateIndex] = provider.usd2lrc(defaultValue);
>         updateIndex = (updateIndex + 1) % numMovingAverageDataPoints;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MovingAveragePriceProvider
Line:        210
Source: 
>         }
>         movingAverage = newMovingAverage / numMovingAverageDataPoints;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MovingAveragePriceProvider
Line:        212
Source: 
> 
>         lastUpdateTime = now;
>         ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MovingAveragePriceProvider
Line:        202
Source: 
>         // Get the current price. Use the history array as a circular buffer
>         history[updateIndex] = provider.usd2lrc(defaultValue);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         updateIndex = (updateIndex + 1) % numMovingAverageDataPoints;

[0m
