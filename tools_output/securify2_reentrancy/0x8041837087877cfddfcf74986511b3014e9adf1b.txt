[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        149
Source: 
>   function startSale() public {
>     require(msg.sender == owner && startDate==0);
>                                    ^^^^^^^^^^^^
>     startDate=now;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        131
Source: 
> 
>   function withdrawETH() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        137
Source: 
> 
>   function endPresale() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        142
Source: 
> 
>   function burn() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner && Token.balanceOf(address(this)) > 0 && now.sub(startDate) > 7 days);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        148
Source: 
>   
>   function startSale() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner && startDate==0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        153
Source: 
>   
>   function availableTokens() public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return Token.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        92
Source: 
>     require(startDate > 0 && now.sub(startDate) <= 7 days);
>     require(Token.balanceOf(address(this)) > 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value >= 0.1 ether && msg.value <= 60 ether);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        102
Source: 
>     
>     require(amount <= Token.balanceOf(address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // update constants.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        107
Source: 
>     // transfer the tokens.
>     Token.transfer(msg.sender, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        113
Source: 
>     require(startDate > 0 && now.sub(startDate) <= 7 days);
>     require(Token.balanceOf(address(this)) > 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value >= 0.1 ether && msg.value <= 60 ether);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        123
Source: 
>     
>     require(amount <= Token.balanceOf(address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // update constants.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        128
Source: 
>     // transfer the tokens.
>     Token.transfer(msg.sender, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        76
Source: 
>   uint256 public totalSold;
>   ERC20 public Token;
>   ^^^^^^^^^^^^^^^^^^
>   address payable public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        87
Source: 
> 
>   uint256 amount;
>   ^^^^^^^^^^^^^^
>  

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        134
Source: 
>     require(presaleClosed == true);
>     owner.transfer(collectedETH);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        134
Source: 
>     require(presaleClosed == true);
>     owner.transfer(collectedETH);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        134
Source: 
>     require(presaleClosed == true);
>     owner.transfer(collectedETH);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        92
Source: 
>     require(startDate > 0 && now.sub(startDate) <= 7 days);
>     require(Token.balanceOf(address(this)) > 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value >= 0.1 ether && msg.value <= 60 ether);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        102
Source: 
>     
>     require(amount <= Token.balanceOf(address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // update constants.

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        113
Source: 
>     require(startDate > 0 && now.sub(startDate) <= 7 days);
>     require(Token.balanceOf(address(this)) > 0);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value >= 0.1 ether && msg.value <= 60 ether);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        123
Source: 
>     
>     require(amount <= Token.balanceOf(address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // update constants.

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        143
Source: 
>   function burn() public {
>     require(msg.sender == owner && Token.balanceOf(address(this)) > 0 && now.sub(startDate) > 7 days);
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // burn the left over.

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        107
Source: 
>     // transfer the tokens.
>     Token.transfer(msg.sender, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        128
Source: 
>     // transfer the tokens.
>     Token.transfer(msg.sender, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        145
Source: 
>     // burn the left over.
>     Token.transfer(address(0), Token.balanceOf(address(this)));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        145
Source: 
>     // burn the left over.
>     Token.transfer(address(0), Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        154
Source: 
>   function availableTokens() public view returns(uint256) {
>     return Token.balanceOf(address(this));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        75
Source: 
> 
>   uint256 public totalSold;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   ERC20 public Token;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        78
Source: 
>   address payable public owner;
>   uint256 public collectedETH;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public startDate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        79
Source: 
>   uint256 public collectedETH;
>   uint256 public startDate;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
>   bool private presaleClosed = false;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        87
Source: 
> 
>   uint256 amount;
>   ^^^^^^^^^^^^^^
>  

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        97
Source: 
>     if (now.sub(startDate) <= 1 days) {
>        amount = msg.value.mul(10);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if(now.sub(startDate) > 1 days) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        104
Source: 
>     // update constants.
>     totalSold = totalSold.add(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     collectedETH = collectedETH.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        105
Source: 
>     totalSold = totalSold.add(amount);
>     collectedETH = collectedETH.add(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // transfer the tokens.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        99
Source: 
>     } else if(now.sub(startDate) > 1 days) {
>        amount = msg.value.mul(10);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        118
Source: 
>     if (now.sub(startDate) <= 1 days) {
>        amount = msg.value.mul(10);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if(now.sub(startDate) > 1 days) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        125
Source: 
>     // update constants.
>     totalSold = totalSold.add(amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     collectedETH = collectedETH.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        126
Source: 
>     totalSold = totalSold.add(amount);
>     collectedETH = collectedETH.add(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // transfer the tokens.

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LAZARUSTokenSale
Line:        120
Source: 
>     } else if(now.sub(startDate) > 1 days) {
>        amount = msg.value.mul(10);
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        107
Source: 
>     // transfer the tokens.
>     Token.transfer(msg.sender, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        128
Source: 
>     // transfer the tokens.
>     Token.transfer(msg.sender, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LAZARUSTokenSale
Line:        145
Source: 
>     // burn the left over.
>     Token.transfer(address(0), Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
