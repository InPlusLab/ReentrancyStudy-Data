Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        24
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        29
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Pool
Line:        112
Source: 
> 
>     function stake (uint256 amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 oldBalance = stakeToken.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Pool
Line:        146
Source: 
>     }
>     function inquiryExpectedReward (address host) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _calculateEarn(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        121
Source: 
> 
>     function claimAndUnstake (uint256 amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _updateReward(msg.sender);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        140
Source: 
> 
>     function inquiryDeposit (address host) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return STAKED_AMOUNT[host];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Pool
Line:        143
Source: 
>     }
>     function inquiryRemainReward (address host) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return CUMULATED_REWARD[host];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Pool
Line:        109
Source: 
>         CUMULATED_REWARD[msg.sender] = 0;
>         rewardToken.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Pool
Line:        113
Source: 
>     function stake (uint256 amount) external {
>         uint256 oldBalance = stakeToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _updateReward(msg.sender);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Pool
Line:        115
Source: 
>         _updateReward(msg.sender);
>         stakeToken.transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakeToken.balanceOf(address(this)) == oldBalance.add(amount), 'Stake failed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Pool
Line:        116
Source: 
>         stakeToken.transferFrom(msg.sender, address(this), amount);
>         require(stakeToken.balanceOf(address(this)) == oldBalance.add(amount), 'Stake failed');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         STAKED_AMOUNT[msg.sender] = STAKED_AMOUNT[msg.sender].add(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Pool
Line:        126
Source: 
>             CUMULATED_REWARD[msg.sender] = 0;
>             rewardToken.transfer(msg.sender, rewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Pool
Line:        76
Source: 
> 
>     uint256 public TOTAL_STAKED;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Pool
Line:        78
Source: 
> 
>     address private CONSTRUCTOR_ADDRESS;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address private TEAM_POOL;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Pool
Line:        79
Source: 
>     address private CONSTRUCTOR_ADDRESS;
>     address private TEAM_POOL;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Pool
Line:        81
Source: 
> 
>     mapping (address => uint256) private STAKED_AMOUNT;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) private CUMULATED_REWARD;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Pool
Line:        82
Source: 
>     mapping (address => uint256) private STAKED_AMOUNT;
>     mapping (address => uint256) private CUMULATED_REWARD;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address => uint256) private UPDATED_BLOCK;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Pool
Line:        83
Source: 
>     mapping (address => uint256) private CUMULATED_REWARD;
>     mapping (address => uint256) private UPDATED_BLOCK;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Pool
Line:        113
Source: 
>     function stake (uint256 amount) external {
>         uint256 oldBalance = stakeToken.balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _updateReward(msg.sender);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Pool
Line:        116
Source: 
>         stakeToken.transferFrom(msg.sender, address(this), amount);
>         require(stakeToken.balanceOf(address(this)) == oldBalance.add(amount), 'Stake failed');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         STAKED_AMOUNT[msg.sender] = STAKED_AMOUNT[msg.sender].add(amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pool
Line:        109
Source: 
>         CUMULATED_REWARD[msg.sender] = 0;
>         rewardToken.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pool
Line:        115
Source: 
>         _updateReward(msg.sender);
>         stakeToken.transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakeToken.balanceOf(address(this)) == oldBalance.add(amount), 'Stake failed');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pool
Line:        126
Source: 
>             CUMULATED_REWARD[msg.sender] = 0;
>             rewardToken.transfer(msg.sender, rewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Pool
Line:        157
Source: 
>         TOTAL_STAKED = TOTAL_STAKED.sub(amount);
>         stakeToken.transfer(host, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Pool
Line:        76
Source: 
> 
>     uint256 public TOTAL_STAKED;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pool
Line:        163
Source: 
>         if(elapsed <= 0){return;}
>         UPDATED_BLOCK[host] = block.number;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 baseEarned = _calculateEarn(elapsed, STAKED_AMOUNT[host]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pool
Line:        165
Source: 
>         uint256 baseEarned = _calculateEarn(elapsed, STAKED_AMOUNT[host]);
>         CUMULATED_REWARD[host] = baseEarned.mul(95).div(100).add(CUMULATED_REWARD[host]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         CUMULATED_REWARD[TEAM_POOL] = baseEarned.mul(5).div(100).add(CUMULATED_REWARD[TEAM_POOL]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pool
Line:        166
Source: 
>         CUMULATED_REWARD[host] = baseEarned.mul(95).div(100).add(CUMULATED_REWARD[host]);
>         CUMULATED_REWARD[TEAM_POOL] = baseEarned.mul(5).div(100).add(CUMULATED_REWARD[TEAM_POOL]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pool
Line:        118
Source: 
>         STAKED_AMOUNT[msg.sender] = STAKED_AMOUNT[msg.sender].add(amount);
>         TOTAL_STAKED = TOTAL_STAKED.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pool
Line:        154
Source: 
>     function _withdraw (address host, uint256 amount) internal {
>         STAKED_AMOUNT[host] = STAKED_AMOUNT[host].sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(STAKED_AMOUNT[host] >= 0);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pool
Line:        156
Source: 
>         require(STAKED_AMOUNT[host] >= 0);
>         TOTAL_STAKED = TOTAL_STAKED.sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         stakeToken.transfer(host, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pool
Line:        109
Source: 
>         CUMULATED_REWARD[msg.sender] = 0;
>         rewardToken.transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pool
Line:        115
Source: 
>         _updateReward(msg.sender);
>         stakeToken.transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(stakeToken.balanceOf(address(this)) == oldBalance.add(amount), 'Stake failed');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pool
Line:        126
Source: 
>             CUMULATED_REWARD[msg.sender] = 0;
>             rewardToken.transfer(msg.sender, rewards);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pool
Line:        157
Source: 
>         TOTAL_STAKED = TOTAL_STAKED.sub(amount);
>         stakeToken.transfer(host, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Pool
Line:        66
Source: 
>     
>     string public name;
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Pool
Line:        78
Source: 
> 
>     address private CONSTRUCTOR_ADDRESS;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address private TEAM_POOL;

[0m
