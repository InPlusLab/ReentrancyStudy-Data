[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        190
Source: 
>   mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        191
Source: 
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        190
Source: 
>   mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    owned
Line:        191
Source: 
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)
>                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        252
Source: 
>   
>   function availableOwnerCommissionEther() public view returns(uint256){
>                                                      ^^^^^^^^^^^^^^^^^^^
>       //assress 0x0 only holds ether as fee

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        269
Source: 
>       emit OwnerWithdrawCommission(msg.sender, address(0), amount);
>       return "Ether withdrawn successfully";
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        272
Source: 
>   
>   function withdrawOwnerCommissoinToken(address tokenAddress) public  returns (string memory){
>                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == feeAccount, 'Invalid caller');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        283
Source: 
>   function deposit() public payable {
>     tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].add(msg.value);
>                                                                ^^^^^^^^^^^^^^^^^^^^
>     emit Deposit(now, address(0), msg.sender, msg.value, tokens[address(0)][msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        292
Source: 
>     msg.sender.transfer(amount);
>     emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        300
Source: 
>     tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);
>     emit Deposit(now, token, msg.sender, amount, tokens[token][msg.sender]);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        305
Source: 
>     require(!safeGuard,"System Paused by Admin");
>     require(token!=address(0), 'Invalid token address');
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(tokens[token][msg.sender] >= amount, 'not enough token balance');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        312
Source: 
> 
>   function balanceOf(address token, address user) public view returns (uint) {
>                                                             ^^^^^^^^^^^^^^^^^^
>     return tokens[token][user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        327
Source: 
>         2 = tradeMaker
>         3 = referrer
>      ^^^^^^^^^^^^^^^
>     */

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        334
Source: 
>     require(
>       (orders[addressArray[2]][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == addressArray[2]) &&
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       block.number <= expires &&

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        335
Source: 
>       (orders[addressArray[2]][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == addressArray[2]) &&
>       block.number <= expires &&
>           ^^^^^^^^^^^^^^^^^^^^^^
>       orderFills[addressArray[2]][hash].add(amount) <= amountGet,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        348
Source: 
>         addressArray array elements
>         0 = tokenGet
>                 ^^^^
>         1 = tokenGive

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        388
Source: 
>   function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {
>     bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint available1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        396
Source: 
>     
>     if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return available1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        418
Source: 
> //              REFERRAL SECTION CODE               //
> //==================================================//
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        425
Source: 
>       if(_referrer != address(0) && existingReferrer != address(0) ){
>         referrerBonusBalance[existingReferrer] += _tradingFeeLocal * refPercent / 100;
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit ReferrerBonus(_referrer, msg.sender, _tradingFeeLocal * refPercent / 100, now );

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        471
Source: 
> 
> }
>                                                                                                                                         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PlanetAgroDEX
Line:        471
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    owned
Line:        190
Source: 
>   mapping (address => mapping (address => uint)) public tokens; //mapping of token addresses to mapping of account balances (token=0 means Ether)
>   mapping (address => mapping (bytes32 => bool)) public orders; //mapping of user accounts to mapping of order hashes to booleans (true = submitted by user, equivalent to offchain signature)
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => mapping (bytes32 => uint)) public orderFills; //mapping of user accounts to mapping of order hashes to uints (amount of order that has been filled)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        269
Source: 
>       emit OwnerWithdrawCommission(msg.sender, address(0), amount);
>       return "Ether withdrawn successfully";
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        292
Source: 
>     msg.sender.transfer(amount);
>     emit Withdraw(now, address(0), msg.sender, amount, tokens[address(0)][msg.sender]);
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        312
Source: 
> 
>   function balanceOf(address token, address user) public view returns (uint) {
>                                                             ^^^^^^^^^^^^^^^^^^
>     return tokens[token][user];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        278
Source: 
>       ERC20Essential(tokenAddress).transfer(msg.sender, amount);
>       emit OwnerWithdrawCommission(msg.sender, tokenAddress, amount);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return "Token withdrawn successfully";

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        334
Source: 
>     require(
>       (orders[addressArray[2]][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == addressArray[2]) &&
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       block.number <= expires &&

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        335
Source: 
>       (orders[addressArray[2]][hash] || ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s) == addressArray[2]) &&
>       block.number <= expires &&
>           ^^^^^^^^^^^^^^^^^^^^^^
>       orderFills[addressArray[2]][hash].add(amount) <= amountGet,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        348
Source: 
>         addressArray array elements
>         0 = tokenGet
>                 ^^^^
>         1 = tokenGive

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        388
Source: 
>   function availableVolume(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s) public view returns(uint) {
>     bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint available1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        396
Source: 
>     
>     if (amountGet.sub(orderFills[user][hash])<available1) return amountGet.sub(orderFills[user][hash]);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return available1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        418
Source: 
> //              REFERRAL SECTION CODE               //
> //==================================================//
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PlanetAgroDEX
Line:        449
Source: 
>         
>         uint256 referralBonus = referrerBonusBalance[msgSender];
>                                                         ^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PlanetAgroDEX
Line:        452
Source: 
>         require(referralBonus > 0, 'Insufficient referrer bonus');
>         referrerBonusBalance[msgSender] = 0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PlanetAgroDEX
Line:        459
Source: 
>         //fire event
>         emit ReferrerBonusWithdrawn(msgSender, referralBonus);
>                                                           ^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    PlanetAgroDEX
Line:        471
Source: 
> 
> }
>                                                                        

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        290
Source: 
>     require(tokens[address(0)][msg.sender] >= amount, 'Not enough balance');
>     tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     msg.sender.transfer(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        309
Source: 
> 	  ERC20Essential(token).transfer(msg.sender, amount);
>     emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        471
Source: 
> 
> }


[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    owned
Line:        184
Source: 
>   address public feeAccount; //the account that will receive fees
>   uint public tradingFee = 30; // 30 = 0.3%
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    owned
Line:        184
Source: 
>   address public feeAccount; //the account that will receive fees
>   uint public tradingFee = 30; // 30 = 0.3%
>                         ^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    owned
Line:        186
Source: 
>   
>   //referrals
>   ^^^^^^^^^^^
>   uint256 public refPercent = 10;  // percent to calculate referal bonous - by default 10% of trading fee

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        195
Source: 
>   mapping (address => address) public referrers;
>   /* Mapping to track referrer bonus for all the referrers */
>                                                   ^^^^^^^^^^^
>   mapping (address => uint) public referrerBonusBalance;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        198
Source: 
>   
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        198
Source: 
>   
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        199
Source: 
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        199
Source: 
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        200
Source: 
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);
>                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        202
Source: 
>   event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);
>   event Withdraw(uint256 curTime, address token, address user, uint amount, uint balance);
>                                                                       ^^^^^^^^^^^^^^^^^^^^
>   event OwnerWithdrawCommission(address indexed owner, address indexed tokenAddress, uint256 amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        206
Source: 
>   // Events to track ether transfer to referrers
>   event ReferrerBonus(address indexed referer, address indexed trader, uint256 referralBonus, uint256 timestamp );
>                                                                                                     ^^^^^^^^^^^^^^
>   event ReferrerBonusWithdrawn(address indexed referrer, uint256 indexed amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    PlanetAgroDEX
Line:        211
Source: 
> 
>     constructor() public {
>       ^^^^^^^^^^^^^^^^^^^^
>         feeAccount = msg.sender;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    owned
Line:        184
Source: 
>   address public feeAccount; //the account that will receive fees
>   uint public tradingFee = 30; // 30 = 0.3%
>                         ^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    owned
Line:        186
Source: 
>   
>   //referrals
>   ^^^^^^^^^^^
>   uint256 public refPercent = 10;  // percent to calculate referal bonous - by default 10% of trading fee

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlanetAgroDEX
Line:        195
Source: 
>   mapping (address => address) public referrers;
>   /* Mapping to track referrer bonus for all the referrers */
>                                                   ^^^^^^^^^^^
>   mapping (address => uint) public referrerBonusBalance;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlanetAgroDEX
Line:        198
Source: 
>   
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlanetAgroDEX
Line:        198
Source: 
>   
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlanetAgroDEX
Line:        199
Source: 
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlanetAgroDEX
Line:        199
Source: 
>   event Order(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires,  address user);
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlanetAgroDEX
Line:        200
Source: 
>   event Cancel(uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires, address user, uint8 v, bytes32 r, bytes32 s);
>   event Trade( uint256 curTime, address tokenGet, uint amountGet, address tokenGive, uint amountGive, address get, address give, uint256 orderBookID);
>                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlanetAgroDEX
Line:        202
Source: 
>   event Deposit(uint256 curTime, address token, address user, uint amount, uint balance);
>   event Withdraw(uint256 curTime, address token, address user, uint amount, uint balance);
>                                                                       ^^^^^^^^^^^^^^^^^^^^
>   event OwnerWithdrawCommission(address indexed owner, address indexed tokenAddress, uint256 amount);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PlanetAgroDEX
Line:        206
Source: 
>   // Events to track ether transfer to referrers
>   event ReferrerBonus(address indexed referer, address indexed trader, uint256 referralBonus, uint256 timestamp );
>                                                                                                     ^^^^^^^^^^^^^^
>   event ReferrerBonusWithdrawn(address indexed referrer, uint256 indexed amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        309
Source: 
> 	  ERC20Essential(token).transfer(msg.sender, amount);
>     emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        290
Source: 
>     require(tokens[address(0)][msg.sender] >= amount, 'Not enough balance');
>     tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     msg.sender.transfer(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        471
Source: 
> 
> }


[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        290
Source: 
>     require(tokens[address(0)][msg.sender] >= amount, 'Not enough balance');
>     tokens[address(0)][msg.sender] = tokens[address(0)][msg.sender].sub(amount);
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     msg.sender.transfer(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        309
Source: 
> 	  ERC20Essential(token).transfer(msg.sender, amount);
>     emit Withdraw(now, token, msg.sender, amount, tokens[token][msg.sender]);
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        471
Source: 
> 
> }
>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        317
Source: 
>   function order(address tokenGet, uint amountGet, address tokenGive, uint amountGive, uint expires) public {
>     bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));
>                                                                                                   ^^^^^^^^^^^^^^^^^
>     orders[msg.sender][hash] = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        298
Source: 
>     require(token!=address(0), 'Invalid token address');
>     require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount), 'tokens could not be transferred');
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        332
Source: 
>     //amount is in amountGet terms
>     bytes32 hash = keccak256(abi.encodePacked(address(this), addressArray[0], amountGet, addressArray[1], amountGive, expires));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    owned
Line:        186
Source: 
>   
>   //referrals
>   ^^^^^^^^^^^
>   uint256 public refPercent = 10;  // percent to calculate referal bonous - by default 10% of trading fee

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        364
Source: 
> 
>     tokens[addressArray[1]][addressArray[2]] = tokens[addressArray[1]][addressArray[2]].sub(amountGive.mul(amount) / amountGet);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tokens[addressArray[1]][msg.sender] = tokens[addressArray[1]][msg.sender].add(amountGive.mul(amount) / amountGet);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        379
Source: 
>   
>   function testVRS(address tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint8 v, bytes32 r, bytes32 s ) public view returns(address){
>                                                                                                                                                           ^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        381
Source: 
>       
>       bytes32 hash = keccak256(abi.encodePacked(address(this), tokenGet, amountGet, tokenGive, amountGive, expires));
>                                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^
>      

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    PlanetAgroDEX
Line:        383
Source: 
>      
>       return ecrecover(keccak256(abi.encodePacked("\x19Ethereum Signed Message:\n32", hash)),v,r,s);
>                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    PlanetAgroDEX
Line:        340
Source: 
>     tradeBalances(addressArray, amountGet, amountGive, amount );
>     orderFills[addressArray[2]][hash] = orderFills[addressArray[2]][hash].add(amount);
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PlanetAgroDEX
Line:        298
Source: 
>     require(token!=address(0), 'Invalid token address');
>     require(ERC20Essential(token).transferFrom(msg.sender, address(this), amount), 'tokens could not be transferred');
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     tokens[token][msg.sender] = tokens[token][msg.sender].add(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    PlanetAgroDEX
Line:        332
Source: 
>     //amount is in amountGet terms
>     bytes32 hash = keccak256(abi.encodePacked(address(this), addressArray[0], amountGet, addressArray[1], amountGive, expires));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(

[0m
