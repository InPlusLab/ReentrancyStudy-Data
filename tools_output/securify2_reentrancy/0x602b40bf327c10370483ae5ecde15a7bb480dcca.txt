pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        168
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        82
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {
>     if (a == 0) {
>         ^^^^^^
>       return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        86
Source: 
>     c = a * b;
>     assert(c / a == b);
>            ^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CycloneWrapper
Line:        343
Source: 
> 
>   function whitelist(ICycloneV2dot2 _cyclone) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address cycloneAddr = address(_cyclone);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CycloneWrapper
Line:        338
Source: 
>     if (remainingCoin > 0) {
>       (bool success,) = msg.sender.call.value(remainingCoin)("");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(success, 'CycloneWrapper: refund');

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        240
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "SafeERC20: low-level call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CycloneWrapper
Line:        314
Source: 
> 
>   function deposit(ICycloneV2dot2 _cyclone, bytes32 _commitment, bool _buyCYC) external payable {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(whitelisted[address(_cyclone)], "not whitelisted");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CycloneWrapper
Line:        302
Source: 
> 
>   function purchaseCost(ICycloneV2dot2 _cyclone) external view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 cycAmount = _cyclone.cycDenomination().add(_cyclone.anonymityFee());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CycloneWrapper
Line:        346
Source: 
>     require(!whitelisted[cycloneAddr], "already whitelisted");
>     IERC20 token = _cyclone.token();
>                    ^^^^^^^^^^^^^^^^
>     if (address(token) != address(0)) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CycloneWrapper
Line:        350
Source: 
>     }
>     _cyclone.cycToken().safeApprove(cycloneAddr, uint256(-1));
>     ^^^^^^^^^^^^^^^^^^^
>     whitelisted[cycloneAddr] = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    CycloneWrapper
Line:        328
Source: 
>         path[0] = wrappedCoin;
>         path[1] = address(_cyclone.cycToken());
>                           ^^^^^^^^^^^^^^^^^^^
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    CycloneWrapper
Line:        333
Source: 
>       } else {
>         _cyclone.cycToken().safeTransferFrom(msg.sender, address(this), cycAmount);
>         ^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CycloneWrapper
Line:        338
Source: 
>     if (remainingCoin > 0) {
>       (bool success,) = msg.sender.call.value(remainingCoin)("");
>        ^^^^^^^^^^^^
>       require(success, 'CycloneWrapper: refund');

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity <0.6 >=0.4.21;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        24
Source: 
> 
> pragma solidity <0.6 >=0.4.21;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        43
Source: 
> 
> pragma solidity <0.6 >=0.4.24;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        60
Source: 
> 
> pragma solidity <0.6 >=0.4.21;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        252
Source: 
> 
> pragma solidity >=0.5.0 <0.8.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        282
Source: 
> 
> pragma solidity <0.6 >=0.4.24;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CycloneWrapper
Line:        329
Source: 
>         path[1] = address(_cyclone.cycToken());
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(remainingCoin >= amounts[0], "CycloneWrapper: unexpected status");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CycloneWrapper
Line:        336
Source: 
>     }
>     _cyclone.deposit.value(coinAmount)(_commitment);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (remainingCoin > 0) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CycloneWrapper
Line:        338
Source: 
>     if (remainingCoin > 0) {
>       (bool success,) = msg.sender.call.value(remainingCoin)("");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(success, 'CycloneWrapper: refund');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CycloneWrapper
Line:        329
Source: 
>         path[1] = address(_cyclone.cycToken());
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(remainingCoin >= amounts[0], "CycloneWrapper: unexpected status");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CycloneWrapper
Line:        336
Source: 
>     }
>     _cyclone.deposit.value(coinAmount)(_commitment);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (remainingCoin > 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    CycloneWrapper
Line:        338
Source: 
>     if (remainingCoin > 0) {
>       (bool success,) = msg.sender.call.value(remainingCoin)("");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(success, 'CycloneWrapper: refund');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CycloneWrapper
Line:        329
Source: 
>         path[1] = address(_cyclone.cycToken());
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(remainingCoin >= amounts[0], "CycloneWrapper: unexpected status");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CycloneWrapper
Line:        336
Source: 
>     }
>     _cyclone.deposit.value(coinAmount)(_commitment);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (remainingCoin > 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CycloneWrapper
Line:        338
Source: 
>     if (remainingCoin > 0) {
>       (bool success,) = msg.sender.call.value(remainingCoin)("");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(success, 'CycloneWrapper: refund');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        303
Source: 
>   function purchaseCost(ICycloneV2dot2 _cyclone) external view returns (uint256) {
>     uint256 cycAmount = _cyclone.cycDenomination().add(_cyclone.anonymityFee());
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^
>     if (cycAmount == 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        303
Source: 
>   function purchaseCost(ICycloneV2dot2 _cyclone) external view returns (uint256) {
>     uint256 cycAmount = _cyclone.cycDenomination().add(_cyclone.anonymityFee());
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (cycAmount == 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        316
Source: 
>     require(whitelisted[address(_cyclone)], "not whitelisted");
>     uint256 coinAmount = _cyclone.coinDenomination();
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.value >= coinAmount, "CycloneWrapper: insufficient coin");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        318
Source: 
>     require(msg.value >= coinAmount, "CycloneWrapper: insufficient coin");
>     uint256 tokenAmount = _cyclone.tokenDenomination();
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 cycAmount = _cyclone.cycDenomination().add(_cyclone.anonymityFee());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        319
Source: 
>     uint256 tokenAmount = _cyclone.tokenDenomination();
>     uint256 cycAmount = _cyclone.cycDenomination().add(_cyclone.anonymityFee());
>                                                        ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 remainingCoin = msg.value.sub(coinAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        319
Source: 
>     uint256 tokenAmount = _cyclone.tokenDenomination();
>     uint256 cycAmount = _cyclone.cycDenomination().add(_cyclone.anonymityFee());
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 remainingCoin = msg.value.sub(coinAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        322
Source: 
>     if (tokenAmount > 0) {
>       _cyclone.token().safeTransferFrom(msg.sender, address(this), tokenAmount);
>       ^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        329
Source: 
>         path[1] = address(_cyclone.cycToken());
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(remainingCoin >= amounts[0], "CycloneWrapper: unexpected status");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        333
Source: 
>       } else {
>         _cyclone.cycToken().safeTransferFrom(msg.sender, address(this), cycAmount);
>         ^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        346
Source: 
>     require(!whitelisted[cycloneAddr], "already whitelisted");
>     IERC20 token = _cyclone.token();
>                    ^^^^^^^^^^^^^^^^
>     if (address(token) != address(0)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CycloneWrapper
Line:        350
Source: 
>     }
>     _cyclone.cycToken().safeApprove(cycloneAddr, uint256(-1));
>     ^^^^^^^^^^^^^^^^^^^
>     whitelisted[cycloneAddr] = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SafeERC20
Line:        206
Source: 
>         // solhint-disable-next-line max-line-length
>         require((value == 0) || (token.allowance(address(this), spender) == 0),
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "SafeERC20: approve from non-zero to non-zero allowance"

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CycloneWrapper
Line:        309
Source: 
>     paths[0] = wrappedCoin;
>     paths[1] = address(_cyclone.cycToken());
>                        ^^^^^^^^^^^^^^^^^^^
>     uint256[] memory amounts = router.getAmountsIn(cycAmount, paths);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CycloneWrapper
Line:        310
Source: 
>     paths[1] = address(_cyclone.cycToken());
>     uint256[] memory amounts = router.getAmountsIn(cycAmount, paths);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return amounts[0];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CycloneWrapper
Line:        328
Source: 
>         path[0] = wrappedCoin;
>         path[1] = address(_cyclone.cycToken());
>                           ^^^^^^^^^^^^^^^^^^^
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CycloneWrapper
Line:        336
Source: 
>     }
>     _cyclone.deposit.value(coinAmount)(_commitment);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (remainingCoin > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        169
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    CycloneWrapper
Line:        329
Source: 
>         path[1] = address(_cyclone.cycToken());
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));
>                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(remainingCoin >= amounts[0], "CycloneWrapper: unexpected status");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    CycloneWrapper
Line:        336
Source: 
>     }
>     _cyclone.deposit.value(coinAmount)(_commitment);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (remainingCoin > 0) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    CycloneWrapper
Line:        338
Source: 
>     if (remainingCoin > 0) {
>       (bool success,) = msg.sender.call.value(remainingCoin)("");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(success, 'CycloneWrapper: refund');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    CycloneWrapper
Line:        351
Source: 
>     _cyclone.cycToken().safeApprove(cycloneAddr, uint256(-1));
>     whitelisted[cycloneAddr] = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CycloneWrapper
Line:        309
Source: 
>     paths[0] = wrappedCoin;
>     paths[1] = address(_cyclone.cycToken());
>                        ^^^^^^^^^^^^^^^^^^^
>     uint256[] memory amounts = router.getAmountsIn(cycAmount, paths);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CycloneWrapper
Line:        328
Source: 
>         path[0] = wrappedCoin;
>         path[1] = address(_cyclone.cycToken());
>                           ^^^^^^^^^^^^^^^^^^^
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        213
Source: 
>     function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).add(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeERC20
Line:        218
Source: 
>     function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {
>         uint256 newAllowance = token.allowance(address(this), spender).sub(value);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    CycloneWrapper
Line:        329
Source: 
>         path[1] = address(_cyclone.cycToken());
>         uint256[] memory amounts = router.swapETHForExactTokens.value(remainingCoin)(cycAmount, path, address(this), block.timestamp.mul(2));
>                                                                                                                      ^^^^^^^^^^^^^^^
>         require(remainingCoin >= amounts[0], "CycloneWrapper: unexpected status");

[0m
