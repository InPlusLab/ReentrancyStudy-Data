Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        180
Source: 
>     function both(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := and(x, y)}
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        183
Source: 
>     function either(bool x, bool y) internal pure returns (bool z) {
>         assembly{ z := or(x, y)}
>         ^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        321
Source: 
> 
>             if (escrowReward.claimedUntil == now) continue;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        368
Source: 
> 
>             if (escrowReward.claimedUntil == now) continue;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        266
Source: 
>     */
>     function getTokensBeingEscrowed(address who) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (oldestEscrowSlot[who] >= currentEscrowSlot[who]) return 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        295
Source: 
>     */
>     function getClaimableTokens(address who) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (currentEscrowSlot[who] == 0) return 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        338
Source: 
>     */
>     function claimTokens(address who) public nonReentrant {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(currentEscrowSlot[who] > 0, "StakingRewardsEscrow/invalid-address");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        382
Source: 
>         if (totalToTransfer > 0) {
>             require(token.transfer(who, totalToTransfer), "StakingRewardsEscrow/cannot-transfer-rewards");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        95
Source: 
>      */
>     function addAuthorization(address account) virtual external isAuthorized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        103
Source: 
>      */
>     function removeAuthorization(address account) virtual external isAuthorized {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         authorizedAccounts[account] = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        194
Source: 
>     function multiply(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "StakingRewardsEscrow/mul-overflow");
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        382
Source: 
>         if (totalToTransfer > 0) {
>             require(token.transfer(who, totalToTransfer), "StakingRewardsEscrow/cannot-transfer-rewards");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        382
Source: 
>         if (totalToTransfer > 0) {
>             require(token.transfer(who, totalToTransfer), "StakingRewardsEscrow/cannot-transfer-rewards");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        188
Source: 
>     function addition(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x + y) >= x, "StakingRewardsEscrow/add-overflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        191
Source: 
>     function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x, "StakingRewardsEscrow/sub-underflow");
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    StakingRewardsEscrow
Line:        194
Source: 
>     function multiply(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, "StakingRewardsEscrow/mul-overflow");
>                            ^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        73
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _status = _ENTERED;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        356
Source: 
>             if (escrowReward.amountClaimed >= escrowReward.total) {
>               oldestEscrowSlot[who] = addition(oldestEscrowSlot[who], 1);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               continue;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        362
Source: 
>               totalToTransfer            = addition(totalToTransfer, subtract(escrowReward.total, escrowReward.amountClaimed));
>               escrowReward.amountClaimed = escrowReward.total;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               escrowReward.claimedUntil  = now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        363
Source: 
>               escrowReward.amountClaimed = escrowReward.total;
>               escrowReward.claimedUntil  = now;
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               oldestEscrowSlot[who]      = addition(oldestEscrowSlot[who], 1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        364
Source: 
>               escrowReward.claimedUntil  = now;
>               oldestEscrowSlot[who]      = addition(oldestEscrowSlot[who], 1);
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>               continue;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        377
Source: 
>             totalToTransfer            = addition(totalToTransfer, reward);
>             escrowReward.amountClaimed = addition(escrowReward.amountClaimed, reward);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             escrowReward.claimedUntil  = now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    StakingRewardsEscrow
Line:        378
Source: 
>             escrowReward.amountClaimed = addition(escrowReward.amountClaimed, reward);
>             escrowReward.claimedUntil  = now;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        79
Source: 
>         // https://eips.ethereum.org/EIPS/eip-2200)
>         _status = _NOT_ENTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        53
Source: 
>     uint256 private constant _NOT_ENTERED = 1;
>     uint256 private constant _ENTERED = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        55
Source: 
> 
>     uint256 private _status;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
