pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Staking
Line:        641
Source: 
>         bool success;
>         assembly {
>         ^^^^^^^^^^
>             switch returndatasize()

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Staking
Line:        676
Source: 
>         bool success;
>         assembly {
>         ^^^^^^^^^^
>             switch returndatasize()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Redistributor
Line:        443
Source: 
>         uint blockNumber = getBlockNumber();
>         if (accrualBlockNumber == blockNumber) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Redistributor
Line:        487
Source: 
> 
>     function claim(address receiver, uint amount) external returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address account = msg.sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Staking
Line:        603
Source: 
>     // Withdraw property tokens
>     function withdraw(uint amount) external returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address account = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Redistributor
Line:        408
Source: 
>     // Return the accrued amount of account based on stored data
>     function accruedStored(address account) external view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint storedGlobalAccruedIndex;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Redistributor
Line:        487
Source: 
> 
>     function claim(address receiver, uint amount) external returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address account = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Redistributor
Line:        529
Source: 
> 
>     function transfer(address to, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Redistributor
Line:        408
Source: 
>     // Return the accrued amount of account based on stored data
>     function accruedStored(address account) external view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint storedGlobalAccruedIndex;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Redistributor
Line:        529
Source: 
> 
>     function transfer(address to, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address from = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Staking
Line:        576
Source: 
> 
>     function accountState(address account) external view returns (uint, uint, uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AccountState memory state = accountStates[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Staking
Line:        582
Source: 
>     // Deposit property tokens
>     function deposit(uint amount) external returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address account = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FixedRewardStrategy
Line:        713
Source: 
> 
>     function allocate(Staking staking, uint rewardAmount) external view returns (uint stakingPart, address[] memory others, uint[] memory othersParts) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(staking.property() == filstAddress, "Staking.property mismatch");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Redistributor
Line:        447
Source: 
> 
>         uint newSuperiorAccruedAmount = superior.accrue();
>                                         ^^^^^^^^^^^^^^^^^
>         if (totalShares == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExponentialNoError
Line:        17
Source: 
> contract ExponentialNoError {
>     uint constant expScale = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant doubleScale = 1e36;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExponentialNoError
Line:        18
Source: 
>     uint constant expScale = 1e18;
>     uint constant doubleScale = 1e36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant halfExpScale = expScale/2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExponentialNoError
Line:        19
Source: 
>     uint constant doubleScale = 1e36;
>     uint constant halfExpScale = expScale/2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant mantissaOne = expScale;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExponentialNoError
Line:        20
Source: 
>     uint constant halfExpScale = expScale/2;
>     uint constant mantissaOne = expScale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExponentialNoError
Line:        42
Source: 
>      */
>     function mul_ScalarTruncate(Exp memory a, uint scalar) pure internal returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Exp memory product = mul_(a, scalar);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExponentialNoError
Line:        50
Source: 
>      */
>     function mul_ScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Exp memory product = mul_(a, scalar);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Redistributor
Line:        360
Source: 
>     // The initial accrual index
>     uint internal constant initialAccruedIndex = 1e36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Redistributor
Line:        421
Source: 
> 
>         (, uint instantAccountAccruedAmount) = accruedStoredInternal(account, storedGlobalAccruedIndex);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return instantAccountAccruedAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Redistributor
Line:        472
Source: 
> 
>         (, uint instantAccountAccruedAmount) = accruedStoredInternal(msg.sender, globalAccruedIndex);
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return instantAccountAccruedAmount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixedRewardStrategy
Line:        695
Source: 
>     // Represents percent of staked FILST under which the reward will be split
>     uint internal constant splitThreshold = 0.6e18; // 60%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // If split, take 60% for staking

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixedRewardStrategy
Line:        697
Source: 
>     // If split, take 60% for staking
>     uint internal constant stakingPartInPercentage = 0.6e18; // 60%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // If split, take 30% for repurchase

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixedRewardStrategy
Line:        699
Source: 
>     // If split, take 30% for repurchase
>     uint internal constant repurchasePartInPercentage = 0.3e18; // 30%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // If split, take 10% for safeguardFund

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixedRewardStrategy
Line:        701
Source: 
>     // If split, take 10% for safeguardFund
>     uint internal constant safeguardPartInPercentage = 0.1e18; // 10%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ExponentialNoError
Line:        17
Source: 
> contract ExponentialNoError {
>     uint constant expScale = 1e18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant doubleScale = 1e36;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ExponentialNoError
Line:        18
Source: 
>     uint constant expScale = 1e18;
>     uint constant doubleScale = 1e36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant halfExpScale = expScale/2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ExponentialNoError
Line:        19
Source: 
>     uint constant doubleScale = 1e36;
>     uint constant halfExpScale = expScale/2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant mantissaOne = expScale;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ExponentialNoError
Line:        20
Source: 
>     uint constant halfExpScale = expScale/2;
>     uint constant mantissaOne = expScale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Redistributor
Line:        498
Source: 
>         // claim from superior
>         require(superior.claim(receiver, amount) == amount, "claim: amount mismatch");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Redistributor
Line:        520
Source: 
>         // claim from superior
>         require(superior.claim(account, amount) == amount, "claim: amount mismatch");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Redistributor
Line:        498
Source: 
>         // claim from superior
>         require(superior.claim(receiver, amount) == amount, "claim: amount mismatch");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Redistributor
Line:        520
Source: 
>         // claim from superior
>         require(superior.claim(account, amount) == amount, "claim: amount mismatch");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        637
Source: 
>         EIP20NonStandardInterface token = EIP20NonStandardInterface(property);
>         uint balanceBefore = EIP20Interface(property).balanceOf(address(this));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token.transferFrom(from, address(this), amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Staking
Line:        657
Source: 
>         // Calculate the amount that was *actually* transferred
>         uint balanceAfter = EIP20Interface(property).balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(balanceAfter >= balanceBefore, "TOKEN_TRANSFER_IN_OVERFLOW");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FixedRewardStrategy
Line:        714
Source: 
>     function allocate(Staking staking, uint rewardAmount) external view returns (uint stakingPart, address[] memory others, uint[] memory othersParts) {
>         require(staking.property() == filstAddress, "Staking.property mismatch");
>                 ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Redistributor
Line:        404
Source: 
>     function asset() external view returns (address) {
>         return superior.asset();
>                ^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Redistributor
Line:        413
Source: 
>         } else {
>             uint superiorAccruedStored = superior.accruedStored(address(this));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint delta = sub_(superiorAccruedStored, superiorAccruedAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Redistributor
Line:        447
Source: 
> 
>         uint newSuperiorAccruedAmount = superior.accrue();
>                                         ^^^^^^^^^^^^^^^^^
>         if (totalShares == 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Redistributor
Line:        404
Source: 
>     function asset() external view returns (address) {
>         return superior.asset();
>                ^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Redistributor
Line:        413
Source: 
>         } else {
>             uint superiorAccruedStored = superior.accruedStored(address(this));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint delta = sub_(superiorAccruedStored, superiorAccruedAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Redistributor
Line:        447
Source: 
> 
>         uint newSuperiorAccruedAmount = superior.accrue();
>                                         ^^^^^^^^^^^^^^^^^
>         if (totalShares == 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Staking
Line:        638
Source: 
>         uint balanceBefore = EIP20Interface(property).balanceOf(address(this));
>         token.transferFrom(from, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Staking
Line:        673
Source: 
>         EIP20NonStandardInterface token = EIP20NonStandardInterface(property);
>         token.transfer(to, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FixedRewardStrategy
Line:        716
Source: 
> 
>         uint totalSupply = EIP20Interface(filstAddress).totalSupply();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint totalDeposits = staking.totalDeposits();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FixedRewardStrategy
Line:        717
Source: 
>         uint totalSupply = EIP20Interface(filstAddress).totalSupply();
>         uint totalDeposits = staking.totalDeposits();
>                              ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Staking
Line:        654
Source: 
>         }
>         require(success, "TOKEN_TRANSFER_IN_FAILED");
>                 ^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Staking
Line:        689
Source: 
>         }
>         require(success, "TOKEN_TRANSFER_OUT_FAILED");
>                 ^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Redistributor
Line:        357
Source: 
>     // The accrued amount of this address in superior Distributor
>     uint public superiorAccruedAmount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Redistributor
Line:        363
Source: 
>     // The last accrued block number
>     uint public accrualBlockNumber;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Redistributor
Line:        369
Source: 
>     // Total count of shares.
>     uint internal totalShares;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Redistributor
Line:        363
Source: 
>     // The last accrued block number
>     uint public accrualBlockNumber;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Redistributor
Line:        369
Source: 
>     // Total count of shares.
>     uint internal totalShares;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        449
Source: 
>         if (totalShares == 0) {
>             accrualBlockNumber = blockNumber;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        459
Source: 
>         // update globalAccruedIndex
>         globalAccruedIndex = doubleAccruedIndex.mantissa;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         superiorAccruedAmount = newSuperiorAccruedAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        460
Source: 
>         globalAccruedIndex = doubleAccruedIndex.mantissa;
>         superiorAccruedAmount = newSuperiorAccruedAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accrualBlockNumber = blockNumber;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        461
Source: 
>         superiorAccruedAmount = newSuperiorAccruedAmount;
>         accrualBlockNumber = blockNumber;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        480
Source: 
>         AccountState storage state = accountStates[account];
>         state.accruedIndex = globalAccruedIndex;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         state.accruedAmount = instantAccruedAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        481
Source: 
>         state.accruedIndex = globalAccruedIndex;
>         state.accruedAmount = instantAccruedAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        449
Source: 
>         if (totalShares == 0) {
>             accrualBlockNumber = blockNumber;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        459
Source: 
>         // update globalAccruedIndex
>         globalAccruedIndex = doubleAccruedIndex.mantissa;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         superiorAccruedAmount = newSuperiorAccruedAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        460
Source: 
>         globalAccruedIndex = doubleAccruedIndex.mantissa;
>         superiorAccruedAmount = newSuperiorAccruedAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         accrualBlockNumber = blockNumber;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        461
Source: 
>         superiorAccruedAmount = newSuperiorAccruedAmount;
>         accrualBlockNumber = blockNumber;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        480
Source: 
>         AccountState storage state = accountStates[account];
>         state.accruedIndex = globalAccruedIndex;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         state.accruedAmount = instantAccruedAmount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Redistributor
Line:        481
Source: 
>         state.accruedIndex = globalAccruedIndex;
>         state.accruedAmount = instantAccruedAmount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Staking
Line:        594
Source: 
>         AccountState storage state = accountStates[account];
>         totalShares = add_(totalShares, actualAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         state.share = add_(state.share, actualAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Staking
Line:        595
Source: 
>         totalShares = add_(totalShares, actualAmount);
>         state.share = add_(state.share, actualAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ExponentialNoError
Line:        44
Source: 
>         Exp memory product = mul_(a, scalar);
>         return truncate(product);
>                ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ExponentialNoError
Line:        52
Source: 
>         Exp memory product = mul_(a, scalar);
>         return add_(truncate(product), addend);
>                     ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ExponentialNoError
Line:        44
Source: 
>         Exp memory product = mul_(a, scalar);
>         return truncate(product);
>                ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ExponentialNoError
Line:        52
Source: 
>         Exp memory product = mul_(a, scalar);
>         return add_(truncate(product), addend);
>                     ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ExponentialNoError
Line:        44
Source: 
>         Exp memory product = mul_(a, scalar);
>         return truncate(product);
>                ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ExponentialNoError
Line:        52
Source: 
>         Exp memory product = mul_(a, scalar);
>         return add_(truncate(product), addend);
>                     ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        18
Source: 
>     uint constant expScale = 1e18;
>     uint constant doubleScale = 1e36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant halfExpScale = expScale/2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        19
Source: 
>     uint constant doubleScale = 1e36;
>     uint constant halfExpScale = expScale/2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant mantissaOne = expScale;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        20
Source: 
>     uint constant halfExpScale = expScale/2;
>     uint constant mantissaOne = expScale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        19
Source: 
>     uint constant doubleScale = 1e36;
>     uint constant halfExpScale = expScale/2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant mantissaOne = expScale;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        20
Source: 
>     uint constant halfExpScale = expScale/2;
>     uint constant mantissaOne = expScale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        19
Source: 
>     uint constant doubleScale = 1e36;
>     uint constant halfExpScale = expScale/2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant mantissaOne = expScale;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        20
Source: 
>     uint constant halfExpScale = expScale/2;
>     uint constant mantissaOne = expScale;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        18
Source: 
>     uint constant expScale = 1e18;
>     uint constant doubleScale = 1e36;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant halfExpScale = expScale/2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ExponentialNoError
Line:        19
Source: 
>     uint constant doubleScale = 1e36;
>     uint constant halfExpScale = expScale/2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant mantissaOne = expScale;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedRewardStrategy
Line:        701
Source: 
>     // If split, take 10% for safeguardFund
>     uint internal constant safeguardPartInPercentage = 0.1e18; // 10%
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
