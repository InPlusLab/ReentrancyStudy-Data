pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    UTap
Line:        224
Source: 
> 
>     function tap() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^
>         require(tx.origin == msg.sender, "UTap: External accounts only");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UTap
Line:        227
Source: 
>         require(blocklock <= now, "block");
>         Token.transfer(bucket, Token.balanceOf(address(this)) / 50);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blocklock = now + 1 days;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    UTap
Line:        229
Source: 
>         blocklock = now + 1 days;
>         Pool.sync();
>         ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Violation
Contract:    UTap
Line:        227
Source: 
>         require(blocklock <= now, "block");
>         Token.transfer(bucket, Token.balanceOf(address(this)) / 50);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blocklock = now + 1 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        39
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        41
Source: 
> 
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        72
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UTap
Line:        209
Source: 
> contract UTap {
>     IERC20 public Token;
>     ^^^^^^^^^^^^^^^^^^^
>     IUniswapV2Pair public Pool;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UTap
Line:        210
Source: 
>     IERC20 public Token;
>     IUniswapV2Pair public Pool;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public blocklock;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        4
Source: 
> 
> pragma solidity >=0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UTap
Line:        227
Source: 
>         require(blocklock <= now, "block");
>         Token.transfer(bucket, Token.balanceOf(address(this)) / 50);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blocklock = now + 1 days;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UTap
Line:        227
Source: 
>         require(blocklock <= now, "block");
>         Token.transfer(bucket, Token.balanceOf(address(this)) / 50);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blocklock = now + 1 days;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UTap
Line:        229
Source: 
>         blocklock = now + 1 days;
>         Pool.sync();
>         ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    UTap
Line:        211
Source: 
>     IUniswapV2Pair public Pool;
>     uint256 public blocklock;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public bucket;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UTap
Line:        227
Source: 
>         require(blocklock <= now, "block");
>         Token.transfer(bucket, Token.balanceOf(address(this)) / 50);
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blocklock = now + 1 days;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UTap
Line:        227
Source: 
>         require(blocklock <= now, "block");
>         Token.transfer(bucket, Token.balanceOf(address(this)) / 50);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         blocklock = now + 1 days;

[0m
