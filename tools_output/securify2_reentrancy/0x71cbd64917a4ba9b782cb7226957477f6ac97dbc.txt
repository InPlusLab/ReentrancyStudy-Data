Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        138
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { cs := extcodesize(self) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return cs == 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        44
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        52
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        44
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DSAuth
Line:        52
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DrillBase
Line:        219
Source: 
> 	 */
> 	function initialize(address _registry) public initializer {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner = msg.sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DrillBase
Line:        232
Source: 
> 	 */
> 	function createDrill(uint16 grade, address to)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DrillBase
Line:        266
Source: 
> 	 */
> 	function destroyDrill(address to, uint256 tokenId) public auth {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)).burn(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DrillBase
Line:        274
Source: 
> 
> 	function getGrade(uint256 tokenId) public pure returns (uint16) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint128 objectId = uint128(tokenId & _CLEAR_HIGH);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        44
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        52
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        44
Source: 
> 
>     function setOwner(address owner_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DSAuth
Line:        52
Source: 
> 
>     function setAuthority(DSAuthority authority_)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DrillBase
Line:        232
Source: 
> 	 */
> 	function createDrill(uint16 grade, address to)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DrillBase
Line:        266
Source: 
> 	 */
> 	function destroyDrill(address to, uint256 tokenId) public auth {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)).burn(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DrillBase
Line:        219
Source: 
> 	 */
> 	function initialize(address _registry) public initializer {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DrillBase
Line:        274
Source: 
> 
> 	function getGrade(uint256 tokenId) public pure returns (uint16) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint128 objectId = uint128(tokenId & _CLEAR_HIGH);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DrillBase
Line:        250
Source: 
> 		uint256 tokenId =
> 			IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP))
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				.mintObject(to, objectId);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DrillBase
Line:        250
Source: 
> 		uint256 tokenId =
> 			IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP))
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				.mintObject(to, objectId);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // hevm: flattened sources of src/DrillBase.sol
> pragma solidity >=0.4.23 >=0.4.24 <0.7.0 >=0.6.7 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        115
Source: 
> 
>         bool isTopLevelCall = !_initializing;
>         ^^^^^^^^^^^^^^^^^^^
>         if (isTopLevelCall) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DSAuth
Line:        73
Source: 
>         } else {
>             return authority.canCall(src, address(this), sig);
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DrillBase
Line:        250
Source: 
> 		uint256 tokenId =
> 			IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP))
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				.mintObject(to, objectId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DrillBase
Line:        250
Source: 
> 		uint256 tokenId =
> 			IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP))
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				.mintObject(to, objectId);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DrillBase
Line:        267
Source: 
> 	function destroyDrill(address to, uint256 tokenId) public auth {
> 		IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)).burn(
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			to,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DrillBase
Line:        267
Source: 
> 	function destroyDrill(address to, uint256 tokenId) public auth {
> 		IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)).burn(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			to,

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        139
Source: 
>         assembly { cs := extcodesize(self) }
>         return cs == 0;
>                ^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DSAuth
Line:        36
Source: 
> contract DSAuth is DSAuthEvents {
>     DSAuthority  public  authority;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address      public  owner;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        102
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        107
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DrillBase
Line:        212
Source: 
> 	/*** STORAGE ***/
> 	uint128 public lastDrillObjectId;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DrillBase
Line:        214
Source: 
> 
> 	ISettingsRegistry public registry;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        102
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        107
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        48
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        56
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        48
Source: 
>     {
>         owner = owner_;
>         ^^^^^^^^^^^^^^
>         emit LogSetOwner(owner);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DSAuth
Line:        56
Source: 
>     {
>         authority = authority_;
>         ^^^^^^^^^^^^^^^^^^^^^^
>         emit LogSetAuthority(address(authority));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DrillBase
Line:        241
Source: 
> 	function _createDrill(uint16 grade, address to) internal returns (uint256) {
> 		lastDrillObjectId += 1;
>   ^^^^^^^^^^^^^^^^^^^^^^
> 		require(

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        117
Source: 
>         if (isTopLevelCall) {
>             _initializing = true;
>             ^^^^^^^^^^^^^^^^^^^^
>             _initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        118
Source: 
>             _initializing = true;
>             _initialized = true;
>             ^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DrillBase
Line:        220
Source: 
> 	function initialize(address _registry) public initializer {
> 		owner = msg.sender;
>   ^^^^^^^^^^^^^^^^^^
> 		emit LogSetOwner(msg.sender);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DrillBase
Line:        223
Source: 
> 
> 		registry = ISettingsRegistry(_registry);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        124
Source: 
>         if (isTopLevelCall) {
>             _initializing = false;
>             ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DrillBase
Line:        250
Source: 
> 		uint256 tokenId =
> 			IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP))
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 				.mintObject(to, objectId);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DrillBase
Line:        267
Source: 
> 	function destroyDrill(address to, uint256 tokenId) public auth {
> 		IObjectOwnership(registry.addressOf(CONTRACT_OBJECT_OWNERSHIP)).burn(
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			to,

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        102
Source: 
>      */
>     bool private _initialized;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        107
Source: 
>      */
>     bool private _initializing;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
