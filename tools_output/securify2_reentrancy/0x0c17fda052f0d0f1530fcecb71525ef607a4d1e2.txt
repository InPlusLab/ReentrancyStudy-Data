Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Violation
Contract:    AddressConfig
Line:        428
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PauserRole
Line:        82
Source: 
> 
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        104
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        104
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        153
Source: 
> 	 */
> 	function paused() public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _paused;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        176
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        184
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        198
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        234
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        260
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        198
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        234
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        260
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        104
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        176
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        184
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        234
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        260
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        104
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        176
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        184
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        198
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        234
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        260
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Killable
Line:        198
Source: 
> 
> 	function kill() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == _owner, "only owner method");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        104
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        176
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        184
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        234
Source: 
> 	 */
> 	function owner() public view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        260
Source: 
> 	 */
> 	function renounceOwnership() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PauserRole
Line:        104
Source: 
> 
> 	function renouncePauser() public {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_removePauser(_msgSender());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        176
Source: 
> 	 */
> 	function pause() public onlyPauser whenNotPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Pausable
Line:        184
Source: 
> 	 */
> 	function unpause() public onlyPauser whenPaused {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_paused = false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        96
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        96
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EternalStorage
Line:        662
Source: 
> 
> 	function changeOwner(address _newOwner) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == currentOwner, "not current owner");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        96
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        778
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        782
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        96
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        778
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        782
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    VoteTimesStorage
Line:        813
Source: 
> 	//Vote Times By Property
> 	function getVoteTimesByProperty(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        96
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        269
Source: 
> 	 */
> 	function transferOwnership(address newOwner) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        778
Source: 
> 
> 	function setStorage(address _storageAddress) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_storage = _storageAddress;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    UsingStorage
Line:        782
Source: 
> 
> 	function changeOwner(address newOwner) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		EternalStorage(_storage).changeOwner(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetricsGroup
Line:        916
Source: 
> 
> 	function addGroup(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetricsGroup
Line:        930
Source: 
> 
> 	function removeGroup(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetricsGroup
Line:        944
Source: 
> 
> 	function isGroup(address _addr) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return eternalStorage().getBool(getGroupKey(_addr));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        96
Source: 
> 
> 	function isPauser(address account) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _pausers.has(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PauserRole
Line:        100
Source: 
> 
> 	function addPauser(address account) public onlyPauser {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		_addPauser(account);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MetricsFactory
Line:        977
Source: 
> 
> 	function destroy(address _metrics) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        303
Source: 
> 
> 	function validateIllegalAddress(address _addr) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr != address(0), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        307
Source: 
> 
> 	function validateGroup(address _addr, address _groupAddr) external view {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        311
Source: 
> 
> 	function validateGroups(
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        322
Source: 
> 
> 	function validateAddress(address _addr, address _target) external pure {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_addr == _target, errorMessage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressValidator
Line:        326
Source: 
> 
> 	function validateAddresses(
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		address _addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        375
Source: 
> 
> 	function setAllocator(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocator = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        379
Source: 
> 
> 	function setAllocatorStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		allocatorStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        383
Source: 
> 
> 	function setWithdraw(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdraw = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        387
Source: 
> 
> 	function setWithdrawStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		withdrawStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        391
Source: 
> 
> 	function setMarketFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        395
Source: 
> 
> 	function setMarketGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		marketGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        399
Source: 
> 
> 	function setPropertyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        403
Source: 
> 
> 	function setPropertyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		propertyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        407
Source: 
> 
> 	function setMetricsFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        411
Source: 
> 
> 	function setMetricsGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        415
Source: 
> 
> 	function setPolicyFactory(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyFactory = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        419
Source: 
> 
> 	function setPolicyGroup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policyGroup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        423
Source: 
> 
> 	function setPolicySet(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policySet = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        427
Source: 
> 
> 	function setPolicy(address _addr) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, policyFactory);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        432
Source: 
> 
> 	function setToken(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		token = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        436
Source: 
> 
> 	function setLockup(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockup = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        440
Source: 
> 
> 	function setLockupStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lockupStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        444
Source: 
> 
> 	function setVoteTimes(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimes = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        448
Source: 
> 
> 	function setVoteTimesStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimesStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        452
Source: 
> 
> 	function setVoteCounter(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounter = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressConfig
Line:        456
Source: 
> 
> 	function setVoteCounterStorage(address _addr) external onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteCounterStorage = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        668
Source: 
> 	// *** Getter Methods ***
> 	function getUint(bytes32 _key) external view returns (uint256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return uIntStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        672
Source: 
> 
> 	function getString(bytes32 _key) external view returns (string memory) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return stringStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        676
Source: 
> 
> 	function getAddress(bytes32 _key) external view returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return addressStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        680
Source: 
> 
> 	function getBytes(bytes32 _key) external view returns (bytes32) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return bytesStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        684
Source: 
> 
> 	function getBool(bytes32 _key) external view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return boolStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        688
Source: 
> 
> 	function getInt(bytes32 _key) external view returns (int256) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return intStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        693
Source: 
> 	// *** Setter Methods ***
> 	function setUint(bytes32 _key, uint256 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uIntStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        697
Source: 
> 
> 	function setString(bytes32 _key, string calldata _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        704
Source: 
> 
> 	function setAddress(bytes32 _key, address _value)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        711
Source: 
> 
> 	function setBytes(bytes32 _key, bytes32 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		bytesStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        715
Source: 
> 
> 	function setBool(bytes32 _key, bool _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		boolStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        719
Source: 
> 
> 	function setInt(bytes32 _key, int256 _value) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		intStorage[_key] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        724
Source: 
> 	// *** Delete Methods ***
> 	function deleteUint(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete uIntStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        728
Source: 
> 
> 	function deleteString(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete stringStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        732
Source: 
> 
> 	function deleteAddress(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete addressStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        736
Source: 
> 
> 	function deleteBytes(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete bytesStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        740
Source: 
> 
> 	function deleteBool(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete boolStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EternalStorage
Line:        744
Source: 
> 
> 	function deleteInt(bytes32 _key) external onlyCurrentOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		delete intStorage[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimesStorage
Line:        802
Source: 
> 
> 	function setVoteTimes(uint256 times) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimesStorage
Line:        821
Source: 
> 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimes
Line:        859
Source: 
> 
> 	function addVoteTimesByProperty(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimes
Line:        869
Source: 
> 
> 	function resetVoteTimesByProperty(address _property) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateAddresses(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    VoteTimes
Line:        880
Source: 
> 
> 	function getAbstentionTimes(address _property)
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    MetricsFactory
Line:        965
Source: 
> 
> 	function create(address _property) external returns (address) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(paused() == false, "You cannot use that");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    VoteTimesStorage
Line:        795
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    VoteTimes
Line:        845
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MetricsGroup
Line:        914
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    MetricsFactory
Line:        963
Source: 
> 	// solium-disable-next-line no-empty-blocks
> 	constructor(address _config) public UsingConfig(_config) {}
>              ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Killable
Line:        192
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressValidator
Line:        301
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AddressValidator
Line:        301
Source: 
> contract AddressValidator {
> 	string constant errorMessage = "this is illegal address";
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        308
Source: 
> 	function validateGroup(address _addr, address _groupAddr) external view {
> 		require(IGroup(_groupAddr).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        316
Source: 
> 	) external view {
> 		if (IGroup(_groupAddr1).isGroup(_addr)) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AddressValidator
Line:        319
Source: 
> 		}
> 		require(IGroup(_groupAddr2).isGroup(_addr), errorMessage);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteTimes
Line:        854
Source: 
> 
> 		uint256 voteTimes = getStorage().getVoteTimes();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		voteTimes = voteTimes.add(1);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    VoteTimes
Line:        862
Source: 
> 
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MetricsGroup
Line:        925
Source: 
> 		eternalStorage().setBool(getGroupKey(_addr), true);
> 		uint256 totalCount = eternalStorage().getUint(getTotalCountKey());
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalCount = totalCount.add(1);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MetricsFactory
Line:        981
Source: 
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressConfig
Line:        428
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        783
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        799
Source: 
> 	function getVoteTimes() external view returns (uint256) {
> 		return eternalStorage().getUint(getVoteTimesKey());
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        803
Source: 
> 	function setVoteTimes(uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        803
Source: 
> 	function setVoteTimes(uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        805
Source: 
> 
> 		return eternalStorage().setUint(getVoteTimesKey(), times);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        818
Source: 
> 	{
> 		return eternalStorage().getUint(getVoteTimesByPropertyKey(_property));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        822
Source: 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>                                                  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        822
Source: 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimesStorage
Line:        825
Source: 
> 		return
> 			eternalStorage().setUint(
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 				getVoteTimesByPropertyKey(_property),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        850
Source: 
> 			msg.sender,
> 			config().marketFactory(),
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 			config().policyFactory()

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        851
Source: 
> 			config().marketFactory(),
> 			config().policyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        848
Source: 
> 	function addVoteTime() external {
> 		addressValidator().validateAddresses(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        856
Source: 
> 		voteTimes = voteTimes.add(1);
> 		getStorage().setVoteTimes(voteTimes);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        893
Source: 
> 	function getStorage() private view returns (VoteTimesStorage) {
> 		return VoteTimesStorage(config().voteTimesStorage());
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        860
Source: 
> 	function addVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        860
Source: 
> 	function addVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        866
Source: 
> 		voteTimesByProperty = voteTimesByProperty.add(1);
> 		getStorage().setVoteTimesByProperty(_property, voteTimesByProperty);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        872
Source: 
> 			msg.sender,
> 			config().allocator(),
>    ^^^^^^^^^^^^^^^^^^^^
> 			config().propertyFactory()

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        873
Source: 
> 			config().allocator(),
> 			config().propertyFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        870
Source: 
> 	function resetVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddresses(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        876
Source: 
> 
> 		uint256 voteTimes = getStorage().getVoteTimes();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		getStorage().setVoteTimesByProperty(_property, voteTimes);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        877
Source: 
> 		uint256 voteTimes = getStorage().getVoteTimes();
> 		getStorage().setVoteTimesByProperty(_property, voteTimes);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        885
Source: 
> 	{
> 		uint256 voteTimes = getStorage().getVoteTimes();
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    VoteTimes
Line:        886
Source: 
> 		uint256 voteTimes = getStorage().getVoteTimes();
> 		uint256 voteTimesByProperty = getStorage().getVoteTimesByProperty(
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			_property

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    UsingStorage
Line:        783
Source: 
> 	function changeOwner(address newOwner) external onlyOwner {
> 		EternalStorage(_storage).changeOwner(newOwner);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        920
Source: 
> 			msg.sender,
> 			config().metricsFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        918
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        924
Source: 
> 		require(isGroup(_addr) == false, "already enabled");
> 		eternalStorage().setBool(getGroupKey(_addr), true);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 totalCount = eternalStorage().getUint(getTotalCountKey());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        927
Source: 
> 		totalCount = totalCount.add(1);
> 		eternalStorage().setUint(getTotalCountKey(), totalCount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        945
Source: 
> 	function isGroup(address _addr) public view returns (bool) {
> 		return eternalStorage().getBool(getGroupKey(_addr));
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        934
Source: 
> 			msg.sender,
> 			config().metricsFactory()
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        932
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        938
Source: 
> 		require(isGroup(_addr), "address is not group");
> 		eternalStorage().setBool(getGroupKey(_addr), false);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint256 totalCount = eternalStorage().getUint(getTotalCountKey());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        939
Source: 
> 		eternalStorage().setBool(getGroupKey(_addr), false);
> 		uint256 totalCount = eternalStorage().getUint(getTotalCountKey());
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		totalCount = totalCount.sub(1);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        941
Source: 
> 		totalCount = totalCount.sub(1);
> 		eternalStorage().setUint(getTotalCountKey(), totalCount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsGroup
Line:        949
Source: 
> 	function totalIssuedMetrics() external view returns (uint256) {
> 		return eternalStorage().getUint(getTotalCountKey());
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        967
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        967
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        970
Source: 
> 		Metrics metrics = new Metrics(msg.sender, _property);
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^
> 		address metricsAddress = address(metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        972
Source: 
> 		address metricsAddress = address(metrics);
> 		metricsGroup.addGroup(metricsAddress);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Create(msg.sender, metricsAddress);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        980
Source: 
> 
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
>                                            ^^^^^^^^^^^^^^^^^^^^^^^
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        982
Source: 
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        982
Source: 
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        984
Source: 
> 		Metrics metrics = Metrics(_metrics);
> 		addressValidator().validateAddress(msg.sender, metrics.market());
>                                                  ^^^^^^^^^^^^^^^^
> 		metricsGroup.removeGroup(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        984
Source: 
> 		Metrics metrics = Metrics(_metrics);
> 		addressValidator().validateAddress(msg.sender, metrics.market());
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		metricsGroup.removeGroup(_metrics);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MetricsFactory
Line:        985
Source: 
> 		addressValidator().validateAddress(msg.sender, metrics.market());
> 		metricsGroup.removeGroup(_metrics);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Destroy(msg.sender, _metrics);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        354
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        355
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        356
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        357
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        358
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        359
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        360
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        361
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        362
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        363
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        364
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        365
Source: 
> 	address public policy;
> 	address public policyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policySet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        366
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        367
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        368
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        369
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        370
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        371
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        372
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AddressConfig
Line:        373
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        140
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        751
Source: 
> contract UsingStorage is Ownable, Pausable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        140
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Killable
Line:        192
Source: 
> contract Killable {
> 	address payable public _owner;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        340
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        463
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        751
Source: 
> contract UsingStorage is Ownable, Pausable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        140
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        340
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingStorage
Line:        751
Source: 
> contract UsingStorage is Ownable, Pausable {
> 	address private _storage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Pausable
Line:        140
Source: 
> 
> 	bool private _paused;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingValidator
Line:        340
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    UsingConfig
Line:        463
Source: 
> contract UsingConfig {
> 	AddressConfig private _config;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    PauserRole
Line:        82
Source: 
> 
> 	Roles.Role private _pausers;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        50
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        58
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        50
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        58
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        177
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        185
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        50
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        58
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        177
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        185
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        50
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        58
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        177
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        185
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        50
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        58
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        177
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        185
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        50
Source: 
> 		require(!has(role, account), "Roles: account already has role");
> 		role.bearer[account] = true;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Roles
Line:        58
Source: 
> 		require(has(role, account), "Roles: account does not have role");
> 		role.bearer[account] = false;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        177
Source: 
> 	function pause() public onlyPauser whenNotPaused {
> 		_paused = true;
>   ^^^^^^^^^^^^^^
> 		emit Paused(_msgSender());

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Pausable
Line:        185
Source: 
> 	function unpause() public onlyPauser whenPaused {
> 		_paused = false;
>   ^^^^^^^^^^^^^^^
> 		emit Unpaused(_msgSender());

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressConfig
Line:        429
Source: 
> 		addressValidator().validateAddress(msg.sender, policyFactory);
> 		policy = _addr;
>   ^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        186
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AddressConfig
Line:        428
Source: 
> 	function setPolicy(address _addr) external {
> 		addressValidator().validateAddress(msg.sender, policyFactory);
>   ^^^^^^^^^^^^^^^^^^
> 		policy = _addr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        186
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UsingStorage
Line:        764
Source: 
> 	{
> 		require(paused() == false, "You cannot use that");
>           ^^^^^^^^
> 		return EternalStorage(_storage);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        186
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimesStorage
Line:        803
Source: 
> 	function setVoteTimes(uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimesStorage
Line:        803
Source: 
> 	function setVoteTimes(uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimesStorage
Line:        822
Source: 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimesStorage
Line:        822
Source: 
> 	function setVoteTimesByProperty(address _property, uint256 times) external {
> 		addressValidator().validateAddress(msg.sender, config().voteTimes());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        850
Source: 
> 			msg.sender,
> 			config().marketFactory(),
>    ^^^^^^^^
> 			config().policyFactory()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        851
Source: 
> 			config().marketFactory(),
> 			config().policyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        848
Source: 
> 	function addVoteTime() external {
> 		addressValidator().validateAddresses(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        893
Source: 
> 	function getStorage() private view returns (VoteTimesStorage) {
> 		return VoteTimesStorage(config().voteTimesStorage());
>                           ^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        860
Source: 
> 	function addVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>                                                  ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        860
Source: 
> 	function addVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddress(msg.sender, config().voteCounter());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        872
Source: 
> 			msg.sender,
> 			config().allocator(),
>    ^^^^^^^^
> 			config().propertyFactory()

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        873
Source: 
> 			config().allocator(),
> 			config().propertyFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    VoteTimes
Line:        870
Source: 
> 	function resetVoteTimesByProperty(address _property) external {
> 		addressValidator().validateAddresses(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        186
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsGroup
Line:        920
Source: 
> 			msg.sender,
> 			config().metricsFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsGroup
Line:        918
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsGroup
Line:        934
Source: 
> 			msg.sender,
> 			config().metricsFactory()
>    ^^^^^^^^
> 		);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsGroup
Line:        932
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateAddress(
>   ^^^^^^^^^^^^^^^^^^
> 			msg.sender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        178
Source: 
> 		_paused = true;
> 		emit Paused(_msgSender());
>               ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Pausable
Line:        186
Source: 
> 		_paused = false;
> 		emit Unpaused(_msgSender());
>                 ^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        967
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        967
Source: 
> 		require(paused() == false, "You cannot use that");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        970
Source: 
> 		Metrics metrics = new Metrics(msg.sender, _property);
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
>                                            ^^^^^^^^
> 		address metricsAddress = address(metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        980
Source: 
> 
> 		MetricsGroup metricsGroup = MetricsGroup(config().metricsGroup());
>                                            ^^^^^^^^
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        982
Source: 
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>                                                ^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        982
Source: 
> 		require(metricsGroup.isGroup(_metrics), "address is not metrics");
> 		addressValidator().validateGroup(msg.sender, config().marketGroup());
>   ^^^^^^^^^^^^^^^^^^
> 		Metrics metrics = Metrics(_metrics);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    MetricsFactory
Line:        984
Source: 
> 		Metrics metrics = Metrics(_metrics);
> 		addressValidator().validateAddress(msg.sender, metrics.market());
>   ^^^^^^^^^^^^^^^^^^
> 		metricsGroup.removeGroup(_metrics);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    UsingValidator
Line:        340
Source: 
> contract UsingValidator {
> 	AddressValidator private _validator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        353
Source: 
> contract AddressConfig is Ownable, UsingValidator, Killable {
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocator;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        354
Source: 
> 	address public token = 0x98626E2C9231f03504273d55f397409deFD4a093;
> 	address public allocator;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public allocatorStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        355
Source: 
> 	address public allocator;
> 	address public allocatorStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdraw;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        356
Source: 
> 	address public allocatorStorage;
> 	address public withdraw;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 	address public withdrawStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        357
Source: 
> 	address public withdraw;
> 	address public withdrawStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        358
Source: 
> 	address public withdrawStorage;
> 	address public marketFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public marketGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        359
Source: 
> 	address public marketFactory;
> 	address public marketGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        360
Source: 
> 	address public marketGroup;
> 	address public propertyFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public propertyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        361
Source: 
> 	address public propertyFactory;
> 	address public propertyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        362
Source: 
> 	address public propertyGroup;
> 	address public metricsGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public metricsFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        363
Source: 
> 	address public metricsGroup;
> 	address public metricsFactory;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policy;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        364
Source: 
> 	address public metricsFactory;
> 	address public policy;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public policyFactory;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        366
Source: 
> 	address public policyFactory;
> 	address public policySet;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public policyGroup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        367
Source: 
> 	address public policySet;
> 	address public policyGroup;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public lockup;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        368
Source: 
> 	address public policyGroup;
> 	address public lockup;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public lockupStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        369
Source: 
> 	address public lockup;
> 	address public lockupStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimes;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        370
Source: 
> 	address public lockupStorage;
> 	address public voteTimes;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteTimesStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        371
Source: 
> 	address public voteTimes;
> 	address public voteTimesStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounter;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        372
Source: 
> 	address public voteTimesStorage;
> 	address public voteCounter;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public voteCounterStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AddressConfig
Line:        373
Source: 
> 	address public voteCounter;
> 	address public voteCounterStorage;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Metrics
Line:        899
Source: 
> contract Metrics {
> 	address public market;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	address public property;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Metrics
Line:        900
Source: 
> 	address public market;
> 	address public property;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
