[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    GTBExchanger
Line:        211
Source: 
>            uint256 local_dai;
>            assembly {
>            ^^^^^^^^^^
>                 local_dai := mload(add(0x20,data))

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    GTBExchanger
Line:        198
Source: 
>     address public dai_adr = address(0x006b175474e89094c44da98b954eedeac495271d0f);
>     address public rinkeby_dai_adr = address(0x2448eE2641d78CC42D7AD76498917359D961A783);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public uniswap;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        113
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        139
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        148
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        113
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        139
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        148
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GTBExchanger
Line:        218
Source: 
> 
> 	function changeUniswap(address _a) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uniswap = _a;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GTBExchanger
Line:        223
Source: 
> 
> 	function init() public{
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 		require(address(_daiEx)==address(0),"can set exchange only once");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GTBExchanger
Line:        231
Source: 
> 	
> 	function initb() public{
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 		IERC20(dai_adr).approve(address(_daiEx),uint(2**255));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    GTBExchanger
Line:        237
Source: 
> 
>     function getDAIAmount(uint256 weiAmount) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _daiEx.getEthToTokenInputPrice(weiAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    GTBExchanger
Line:        208
Source: 
>         //calls fakeDAI() from Uniswap mock, takes no effect on prod
>         (status,data)=uniswap.call.gas(100000)(abi.encodePacked(bytes4(0xe46cdfe6)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(status){

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    GTBExchanger
Line:        244
Source: 
>         bool status ;
>         (status,)=daiExAddr.call.gas(75000).value(msg.value)("");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status,'DAI purchase failed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        148
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GTBExchanger
Line:        218
Source: 
> 
> 	function changeUniswap(address _a) public onlyOwner{
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uniswap = _a;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    GTBExchanger
Line:        237
Source: 
> 
>     function getDAIAmount(uint256 weiAmount) public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _daiEx.getEthToTokenInputPrice(weiAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    GTBExchanger
Line:        251
Source: 
> 
>     function exchangeFromDAI(uint256 amount,address payable beneficiary) external{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IERC20(dai_adr).transferFrom(msg.sender,address(this),amount),'transfer failed');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GTBExchanger
Line:        220
Source: 
> 		uniswap = _a;
> 		_daiEx = UniswapExchangeApi(UniswapFactoryApi(uniswap).getExchange(dai_adr));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    GTBExchanger
Line:        228
Source: 
> 		}
> 		_daiEx = UniswapExchangeApi(UniswapFactoryApi(uniswap).getExchange(dai_adr));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	} 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GTBExchanger
Line:        197
Source: 
> 
>     address public dai_adr = address(0x006b175474e89094c44da98b954eedeac495271d0f);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public rinkeby_dai_adr = address(0x2448eE2641d78CC42D7AD76498917359D961A783);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GTBExchanger
Line:        198
Source: 
>     address public dai_adr = address(0x006b175474e89094c44da98b954eedeac495271d0f);
>     address public rinkeby_dai_adr = address(0x2448eE2641d78CC42D7AD76498917359D961A783);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address public uniswap;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GTBExchanger
Line:        201
Source: 
> 
>     UniswapExchangeApi public _daiEx;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     constructor (address _uniswap) public {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    GTBExchanger
Line:        210
Source: 
>         if(status){
>            uint256 local_dai;
>            ^^^^^^^^^^^^^^^^^
>            assembly {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        86
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        164
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    GTBExchanger
Line:        208
Source: 
>         //calls fakeDAI() from Uniswap mock, takes no effect on prod
>         (status,data)=uniswap.call.gas(100000)(abi.encodePacked(bytes4(0xe46cdfe6)));
>                                        ^^^^^^
>         if(status){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    GTBExchanger
Line:        244
Source: 
>         bool status ;
>         (status,)=daiExAddr.call.gas(75000).value(msg.value)("");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status,'DAI purchase failed');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    GTBExchanger
Line:        254
Source: 
>         uint ethValue = _daiEx.tokenToEthSwapInput(amount,1,now+1);
>         beneficiary.transfer(ethValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    GTBExchanger
Line:        244
Source: 
>         bool status ;
>         (status,)=daiExAddr.call.gas(75000).value(msg.value)("");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status,'DAI purchase failed');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    GTBExchanger
Line:        254
Source: 
>         uint ethValue = _daiEx.tokenToEthSwapInput(amount,1,now+1);
>         beneficiary.transfer(ethValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GTBExchanger
Line:        220
Source: 
> 		uniswap = _a;
> 		_daiEx = UniswapExchangeApi(UniswapFactoryApi(uniswap).getExchange(dai_adr));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GTBExchanger
Line:        228
Source: 
> 		}
> 		_daiEx = UniswapExchangeApi(UniswapFactoryApi(uniswap).getExchange(dai_adr));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	} 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GTBExchanger
Line:        247
Source: 
>         uint256 tokAmount = IERC20(dai_adr).balanceOf(address(this));
>         require(IERC20(dai_adr).transfer(msg.sender,tokAmount),'transfer failed');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return tokAmount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    GTBExchanger
Line:        252
Source: 
>     function exchangeFromDAI(uint256 amount,address payable beneficiary) external{
>         require(IERC20(dai_adr).transferFrom(msg.sender,address(this),amount),'transfer failed');
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint ethValue = _daiEx.tokenToEthSwapInput(amount,1,now+1);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GTBExchanger
Line:        232
Source: 
> 	function initb() public{
> 		IERC20(dai_adr).approve(address(_daiEx),uint(2**255));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	} 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GTBExchanger
Line:        238
Source: 
>     function getDAIAmount(uint256 weiAmount) public view returns(uint256){
>         return _daiEx.getEthToTokenInputPrice(weiAmount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GTBExchanger
Line:        246
Source: 
>         require(status,'DAI purchase failed');
>         uint256 tokAmount = IERC20(dai_adr).balanceOf(address(this));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IERC20(dai_adr).transfer(msg.sender,tokAmount),'transfer failed');

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    GTBExchanger
Line:        253
Source: 
>         require(IERC20(dai_adr).transferFrom(msg.sender,address(this),amount),'transfer failed');
>         uint ethValue = _daiEx.tokenToEthSwapInput(amount,1,now+1);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         beneficiary.transfer(ethValue);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    GTBExchanger
Line:        214
Source: 
>            } 
>            dai_adr = address(local_dai);
>                              ^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    GTBExchanger
Line:        201
Source: 
> 
>     UniswapExchangeApi public _daiEx;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     constructor (address _uniswap) public {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    GTBExchanger
Line:        244
Source: 
>         bool status ;
>         (status,)=daiExAddr.call.gas(75000).value(msg.value)("");
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status,'DAI purchase failed');

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    GTBExchanger
Line:        254
Source: 
>         uint ethValue = _daiEx.tokenToEthSwapInput(amount,1,now+1);
>         beneficiary.transfer(ethValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GTBExchanger
Line:        226
Source: 
> 		if(uniswap==address(0xf5D915570BC477f9B8D6C0E980aA81757A3AaC36)){
> 			dai_adr = rinkeby_dai_adr;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    GTBExchanger
Line:        228
Source: 
> 		}
> 		_daiEx = UniswapExchangeApi(UniswapFactoryApi(uniswap).getExchange(dai_adr));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	} 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    GTBExchanger
Line:        232
Source: 
> 	function initb() public{
> 		IERC20(dai_adr).approve(address(_daiEx),uint(2**255));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	} 

[0m
