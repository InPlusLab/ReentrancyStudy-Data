Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LazarusCreators
Line:        96
Source: 
> 
>   function setFee (uint256 _fee) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LazarusCreators
Line:        101
Source: 
> 
>   function getUserCredits (address _user) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return credits[_user];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LazarusCreators
Line:        105
Source: 
> 
>   function useCredit () public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(credits[msg.sender] >= 1);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LazarusCreators
Line:        110
Source: 
> 
>   function withdrawETH () public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LazarusCreators
Line:        116
Source: 
> 
>   function transferOwnership (address payable _newOwner) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LazarusCreators
Line:        96
Source: 
> 
>   function setFee (uint256 _fee) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LazarusCreators
Line:        116
Source: 
> 
>   function transferOwnership (address payable _newOwner) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LazarusCreators
Line:        101
Source: 
> 
>   function getUserCredits (address _user) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return credits[_user];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    LazarusCreators
Line:        112
Source: 
>     require(msg.sender == owner);
>     owner.transfer(ethBalance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ethBalance = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LazarusCreators
Line:        76
Source: 
>   // mapping that stores credits for users.
>   mapping(address => uint256) credits;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    LazarusCreators
Line:        112
Source: 
>     require(msg.sender == owner);
>     owner.transfer(ethBalance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ethBalance = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    LazarusCreators
Line:        112
Source: 
>     require(msg.sender == owner);
>     owner.transfer(ethBalance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ethBalance = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    LazarusCreators
Line:        112
Source: 
>     require(msg.sender == owner);
>     owner.transfer(ethBalance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ethBalance = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LazarusCreators
Line:        72
Source: 
>   address payable public owner;
>   uint256 public ethBalance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public fee = 1;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LazarusCreators
Line:        92
Source: 
>     }
>     ethBalance = ethBalance.add(msg.value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     credits[msg.sender] = credits[msg.sender].add(1);

[0m
