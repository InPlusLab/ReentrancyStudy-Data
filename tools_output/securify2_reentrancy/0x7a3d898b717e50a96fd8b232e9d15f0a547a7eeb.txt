Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    ReadProxy
Line:        390
Source: 
>         // Note that msg.sender in the underlying will always be the address of this contract.
>         assembly {
>         ^^^^^^^^^^
>             calldatacopy(0, 0, calldatasize)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MixinResolver
Line:        447
Source: 
> 
>     function rebuildCache() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32[] memory requiredAddresses = resolverAddressesRequired();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NativeEtherWrapper
Line:        508
Source: 
>     /* ========== VIEWS ========== */
>     function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32[] memory addresses = new bytes32[](2);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NativeEtherWrapper
Line:        529
Source: 
> 
>     function mint() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint amount = msg.value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NativeEtherWrapper
Line:        548
Source: 
> 
>     function burn(uint amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "amount must be greater than 0");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AddressResolver
Line:        365
Source: 
>         require(address(issuer) != address(0), "Cannot find Issuer address");
>         return address(issuer.synths(key));
>                        ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        520
Source: 
>     function weth() internal view returns (IWETH) {
>         return etherWrapper().weth();
>                ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        534
Source: 
>         // Convert sent ETH into WETH.
>         weth().deposit.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        537
Source: 
>         // Approve for the EtherWrapper.
>         weth().approve(address(etherWrapper()), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        540
Source: 
>         // Now call mint.
>         etherWrapper().mint(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        543
Source: 
>         // Transfer the sETH to msg.sender.
>         synthsETH().transfer(msg.sender, synthsETH().balanceOf(address(this)));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        543
Source: 
>         // Transfer the sETH to msg.sender.
>         synthsETH().transfer(msg.sender, synthsETH().balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        553
Source: 
>         // Transfer sETH from the msg.sender.
>         synthsETH().transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        556
Source: 
>         // Approve for the EtherWrapper.
>         synthsETH().approve(address(etherWrapper()), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        559
Source: 
>         // Now call burn.
>         etherWrapper().burn(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        562
Source: 
>         // Convert WETH to ETH and send to msg.sender.
>         weth.withdraw(weth.balanceOf(address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable avoid-low-level-calls

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        562
Source: 
>         // Convert WETH to ETH and send to msg.sender.
>         weth.withdraw(weth.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable avoid-low-level-calls

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        564
Source: 
>         // solhint-disable avoid-low-level-calls
>         msg.sender.call.value(address(this).balance)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    AddressResolver
Line:        337
Source: 
>         for (uint i = 0; i < destinations.length; i++) {
>             destinations[i].rebuildCache();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        454
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        467
Source: 
>             // false if our cache is invalid or if the resolver doesn't have the required address
>             if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return false;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        454
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    MixinResolver
Line:        467
Source: 
>             // false if our cache is invalid or if the resolver doesn't have the required address
>             if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return false;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    NativeEtherWrapper
Line:        564
Source: 
>         // solhint-disable avoid-low-level-calls
>         msg.sender.call.value(address(this).balance)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        61
Source: 
> 
>     function nominateNewOwner(address _owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nominatedOwner = _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressResolver
Line:        362
Source: 
> 
>     function getSynth(bytes32 key) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IIssuer issuer = IIssuer(repository["Issuer"]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        61
Source: 
> 
>     function nominateNewOwner(address _owner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nominatedOwner = _owner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        548
Source: 
> 
>     function burn(uint amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "amount must be greater than 0");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        343
Source: 
> 
>     function areAddressesImported(bytes32[] calldata names, address[] calldata destinations) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint i = 0; i < names.length; i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        352
Source: 
> 
>     function getAddress(bytes32 name) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return repository[name];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressResolver
Line:        356
Source: 
> 
>     function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address _foundAddress = repository[name];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ReadProxy
Line:        382
Source: 
> 
>     function setTarget(address _target) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         target = _target;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MixinResolver
Line:        454
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        509
Source: 
>     function resolverAddressesRequired() public view returns (bytes32[] memory addresses) {
>         bytes32[] memory addresses = new bytes32[](2);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         addresses[0] = CONTRACT_ETHER_WRAPPER;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        550
Source: 
>         require(amount > 0, "amount must be greater than 0");
>         IWETH weth = weth();
>         ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressResolver
Line:        357
Source: 
>     function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address) {
>         address _foundAddress = repository[name];
>         ^^^^^^^^^^^^^^^^^^^^^
>         require(_foundAddress != address(0), reason);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    MixinResolver
Line:        478
Source: 
>     function requireAndGetAddress(bytes32 name) internal view returns (address) {
>         address _foundAddress = addressCache[name];
>         ^^^^^^^^^^^^^^^^^^^^^
>         require(_foundAddress != address(0), string(abi.encodePacked("Missing address: ", name)));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        48
Source: 
> 
> pragma solidity ^0.5.16;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        564
Source: 
>         // solhint-disable avoid-low-level-calls
>         msg.sender.call.value(address(this).balance)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        534
Source: 
>         // Convert sent ETH into WETH.
>         weth().deposit.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        564
Source: 
>         // solhint-disable avoid-low-level-calls
>         msg.sender.call.value(address(this).balance)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        534
Source: 
>         // Convert sent ETH into WETH.
>         weth().deposit.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        564
Source: 
>         // solhint-disable avoid-low-level-calls
>         msg.sender.call.value(address(this).balance)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    MixinResolver
Line:        467
Source: 
>             // false if our cache is invalid or if the resolver doesn't have the required address
>             if (resolver.getAddress(name) != addressCache[name] || addressCache[name] == address(0)) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 return false;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NativeEtherWrapper
Line:        562
Source: 
>         // Convert WETH to ETH and send to msg.sender.
>         weth.withdraw(weth.balanceOf(address(this)));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable avoid-low-level-calls

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressResolver
Line:        337
Source: 
>         for (uint i = 0; i < destinations.length; i++) {
>             destinations[i].rebuildCache();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AddressResolver
Line:        365
Source: 
>         require(address(issuer) != address(0), "Cannot find Issuer address");
>         return address(issuer.synths(key));
>                        ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MixinResolver
Line:        454
Source: 
>             address destination =
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             addressCache[name] = destination;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        520
Source: 
>     function weth() internal view returns (IWETH) {
>         return etherWrapper().weth();
>                ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        534
Source: 
>         // Convert sent ETH into WETH.
>         weth().deposit.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        537
Source: 
>         // Approve for the EtherWrapper.
>         weth().approve(address(etherWrapper()), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        540
Source: 
>         // Now call mint.
>         etherWrapper().mint(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        543
Source: 
>         // Transfer the sETH to msg.sender.
>         synthsETH().transfer(msg.sender, synthsETH().balanceOf(address(this)));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        543
Source: 
>         // Transfer the sETH to msg.sender.
>         synthsETH().transfer(msg.sender, synthsETH().balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        553
Source: 
>         // Transfer sETH from the msg.sender.
>         synthsETH().transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        556
Source: 
>         // Approve for the EtherWrapper.
>         synthsETH().approve(address(etherWrapper()), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        559
Source: 
>         // Now call burn.
>         etherWrapper().burn(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        562
Source: 
>         // Convert WETH to ETH and send to msg.sender.
>         weth.withdraw(weth.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // solhint-disable avoid-low-level-calls

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        53
Source: 
>     address public owner;
>     address public nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ReadProxy
Line:        378
Source: 
> contract ReadProxy is Owned {
>     address public target;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        53
Source: 
>     address public owner;
>     address public nominatedOwner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        534
Source: 
>         // Convert sent ETH into WETH.
>         weth().deposit.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    NativeEtherWrapper
Line:        564
Source: 
>         // solhint-disable avoid-low-level-calls
>         msg.sender.call.value(address(this).balance)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        62
Source: 
>     function nominateNewOwner(address _owner) external onlyOwner {
>         nominatedOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnerNominated(_owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressResolver
Line:        328
Source: 
>             address destination = destinations[i];
>             repository[name] = destination;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit AddressImported(name, destination);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        62
Source: 
>     function nominateNewOwner(address _owner) external onlyOwner {
>         nominatedOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnerNominated(_owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ReadProxy
Line:        383
Source: 
>     function setTarget(address _target) external onlyOwner {
>         target = _target;
>         ^^^^^^^^^^^^^^^^
>         emit TargetUpdated(target);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinResolver
Line:        455
Source: 
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>             addressCache[name] = destination;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CacheUpdated(name, destination);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Owned
Line:        62
Source: 
>     function nominateNewOwner(address _owner) external onlyOwner {
>         nominatedOwner = _owner;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnerNominated(_owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MixinResolver
Line:        455
Source: 
>                 resolver.requireAndGetAddress(name, string(abi.encodePacked("Resolver missing target: ", name)));
>             addressCache[name] = destination;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             emit CacheUpdated(name, destination);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NativeEtherWrapper
Line:        537
Source: 
>         // Approve for the EtherWrapper.
>         weth().approve(address(etherWrapper()), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NativeEtherWrapper
Line:        543
Source: 
>         // Transfer the sETH to msg.sender.
>         synthsETH().transfer(msg.sender, synthsETH().balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NativeEtherWrapper
Line:        553
Source: 
>         // Transfer sETH from the msg.sender.
>         synthsETH().transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NativeEtherWrapper
Line:        556
Source: 
>         // Approve for the EtherWrapper.
>         synthsETH().approve(address(etherWrapper()), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NativeEtherWrapper
Line:        564
Source: 
>         // solhint-disable avoid-low-level-calls
>         msg.sender.call.value(address(this).balance)("");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
