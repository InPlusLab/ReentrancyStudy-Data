pragma directive defines a prior version to 0.5.11. Changing pragma version to 0.5.11....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DistributionPool
Line:        113
Source: 
>     // Maximum amount of staked ETH (in wei units).
>     uint256 private _maxBalanceWei = 1000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        128
Source: 
> 
>     function bidlToken() public view returns (IERC20Token) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _bidlToken;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        132
Source: 
> 
>     function poolParticipant() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _poolParticipant;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        136
Source: 
> 
>     function blockbidAdmin() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _blockbidAdmin;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        140
Source: 
> 
>     function weiPerBidl() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _weiPerBidl;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        144
Source: 
> 
>     function maxBalanceWei() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _maxBalanceWei;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        148
Source: 
> 
>     function isActivated() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _activated;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        152
Source: 
>     
>     function setWeiPerBIDL(uint256 value) public onlyBlockbidAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _weiPerBidl = value;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        158
Source: 
>     // Used by Blockbid admin to calculate amount of BIDL to deposit in the contract.
>     function admin_getBidlAmountToDeposit() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 weiBalance = address(this).balance;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        169
Source: 
>     // Called by Blockbid admin to release the ETH and part of the BIDL tokens.
>     function admin_unlock(uint256 amountBIDL) public onlyBlockbidAdmin onlyWhenActivated {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bidlToken.transfer(_poolParticipant, amountBIDL);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        179
Source: 
>     // Prevent any further deposits and start distribution phase.
>     function admin_activate() public onlyBlockbidAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_poolParticipant != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DistributionPool
Line:        187
Source: 
>     // Can be used by Blockbid admin to destroy the contract and return all funds to investors.
>     function admin_destroy() public onlyBlockbidAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Drain all BIDL back into Blockbid's admin address.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DistributionPool
Line:        152
Source: 
>     
>     function setWeiPerBIDL(uint256 value) public onlyBlockbidAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _weiPerBidl = value;  

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DistributionPool
Line:        169
Source: 
>     // Called by Blockbid admin to release the ETH and part of the BIDL tokens.
>     function admin_unlock(uint256 amountBIDL) public onlyBlockbidAdmin onlyWhenActivated {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bidlToken.transfer(_poolParticipant, amountBIDL);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    DistributionPool
Line:        172
Source: 
>         
>         uint256 weiToUnlock = _weiPerBidl * amountBIDL;
>                               ^^^^^^^^^^^^^^^^^^^^^^^^
>         _poolParticipant.transfer(weiToUnlock);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DistributionPool
Line:        213
Source: 
> 		    uint256 excessiveWei = weiBalance.sub(_maxBalanceWei);
> 		    msg.sender.transfer(excessiveWei);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		    weiBalance = _maxBalanceWei;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DistributionPool
Line:        158
Source: 
>     // Used by Blockbid admin to calculate amount of BIDL to deposit in the contract.
>     function admin_getBidlAmountToDeposit() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 weiBalance = address(this).balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DistributionPool
Line:        169
Source: 
>     // Called by Blockbid admin to release the ETH and part of the BIDL tokens.
>     function admin_unlock(uint256 amountBIDL) public onlyBlockbidAdmin onlyWhenActivated {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bidlToken.transfer(_poolParticipant, amountBIDL);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DistributionPool
Line:        179
Source: 
>     // Prevent any further deposits and start distribution phase.
>     function admin_activate() public onlyBlockbidAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_poolParticipant != address(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DistributionPool
Line:        187
Source: 
>     // Can be used by Blockbid admin to destroy the contract and return all funds to investors.
>     function admin_destroy() public onlyBlockbidAdmin {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Drain all BIDL back into Blockbid's admin address.

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DistributionPool
Line:        110
Source: 
>     // Amount of ETH that will be unlocked per each BIDL released.
>     uint256 private _weiPerBidl = (100 * 1e18) / (1000000 * 1e2);
>                                                   ^^^^^^^
>     

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DistributionPool
Line:        173
Source: 
>         uint256 weiToUnlock = _weiPerBidl * amountBIDL;
>         _poolParticipant.transfer(weiToUnlock);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DistributionPool
Line:        213
Source: 
> 		    uint256 excessiveWei = weiBalance.sub(_maxBalanceWei);
> 		    msg.sender.transfer(excessiveWei);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		    weiBalance = _maxBalanceWei;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DistributionPool
Line:        173
Source: 
>         uint256 weiToUnlock = _weiPerBidl * amountBIDL;
>         _poolParticipant.transfer(weiToUnlock);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DistributionPool
Line:        173
Source: 
>         uint256 weiToUnlock = _weiPerBidl * amountBIDL;
>         _poolParticipant.transfer(weiToUnlock);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DistributionPool
Line:        213
Source: 
> 		    uint256 excessiveWei = weiBalance.sub(_maxBalanceWei);
> 		    msg.sender.transfer(excessiveWei);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		    weiBalance = _maxBalanceWei;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DistributionPool
Line:        161
Source: 
>         uint256 bidlAmountSupposedToLock = weiBalance / _weiPerBidl;
>         uint256 bidlBalance = _bidlToken.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (bidlAmountSupposedToLock < bidlBalance) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DistributionPool
Line:        170
Source: 
>     function admin_unlock(uint256 amountBIDL) public onlyBlockbidAdmin onlyWhenActivated {
>         _bidlToken.transfer(_poolParticipant, amountBIDL);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DistributionPool
Line:        189
Source: 
>         // Drain all BIDL back into Blockbid's admin address.
>         uint256 bidlBalance = _bidlToken.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _bidlToken.transfer(_blockbidAdmin, bidlBalance);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DistributionPool
Line:        190
Source: 
>         uint256 bidlBalance = _bidlToken.balanceOf(address(this));
>         _bidlToken.transfer(_blockbidAdmin, bidlBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    DistributionPool
Line:        104
Source: 
>     // Pool participant address.
>     address payable private _poolParticipant;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DistributionPool
Line:        170
Source: 
>     function admin_unlock(uint256 amountBIDL) public onlyBlockbidAdmin onlyWhenActivated {
>         _bidlToken.transfer(_poolParticipant, amountBIDL);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DistributionPool
Line:        190
Source: 
>         uint256 bidlBalance = _bidlToken.balanceOf(address(this));
>         _bidlToken.transfer(_blockbidAdmin, bidlBalance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
