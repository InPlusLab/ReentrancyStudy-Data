[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    LibNote
Line:        31
Source: 
>         _;
>         assembly {
>         ^^^^^^^^^^
>             // log an 'anonymous' event with a constant 6 words of calldata

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Cat
Line:        135
Source: 
>     // --- Administration ---
>     function file(bytes32 what, address data) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "vow") vow = VowLike(data);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Cat
Line:        139
Source: 
>     }
>     function file(bytes32 what, uint256 data) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "box") box = data;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Cat
Line:        148
Source: 
>     }
>     function file(bytes32 ilk, bytes32 what, address flip) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "flip") {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Cat
Line:        158
Source: 
>     // --- CDP Liquidation ---
>     function bite(bytes32 ilk, address urn) external returns (uint256 id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cat
Line:        78
Source: 
>     mapping (address => uint256) public wards;
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function deny(address usr) external note auth { wards[usr] = 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cat
Line:        79
Source: 
>     function rely(address usr) external note auth { wards[usr] = 1; }
>     function deny(address usr) external note auth { wards[usr] = 0; }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier auth {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cat
Line:        143
Source: 
>     }
>     function file(bytes32 ilk, bytes32 what, uint256 data) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (what == "chop") ilks[ilk].chop = data;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Cat
Line:        205
Source: 
> 
>     function claw(uint256 rad) external note auth {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         litter = sub(litter, rad);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    Cat
Line:        131
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                                ^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Cat
Line:        159
Source: 
>     function bite(bytes32 ilk, address urn) external returns (uint256 id) {
>         (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);
>                                                      ^^^^^^^^^^^^^
>         (uint256 ink, uint256 art) = vat.urns(ilk, urn);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Cat
Line:        160
Source: 
>         (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);
>         (uint256 ink, uint256 art) = vat.urns(ilk, urn);
>                                      ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Cat
Line:        182
Source: 
>         // This may leave the CDP in a dusty state
>         vat.grab(
>         ^^^^^^^^^
>             ilk, urn, address(this), address(vow), -int256(dink), -int256(dart)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Cat
Line:        185
Source: 
>         );
>         vow.fess(mul(dart, rate));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Cat
Line:        193
Source: 
> 
>             id = Kicker(milk.flip).kick({
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
>                 urn: urn,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Cat
Line:        159
Source: 
>     function bite(bytes32 ilk, address urn) external returns (uint256 id) {
>         (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);
>           ^^^^^^^^^^^^
>         (uint256 ink, uint256 art) = vat.urns(ilk, urn);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Cat
Line:        159
Source: 
>     function bite(bytes32 ilk, address urn) external returns (uint256 id) {
>         (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);
>           ^^^^^^^^^^^^
>         (uint256 ink, uint256 art) = vat.urns(ilk, urn);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        18
Source: 
> 
> pragma solidity >=0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Cat
Line:        119
Source: 
>     // --- Math ---
>     uint256 constant WAD = 10 ** 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Cat
Line:        159
Source: 
>     function bite(bytes32 ilk, address urn) external returns (uint256 id) {
>         (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);
>                                                      ^^^^^^^^^^^^^
>         (uint256 ink, uint256 art) = vat.urns(ilk, urn);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Cat
Line:        160
Source: 
>         (,uint256 rate,uint256 spot,,uint256 dust) = vat.ilks(ilk);
>         (uint256 ink, uint256 art) = vat.urns(ilk, urn);
>                                      ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Cat
Line:        150
Source: 
>         if (what == "flip") {
>             vat.nope(ilks[ilk].flip);
>             ^^^^^^^^^^^^^^^^^^^^^^^^
>             ilks[ilk].flip = flip;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Cat
Line:        152
Source: 
>             ilks[ilk].flip = flip;
>             vat.hope(flip);
>             ^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Cat
Line:        182
Source: 
>         // This may leave the CDP in a dusty state
>         vat.grab(
>         ^^^^^^^^^
>             ilk, urn, address(this), address(vow), -int256(dink), -int256(dart)

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Cat
Line:        185
Source: 
>         );
>         vow.fess(mul(dart, rate));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Cat
Line:        193
Source: 
> 
>             id = Kicker(milk.flip).kick({
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
>                 urn: urn,

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Cat
Line:        125
Source: 
>     function add(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x + y) >= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Cat
Line:        128
Source: 
>     function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require((z = x - y) <= x);
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Cat
Line:        131
Source: 
>     function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {
>         require(y == 0 || (z = x * y) / y == x);
>                            ^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Cat
Line:        96
Source: 
>     VatLike public vat;    // CDP Engine
>     VowLike public vow;    // Debt Engine
>     ^^^^^^^^^^^^^^^^^^
>     uint256 public box;    // Max Dai out for liquidation        [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Cat
Line:        97
Source: 
>     VowLike public vow;    // Debt Engine
>     uint256 public box;    // Max Dai out for liquidation        [rad]
>     ^^^^^^^^^^^^^^^^^^
>     uint256 public litter; // Balance of Dai out for liquidation [rad]

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Cat
Line:        98
Source: 
>     uint256 public box;    // Max Dai out for liquidation        [rad]
>     uint256 public litter; // Balance of Dai out for liquidation [rad]
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Cat
Line:        191
Source: 
>             uint256 tab = mul(mul(dart, rate), milk.chop) / WAD;
>             litter = add(litter, tab);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
