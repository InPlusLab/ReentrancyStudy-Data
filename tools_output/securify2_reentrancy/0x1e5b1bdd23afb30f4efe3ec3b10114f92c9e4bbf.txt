Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Initializable
Line:        62
Source: 
>     uint256 cs;
>     assembly { cs := extcodesize(self) }
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return cs == 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Ownable
Line:        180
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        124
Source: 
>      */
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = sender;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        132
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        158
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        167
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        132
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        158
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        167
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenDistribution
Line:        464
Source: 
>      */
>     function setStandardRate(uint256 _standardRate) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         standardRate = _standardRate; 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenDistribution
Line:        472
Source: 
>      */
>     function setPercentBonus(uint256 _percentBonus) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         percentBonus = _percentBonus; 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenDistribution
Line:        494
Source: 
>      */
>     function setWithdrawDate(uint256 _withdrawDate) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawDate = _withdrawDate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    TokenDistribution
Line:        504
Source: 
>      */
>     function canWithdraw() public view returns (bool, uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (block.timestamp >= withdrawDate) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenDistribution
Line:        433
Source: 
>         // transfer tokens to this investor
>         require(token.transfer(msg.sender, _principalAndBonus), "Fail to transfer tokens");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenDistribution
Line:        484
Source: 
>         require(block.timestamp >= withdrawDate.add(7 * 24 * 60 * 60), "Cannot return any token within 7 days of withdraw date");
>         uint256 balance = ERC20Standard(_token).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= balance, "Exceeds balance");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    TokenDistribution
Line:        486
Source: 
>         require(_amount <= balance, "Exceeds balance");
>         require(ERC20Standard(_token).transfer(_newAddress, _amount), "Fail to transfer tokens");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        124
Source: 
>      */
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        167
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        124
Source: 
>      */
>     function initialize(address sender) public initializer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _owner = sender;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        167
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenDistribution
Line:        464
Source: 
>      */
>     function setStandardRate(uint256 _standardRate) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         standardRate = _standardRate; 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenDistribution
Line:        472
Source: 
>      */
>     function setPercentBonus(uint256 _percentBonus) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         percentBonus = _percentBonus; 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenDistribution
Line:        494
Source: 
>      */
>     function setWithdrawDate(uint256 _withdrawDate) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         withdrawDate = _withdrawDate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    TokenDistribution
Line:        515
Source: 
>      */
>     function calculatePrincipalAndBonus(uint256 _ether)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public view returns (uint256, uint256, uint256)

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenDistribution
Line:        371
Source: 
>     /* ============================================================================================================== */
>     function initialize
>     ^^^^^^^^^^^^^^^^^^^
>     (

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenDistribution
Line:        456
Source: 
>      */
>     function setERC20Token(ERC20Standard _erc20Token) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token = _erc20Token; 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenDistribution
Line:        482
Source: 
>      */
>     function returnTokens(address _token, uint256 _amount, address _newAddress) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(block.timestamp >= withdrawDate.add(7 * 24 * 60 * 60), "Cannot return any token within 7 days of withdraw date");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenDistribution
Line:        527
Source: 
>      */
>     function getInvestmentIDs(address _investAddr) external view returns (uint256[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return investmentIDs[_investAddr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    TokenDistribution
Line:        538
Source: 
>      */
>     function getInvestment(uint256 _investmentID) external view
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         returns(address _investAddr, uint256 _ethAmount, bool _hasClaimed,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        201
Source: 
>     }
>     uint256 c = a * b;
>                 ^^^^^
>     assert(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    TokenDistribution
Line:        433
Source: 
>         // transfer tokens to this investor
>         require(token.transfer(msg.sender, _principalAndBonus), "Fail to transfer tokens");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        180
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenDistribution
Line:        333
Source: 
> 
>     uint256 constant internal base18 = 1000000000000000000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenDistribution
Line:        426
Source: 
>         // get the ether amount of this investment
>         uint256 _ethAmount = investments[investmentID].ethAmount;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenDistribution
Line:        428
Source: 
> 
>         (uint256 _principal, uint256 _bonus, uint256 _principalAndBonus) = calculatePrincipalAndBonus(_ethAmount);
>          ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenDistribution
Line:        428
Source: 
> 
>         (uint256 _principal, uint256 _bonus, uint256 _principalAndBonus) = calculatePrincipalAndBonus(_ethAmount);
>                              ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenDistribution
Line:        428
Source: 
> 
>         (uint256 _principal, uint256 _bonus, uint256 _principalAndBonus) = calculatePrincipalAndBonus(_ethAmount);
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        7
Source: 
> 
> pragma solidity >=0.4.24 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    Ownable
Line:        180
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Initializable
Line:        40
Source: 
> 
>     bool isTopLevelCall = !initializing;
>     ^^^^^^^^^^^^^^^^^^^
>     if (isTopLevelCall) {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    TokenDistribution
Line:        333
Source: 
> 
>     uint256 constant internal base18 = 1000000000000000000;
>                                        ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenDistribution
Line:        433
Source: 
>         // transfer tokens to this investor
>         require(token.transfer(msg.sender, _principalAndBonus), "Fail to transfer tokens");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenDistribution
Line:        484
Source: 
>         require(block.timestamp >= withdrawDate.add(7 * 24 * 60 * 60), "Cannot return any token within 7 days of withdraw date");
>         uint256 balance = ERC20Standard(_token).balanceOf(address(this));
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_amount <= balance, "Exceeds balance");

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenDistribution
Line:        486
Source: 
>         require(_amount <= balance, "Exceeds balance");
>         require(ERC20Standard(_token).transfer(_newAddress, _amount), "Fail to transfer tokens");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Initializable
Line:        63
Source: 
>     assembly { cs := extcodesize(self) }
>     return cs == 0;
>            ^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        27
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        32
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        117
Source: 
> contract Ownable is Initializable, Context {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        27
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Initializable
Line:        32
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Ownable
Line:        117
Source: 
> contract Ownable is Initializable, Context {
>     address private _owner;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenDistribution
Line:        331
Source: 
> 
>     ERC20Standard public token;                         // ERC20Token contract variable
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenDistribution
Line:        335
Source: 
> 
>     uint256 public standardRate;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenDistribution
Line:        337
Source: 
> 
>     uint256 public percentBonus;                        // Percentage Bonus
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public withdrawDate;                        // Withdraw Date

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenDistribution
Line:        338
Source: 
>     uint256 public percentBonus;                        // Percentage Bonus
>     uint256 public withdrawDate;                        // Withdraw Date
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalNumberOfInvestments;            // total number of investments

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenDistribution
Line:        339
Source: 
>     uint256 public withdrawDate;                        // Withdraw Date
>     uint256 public totalNumberOfInvestments;            // total number of investments
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public totalEtherInvested;                  // total amount of ethers invested from all investments

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenDistribution
Line:        340
Source: 
>     uint256 public totalNumberOfInvestments;            // total number of investments
>     uint256 public totalEtherInvested;                  // total amount of ethers invested from all investments
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    TokenDistribution
Line:        358
Source: 
> 
>     uint256 private unlocked;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        27
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        32
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        27
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        32
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ownable
Line:        180
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Ownable
Line:        180
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    TokenDistribution
Line:        364
Source: 
>         require(unlocked == 1, 'Locked');
>         unlocked = 0;
>         ^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        42
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        43
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        125
Source: 
>     function initialize(address sender) public initializer {
>         _owner = sender;
>         ^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), _owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        49
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        42
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        43
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Ownable
Line:        125
Source: 
>     function initialize(address sender) public initializer {
>         _owner = sender;
>         ^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(address(0), _owner);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        49
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        42
Source: 
>     if (isTopLevelCall) {
>       initializing = true;
>       ^^^^^^^^^^^^^^^^^^^
>       initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        43
Source: 
>       initializing = true;
>       initialized = true;
>       ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenDistribution
Line:        390
Source: 
>         // Set withdraw date
>         withdrawDate = _withdrawDate;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenDistribution
Line:        392
Source: 
> 
>         standardRate = _standardRate;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenDistribution
Line:        395
Source: 
>         // Set percentage bonus
>         percentBonus = _percentBonus;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    TokenDistribution
Line:        398
Source: 
>         //Reentrancy lock
>         unlocked = 1;
>         ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Initializable
Line:        49
Source: 
>     if (isTopLevelCall) {
>       initializing = false;
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        27
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        32
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        27
Source: 
>    */
>   bool private initialized;
>   ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        32
Source: 
>    */
>   bool private initializing;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        180
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Initializable
Line:        67
Source: 
>   // Reserved storage space to allow for layout changes in the future.
>   uint256[50] private ______gap;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Ownable
Line:        180
Source: 
> 
>     uint256[50] private ______gap;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenDistribution
Line:        505
Source: 
>     function canWithdraw() public view returns (bool, uint256) {
>         if (block.timestamp >= withdrawDate) {
>             ^^^^^^^^^^^^^^^
>             return (true, 0);

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    TokenDistribution
Line:        508
Source: 
>         } else {
>             return (false, withdrawDate.sub(block.timestamp));
>                                             ^^^^^^^^^^^^^^^
>         }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    TokenDistribution
Line:        421
Source: 
>         require(investments[investmentID].investAddr == msg.sender, "You are not the investor of this investment");
>         require(block.timestamp >= withdrawDate, "Can only withdraw after withdraw date");
>                 ^^^^^^^^^^^^^^^
>         require(!investments[investmentID].hasClaimed, "Tokens already withdrawn for this investment");

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    TokenDistribution
Line:        483
Source: 
>     function returnTokens(address _token, uint256 _amount, address _newAddress) external onlyOwner {
>         require(block.timestamp >= withdrawDate.add(7 * 24 * 60 * 60), "Cannot return any token within 7 days of withdraw date");
>                 ^^^^^^^^^^^^^^^
>         uint256 balance = ERC20Standard(_token).balanceOf(address(this));

[0m
