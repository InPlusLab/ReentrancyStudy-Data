Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        58
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        77
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        86
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        77
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        86
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        358
Source: 
> 
>   function passTokenAddress(address tokenAddress) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Token = IERC20(tokenAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        362
Source: 
> 
>   function startPresale() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     isPresaleActive = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        366
Source: 
> 
>   function startPublicPresale() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowPublicInvestment = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        370
Source: 
> 
>   function endPresale() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     isPresaleActive = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        376
Source: 
> 
> function returnExtraTokens() public onlyOwner {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     isPresaleActive = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        449
Source: 
> 
>   function isWhitelisted(address adr) public view returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return whitelistAddresses[adr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        453
Source: 
> 
>   function isDevAddress(address adr) public view returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return devAddresses[adr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        457
Source: 
> 
>   function getInvestedAmount(address adr) public view returns (uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return investments[adr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        461
Source: 
> 
>   function getInvestorCount() public view returns (uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return _investorCount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        465
Source: 
> 
>   function getPresaleInvestmentLimit() view public returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return INVESTMENT_LIMIT_PRESALE;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FatPresale
Line:        469
Source: 
> 
>   function getDeveloperPresaleInvestmentLimit() view public returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return INVESTMENT_LIMIT_DEVELOPER;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FatPresale
Line:        372
Source: 
>     isPresaleActive = false;
>     payable(owner()).transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FatPresale
Line:        378
Source: 
>     isPresaleActive = false;
>     Token.transfer(_msgSender(), Token.balanceOf(address(this)));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FatPresale
Line:        378
Source: 
>     isPresaleActive = false;
>     Token.transfer(_msgSender(), Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    FatPresale
Line:        446
Source: 
>       amountOfTokens[_msgSender()] = 0;
>       Token.transfer(_msgSender(), tokensToClaim);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   } 

[0m
[0;35mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Conflict
Contract:    FatPresale
Line:        399
Source: 
> 
>       payable(addressToRefund).transfer(refundAmount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       investments[investors[i]].sub(refundAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FatPresale
Line:        358
Source: 
> 
>   function passTokenAddress(address tokenAddress) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Token = IERC20(tokenAddress);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FatPresale
Line:        449
Source: 
> 
>   function isWhitelisted(address adr) public view returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return whitelistAddresses[adr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FatPresale
Line:        453
Source: 
> 
>   function isDevAddress(address adr) public view returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return devAddresses[adr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FatPresale
Line:        457
Source: 
> 
>   function getInvestedAmount(address adr) public view returns (uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return investments[adr];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FatPresale
Line:        378
Source: 
>     isPresaleActive = false;
>     Token.transfer(_msgSender(), Token.balanceOf(address(this)));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FatPresale
Line:        378
Source: 
>     isPresaleActive = false;
>     Token.transfer(_msgSender(), Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FatPresale
Line:        446
Source: 
>       amountOfTokens[_msgSender()] = 0;
>       Token.transfer(_msgSender(), tokensToClaim);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   } 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    FatPresale
Line:        372
Source: 
>     isPresaleActive = false;
>     payable(owner()).transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FatPresale
Line:        327
Source: 
> 
>   IERC20 public Token;
>   ^^^^^^^^^^^^^^^^^^^
>   uint256 public TokenDecimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FatPresale
Line:        328
Source: 
>   IERC20 public Token;
>   uint256 public TokenDecimals;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FatPresale
Line:        336
Source: 
>   uint256 private _investorCount = 0;             // number of unique addresses that have invested
>   uint256 public _totalEthInvestedLevelOne;             // total ethereum invested
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public _totalEthInvestedLevelTwo;             // total ethereum invested

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FatPresale
Line:        337
Source: 
>   uint256 public _totalEthInvestedLevelOne;             // total ethereum invested
>   uint256 public _totalEthInvestedLevelTwo;             // total ethereum invested
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FatPresale
Line:        372
Source: 
>     isPresaleActive = false;
>     payable(owner()).transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    FatPresale
Line:        399
Source: 
> 
>       payable(addressToRefund).transfer(refundAmount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       investments[investors[i]].sub(refundAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FatPresale
Line:        372
Source: 
>     isPresaleActive = false;
>     payable(owner()).transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FatPresale
Line:        399
Source: 
> 
>       payable(addressToRefund).transfer(refundAmount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       investments[investors[i]].sub(refundAmount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FatPresale
Line:        372
Source: 
>     isPresaleActive = false;
>     payable(owner()).transfer(address(this).balance);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FatPresale
Line:        399
Source: 
> 
>       payable(addressToRefund).transfer(refundAmount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       investments[investors[i]].sub(refundAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FatPresale
Line:        378
Source: 
>     isPresaleActive = false;
>     Token.transfer(_msgSender(), Token.balanceOf(address(this)));
>                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FatPresale
Line:        378
Source: 
>     isPresaleActive = false;
>     Token.transfer(_msgSender(), Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FatPresale
Line:        446
Source: 
>       amountOfTokens[_msgSender()] = 0;
>       Token.transfer(_msgSender(), tokensToClaim);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   } 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FatPresale
Line:        327
Source: 
> 
>   IERC20 public Token;
>   ^^^^^^^^^^^^^^^^^^^
>   uint256 public TokenDecimals;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FatPresale
Line:        336
Source: 
>   uint256 private _investorCount = 0;             // number of unique addresses that have invested
>   uint256 public _totalEthInvestedLevelOne;             // total ethereum invested
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public _totalEthInvestedLevelTwo;             // total ethereum invested

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FatPresale
Line:        337
Source: 
>   uint256 public _totalEthInvestedLevelOne;             // total ethereum invested
>   uint256 public _totalEthInvestedLevelTwo;             // total ethereum invested
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FatPresale
Line:        424
Source: 
>       investmentsLevelOne[_msgSender()] = investmentsLevelOne[_msgSender()].add(msg.value);
>       _totalEthInvestedLevelOne = _totalEthInvestedLevelOne.add(msg.value);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FatPresale
Line:        434
Source: 
> 
>     investors[_investorCount] = msg.sender;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _investorCount++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FatPresale
Line:        435
Source: 
>     investors[_investorCount] = msg.sender;
>     _investorCount++;
>     ^^^^^^^^^^^^^^^^
>     amountOfTokens[_msgSender()] = (investmentsLevelOne[_msgSender()].mul(5000)).add(investmentsLevelTwo[_msgSender()].mul(4000));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FatPresale
Line:        430
Source: 
>         investmentsLevelTwo[_msgSender()] = investmentsLevelTwo[_msgSender()].add(msg.value);
>         _totalEthInvestedLevelTwo = _totalEthInvestedLevelTwo.add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FatPresale
Line:        372
Source: 
>     isPresaleActive = false;
>     payable(owner()).transfer(address(this).balance);
>             ^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FatPresale
Line:        378
Source: 
>     isPresaleActive = false;
>     Token.transfer(_msgSender(), Token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FatPresale
Line:        423
Source: 
>       require(addressTotalInvestment >= INVESTMENT_LIMIT_MIN && addressTotalInvestment <= INVESTMENT_LIMIT_PRESALE);
>       investmentsLevelOne[_msgSender()] = investmentsLevelOne[_msgSender()].add(msg.value);
>                           ^^^^^^^^^^^^
>       _totalEthInvestedLevelOne = _totalEthInvestedLevelOne.add(msg.value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FatPresale
Line:        436
Source: 
>     _investorCount++;
>     amountOfTokens[_msgSender()] = (investmentsLevelOne[_msgSender()].mul(5000)).add(investmentsLevelTwo[_msgSender()].mul(4000));
>                    ^^^^^^^^^^^^
>     investments[_msgSender()] = addressTotalInvestment;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FatPresale
Line:        437
Source: 
>     amountOfTokens[_msgSender()] = (investmentsLevelOne[_msgSender()].mul(5000)).add(investmentsLevelTwo[_msgSender()].mul(4000));
>     investments[_msgSender()] = addressTotalInvestment;
>                 ^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FatPresale
Line:        429
Source: 
>       require(addressTotalInvestment >= INVESTMENT_LIMIT_MIN && addressTotalInvestment <= INVESTMENT_LIMIT_PUBLIC);
>         investmentsLevelTwo[_msgSender()] = investmentsLevelTwo[_msgSender()].add(msg.value);
>                             ^^^^^^^^^^^^
>         _totalEthInvestedLevelTwo = _totalEthInvestedLevelTwo.add(msg.value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FatPresale
Line:        445
Source: 
>       require(tokensToClaim > 0);
>       amountOfTokens[_msgSender()] = 0;
>                      ^^^^^^^^^^^^
>       Token.transfer(_msgSender(), tokensToClaim);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FatPresale
Line:        446
Source: 
>       amountOfTokens[_msgSender()] = 0;
>       Token.transfer(_msgSender(), tokensToClaim);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   } 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FatPresale
Line:        328
Source: 
>   IERC20 public Token;
>   uint256 public TokenDecimals;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
