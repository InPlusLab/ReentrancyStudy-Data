Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        102
Source: 
>     bool thirdWith =  false;
>     uint256 relaseTime = 30 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 relaseTime2 = 120 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        103
Source: 
>     uint256 relaseTime = 30 days;
>     uint256 relaseTime2 = 120 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 relaseTime3 = 180 days;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        104
Source: 
>     uint256 relaseTime2 = 120 days;
>     uint256 relaseTime3 = 180 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 timing ;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        113
Source: 
>     function deposit(uint amountToStake) public onlyOwner{
>         require( tokens == 0, "Cannot deposit more Tokens");
>                  ^^^^^^^^^^^
>         require( amountToStake > 0, "Cannot deposit  Tokens");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        78
Source: 
>    */
>   function transferOwnership(address newOwner) onlyOwner public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        108
Source: 
> 
>     function getTiming()  public view returns (uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return now.sub(timing);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        112
Source: 
>     
>     function deposit(uint amountToStake) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( tokens == 0, "Cannot deposit more Tokens");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        121
Source: 
>     
>     function withdraw1() public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( firstWith, "Deposit first");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        133
Source: 
>     
>     function withdraw2() public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( secondWith, "With1 first");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        144
Source: 
>         
>     function withdraw3() public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require( thirdWith, "With2 first");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        115
Source: 
>         require( amountToStake > 0, "Cannot deposit  Tokens");
>         require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), "Insufficient Token Allowance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens = amountToStake;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        125
Source: 
>         uint256 amount = tokens.div(3);   //33% available after 30 days
>         require(Token(tokenAddress).transfer(owner, amount), "Could not transfer tokens.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens = tokens.sub(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        137
Source: 
>         uint256 amount = tokens.div(2); //33% available after 
>         require(Token(tokenAddress).transfer(owner, amount), "Could not transfer tokens.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens = tokens.sub(amount);  //80%available after 120 days

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        147
Source: 
>         require(now.sub(timing)>relaseTime3, "Not yet");
>         require(Token(tokenAddress).transfer(owner, tokens), "Could not transfer tokens.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens = tokens.sub(tokens);  //33% available after 180 days

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        96
Source: 
>     // DEFISocial token contract address
>     address public constant tokenAddress = 0x731A30897bF16597c0D5601205019C947BF15c6E;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        98
Source: 
>     
>     uint256 tokens = 0;
>     ^^^^^^^^^^^^^^^^^^
>     bool firstWith =  false;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        99
Source: 
>     uint256 tokens = 0;
>     bool firstWith =  false;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     bool secondWith = false;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        100
Source: 
>     bool firstWith =  false;
>     bool secondWith = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     bool thirdWith =  false;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        101
Source: 
>     bool secondWith = false;
>     bool thirdWith =  false;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 relaseTime = 30 days;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        102
Source: 
>     bool thirdWith =  false;
>     uint256 relaseTime = 30 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 relaseTime2 = 120 days;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        103
Source: 
>     uint256 relaseTime = 30 days;
>     uint256 relaseTime2 = 120 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 relaseTime3 = 180 days;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        104
Source: 
>     uint256 relaseTime2 = 120 days;
>     uint256 relaseTime3 = 180 days;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 timing ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DEFISocialLockReserves
Line:        105
Source: 
>     uint256 relaseTime3 = 180 days;
>     uint256 timing ;
>     ^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        115
Source: 
>         require( amountToStake > 0, "Cannot deposit  Tokens");
>         require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), "Insufficient Token Allowance");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens = amountToStake;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        125
Source: 
>         uint256 amount = tokens.div(3);   //33% available after 30 days
>         require(Token(tokenAddress).transfer(owner, amount), "Could not transfer tokens.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens = tokens.sub(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        137
Source: 
>         uint256 amount = tokens.div(2); //33% available after 
>         require(Token(tokenAddress).transfer(owner, amount), "Could not transfer tokens.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens = tokens.sub(amount);  //80%available after 120 days

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        147
Source: 
>         require(now.sub(timing)>relaseTime3, "Not yet");
>         require(Token(tokenAddress).transfer(owner, tokens), "Could not transfer tokens.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens = tokens.sub(tokens);  //33% available after 180 days

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DEFISocialLockReserves
Line:        105
Source: 
>     uint256 relaseTime3 = 180 days;
>     uint256 timing ;
>     ^^^^^^^^^^^^^^
>     

[0m
