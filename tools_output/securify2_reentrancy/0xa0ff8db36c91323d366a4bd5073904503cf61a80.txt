pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        13
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>            ^^^^^^
>     return c;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        13
Source: 
>     uint256 c = a * b;
>     assert(a == 0 || c / a == b);
>                      ^^^^^^^^^^
>     return c;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        115
Source: 
>     
>     function Reinvest()public  payable reinvest investAmount returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(users[msg.sender].expirePeriod==true,"your session should be new");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        126
Source: 
>     //recommend function
>     function join(uint256 _refference)public payable  onlyFirst(_refference) investAmount   returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             require(users[msg.sender].visit==0,"you are already investor");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        171
Source: 
>     //withDrawl function
>     function withDraw()public payable returns(string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        232
Source: 
>     //Owner functions
>        function changeOwnership(address payable newOwner)public onlyOwner returns(bool){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner=newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        236
Source: 
>     }    
>     function owner_fund()public payable onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        240
Source: 
>     }
>     function get_Tree(address wallet)public view returns(address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user memory obj=users[wallet];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        244
Source: 
>     }
>     function change_creator(address payable _newAddress,address _oldAddress)public onlyOwner returns(string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(creator1==_oldAddress){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        259
Source: 
>     }
>     function close() public payable onlyOwner { 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   selfdestruct(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EtherStorm
Line:        262
Source: 
> }
> function owner_withdraw()public payable onlyOwner returns (bool){
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     user memory obj=users[owner];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherStorm
Line:        232
Source: 
>     //Owner functions
>        function changeOwnership(address payable newOwner)public onlyOwner returns(bool){
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner=newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EtherStorm
Line:        244
Source: 
>     }
>     function change_creator(address payable _newAddress,address _oldAddress)public onlyOwner returns(string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(creator1==_oldAddress){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    EtherStorm
Line:        240
Source: 
>     }
>     function get_Tree(address wallet)public view returns(address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user memory obj=users[wallet];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        12
Source: 
>   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>     uint256 c = a * b;
>                 ^^^^^
>     assert(a == 0 || c / a == b);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherStorm
Line:        200
Source: 
>                      uint256 x=(invested[msg.sender].mul(4)).sub(obj.total_Withdraw);
>                       r.transfer(x);
>                       ^^^^^^^^^^^^^
>                 session=session_Expire();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    EtherStorm
Line:        265
Source: 
>     require(obj.ref_Income>0,"your earnings are less than 0");
>     owner.transfer(obj.ref_Income);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     users[owner].ref_Income=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        43
Source: 
>                 string public session;
>         struct user
>         ^^^^^^^^^^^
>         {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        65
Source: 
>         mapping(address=>bool)public isRecomended;
>         mapping(uint256=>uint256)public level_price;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mapping(address=>uint256)public amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        115
Source: 
>     
>     function Reinvest()public  payable reinvest investAmount returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 require(users[msg.sender].expirePeriod==true,"your session should be new");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        149
Source: 
>     //distribute function
>     function down_Income(address  add,uint256 _depth,uint256 _f)private  returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_depth>10){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        214
Source: 
>         }
>     function session_Expire()private  returns(string memory){ //to invest again you have to expire first
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      users[msg.sender].total_Days=0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        224
Source: 
>     // forCreators function
>     function Creators(uint256 _value)private returns(bool ){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 p=_value.div(3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        236
Source: 
>     }    
>     function owner_fund()public payable onlyOwner returns (bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner.transfer(address(this).balance);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        240
Source: 
>     }
>     function get_Tree(address wallet)public view returns(address[] memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         user memory obj=users[wallet];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        244
Source: 
>     }
>     function change_creator(address payable _newAddress,address _oldAddress)public onlyOwner returns(string memory){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(creator1==_oldAddress){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EtherStorm
Line:        262
Source: 
> }
> function owner_withdraw()public payable onlyOwner returns (bool){
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     user memory obj=users[owner];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        37
Source: 
>                 address payable public owner;
>                 address payable creator1;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>                 address payable creator2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        38
Source: 
>                 address payable creator1;
>                 address payable creator2;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>                 address payable creator3;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        39
Source: 
>                 address payable creator2;
>                 address payable creator3;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^
>                 using SafeMath for uint256;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        41
Source: 
>                 using SafeMath for uint256;
>                 uint256 commission;
>                 ^^^^^^^^^^^^^^^^^^
>                 string public session;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        58
Source: 
>         }
>         user[] userList;      
>         ^^^^^^^^^^^^^^^
>         uint256 cuurUserID=0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        59
Source: 
>         user[] userList;      
>         uint256 cuurUserID=0;
>         ^^^^^^^^^^^^^^^^^^^^
>         mapping(address=>user)public users; 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        96
Source: 
>     }
>     modifier onlyFirst(uint256 _refference){
>                        ^^^^^^^^^^^^^^^^^^^
>     address a=userAddress[_refference];

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        97
Source: 
>     modifier onlyFirst(uint256 _refference){
>     address a=userAddress[_refference];
>     ^^^^^^^^^
>         require(_refference<=cuurUserID);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    EtherStorm
Line:        105
Source: 
>     modifier reinvest(){
>             user memory obj=users[msg.sender];
>             ^^^^^^^^^^^^^^^
>         require(obj.visit>0,"visit should be above 0");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherStorm
Line:        226
Source: 
>         uint256 p=_value.div(3);
>         creator1.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator2.transfer(p);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherStorm
Line:        227
Source: 
>         creator1.transfer(p);
>         creator2.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator3.transfer(p);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherStorm
Line:        228
Source: 
>         creator2.transfer(p);
>         creator3.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherStorm
Line:        200
Source: 
>                      uint256 x=(invested[msg.sender].mul(4)).sub(obj.total_Withdraw);
>                       r.transfer(x);
>                       ^^^^^^^^^^^^^
>                 session=session_Expire();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    EtherStorm
Line:        207
Source: 
>                         // users[msg.sender].earning=obj.earning.sub(_value);
>                         r.transfer(d);   
>                         ^^^^^^^^^^^^^
>                         return "you have succesfully WithDrawl your money";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherStorm
Line:        237
Source: 
>     function owner_fund()public payable onlyOwner returns (bool){
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherStorm
Line:        265
Source: 
>     require(obj.ref_Income>0,"your earnings are less than 0");
>     owner.transfer(obj.ref_Income);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     users[owner].ref_Income=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherStorm
Line:        226
Source: 
>         uint256 p=_value.div(3);
>         creator1.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator2.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherStorm
Line:        227
Source: 
>         creator1.transfer(p);
>         creator2.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator3.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherStorm
Line:        228
Source: 
>         creator2.transfer(p);
>         creator3.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherStorm
Line:        237
Source: 
>     function owner_fund()public payable onlyOwner returns (bool){
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    EtherStorm
Line:        265
Source: 
>     require(obj.ref_Income>0,"your earnings are less than 0");
>     owner.transfer(obj.ref_Income);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     users[owner].ref_Income=0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherStorm
Line:        226
Source: 
>         uint256 p=_value.div(3);
>         creator1.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator2.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherStorm
Line:        227
Source: 
>         creator1.transfer(p);
>         creator2.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         creator3.transfer(p);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherStorm
Line:        228
Source: 
>         creator2.transfer(p);
>         creator3.transfer(p);
>         ^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherStorm
Line:        200
Source: 
>                      uint256 x=(invested[msg.sender].mul(4)).sub(obj.total_Withdraw);
>                       r.transfer(x);
>                       ^^^^^^^^^^^^^
>                 session=session_Expire();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherStorm
Line:        207
Source: 
>                         // users[msg.sender].earning=obj.earning.sub(_value);
>                         r.transfer(d);   
>                         ^^^^^^^^^^^^^
>                         return "you have succesfully WithDrawl your money";

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherStorm
Line:        237
Source: 
>     function owner_fund()public payable onlyOwner returns (bool){
>         owner.transfer(address(this).balance);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    EtherStorm
Line:        265
Source: 
>     require(obj.ref_Income>0,"your earnings are less than 0");
>     owner.transfer(obj.ref_Income);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     users[owner].ref_Income=0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EtherStorm
Line:        41
Source: 
>                 using SafeMath for uint256;
>                 uint256 commission;
>                 ^^^^^^^^^^^^^^^^^^
>                 string public session;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EtherStorm
Line:        42
Source: 
>                 uint256 commission;
>                 string public session;
>                 ^^^^^^^^^^^^^^^^^^^^^
>         struct user

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherStorm
Line:        159
Source: 
>                  if(obj2.expirePeriod==false){
>                  users[add1].ref_Income+=f;
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^
>                  }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    EtherStorm
Line:        162
Source: 
>                  if(obj2.level<_depth){
>                  users[add1].level=_depth;
>                  ^^^^^^^^^^^^^^^^^^^^^^^^
>                  }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EtherStorm
Line:        121
Source: 
>      users[msg.sender].visit+=1;
>       amount[msg.sender]=(invested[msg.sender].mul(1)).div(100);
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EtherStorm
Line:        145
Source: 
>             }
>              amount[msg.sender]=(invested[msg.sender].mul(1)).div(100);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return true;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EtherStorm
Line:        42
Source: 
>                 uint256 commission;
>                 string public session;
>                 ^^^^^^^^^^^^^^^^^^^^^
>         struct user

[0m
