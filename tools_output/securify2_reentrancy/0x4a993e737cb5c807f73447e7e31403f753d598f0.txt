Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        716
Source: 
>         uint chainId;
>         assembly { chainId := chainid() }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return chainId;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        276
Source: 
>     /// @notice EIP-20 token name for this token
>     string public name = "Yearn OptionsV1Manager";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        279
Source: 
>     /// @notice EIP-20 token symbol for this token
>     string public symbol = "yOV1M";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        169
Source: 
>         // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        174
Source: 
>         uint c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        655
Source: 
>         require(signatory != address(0), "::permit: invalid signature");
>         require(signatory == owner, "::permit: unauthorized");
>                 ^^^^^^^^^^^^^^^^^^
>         require(now <= deadline, "::permit: signature expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        632
Source: 
>      */
>     function approve(address spender, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        678
Source: 
>      */
>     function transfer(address dst, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferTokens(msg.sender, dst, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        346
Source: 
>     function quote(address tokenIn, uint amountIn) public view returns (uint minOut) {
>         uint _wethOut = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minOut = ORACLE.quote(WETH, _wethOut, DAI, GRANULARITY);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        347
Source: 
>         uint _wethOut = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);
>         minOut = ORACLE.quote(WETH, _wethOut, DAI, GRANULARITY);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        494
Source: 
> 
>         IERC20(reserve).transfer(msg.sender, r);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrew(msg.sender, _shares, r);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        477
Source: 
>     function liquidityBalance() public view returns (uint) {
>         return IERC20(reserve).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        482
Source: 
>         require(msg.sender == governance, "::inCaseTokensGetStuck: only governance");
>         IERC20(token).transfer(governance, IERC20(token).balanceOf(address(this)));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        482
Source: 
>         require(msg.sender == governance, "::inCaseTokensGetStuck: only governance");
>         IERC20(token).transfer(governance, IERC20(token).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        504
Source: 
>     function depositAll() external returns (bool) {
>         return deposit(IERC20(reserve).balanceOf(msg.sender));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        513
Source: 
>     function deposit(uint amount) public returns (bool) {
>         IERC20(reserve).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _shares = 0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        588
Source: 
>         
>         IERC20(tokenIn).transferFrom(msg.sender, address(this), calculateFee(tokenIn, amountIn, amountOut));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        606
Source: 
>         require(_pos.expire < block.timestamp, "::exercise: position expired");
>         IERC20(_pos.asset).transferFrom(msg.sender, address(this), _pos.amountIn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(reserve).transfer(msg.sender, _pos.amountOut);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        607
Source: 
>         IERC20(_pos.asset).transferFrom(msg.sender, address(this), _pos.amountIn);
>         IERC20(reserve).transfer(msg.sender, _pos.amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pos.open = false;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        345
Source: 
>      */
>     function quote(address tokenIn, uint amountIn) public view returns (uint minOut) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _wethOut = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        401
Source: 
>      */
>     function fees(uint amountIn, uint amountOut, uint currentOut) public pure returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getPeriodFee(amountIn, amountOut, currentOut)

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        440
Source: 
>     
>     function setGovernance(address _governance) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::setGovernance: only governance");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        490
Source: 
>      */
>     function withdraw(uint _shares) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint r = liquidityBalance().mul(_shares).div(totalSupply);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        512
Source: 
>      */
>     function deposit(uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(reserve).transferFrom(msg.sender, address(this), amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        574
Source: 
>     
>     function calculateFee(address tokenIn, uint amountIn, uint amountOut) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return fees(amountIn, amountOut, quote(tokenIn, amountIn));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        584
Source: 
>      */
>     function createOption(address tokenIn, uint amountIn, uint amountOut) external returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         reserveInUse = reserveInUse.add(amountOut);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        678
Source: 
>      */
>     function transfer(address dst, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferTokens(msg.sender, dst, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        690
Source: 
>      */
>     function transferFrom(address src, address dst, uint amount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address spender = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        480
Source: 
>     
>     function inCaseTokensGetStuck(address token) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::inCaseTokensGetStuck: only governance");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        620
Source: 
>      */
>     function allowance(address account, address spender) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[account][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        632
Source: 
>      */
>     function approve(address spender, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        668
Source: 
>      */
>     function balanceOf(address account) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        173
Source: 
> 
>         uint c = a * b;
>                  ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        588
Source: 
>         
>         IERC20(tokenIn).transferFrom(msg.sender, address(this), calculateFee(tokenIn, amountIn, amountOut));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        282
Source: 
>     /// @notice EIP-20 token decimals for this token
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        320
Source: 
> 
>     struct position {
>     ^^^^^^^^^^^^^^^^^
>         address owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        346
Source: 
>     function quote(address tokenIn, uint amountIn) public view returns (uint minOut) {
>         uint _wethOut = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);
>         ^^^^^^^^^^^^^
>         minOut = ORACLE.quote(WETH, _wethOut, DAI, GRANULARITY);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        431
Source: 
>     
>     address public constant reserve = address(0x9cA85572E6A3EbF24dEDd195623F188735A5179f);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        514
Source: 
>         IERC20(reserve).transferFrom(msg.sender, address(this), amount);
>         uint _shares = 0;
>         ^^^^^^^^^^^^
>         if (liquidityBalance() == 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        558
Source: 
>     function close(uint id) public returns (bool) {
>         position storage _pos = positions[id];
>         ^^^^^^^^^^^^^^^^^^^^^
>         if (_pos.owner == address(0x0)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        603
Source: 
>     function exercise(uint id) external returns (bool) {
>         position storage _pos = positions[id];
>         ^^^^^^^^^^^^^^^^^^^^^
>         require(_pos.open, "::exercise: position is closed");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // SPDX-License-Identifier: MIT
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        391
Source: 
>                 .mul(5500)
>                 .div(100000000);
>                      ^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        346
Source: 
>     function quote(address tokenIn, uint amountIn) public view returns (uint minOut) {
>         uint _wethOut = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minOut = ORACLE.quote(WETH, _wethOut, DAI, GRANULARITY);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        482
Source: 
>         require(msg.sender == governance, "::inCaseTokensGetStuck: only governance");
>         IERC20(token).transfer(governance, IERC20(token).balanceOf(address(this)));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        504
Source: 
>     function depositAll() external returns (bool) {
>         return deposit(IERC20(reserve).balanceOf(msg.sender));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        347
Source: 
>         uint _wethOut = ORACLE.quote(tokenIn, amountIn, WETH, GRANULARITY);
>         minOut = ORACLE.quote(WETH, _wethOut, DAI, GRANULARITY);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        494
Source: 
> 
>         IERC20(reserve).transfer(msg.sender, r);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrew(msg.sender, _shares, r);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        477
Source: 
>     function liquidityBalance() public view returns (uint) {
>         return IERC20(reserve).balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        482
Source: 
>         require(msg.sender == governance, "::inCaseTokensGetStuck: only governance");
>         IERC20(token).transfer(governance, IERC20(token).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        513
Source: 
>     function deposit(uint amount) public returns (bool) {
>         IERC20(reserve).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _shares = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        588
Source: 
>         
>         IERC20(tokenIn).transferFrom(msg.sender, address(this), calculateFee(tokenIn, amountIn, amountOut));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        606
Source: 
>         require(_pos.expire < block.timestamp, "::exercise: position expired");
>         IERC20(_pos.asset).transferFrom(msg.sender, address(this), _pos.amountIn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(reserve).transfer(msg.sender, _pos.amountOut);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        607
Source: 
>         IERC20(_pos.asset).transferFrom(msg.sender, address(this), _pos.amountIn);
>         IERC20(reserve).transfer(msg.sender, _pos.amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pos.open = false;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        420
Source: 
>     /// @notice the tip index of the positions array
>     uint public nextIndex;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        423
Source: 
>     /// @notice the last index processed by the contract
>     uint public processedIndex;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        429
Source: 
>     address public governance;
>     address public pendingGovernance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        433
Source: 
>     
>     uint public reserveInUse;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        452
Source: 
>         // mint the amount
>         totalSupply = totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        455
Source: 
>         // transfer the amount to the recipient
>         balances[dst] = balances[dst].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), dst, amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        464
Source: 
>         // transfer the amount to the recipient
>         balances[dst] = balances[dst].sub(amount, "::_burn: underflow");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(dst, address(0), amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        535
Source: 
>         }
>         processedIndex = i;
>         ^^^^^^^^^^^^^^^^^^
>         return processedIndex;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        548
Source: 
>         }
>         processedIndex = i;
>         ^^^^^^^^^^^^^^^^^^
>         return processedIndex;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        585
Source: 
>     function createOption(address tokenIn, uint amountIn, uint amountOut) external returns (uint) {
>         reserveInUse = reserveInUse.add(amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(liquidityBalance() > reserveInUse, '::createOption: insufficient liquidity');

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        590
Source: 
> 
>         positions.push(position(msg.sender, tokenIn, amountIn, amountOut, block.timestamp, block.timestamp.add(PERIOD), true));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         options[msg.sender].push(nextIndex);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        591
Source: 
>         positions.push(position(msg.sender, tokenIn, amountIn, amountOut, block.timestamp, block.timestamp.add(PERIOD), true));
>         options[msg.sender].push(nextIndex);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    YearnOptionsV1Manager
Line:        594
Source: 
>         emit Created(nextIndex, msg.sender, tokenIn, amountIn, amountOut, block.timestamp, block.timestamp.add(PERIOD));
>         return nextIndex++;
>                ^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        461
Source: 
>         // burn the amount
>         totalSupply = totalSupply.sub(amount, "::_burn: underflow");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        568
Source: 
>         }
>         _pos.open = false;
>         ^^^^^^^^^^^^^^^^^
>         reserveInUse = reserveInUse.sub(_pos.amountOut);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        569
Source: 
>         _pos.open = false;
>         reserveInUse = reserveInUse.sub(_pos.amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Closed(id, _pos.owner, _pos.created, _pos.expire);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        608
Source: 
>         IERC20(reserve).transfer(msg.sender, _pos.amountOut);
>         _pos.open = false;
>         ^^^^^^^^^^^^^^^^^
>         positions[id] = _pos;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        609
Source: 
>         _pos.open = false;
>         positions[id] = _pos;
>         ^^^^^^^^^^^^^^^^^^^^
>         emit Excercised(id, _pos.owner, _pos.asset, _pos.amountIn, _pos.amountOut, _pos.created, _pos.expire);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        633
Source: 
>     function approve(address spender, uint amount) public returns (bool) {
>         allowances[msg.sender][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        651
Source: 
>         bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));
>         bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));
>                                                                                            ^^^^^^^^^^^^^^^
>         bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        658
Source: 
> 
>         allowances[owner][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        709
Source: 
> 
>         balances[src] = balances[src].sub(amount, "::_transferTokens: transfer amount exceeds balance");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[dst] = balances[dst].add(amount, "::_transferTokens: transfer amount overflows");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        710
Source: 
>         balances[src] = balances[src].sub(amount, "::_transferTokens: transfer amount exceeds balance");
>         balances[dst] = balances[dst].add(amount, "::_transferTokens: transfer amount overflows");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(src, dst, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        494
Source: 
> 
>         IERC20(reserve).transfer(msg.sender, r);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdrew(msg.sender, _shares, r);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        482
Source: 
>         require(msg.sender == governance, "::inCaseTokensGetStuck: only governance");
>         IERC20(token).transfer(governance, IERC20(token).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        513
Source: 
>     function deposit(uint amount) public returns (bool) {
>         IERC20(reserve).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _shares = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        588
Source: 
>         
>         IERC20(tokenIn).transferFrom(msg.sender, address(this), calculateFee(tokenIn, amountIn, amountOut));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        606
Source: 
>         require(_pos.expire < block.timestamp, "::exercise: position expired");
>         IERC20(_pos.asset).transferFrom(msg.sender, address(this), _pos.amountIn);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         IERC20(reserve).transfer(msg.sender, _pos.amountOut);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        607
Source: 
>         IERC20(_pos.asset).transferFrom(msg.sender, address(this), _pos.amountIn);
>         IERC20(reserve).transfer(msg.sender, _pos.amountOut);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _pos.open = false;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        279
Source: 
>     /// @notice EIP-20 token symbol for this token
>     string public symbol = "yOV1M";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        282
Source: 
>     /// @notice EIP-20 token decimals for this token
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    YearnOptionsV1Manager
Line:        590
Source: 
> 
>         positions.push(position(msg.sender, tokenIn, amountIn, amountOut, block.timestamp, block.timestamp.add(PERIOD), true));
>                                                                                            ^^^^^^^^^^^^^^^
>         options[msg.sender].push(nextIndex);

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    YearnOptionsV1Manager
Line:        565
Source: 
>         }
>         if (_pos.expire > block.timestamp) {
>                           ^^^^^^^^^^^^^^^
>             return false;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    YearnOptionsV1Manager
Line:        593
Source: 
> 
>         emit Created(nextIndex, msg.sender, tokenIn, amountIn, amountOut, block.timestamp, block.timestamp.add(PERIOD));
>                                                                                            ^^^^^^^^^^^^^^^
>         return nextIndex++;

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    YearnOptionsV1Manager
Line:        605
Source: 
>         require(_pos.open, "::exercise: position is closed");
>         require(_pos.expire < block.timestamp, "::exercise: position expired");
>                               ^^^^^^^^^^^^^^^
>         IERC20(_pos.asset).transferFrom(msg.sender, address(this), _pos.amountIn);

[0m
