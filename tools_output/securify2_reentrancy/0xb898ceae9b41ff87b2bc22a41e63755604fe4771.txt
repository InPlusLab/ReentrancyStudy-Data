Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    CryptoLott
Line:        274
Source: 
>     b = new bytes(32);
>     assembly {mstore(add(b, 32), x)}
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        25
Source: 
> 
>   function transferOwnership(address payable _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        29
Source: 
> 
>   function acceptOwnership() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        25
Source: 
> 
>   function transferOwnership(address payable _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Owned
Line:        29
Source: 
> 
>   function acceptOwnership() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        94
Source: 
> 
>   function enableContract(bool status) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     contractActive = status;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        103
Source: 
> 
>   function upCharityAddress(address payable _charityAddress) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     charityAddress = _charityAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        107
Source: 
> 
>   function config(uint256 _minPrice, uint64 _maxPlayerRandom,
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint64 _maxLuckyNumberRandom, uint8 _charityRate, uint8 _winnerRate) public onlyOwner {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        136
Source: 
>   // Register player
>   function playerRegister(string memory name, uint64[] memory numbers) payable public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(contractActive == true, "Contract was disabled");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        164
Source: 
> 
>   function getMinPrice() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return uint256(minPrice);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        168
Source: 
> 
>   function getCountPlayer() public view returns (uint64) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return uint64(playerList.length);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        172
Source: 
> 
>   function getMaxPlayer() public view returns (uint64) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return uint64(playerInSession);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        176
Source: 
> 
>   function getMaxLuckyRandomNumber() public view returns (uint64) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return uint64(maxLuckyNumberRandom);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        180
Source: 
> 
>   function getLastTotalFund() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return uint256(lastTotalFund);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        184
Source: 
> 
>   function getLastLuckyNumber() public view returns (uint64) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return uint64(lastLuckyNumber);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        188
Source: 
> 
>   function getCurrentFund() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return uint256(totalFund);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        192
Source: 
> 
>   function getCharityAddress() public view returns (address) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address(charityAddress);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        196
Source: 
> 
>   function getOwnerAddress() public view returns (address) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CryptoLott
Line:        200
Source: 
> 
>   function getPlayerInfo(address playerAddress) public view returns (string memory playerName, uint64[] memory playerNumbers) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Player memory player;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CryptoLott
Line:        250
Source: 
> 
>     (success, _) = charityAddress.call.value(charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    CryptoLott
Line:        254
Source: 
>     }
>     (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    CryptoLott
Line:        234
Source: 
>       for (uint i = 0; i < winnerAddressList.length; i++) {
>         (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)("");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CryptoLott
Line:        234
Source: 
>       for (uint i = 0; i < winnerAddressList.length; i++) {
>         (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)("");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CryptoLott
Line:        250
Source: 
> 
>     (success, _) = charityAddress.call.value(charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    CryptoLott
Line:        254
Source: 
>     }
>     (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Owned
Line:        25
Source: 
> 
>   function transferOwnership(address payable _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     newOwner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CryptoLott
Line:        200
Source: 
> 
>   function getPlayerInfo(address playerAddress) public view returns (string memory playerName, uint64[] memory playerNumbers) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Player memory player;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoLott
Line:        103
Source: 
> 
>   function upCharityAddress(address payable _charityAddress) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     charityAddress = _charityAddress;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoLott
Line:        107
Source: 
> 
>   function config(uint256 _minPrice, uint64 _maxPlayerRandom,
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint64 _maxLuckyNumberRandom, uint8 _charityRate, uint8 _winnerRate) public onlyOwner {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CryptoLott
Line:        136
Source: 
>   // Register player
>   function playerRegister(string memory name, uint64[] memory numbers) payable public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(contractActive == true, "Contract was disabled");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    CryptoLott
Line:        232
Source: 
>     if (winnerAddressList.length > 0) {
>       uint256 winnerFund = totalFund * winnerRate / 100 / winnerAddressList.length;
>                            ^^^^^^^^^^^^^^^^^^^^^^
>       for (uint i = 0; i < winnerAddressList.length; i++) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    CryptoLott
Line:        245
Source: 
> 
>     uint256 charityFund = totalFund * charityRate / 100;
>                           ^^^^^^^^^^^^^^^^^^^^^^^
>     if (!hasWinner) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    CryptoLott
Line:        247
Source: 
>     if (!hasWinner) {
>       charityFund += totalFund * 5 / 100;
>                      ^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    CryptoLott
Line:        242
Source: 
>     } else {
>       winnerFunds = totalFund * 50 / 100;
>                     ^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    CryptoLott
Line:        234
Source: 
>       for (uint i = 0; i < winnerAddressList.length; i++) {
>         (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)("");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    CryptoLott
Line:        250
Source: 
> 
>     (success, _) = charityAddress.call.value(charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    CryptoLott
Line:        254
Source: 
>     }
>     (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CryptoLott
Line:        230
Source: 
>     bool success = false;
>     bytes memory _;
>     ^^^^^^^^^^^^^^
>     if (winnerAddressList.length > 0) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.5.0 <0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLott
Line:        234
Source: 
>       for (uint i = 0; i < winnerAddressList.length; i++) {
>         (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)("");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLott
Line:        250
Source: 
> 
>     (success, _) = charityAddress.call.value(charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLott
Line:        254
Source: 
>     }
>     (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLott
Line:        234
Source: 
>       for (uint i = 0; i < winnerAddressList.length; i++) {
>         (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)("");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLott
Line:        250
Source: 
> 
>     (success, _) = charityAddress.call.value(charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    CryptoLott
Line:        254
Source: 
>     }
>     (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLott
Line:        234
Source: 
>       for (uint i = 0; i < winnerAddressList.length; i++) {
>         (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)("");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLott
Line:        250
Source: 
> 
>     (success, _) = charityAddress.call.value(charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    CryptoLott
Line:        254
Source: 
>     }
>     (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Owned
Line:        12
Source: 
>   address payable public owner;
>   address payable public newOwner;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoLott
Line:        52
Source: 
> 
>   State private state;
>   ^^^^^^^^^^^^^^^^^^^
>   Player[] private playerList;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoLott
Line:        55
Source: 
>   address[] private winnerAddressList;
>   uint64 private playerInSession;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint64 private lastLuckyNumber;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoLott
Line:        56
Source: 
>   uint64 private playerInSession;
>   uint64 private lastLuckyNumber;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private totalFund;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoLott
Line:        57
Source: 
>   uint64 private lastLuckyNumber;
>   uint256 private totalFund;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private lastTotalFund;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoLott
Line:        58
Source: 
>   uint256 private totalFund;
>   uint256 private lastTotalFund;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    CryptoLott
Line:        72
Source: 
>   uint public startRound;
>   uint public endRound;
>   ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLott
Line:        234
Source: 
>       for (uint i = 0; i < winnerAddressList.length; i++) {
>         (success, _) = winnerAddressList[i].call.value(winnerFund).gas(20317)("");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLott
Line:        250
Source: 
> 
>     (success, _) = charityAddress.call.value(charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    CryptoLott
Line:        254
Source: 
>     }
>     (success, _) = owner.call.value(totalFund - winnerFunds - charityFund).gas(20317)("");
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (!success) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        125
Source: 
>     if (hasWinner) {
>       totalFund = 0;
>       ^^^^^^^^^^^^^
>       hasWinner = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        126
Source: 
>       totalFund = 0;
>       hasWinner = false;
>       ^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        128
Source: 
>     }
>     startRound = now;
>     ^^^^^^^^^^^^^^^^
>     playerList.length = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        129
Source: 
>     startRound = now;
>     playerList.length = 0;
>     ^^^^^^^^^^^^^^^^^^^^^
>     playerInSession = randomMaxPlayer();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        130
Source: 
>     playerList.length = 0;
>     playerInSession = randomMaxPlayer();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     state = State.Accepting;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        131
Source: 
>     playerInSession = randomMaxPlayer();
>     state = State.Accepting;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     emit GameSessionBeginEvent(minPrice, playerInSession, charityRate, winnerRate, maxLuckyNumberRandom);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        212
Source: 
>   function finishGame() private {
>     state = State.Finished;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     // Finish session && find winner

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        214
Source: 
>     // Finish session && find winner
>     lastTotalFund = totalFund;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     lastLuckyNumber = randomLuckyNumber();

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        215
Source: 
>     lastTotalFund = totalFund;
>     lastLuckyNumber = randomLuckyNumber();
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        217
Source: 
> 
>     winnerAddressList.length = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // Determine winner

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        222
Source: 
>         if (playerList[i].playerNumbers[j] == lastLuckyNumber) {
>           winnerAddressList.push(playerList[i].playerAddress);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        240
Source: 
>       }
>       hasWinner = true;
>       ^^^^^^^^^^^^^^^^
>     } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        258
Source: 
>     }
>     totalFund = winnerFunds;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        260
Source: 
> 
>     endRound = now;
>     ^^^^^^^^^^^^^^
>     if (endRound - startRound < 2 days) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        262
Source: 
>     if (endRound - startRound < 2 days) {
>       if (playerRandomPadding < UINT64_MAX) playerRandomPadding ++;
>                                             ^^^^^^^^^^^^^^^^^^^^^^
>       if (luckyNumberRandomPadding < UINT64_MAX) luckyNumberRandomPadding ++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        263
Source: 
>       if (playerRandomPadding < UINT64_MAX) playerRandomPadding ++;
>       if (luckyNumberRandomPadding < UINT64_MAX) luckyNumberRandomPadding ++;
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       if (maxPlayerRandom < 1000) maxPlayerRandom ++;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        264
Source: 
>       if (luckyNumberRandomPadding < UINT64_MAX) luckyNumberRandomPadding ++;
>       if (maxPlayerRandom < 1000) maxPlayerRandom ++;
>                                   ^^^^^^^^^^^^^^^^^^
>     } else if (playerRandomPadding > 5) {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    CryptoLott
Line:        266
Source: 
>     } else if (playerRandomPadding > 5) {
>       playerRandomPadding --;
>       ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
