Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    CuraAnnonae
Line:        78
Source: 
>   uint256 public numberOfVaults;
>   uint256 public rewardsBalance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public lastRewardUpdate = 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    CuraAnnonae
Line:        113
Source: 
>     require(msg.sender == owner);
>     require(now.sub(lastRewardUpdate) >= 1 days || lastRewardUpdate == 0);
>                                                    ^^^^^^^^^^^^^^^^^^^^^
>     lastRewardUpdate = now;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        91
Source: 
>   // view the number of tokens left to distribute.
>   function getRewardsBalance() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return YFMSToken.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        96
Source: 
>   // view the current daily reward for all vaults.
>   function getDailyReward() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return currentDailyReward;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        100
Source: 
> 
>   function getNumberOfVaults() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return numberOfVaults;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        105
Source: 
>   // get user balance in specific vault.
>   function getUserBalanceInVault(string memory _vault, address _user) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(vaults_data[_vault][_user] >= 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        111
Source: 
>   // calculate the daily reward for all vaults.
>   function updateDailyReward() public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        120
Source: 
>   // called from vaults.
>   function updateVaultData(string memory vault, address who, address user, uint256 value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == who);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        127
Source: 
>   // add a vault.
>   function addVault(string memory name) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        137
Source: 
>   // called from vaults.
>   function stake(string memory _vault, address _receiver, uint256 _amount, address vault) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vault); // require that the vault is calling the contract.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        146
Source: 
>   // called from vaults.
>   function unstake(string memory _vault, address _receiver, address vault) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vault); // require that the vault is calling the contract.

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CuraAnnonae
Line:        152
Source: 
> 
>   function distributeRewardsToVault(address vault) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CuraAnnonae
Line:        120
Source: 
>   // called from vaults.
>   function updateVaultData(string memory vault, address who, address user, uint256 value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == who);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CuraAnnonae
Line:        137
Source: 
>   // called from vaults.
>   function stake(string memory _vault, address _receiver, uint256 _amount, address vault) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vault); // require that the vault is calling the contract.

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CuraAnnonae
Line:        152
Source: 
> 
>   function distributeRewardsToVault(address vault) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CuraAnnonae
Line:        127
Source: 
>   // add a vault.
>   function addVault(string memory name) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    CuraAnnonae
Line:        146
Source: 
>   // called from vaults.
>   function unstake(string memory _vault, address _receiver, address vault) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(msg.sender == vault); // require that the vault is calling the contract.

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    CuraAnnonae
Line:        115
Source: 
>     lastRewardUpdate = now;
>     currentDailyReward = YFMSToken.balanceOf(address(this)) / 10000 * 40;
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    CuraAnnonae
Line:        115
Source: 
>     lastRewardUpdate = now;
>     currentDailyReward = YFMSToken.balanceOf(address(this)) / 10000 * 40;
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CuraAnnonae
Line:        75
Source: 
>   // variables.
>   ERC20 public YFMSToken;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CuraAnnonae
Line:        83
Source: 
>   // mappings.
>   mapping(string => mapping(address => uint256)) internal vaults_data; // { VaultName: { UserAddress: value }}
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    CuraAnnonae
Line:        115
Source: 
>     lastRewardUpdate = now;
>     currentDailyReward = YFMSToken.balanceOf(address(this)) / 10000 * 40;
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CuraAnnonae
Line:        92
Source: 
>   function getRewardsBalance() public view returns (uint256) {
>     return YFMSToken.balanceOf(address(this));
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    CuraAnnonae
Line:        158
Source: 
>     uint256 rewards = currentDailyReward.div(numberOfVaults);
>     YFMSToken.transfer(vault, rewards);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CuraAnnonae
Line:        77
Source: 
>   address public owner;
>   uint256 public numberOfVaults;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public rewardsBalance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CuraAnnonae
Line:        78
Source: 
>   uint256 public numberOfVaults;
>   uint256 public rewardsBalance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public lastRewardUpdate = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    CuraAnnonae
Line:        80
Source: 
>   uint256 public lastRewardUpdate = 0;
>   uint256 public currentDailyReward;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    CuraAnnonae
Line:        158
Source: 
>     uint256 rewards = currentDailyReward.div(numberOfVaults);
>     YFMSToken.transfer(vault, rewards);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CuraAnnonae
Line:        78
Source: 
>   uint256 public numberOfVaults;
>   uint256 public rewardsBalance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public lastRewardUpdate = 0;

[0m
