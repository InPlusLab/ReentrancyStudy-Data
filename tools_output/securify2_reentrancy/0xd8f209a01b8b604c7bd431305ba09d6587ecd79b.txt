Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        24
Source: 
>     function mul(uint256 a, uint256 b) internal pure returns (uint256) {
>         if (a == 0) {
>             ^^^^^^
>             return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        29
Source: 
>         uint256 c = a * b;
>         require(c / a == b, "SafeMath: multiplication overflow");
>                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HOStaking
Line:        275
Source: 
> 
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HOStaking
Line:        279
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _transferOwnership(newOwner);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        81
Source: 
>       v2Pair = v2;
>       require(IUniswapV2Pair(v2).token0() == ho || IUniswapV2Pair(v2).token1() == ho, "E/no ho");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        81
Source: 
>       v2Pair = v2;
>       require(IUniswapV2Pair(v2).token0() == ho || IUniswapV2Pair(v2).token1() == ho, "E/no ho");
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        105
Source: 
>       require(V2Stakings[msg.sender].amount == 0, "E/aleady staking");
>       require(IERC20(v2Pair).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender] = Staking(amount, now, now);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        119
Source: 
> 
>       IERC20(v2Pair).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        152
Source: 
> 
>       IERC20(hoToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender].earnTime = now;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        164
Source: 
>       require(hoStakings[msg.sender].amount == 0, "E/aleady staking");
>       require(IERC20(hoToken).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        176
Source: 
>       if(stakingToal - amount >= LEAST * 10 ** uint(hoDec)) {
>         IERC20(hoToken).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hoStakings[msg.sender] = Staking(stakingToal - amount, now, now);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        180
Source: 
>         
>         IERC20(hoToken).transfer(msg.sender, stakingToal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete hoStakings[msg.sender];

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        205
Source: 
> 
>       IERC20(hoToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        230
Source: 
>     function fetchPrice() internal view returns (uint) {
>       (uint reserve0, uint reserve1,) = IUniswapV2Pair(v2Pair).getReserves();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        234
Source: 
> 
>       if(IUniswapV2Pair(v2Pair).token0() == hoToken) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oneHo.mul(reserve1) / reserve0;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HOStaking
Line:        289
Source: 
>     function withdrawHo(uint amount) external onlyOwner {
>       IERC20(hoToken).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HOStaking
Line:        279
Source: 
> 
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _transferOwnership(newOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HOStaking
Line:        103
Source: 
> 
>     function stakingV2(uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(V2Stakings[msg.sender].amount == 0, "E/aleady staking");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HOStaking
Line:        288
Source: 
> 
>     function withdrawHo(uint amount) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       IERC20(hoToken).transfer(msg.sender, amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        28
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b, "SafeMath: multiplication overflow");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    HOStaking
Line:        195
Source: 
>       if(earnDays > 0) {
>         earns = s.amount.div(100) * earnDays;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    HOStaking
Line:        105
Source: 
>       require(V2Stakings[msg.sender].amount == 0, "E/aleady staking");
>       require(IERC20(v2Pair).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender] = Staking(amount, now, now);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    HOStaking
Line:        119
Source: 
> 
>       IERC20(v2Pair).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    HOStaking
Line:        164
Source: 
>       require(hoStakings[msg.sender].amount == 0, "E/aleady staking");
>       require(IERC20(hoToken).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    HOStaking
Line:        176
Source: 
>       if(stakingToal - amount >= LEAST * 10 ** uint(hoDec)) {
>         IERC20(hoToken).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hoStakings[msg.sender] = Staking(stakingToal - amount, now, now);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    HOStaking
Line:        180
Source: 
>         
>         IERC20(hoToken).transfer(msg.sender, stakingToal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete hoStakings[msg.sender];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HOStaking
Line:        90
Source: 
> 
>     mapping(address => Staking) V2Stakings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => Staking) hoStakings;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HOStaking
Line:        230
Source: 
>     function fetchPrice() internal view returns (uint) {
>       (uint reserve0, uint reserve1,) = IUniswapV2Pair(v2Pair).getReserves();
>        ^^^^^^^^^^^^^
>       require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HOStaking
Line:        69
Source: 
> 
>     uint constant DAY =  60 * 60 * 24; 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HOStaking
Line:        71
Source: 
> 
>     uint constant RATE = 90000;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant LEAST = 20;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HOStaking
Line:        72
Source: 
>     uint constant RATE = 90000;
>     uint constant LEAST = 20;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HOStaking
Line:        74
Source: 
> 
>     address _owner;
>     ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HOStaking
Line:        90
Source: 
> 
>     mapping(address => Staking) V2Stakings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => Staking) hoStakings;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HOStaking
Line:        91
Source: 
>     mapping(address => Staking) V2Stakings;
>     mapping(address => Staking) hoStakings;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HOStaking
Line:        94
Source: 
> 
>     mapping(uint => uint) dayPrices;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HOStaking
Line:        96
Source: 
> 
>     mapping(uint => bool) raiseOver10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HOStaking
Line:        79
Source: 
>       hoToken = ho;
>       hoDec = IERC20(ho).decimals();
>               ^^^^^^^^^^^^^^^^^^^^^
>       v2Pair = v2;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HOStaking
Line:        81
Source: 
>       v2Pair = v2;
>       require(IUniswapV2Pair(v2).token0() == ho || IUniswapV2Pair(v2).token1() == ho, "E/no ho");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HOStaking
Line:        81
Source: 
>       v2Pair = v2;
>       require(IUniswapV2Pair(v2).token0() == ho || IUniswapV2Pair(v2).token1() == ho, "E/no ho");
>                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HOStaking
Line:        105
Source: 
>       require(V2Stakings[msg.sender].amount == 0, "E/aleady staking");
>       require(IERC20(v2Pair).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender] = Staking(amount, now, now);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HOStaking
Line:        164
Source: 
>       require(hoStakings[msg.sender].amount == 0, "E/aleady staking");
>       require(IERC20(hoToken).transferFrom(msg.sender, address(this), amount), "E/transfer error");
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HOStaking
Line:        230
Source: 
>     function fetchPrice() internal view returns (uint) {
>       (uint reserve0, uint reserve1,) = IUniswapV2Pair(v2Pair).getReserves();
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(reserve0 > 0 && reserve1 > 0, 'E/INSUFFICIENT_LIQUIDITY');

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    HOStaking
Line:        234
Source: 
> 
>       if(IUniswapV2Pair(v2Pair).token0() == hoToken) {
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oneHo.mul(reserve1) / reserve0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HOStaking
Line:        119
Source: 
> 
>       IERC20(v2Pair).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HOStaking
Line:        152
Source: 
> 
>       IERC20(hoToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender].earnTime = now;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HOStaking
Line:        176
Source: 
>       if(stakingToal - amount >= LEAST * 10 ** uint(hoDec)) {
>         IERC20(hoToken).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hoStakings[msg.sender] = Staking(stakingToal - amount, now, now);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HOStaking
Line:        180
Source: 
>         
>         IERC20(hoToken).transfer(msg.sender, stakingToal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete hoStakings[msg.sender];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HOStaking
Line:        205
Source: 
> 
>       IERC20(hoToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HOStaking
Line:        289
Source: 
>     function withdrawHo(uint amount) external onlyOwner {
>       IERC20(hoToken).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    HOStaking
Line:        65
Source: 
>     address private immutable hoToken;
>     address private immutable v2Pair;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    HOStaking
Line:        67
Source: 
> 
>     uint8 private immutable hoDec;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HOStaking
Line:        153
Source: 
>       IERC20(hoToken).transfer(msg.sender, earnsTotal);
>       V2Stakings[msg.sender].earnTime = now;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HOStaking
Line:        207
Source: 
> 
>       hoStakings[msg.sender].earnTime = now;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HOStaking
Line:        253
Source: 
> 
>       dayPrices[d] = p;
>       ^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HOStaking
Line:        260
Source: 
>         if(p > lastPrice.add(lastPrice/10)) {
>           raiseOver10[d] = true;
>           ^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    HOStaking
Line:        119
Source: 
> 
>       IERC20(v2Pair).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    HOStaking
Line:        152
Source: 
> 
>       IERC20(hoToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       V2Stakings[msg.sender].earnTime = now;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    HOStaking
Line:        176
Source: 
>       if(stakingToal - amount >= LEAST * 10 ** uint(hoDec)) {
>         IERC20(hoToken).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         hoStakings[msg.sender] = Staking(stakingToal - amount, now, now);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    HOStaking
Line:        180
Source: 
>         
>         IERC20(hoToken).transfer(msg.sender, stakingToal);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete hoStakings[msg.sender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    HOStaking
Line:        205
Source: 
> 
>       IERC20(hoToken).transfer(msg.sender, earnsTotal);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    HOStaking
Line:        289
Source: 
>     function withdrawHo(uint amount) external onlyOwner {
>       IERC20(hoToken).transfer(msg.sender, amount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
