Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        68
Source: 
>         _buf.capacity = capacity; // Allocate space for the buffer data
>         assembly {
>         ^^^^^^^^^^
>             let ptr := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        103
Source: 
>         uint len = _data.length;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        111
Source: 
>         for(; len >= 32; len -= 32) { // Copy word-length chunks while possible
>             assembly {
>             ^^^^^^^^^^
>                 mstore(dest, mload(src))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        118
Source: 
>         uint mask = 256 ** (32 - len) - 1; // Copy remaining bytes
>         assembly {
>         ^^^^^^^^^^
>             let srcpart := and(mload(src), not(mask))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        138
Source: 
>         }
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Buffer
Line:        160
Source: 
>         uint mask = 256 ** _len - 1;
>         assembly {
>         ^^^^^^^^^^
>             let bufptr := mload(_buf) // Memory address of the buffer data

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        829
Source: 
>     function getCodeSize(address _addr) view internal returns (uint _size) {
>         assembly {
>         ^^^^^^^^^^
>             _size := extcodesize(_addr)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1066
Source: 
>         bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
>         assembly {
>         ^^^^^^^^^^
>             mstore(unonce, 0x20)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1078
Source: 
>         bytes memory delay = new bytes(32);
>         assembly {
>         ^^^^^^^^^^
>             mstore(add(delay, 0x20), _delay)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1086
Source: 
>         bytes memory delay_bytes8_left = new bytes(8);
>         assembly {
>         ^^^^^^^^^^
>             let x := mload(add(delay_bytes8, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1116
Source: 
>         sigs_ = copyBytes(_dersig, offset + (uint(uint8(_dersig[offset - 1])) - 0x20), 32, sigs_, 0);
>         assembly {
>         ^^^^^^^^^^
>             sigr := mload(add(sigr_, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1225
Source: 
>         while (i < (32 + _fromOffset + _length)) {
>             assembly {
>             ^^^^^^^^^^
>                 let tmp := mload(add(_from, i))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1249
Source: 
>         address addr;
>         assembly {
>         ^^^^^^^^^^
>             let size := mload(0x40)

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1275
Source: 
>         */
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(_sig, 32))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        1307
Source: 
>     function safeMemoryCleaner() internal pure {
>         assembly {
>         ^^^^^^^^^^
>             let fmem := mload(0x40)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    usingOraclize
Line:        350
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FUSDExchange
Line:        1366
Source: 
>     
>     function changeOwner(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = newOwner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FUSDExchange
Line:        1371
Source: 
>     
>     function changeOraclizeGasPrice(uint gasPrice) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oraclize_setCustomGasPrice(gasPrice);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FUSDExchange
Line:        1375
Source: 
>     
>     function changeOraclizeGasLimit(uint _gastLimit) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gasLimit = _gastLimit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FUSDExchange
Line:        1381
Source: 
>     
>     function purchaseETH(uint256 tokens) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(tokens > 0, "tokens amount should be greater than zero.");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FUSDExchange
Line:        1397
Source: 
>     
>     function purchaseTokens() public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.value > 0, "send more than 0 Ethers");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FUSDExchange
Line:        1412
Source: 
>     
>     function __callback(bytes32 myid, string memory result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        if (msg.sender != oraclize_cbAddress()) revert();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FUSDExchange
Line:        1444
Source: 
>    
>    function withdrawWEI(uint256 _amount) public onlyOwner {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(_amount <= address(this).balance, "contract does not have enough balance");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FUSDExchange
Line:        1449
Source: 
>    
>    function withdrawTokens(uint256 _amount) public onlyOwner {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(token.balanceOf(address(this)) >= _amount, "contract does not havee enough token balance");

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Gas-dependent Reentrancy
Description: Calls into external contracts that receive all remaining
             gas and are followed by state changes may be reentrant.
Type:        Warning
Contract:    usingOraclize
Line:        368
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FUSDExchange
Line:        1366
Source: 
>     
>     function changeOwner(address payable newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FUSDExchange
Line:        1371
Source: 
>     
>     function changeOraclizeGasPrice(uint gasPrice) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oraclize_setCustomGasPrice(gasPrice);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        346
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        350
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        346
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    usingOraclize
Line:        350
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FUSDExchange
Line:        1375
Source: 
>     
>     function changeOraclizeGasLimit(uint _gastLimit) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         gasLimit = _gastLimit;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FUSDExchange
Line:        1412
Source: 
>     
>     function __callback(bytes32 myid, string memory result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        if (msg.sender != oraclize_cbAddress()) revert();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FUSDExchange
Line:        1423
Source: 
>           uint256 WEI_TO_SEND = tokens / ETH_IN_USD;
>           uint256 fee = ((WEI_TO_SEND * 100) / 20) / 100;
>                           ^^^^^^^^^^^^^^^^^
>           uint256 final_wei_to_send = WEI_TO_SEND - fee;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    FUSDExchange
Line:        1435
Source: 
>            
>           uint256 tokensAmountToSend = (remainingWEI * ETH_IN_USD);
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
>           current_order.status = OrderStatus.Fulfilled;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        364
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        825
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    usingOraclize
Line:        835
Source: 
>     function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
>         return oraclize.setCustomGasPrice(_gasPrice);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FUSDExchange
Line:        1383
Source: 
>         require(tokens > 0, "tokens amount should be greater than zero.");
>         require(token.transferFrom(msg.sender, address(this), tokens));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    solcChecker
Line:        10
Source: 
> // Dummy contract only used to emit to end-user they are using wrong solc
> contract solcChecker {
> ^^^^^^^^^^^^^^^^^^^^^^
> /* INCOMPATIBLE SOLC: import the following instead: "github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol" */ function f(bytes calldata x) external;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        21
Source: 
>     function getPrice(string memory _datasource) public returns (uint _dsprice);
>     function randomDS_getSessionPubKeyHash() external view returns (bytes32 _sessionKeyHash);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function getPrice(string memory _datasource, uint _gasLimit) public returns (uint _dsprice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        26
Source: 
>     function query2(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) public payable returns (bytes32 _id);
>     function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        27
Source: 
>     function query_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg, uint _gasLimit) external payable returns (bytes32 _id);
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OraclizeI
Line:        28
Source: 
>     function queryN_withGasLimit(uint _timestamp, string calldata _datasource, bytes calldata _argN, uint _gasLimit) external payable returns (bytes32 _id);
>     function query2_withGasLimit(uint _timestamp, string calldata _datasource, string calldata _arg1, string calldata _arg2, uint _gasLimit) external payable returns (bytes32 _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Buffer
Line:        57
Source: 
> 
>     struct buffer {
>     ^^^^^^^^^^^^^^^
>         bytes buf;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        242
Source: 
> */
> contract usingOraclize {
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        247
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        249
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        250
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        251
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        253
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        254
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        255
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        256
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        257
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        258
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        260
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        261
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        262
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        263
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        264
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        265
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        267
Source: 
> 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        268
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        280
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        288
Source: 
> 
>     function oraclize_setNetwork(uint8 _networkID) internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _networkID; // NOTE: Silence the warning and remain backwards compatible

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        293
Source: 
> 
>     function oraclize_setNetworkName(string memory _network_name) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oraclize_network_name = _network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        297
Source: 
> 
>     function oraclize_getNetworkName() internal view returns (string memory _networkName) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize_network_name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        301
Source: 
> 
>     function oraclize_setNetwork() internal returns (bool _networkSet) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        346
Source: 
>      */
>     function __callback(bytes32 _myid, string memory _result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         __callback(_myid, _result, new bytes(0));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        350
Source: 
> 
>     function __callback(bytes32 _myid, string memory _result, bytes memory _proof) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       _myid; _result; _proof;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        355
Source: 
> 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        359
Source: 
> 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        363
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        371
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        379
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource,_gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        387
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        395
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        403
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        411
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        419
Source: 
> 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        427
Source: 
> 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        436
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        445
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        454
Source: 
> 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        463
Source: 
> 
>     function oraclize_query(string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        469
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        475
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        481
Source: 
> 
>     function oraclize_query(string memory _datasource, string[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        487
Source: 
> 
>     function oraclize_query(string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        494
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        501
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        508
Source: 
> 
>     function oraclize_query(string memory _datasource, string[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        515
Source: 
> 
>     function oraclize_query(string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        523
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        531
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        539
Source: 
> 
>     function oraclize_query(string memory _datasource, string[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        547
Source: 
> 
>     function oraclize_query(string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        556
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        565
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        574
Source: 
> 
>     function oraclize_query(string memory _datasource, string[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        583
Source: 
> 
>     function oraclize_query(string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        593
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        603
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        613
Source: 
> 
>     function oraclize_query(string memory _datasource, string[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         string[] memory dynargs = new string[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        623
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        632
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        641
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        650
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint price = oraclize.getPrice(_datasource, _gasLimit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        659
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        665
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        671
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        677
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[1] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](1);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        683
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        690
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        697
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        704
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[2] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](2);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        711
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        719
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        727
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        735
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[3] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](3);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        743
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        752
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        761
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        770
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[4] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](4);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        779
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        789
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        799
Source: 
> 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        809
Source: 
> 
>     function oraclize_query(string memory _datasource, bytes[5] memory _args, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes[] memory dynargs = new bytes[](5);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        819
Source: 
> 
>     function oraclize_setProof(byte _proofP) oraclizeAPI internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.setProofType(_proofP);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        824
Source: 
> 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.cbAddress();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        834
Source: 
> 
>     function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.setCustomGasPrice(_gasPrice);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        838
Source: 
> 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return oraclize.randomDS_getSessionPubKeyHash();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        930
Source: 
>     function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) internal pure returns (string memory _concatenatedString) {
>         bytes memory _ba = bytes(_a);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bb = bytes(_b);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        931
Source: 
>         bytes memory _ba = bytes(_a);
>         bytes memory _bb = bytes(_b);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bc = bytes(_c);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        932
Source: 
>         bytes memory _bb = bytes(_b);
>         bytes memory _bc = bytes(_c);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bd = bytes(_d);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        933
Source: 
>         bytes memory _bc = bytes(_c);
>         bytes memory _bd = bytes(_d);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _be = bytes(_e);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        934
Source: 
>         bytes memory _bd = bytes(_d);
>         bytes memory _be = bytes(_e);
>         ^^^^^^^^^^^^^^^^
>         string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1058
Source: 
> 
>     function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32 _queryId) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require((_nbytes > 0) && (_nbytes <= 32));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1065
Source: 
>         bytes memory sessionKeyHash = new bytes(32);
>         bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1081
Source: 
>         }
>         bytes memory delay_bytes8 = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(delay, 24, 8, delay_bytes8, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1085
Source: 
>         bytes32 queryId = oraclize_query("random", args, _customGasLimit);
>         bytes memory delay_bytes8_left = new bytes(8);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         assembly {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1101
Source: 
> 
>     function oraclize_randomDS_setCommitment(bytes32 _queryId, bytes32 _commitment) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         oraclize_randomDS_args[_queryId] = _commitment;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1129
Source: 
> 
>     function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes memory _proof, uint _sig2offset) internal returns (bool _proofVerified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bool sigok;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1134
Source: 
>         copyBytes(_proof, _sig2offset, sig2.length, sig2, 0);
>         bytes memory appkey1_pubkey = new bytes(64);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(_proof, 3 + 1, 64, appkey1_pubkey, 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1139
Source: 
>         copyBytes(_proof, _sig2offset - 65, 65, tosign2, 1);
>         bytes memory CODEHASH = hex"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c";
>         ^^^^^^^^^^^^^^^^^^^^^
>         copyBytes(CODEHASH, 0, 32, tosign2, 1 + 65);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1146
Source: 
>         // Random DS Proof Step 7: Verify the APPKEY1 provenance (must be signed by Ledger)
>         bytes memory LEDGERKEY = hex"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4";
>         ^^^^^^^^^^^^^^^^^^^^^^
>         bytes memory tosign3 = new bytes(1 + 65);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1156
Source: 
> 
>     function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string memory _result, bytes memory _proof) internal returns (uint8 _returnCode) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Random DS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1179
Source: 
> 
>     function oraclize_randomDS_proofVerify__main(bytes memory _proof, bytes32 _queryId, bytes memory _result, string memory _contextName) internal returns (bool _proofVerified) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // Random DS Proof Step 2: The unique keyhash has to match with the sha256 of (context name + _queryId)

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    usingOraclize
Line:        1238
Source: 
>     */
>     function safer_ecrecover(bytes32 _hash, uint8 _v, bytes32 _r, bytes32 _s) internal returns (bool _success, address _recoveredAddress) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         /*

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FUSDExchange
Line:        1412
Source: 
>     
>     function __callback(bytes32 myid, string memory result) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        if (msg.sender != oraclize_cbAddress()) revert();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FUSDExchange
Line:        1415
Source: 
>        
>        uint256 ETH_IN_USD = parseInt(result);
>        ^^^^^^^^^^^^^^^^^^
>        amount = ETH_IN_USD;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FUSDExchange
Line:        1417
Source: 
>        amount = ETH_IN_USD;
>       Order storage current_order = orders[myid];
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(current_order.status == OrderStatus.Pending, "Order is already fulfilled");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FUSDExchange
Line:        1422
Source: 
>           uint256 tokens = current_order.tokens;
>           uint256 WEI_TO_SEND = tokens / ETH_IN_USD;
>           ^^^^^^^^^^^^^^^^^^^
>           uint256 fee = ((WEI_TO_SEND * 100) / 20) / 100;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FUSDExchange
Line:        1424
Source: 
>           uint256 fee = ((WEI_TO_SEND * 100) / 20) / 100;
>           uint256 final_wei_to_send = WEI_TO_SEND - fee;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^
>           

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.7;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        246
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        247
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        249
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        250
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        251
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        253
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        254
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        255
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        256
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        257
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        258
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        260
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        261
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        262
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        263
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        264
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        265
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        267
Source: 
> 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        268
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        280
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                            ^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        280
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                                              ^^^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        280
Source: 
> 
>     modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string memory _result, bytes memory _proof) {
>                                                                                     ^^^^^^^^^^^^^^^^^^^
>         // RandomDS Proof Step 1: The prefix has to match 'LP\x01' (Ledger Proof version 1)

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    usingOraclize
Line:        283
Source: 
>         require((_proof[0] == "L") && (_proof[1] == "P") && (uint8(_proof[2]) == uint8(1)));
>         bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
>         ^^^^^^^^^^^^^^^^^^
>         require(proofVerified);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        365
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        373
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        397
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        405
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        429
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        438
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        625
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    usingOraclize
Line:        634
Source: 
>         uint price = oraclize.getPrice(_datasource);
>         if (price > 1 ether + tx.gasprice * 200000) {
>                                             ^^^^^^
>             return 0; // Unexpectedly high price

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FUSDExchange
Line:        1355
Source: 
>         owner = msg.sender;
>         oraclize_setCustomGasPrice(4000000000);
>                                    ^^^^^^^^^^
>         gasLimit = 85000;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FUSDExchange
Line:        1428
Source: 
>            
>           current_order.receiver.transfer(final_wei_to_send);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FUSDExchange
Line:        1446
Source: 
>        require(_amount <= address(this).balance, "contract does not have enough balance");
>        owner.transfer(_amount);
>        ^^^^^^^^^^^^^^^^^^^^^^^
>    }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    FUSDExchange
Line:        1428
Source: 
>            
>           current_order.receiver.transfer(final_wei_to_send);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    usingOraclize
Line:        368
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FUSDExchange
Line:        1446
Source: 
>        require(_amount <= address(this).balance, "contract does not have enough balance");
>        owner.transfer(_amount);
>        ^^^^^^^^^^^^^^^^^^^^^^^
>    }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    usingOraclize
Line:        368
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FUSDExchange
Line:        1428
Source: 
>            
>           current_order.receiver.transfer(final_wei_to_send);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>            

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FUSDExchange
Line:        1446
Source: 
>        require(_amount <= address(this).balance, "contract does not have enough balance");
>        owner.transfer(_amount);
>        ^^^^^^^^^^^^^^^^^^^^^^^
>    }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        364
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        825
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FUSDExchange
Line:        1383
Source: 
>         require(tokens > 0, "tokens amount should be greater than zero.");
>         require(token.transferFrom(msg.sender, address(this), tokens));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FUSDExchange
Line:        1438
Source: 
> 
>           require(token.transfer(current_order.receiver, tokensAmountToSend));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FUSDExchange
Line:        1450
Source: 
>    function withdrawTokens(uint256 _amount) public onlyOwner {
>        require(token.balanceOf(address(this)) >= _amount, "contract does not havee enough token balance");
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        require(token.transfer(owner, _amount));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FUSDExchange
Line:        1451
Source: 
>        require(token.balanceOf(address(this)) >= _amount, "contract does not havee enough token balance");
>        require(token.transfer(owner, _amount));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>    }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    usingOraclize
Line:        368
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    usingOraclize
Line:        835
Source: 
>     function oraclize_setCustomGasPrice(uint _gasPrice) oraclizeAPI internal {
>         return oraclize.setCustomGasPrice(_gasPrice);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1022
Source: 
>         while (j != 0) {
>             len++;
>             ^^^
>             j /= 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1037
Source: 
>         Buffer.buffer memory buf;
>         Buffer.init(buf, 1024);
>                     ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1049
Source: 
>         Buffer.buffer memory buf;
>         Buffer.init(buf, 1024);
>                     ^^^
>         buf.startArray();

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1120
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                                                         ^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    usingOraclize
Line:        1297
Source: 
>         */
>         if (v < 27) {
>             ^
>             v += 27;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    usingOraclize
Line:        246
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FUSDExchange
Line:        1347
Source: 
>     
>     uint256 public amount;
>     ^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => Order) public orders;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FUSDExchange
Line:        1350
Source: 
>     
>     uint public gasLimit;
>     ^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        246
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        247
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        260
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        247
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    usingOraclize
Line:        260
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        175
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        176
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        177
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        178
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        179
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        180
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        181
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        175
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        176
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        177
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        178
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        179
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        180
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    CBOR
Line:        181
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    usingOraclize
Line:        368
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingOraclize
Line:        352
Source: 
>       _myid; _result; _proof;
>       oraclize_randomDS_args[bytes32(0)] = bytes32(0);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FUSDExchange
Line:        1389
Source: 
> 
>         orders[orderID] = newOrder;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FUSDExchange
Line:        1404
Source: 
> 
>         orders[orderID] = newOrder;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        356
Source: 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        360
Source: 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        364
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        368
Source: 
>         }
>         return oraclize.query.value(price)(0, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        372
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        376
Source: 
>         }
>         return oraclize.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        380
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource,_gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        384
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        388
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        392
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        396
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        400
Source: 
>         }
>         return oraclize.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        404
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        408
Source: 
>         }
>         return oraclize.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        412
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        416
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        420
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        424
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        428
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        433
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        437
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        442
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        446
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        451
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        455
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        460
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        624
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        629
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        633
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        638
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        642
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        647
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        651
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        656
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        825
Source: 
>     function oraclize_cbAddress() oraclizeAPI internal returns (address _callbackAddress) {
>         return oraclize.cbAddress();
>                ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        839
Source: 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>         return oraclize.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        302
Source: 
>     function oraclize_setNetwork() internal returns (bool _networkSet) {
>         if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed) > 0) { //mainnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        307
Source: 
>         }
>         if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1) > 0) { //ropsten testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        312
Source: 
>         }
>         if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e) > 0) { //kovan testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        317
Source: 
>         }
>         if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48) > 0) { //rinkeby testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        322
Source: 
>         }
>         if (getCodeSize(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41) > 0) { //goerli testnet
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0xa2998EFD205FB9D4B4963aFb70778D6354ad3A41);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        327
Source: 
>         }
>         if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475) > 0) { //ethereum-bridge
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        331
Source: 
>         }
>         if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF) > 0) { //ether.camp ide
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        335
Source: 
>         }
>         if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA) > 0) { //browser-solidity
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        356
Source: 
>     function oraclize_getPrice(string memory _datasource) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        360
Source: 
>     function oraclize_getPrice(string memory _datasource, uint _gasLimit) oraclizeAPI internal returns (uint _queryPrice) {
>         return oraclize.getPrice(_datasource, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        372
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        376
Source: 
>         }
>         return oraclize.query.value(price)(_timestamp, _datasource, _arg);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        380
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource,_gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        384
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(_timestamp, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        388
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        392
Source: 
>         }
>         return oraclize.query_withGasLimit.value(price)(0, _datasource, _arg, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        396
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        400
Source: 
>         }
>         return oraclize.query2.value(price)(0, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        404
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        408
Source: 
>         }
>         return oraclize.query2.value(price)(_timestamp, _datasource, _arg1, _arg2);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        412
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        416
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(_timestamp, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        420
Source: 
>     function oraclize_query(string memory _datasource, string memory _arg1, string memory _arg2, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        424
Source: 
>         }
>         return oraclize.query2_withGasLimit.value(price)(0, _datasource, _arg1, _arg2, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        428
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        433
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        437
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        442
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        446
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        451
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        455
Source: 
>     function oraclize_query(string memory _datasource, string[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        460
Source: 
>         bytes memory args = stra2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        624
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        629
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(0, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        633
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * 200000) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        638
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN.value(price)(_timestamp, _datasource, args);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        642
Source: 
>     function oraclize_query(uint _timestamp, string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        647
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(_timestamp, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        651
Source: 
>     function oraclize_query(string memory _datasource, bytes[] memory _argN, uint _gasLimit) oraclizeAPI internal returns (bytes32 _id) {
>         uint price = oraclize.getPrice(_datasource, _gasLimit);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (price > 1 ether + tx.gasprice * _gasLimit) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        656
Source: 
>         bytes memory args = ba2cbor(_argN);
>         return oraclize.queryN_withGasLimit.value(price)(0, _datasource, args, _gasLimit);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        271
Source: 
>     modifier oraclizeAPI {
>         if ((address(OAR) == address(0)) || (getCodeSize(address(OAR)) == 0)) {
>                                              ^^^^^^^^^^^^^^^^^^^^^^^^^
>             oraclize_setNetwork(networkID_auto);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        274
Source: 
>         }
>         if (address(oraclize) != OAR.getAddress()) {
>                                  ^^^^^^^^^^^^^^^^
>             oraclize = OraclizeI(OAR.getAddress());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        275
Source: 
>         if (address(oraclize) != OAR.getAddress()) {
>             oraclize = OraclizeI(OAR.getAddress());
>                                  ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        839
Source: 
>     function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32 _sessionKeyHash) {
>         return oraclize.randomDS_getSessionPubKeyHash();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1120
Source: 
>         }
>         (sigok, signer) = safer_ecrecover(_tosignh, 27, sigr, sigs);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (address(uint160(uint256(keccak256(_pubkey)))) == signer) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1124
Source: 
>         } else {
>             (sigok, signer) = safer_ecrecover(_tosignh, 28, sigr, sigs);
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return (address(uint160(uint256(keccak256(_pubkey)))) == signer);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1161
Source: 
>         }
>         bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());
>                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (!proofVerified) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    usingOraclize
Line:        1303
Source: 
>         }
>         return safer_ecrecover(_hash, v, r, s);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        246
Source: 
> 
>     OraclizeI oraclize;
>     ^^^^^^^^^^^^^^^^^^
>     OraclizeAddrResolverI OAR;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        247
Source: 
>     OraclizeI oraclize;
>     OraclizeAddrResolverI OAR;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        249
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        250
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        251
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        253
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        254
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        255
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        256
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        257
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        258
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        260
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        261
Source: 
>     string oraclize_network_name;
>     uint8 constant networkID_auto = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_morden = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        262
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        263
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        264
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        265
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        268
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        175
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        176
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        177
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        178
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        179
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        180
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        181
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        249
Source: 
> 
>     uint constant day = 60 * 60 * 24;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant week = 60 * 60 * 24 * 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        250
Source: 
>     uint constant day = 60 * 60 * 24;
>     uint constant week = 60 * 60 * 24 * 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint constant month = 60 * 60 * 24 * 30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        251
Source: 
>     uint constant week = 60 * 60 * 24 * 7;
>     uint constant month = 60 * 60 * 24 * 30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        253
Source: 
> 
>     byte constant proofType_NONE = 0x00;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Ledger = 0x30;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        254
Source: 
>     byte constant proofType_NONE = 0x00;
>     byte constant proofType_Ledger = 0x30;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Native = 0xF0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        255
Source: 
>     byte constant proofType_Ledger = 0x30;
>     byte constant proofType_Native = 0xF0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofStorage_IPFS = 0x01;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        256
Source: 
>     byte constant proofType_Native = 0xF0;
>     byte constant proofStorage_IPFS = 0x01;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_Android = 0x40;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        257
Source: 
>     byte constant proofStorage_IPFS = 0x01;
>     byte constant proofType_Android = 0x40;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     byte constant proofType_TLSNotary = 0x10;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        258
Source: 
>     byte constant proofType_Android = 0x40;
>     byte constant proofType_TLSNotary = 0x10;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        260
Source: 
> 
>     string oraclize_network_name;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_auto = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        262
Source: 
>     uint8 constant networkID_auto = 0;
>     uint8 constant networkID_morden = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_mainnet = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        263
Source: 
>     uint8 constant networkID_morden = 2;
>     uint8 constant networkID_mainnet = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_testnet = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        264
Source: 
>     uint8 constant networkID_mainnet = 1;
>     uint8 constant networkID_testnet = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 constant networkID_consensys = 161;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        265
Source: 
>     uint8 constant networkID_testnet = 2;
>     uint8 constant networkID_consensys = 161;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    usingOraclize
Line:        268
Source: 
>     mapping(bytes32 => bytes32) oraclize_randomDS_args;
>     mapping(bytes32 => bool) oraclize_randomDS_sessionKeysHashVerified;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FUSDExchange
Line:        1347
Source: 
>     
>     uint256 public amount;
>     ^^^^^^^^^^^^^^^^^^^^^
>     mapping(bytes32 => Order) public orders;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        175
Source: 
> 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_MAP = 5;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        176
Source: 
>     uint8 private constant MAJOR_TYPE_INT = 0;
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_BYTES = 2;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        177
Source: 
>     uint8 private constant MAJOR_TYPE_MAP = 5;
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        178
Source: 
>     uint8 private constant MAJOR_TYPE_BYTES = 2;
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_STRING = 3;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        179
Source: 
>     uint8 private constant MAJOR_TYPE_ARRAY = 4;
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        180
Source: 
>     uint8 private constant MAJOR_TYPE_STRING = 3;
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    CBOR
Line:        181
Source: 
>     uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;
>     uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
