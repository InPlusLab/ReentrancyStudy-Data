[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AlusdPool
Line:        256
Source: 
>   address public usdc;
>   address public extra_token_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public lp_token_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    AlusdPool
Line:        271
Source: 
>   uint256 public deposit_usdc_amount;
>   uint256 public withdraw_usdc_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        55
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _contract_owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        71
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        55
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _contract_owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        71
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AlusdPool
Line:        292
Source: 
>   //@_amount: USDC amount
>   function deposit(uint256 _amount) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     deposit_usdc_amount = deposit_usdc_amount + _amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AlusdPool
Line:        323
Source: 
>   //@_amount: lp token amount
>   function withdraw(uint256 _amount) public onlyController{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     withdraw_from_gauge(_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AlusdPool
Line:        346
Source: 
> 
>   function earn_crv() public onlyController{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(crv_minter_addr != MinterInterfaceERC20(0x0), "no crv minter");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AlusdPool
Line:        356
Source: 
> 
>   function setController(address _controller, address _vault) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     controller = _controller;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AlusdPool
Line:        360
Source: 
>   }
>   function claimStdToken(address _token, address payable to) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _claimStdTokens(_token, to);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AlusdPool
Line:        366
Source: 
>   }
>   function get_lp_token_addr() public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return lp_token_addr;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AlusdPool
Line:        369
Source: 
>   }
>   function get_virtual_price() public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return PriceInterfaceERC20(address(meta_pool_addr)).get_virtual_price();

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TokenClaimer
Line:        115
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        71
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AlusdPool
Line:        292
Source: 
>   //@_amount: USDC amount
>   function deposit(uint256 _amount) public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     deposit_usdc_amount = deposit_usdc_amount + _amount;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AlusdPool
Line:        323
Source: 
>   //@_amount: lp token amount
>   function withdraw(uint256 _amount) public onlyController{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     withdraw_from_gauge(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AlusdPool
Line:        356
Source: 
> 
>   function setController(address _controller, address _vault) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     controller = _controller;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AlusdPool
Line:        360
Source: 
>   }
>   function claimStdToken(address _token, address payable to) public onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _claimStdTokens(_token, to);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AlusdPool
Line:        295
Source: 
>     deposit_usdc(_amount);
>     uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     lp_balance = lp_balance + cur;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AlusdPool
Line:        327
Source: 
>     lp_balance = lp_balance - _amount;
>     IERC20(usdc).transfer(msg.sender, IERC20(usdc).balanceOf(address(this)));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    AlusdPool
Line:        327
Source: 
>     lp_balance = lp_balance - _amount;
>     IERC20(usdc).transfer(msg.sender, IERC20(usdc).balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        11
Source: 
> 
>   function get_virtual_price() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        13
Source: 
> 
>   function get_lp_token_balance() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        15
Source: 
> 
>   function get_lp_token_addr() public view returns(address);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePool
Line:        17
Source: 
> 
>   function earn_crv() public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePoolForETH
Line:        26
Source: 
> 
>   function get_virtual_price() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePoolForETH
Line:        28
Source: 
> 
>   function get_lp_token_balance() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePoolForETH
Line:        30
Source: 
> 
>   function get_lp_token_addr() public view returns(address);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ICurvePoolForETH
Line:        32
Source: 
> 
>   function earn_crv() public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Ownable
Line:        39
Source: 
> contract Ownable {
>     address private _contract_owner;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenClaimer
Line:        115
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>          ^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PriceInterfaceERC20
Line:        134
Source: 
> contract PriceInterfaceERC20{
>   function get_virtual_price() public view returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   //function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) public;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        155
Source: 
> 
>   address public crv_token_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public controller;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        158
Source: 
>   address public vault;
>   address public lp_token_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        160
Source: 
> 
>   CRVGaugeInterfaceERC20 public crv_gauge_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   MinterInterfaceERC20 public crv_minter_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        161
Source: 
>   CRVGaugeInterfaceERC20 public crv_gauge_addr;
>   MinterInterfaceERC20 public crv_minter_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        163
Source: 
> 
>   uint256 public lp_balance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public deposit_usdc_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        164
Source: 
>   uint256 public lp_balance;
>   uint256 public deposit_usdc_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public withdraw_usdc_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        165
Source: 
>   uint256 public deposit_usdc_amount;
>   uint256 public withdraw_usdc_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        183
Source: 
> 
>   function deposit_usdc(uint256 _amount) internal;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        195
Source: 
>   //deposit all lp token to gauage to mine CRV
>   function deposit_to_gauge() internal {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        203
Source: 
> 
>   function withdraw_from_curve(uint256 _amount) internal;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        213
Source: 
> 
>   function withdraw_from_gauge(uint256 _amount) internal{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_amount <= lp_balance, "withdraw_from_gauge: insufficient amount");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        226
Source: 
> 
>   function earn_crv() public onlyController{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(crv_minter_addr != MinterInterfaceERC20(0x0), "no crv minter");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        232
Source: 
> 
>   function get_lp_token_balance() public view returns(uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return lp_balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUSDCPoolBase
Line:        236
Source: 
> 
>   function get_lp_token_addr() public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return lp_token_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CurveInterfaceAlusd
Line:        243
Source: 
> contract CurveInterfaceAlusd{
>   function add_liquidity(address _pool, uint256[4] memory _deposit_amounts, uint256 _min_mint_amount) public returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) public returns(uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CurveInterfaceAlusd
Line:        244
Source: 
>   function add_liquidity(address _pool, uint256[4] memory _deposit_amounts, uint256 _min_mint_amount) public returns(uint256);
>   function remove_liquidity_one_coin(address _pool, uint256 _burn_amount, int128 i, uint256 _min_amount) public returns(uint256);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CRVGaugeInterfaceERC20_alusd
Line:        247
Source: 
> 
> contract CRVGaugeInterfaceERC20_alusd{
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function deposit(uint256 _value) public;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    CRVGaugeInterfaceERC20_alusd
Line:        250
Source: 
>   function withdraw(uint256 _value) public;
>   function claim_rewards(address _address) public;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        256
Source: 
>   address public usdc;
>   address public extra_token_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public lp_token_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        257
Source: 
>   address public extra_token_addr;
>   address public lp_token_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public crv_token_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        258
Source: 
>   address public lp_token_addr;
>   address public crv_token_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        263
Source: 
> 
>   CRVGaugeInterfaceERC20_alusd public crv_gauge_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   MinterInterfaceERC20 public crv_minter_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        264
Source: 
>   CRVGaugeInterfaceERC20_alusd public crv_gauge_addr;
>   MinterInterfaceERC20 public crv_minter_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        266
Source: 
>   
>   CurveInterfaceAlusd public pool_deposit;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public meta_pool_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        267
Source: 
>   CurveInterfaceAlusd public pool_deposit;
>   address public meta_pool_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        269
Source: 
> 
>   uint256 public lp_balance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public deposit_usdc_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        270
Source: 
>   uint256 public lp_balance;
>   uint256 public deposit_usdc_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public withdraw_usdc_amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        271
Source: 
>   uint256 public deposit_usdc_amount;
>   uint256 public withdraw_usdc_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        301
Source: 
>   //@_amount: USDC amount
>   function deposit_usdc(uint256 _amount) internal {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(usdc).transferFrom(msg.sender, address(this), _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        314
Source: 
>   //deposit all lp token to gauage to mine CRV
>   function deposit_to_gauge() internal {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), 0);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        330
Source: 
> 
>   function withdraw_from_gauge(uint256 _amount) internal{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_amount <= lp_balance, "withdraw_from_gauge: insufficient amount");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        335
Source: 
> 
>   function withdraw_from_curve(uint256 _amount) internal {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_amount <= get_lp_token_balance(), "withdraw_from_curve: too large amount");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        346
Source: 
> 
>   function earn_crv() public onlyController{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(crv_minter_addr != MinterInterfaceERC20(0x0), "no crv minter");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        363
Source: 
>   }
>   function get_lp_token_balance() public view returns(uint256){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return lp_balance;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        366
Source: 
>   }
>   function get_lp_token_addr() public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return lp_token_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AlusdPool
Line:        369
Source: 
>   }
>   function get_virtual_price() public view returns(uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return PriceInterfaceERC20(address(meta_pool_addr)).get_virtual_price();

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    TokenClaimer
Line:        109
Source: 
>         if (_token == address(0x0)) {
>             to.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    TokenClaimer
Line:        109
Source: 
>         if (_token == address(0x0)) {
>             to.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    TokenClaimer
Line:        109
Source: 
>         if (_token == address(0x0)) {
>             to.transfer(address(this).balance);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    TokenClaimer
Line:        113
Source: 
>         IERC20 token = IERC20(_token);
>         uint balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AlusdPool
Line:        295
Source: 
>     deposit_usdc(_amount);
>     uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     lp_balance = lp_balance + cur;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AlusdPool
Line:        316
Source: 
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), 0);
>     uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));
>                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), cur);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AlusdPool
Line:        319
Source: 
>     crv_gauge_addr.deposit(cur);
>     require(IERC20(lp_token_addr).balanceOf(address(this)) == 0, "deposit_to_gauge: unexpected exchanges");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AlusdPool
Line:        327
Source: 
>     lp_balance = lp_balance - _amount;
>     IERC20(usdc).transfer(msg.sender, IERC20(usdc).balanceOf(address(this)));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AlusdPool
Line:        349
Source: 
>     crv_minter_addr.mint(address(crv_gauge_addr));
>     IERC20(crv_token_addr).transfer(msg.sender, IERC20(crv_token_addr).balanceOf(address(this)));
>                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (extra_token_addr != address(0x0)) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AlusdPool
Line:        352
Source: 
>       crv_gauge_addr.claim_rewards(address(this));
>       IERC20(extra_token_addr).transfer(msg.sender, IERC20(extra_token_addr).balanceOf(address(this)));
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        315
Source: 
>   function deposit_to_gauge() internal {
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), 0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        317
Source: 
>     uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), cur);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     crv_gauge_addr.deposit(cur);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        318
Source: 
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), cur);
>     crv_gauge_addr.deposit(cur);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(IERC20(lp_token_addr).balanceOf(address(this)) == 0, "deposit_to_gauge: unexpected exchanges");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        302
Source: 
>   function deposit_usdc(uint256 _amount) internal {
>     IERC20(usdc).transferFrom(msg.sender, address(this), _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(usdc).approve(address(pool_deposit), 0);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        303
Source: 
>     IERC20(usdc).transferFrom(msg.sender, address(this), _amount);
>     IERC20(usdc).approve(address(pool_deposit), 0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(usdc).approve(address(pool_deposit), _amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        304
Source: 
>     IERC20(usdc).approve(address(pool_deposit), 0);
>     IERC20(usdc).approve(address(pool_deposit), _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[4] memory uamounts = [0,0, _amount, 0];

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        306
Source: 
>     uint256[4] memory uamounts = [0,0, _amount, 0];
>     pool_deposit.add_liquidity(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         meta_pool_addr,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        327
Source: 
>     lp_balance = lp_balance - _amount;
>     IERC20(usdc).transfer(msg.sender, IERC20(usdc).balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        337
Source: 
>     require(_amount <= get_lp_token_balance(), "withdraw_from_curve: too large amount");
>     IERC20(lp_token_addr).approve(address(pool_deposit), _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     pool_deposit.remove_liquidity_one_coin(

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        338
Source: 
>     IERC20(lp_token_addr).approve(address(pool_deposit), _amount);
>     pool_deposit.remove_liquidity_one_coin(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         meta_pool_addr,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        332
Source: 
>     require(_amount <= lp_balance, "withdraw_from_gauge: insufficient amount");
>     crv_gauge_addr.withdraw(_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        348
Source: 
>     require(crv_minter_addr != MinterInterfaceERC20(0x0), "no crv minter");
>     crv_minter_addr.mint(address(crv_gauge_addr));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(crv_token_addr).transfer(msg.sender, IERC20(crv_token_addr).balanceOf(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        349
Source: 
>     crv_minter_addr.mint(address(crv_gauge_addr));
>     IERC20(crv_token_addr).transfer(msg.sender, IERC20(crv_token_addr).balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (extra_token_addr != address(0x0)) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        351
Source: 
>     if (extra_token_addr != address(0x0)) {
>       crv_gauge_addr.claim_rewards(address(this));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       IERC20(extra_token_addr).transfer(msg.sender, IERC20(extra_token_addr).balanceOf(address(this)));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        352
Source: 
>       crv_gauge_addr.claim_rewards(address(this));
>       IERC20(extra_token_addr).transfer(msg.sender, IERC20(extra_token_addr).balanceOf(address(this)));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AlusdPool
Line:        370
Source: 
>   function get_virtual_price() public view returns(uint256) {
>     return PriceInterfaceERC20(address(meta_pool_addr)).get_virtual_price();
>            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AlusdPool
Line:        260
Source: 
> 
>   address public controller;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public vault;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AlusdPool
Line:        261
Source: 
>   address public controller;
>   address public vault;
>   ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AlusdPool
Line:        269
Source: 
> 
>   uint256 public lp_balance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public deposit_usdc_amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AlusdPool
Line:        270
Source: 
>   uint256 public lp_balance;
>   uint256 public deposit_usdc_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public withdraw_usdc_amount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AlusdPool
Line:        256
Source: 
>   address public usdc;
>   address public extra_token_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public lp_token_addr;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    AlusdPool
Line:        271
Source: 
>   uint256 public deposit_usdc_amount;
>   uint256 public withdraw_usdc_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AlusdPool
Line:        293
Source: 
>   function deposit(uint256 _amount) public{
>     deposit_usdc_amount = deposit_usdc_amount + _amount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     deposit_usdc(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    AlusdPool
Line:        296
Source: 
>     uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));
>     lp_balance = lp_balance + cur;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     deposit_to_gauge();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        113
Source: 
>         IERC20 token = IERC20(_token);
>         uint balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        115
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        315
Source: 
>   function deposit_to_gauge() internal {
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), 0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        317
Source: 
>     uint256 cur = IERC20(lp_token_addr).balanceOf(address(this));
>     IERC20(lp_token_addr).approve(address(crv_gauge_addr), cur);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     crv_gauge_addr.deposit(cur);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        302
Source: 
>   function deposit_usdc(uint256 _amount) internal {
>     IERC20(usdc).transferFrom(msg.sender, address(this), _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(usdc).approve(address(pool_deposit), 0);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        303
Source: 
>     IERC20(usdc).transferFrom(msg.sender, address(this), _amount);
>     IERC20(usdc).approve(address(pool_deposit), 0);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IERC20(usdc).approve(address(pool_deposit), _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        304
Source: 
>     IERC20(usdc).approve(address(pool_deposit), 0);
>     IERC20(usdc).approve(address(pool_deposit), _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[4] memory uamounts = [0,0, _amount, 0];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        306
Source: 
>     uint256[4] memory uamounts = [0,0, _amount, 0];
>     pool_deposit.add_liquidity(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         meta_pool_addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        327
Source: 
>     lp_balance = lp_balance - _amount;
>     IERC20(usdc).transfer(msg.sender, IERC20(usdc).balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        337
Source: 
>     require(_amount <= get_lp_token_balance(), "withdraw_from_curve: too large amount");
>     IERC20(lp_token_addr).approve(address(pool_deposit), _amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     pool_deposit.remove_liquidity_one_coin(

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        338
Source: 
>     IERC20(lp_token_addr).approve(address(pool_deposit), _amount);
>     pool_deposit.remove_liquidity_one_coin(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         meta_pool_addr,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        349
Source: 
>     crv_minter_addr.mint(address(crv_gauge_addr));
>     IERC20(crv_token_addr).transfer(msg.sender, IERC20(crv_token_addr).balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     if (extra_token_addr != address(0x0)) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AlusdPool
Line:        352
Source: 
>       crv_gauge_addr.claim_rewards(address(this));
>       IERC20(extra_token_addr).transfer(msg.sender, IERC20(extra_token_addr).balanceOf(address(this)));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ICurvePool
Line:        19
Source: 
> 
>   string public name;
>   ^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    AlusdPool
Line:        271
Source: 
>   uint256 public deposit_usdc_amount;
>   uint256 public withdraw_usdc_amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
