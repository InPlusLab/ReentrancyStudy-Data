Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StrongWalletPresale
Line:        68
Source: 
>     address payable public owner;
>     uint public presaleAmount = 3000000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StrongWalletPresale
Line:        69
Source: 
>     uint public presaleAmount = 3000000 ether;
>     ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ERC20 public STRONG = ERC20(0xf217f7df49f626f83f40D7D5137D663B1ec4EE6E);

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    StrongWalletPresale
Line:        70
Source: 
>     ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);
>     ERC20 public STRONG = ERC20(0xf217f7df49f626f83f40D7D5137D663B1ec4EE6E);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ERC20 constant public ETH_TOKEN_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrongWalletPresale
Line:        124
Source: 
> 
>     function depositEthWithSeller(address _seller) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != _seller);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrongWalletPresale
Line:        135
Source: 
>     }
>     function depositUSDTWithSeller(uint256 _amountUsdt, address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != _seller);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StrongWalletPresale
Line:        150
Source: 
>     */
>     function withdraw(address _address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint tokenBalanceOfContract = getRemainingToken();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrongWalletPresale
Line:        97
Source: 
>     }
>     function USDT2Strong(uint _usdtAmount) public view returns(uint _amountStrong) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint rate = getRate(_usdtAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrongWalletPresale
Line:        106
Source: 
>     }
>     function ETH2STRONG(uint _amountETH) public view returns(uint _amountStrong) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 expectedRate = ETH2USDT();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrongWalletPresale
Line:        117
Source: 
>     }
>     function depositUSDT(uint256 _amountUsdt) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amountStrong = USDT2Strong(_amountUsdt);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrongWalletPresale
Line:        124
Source: 
> 
>     function depositEthWithSeller(address _seller) public payable {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != _seller);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrongWalletPresale
Line:        135
Source: 
>     }
>     function depositUSDTWithSeller(uint256 _amountUsdt, address _seller) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender != _seller);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StrongWalletPresale
Line:        150
Source: 
>     */
>     function withdraw(address _address) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint tokenBalanceOfContract = getRemainingToken();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StrongWalletPresale
Line:        89
Source: 
> 
>     function getRate(uint _usdtAmount) public view returns(uint _rate) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(_usdtAmount <= 100 ether) return rates[0];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        20
Source: 
>         }
>         c = a * b;
>             ^^^^^
>         assert(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrongWalletPresale
Line:        131
Source: 
>         uint bonusAmount = amountStrong.mul(bonusPercent).div(1000);
>         STRONG.transfer(_seller, bonusAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellers[_seller] += amountStrong;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    StrongWalletPresale
Line:        142
Source: 
>         uint bonusAmount = amountStrong.mul(bonusPercent).div(1000);
>         STRONG.transfer(_seller, bonusAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellers[_seller] += amountStrong;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrongWalletPresale
Line:        70
Source: 
>     ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);
>     ERC20 public STRONG = ERC20(0xf217f7df49f626f83f40D7D5137D663B1ec4EE6E);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ERC20 constant public ETH_TOKEN_ADDRESS = ERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrongWalletPresale
Line:        97
Source: 
>     }
>     function USDT2Strong(uint _usdtAmount) public view returns(uint _amountStrong) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint rate = getRate(_usdtAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrongWalletPresale
Line:        101
Source: 
>     }
>     function ETH2USDT() public view returns (uint _amountUsdt){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 expectedRate;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    StrongWalletPresale
Line:        106
Source: 
>     }
>     function ETH2STRONG(uint _amountETH) public view returns(uint _amountStrong) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 expectedRate = ETH2USDT();

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    StrongWalletPresale
Line:        73
Source: 
>     ERC20 constant public USDT_TOKEN_ADDRESS = ERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);
>     uint[] rates = [160, 150, 135, 125, 115, 100]; // decimal = 3
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint) public sellers;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    StrongWalletPresale
Line:        68
Source: 
>     address payable public owner;
>     uint public presaleAmount = 3000000 ether;
>                                 ^^^^^^^^^^^^^
>     ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    StrongWalletPresale
Line:        113
Source: 
>         uint256 amountStrong = ETH2STRONG(msg.value);
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         STRONG.transfer(msg.sender, amountStrong);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    StrongWalletPresale
Line:        113
Source: 
>         uint256 amountStrong = ETH2STRONG(msg.value);
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         STRONG.transfer(msg.sender, amountStrong);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    StrongWalletPresale
Line:        119
Source: 
>         uint256 amountStrong = USDT2Strong(_amountUsdt);
>         require(USDT_TOKEN_ADDRESS.transferFrom(msg.sender, owner, _amountUsdt));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         STRONG.transfer(msg.sender, amountStrong);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrongWalletPresale
Line:        103
Source: 
>         uint256 expectedRate;
>         (expectedRate,) = proxyKyberSwap.getExpectedRate(ETH_TOKEN_ADDRESS, USDT_TOKEN_ADDRESS, 1 ether);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return expectedRate;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrongWalletPresale
Line:        114
Source: 
>         owner.transfer(msg.value);
>         STRONG.transfer(msg.sender, amountStrong);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DepositETH(msg.sender, msg.value, amountStrong);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrongWalletPresale
Line:        120
Source: 
>         require(USDT_TOKEN_ADDRESS.transferFrom(msg.sender, owner, _amountUsdt));
>         STRONG.transfer(msg.sender, amountStrong);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DepositUSDT(msg.sender, _amountUsdt, amountStrong);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrongWalletPresale
Line:        131
Source: 
>         uint bonusAmount = amountStrong.mul(bonusPercent).div(1000);
>         STRONG.transfer(_seller, bonusAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellers[_seller] += amountStrong;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrongWalletPresale
Line:        142
Source: 
>         uint bonusAmount = amountStrong.mul(bonusPercent).div(1000);
>         STRONG.transfer(_seller, bonusAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellers[_seller] += amountStrong;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrongWalletPresale
Line:        152
Source: 
>         uint tokenBalanceOfContract = getRemainingToken();
>         STRONG.transfer(_address, tokenBalanceOfContract);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogWithdrawal(_address, tokenBalanceOfContract);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    StrongWalletPresale
Line:        161
Source: 
>     function getRemainingToken() public view returns (uint256) {
>         return STRONG.balanceOf(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    StrongWalletPresale
Line:        113
Source: 
>         uint256 amountStrong = ETH2STRONG(msg.value);
>         owner.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         STRONG.transfer(msg.sender, amountStrong);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrongWalletPresale
Line:        114
Source: 
>         owner.transfer(msg.value);
>         STRONG.transfer(msg.sender, amountStrong);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DepositETH(msg.sender, msg.value, amountStrong);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrongWalletPresale
Line:        120
Source: 
>         require(USDT_TOKEN_ADDRESS.transferFrom(msg.sender, owner, _amountUsdt));
>         STRONG.transfer(msg.sender, amountStrong);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit DepositUSDT(msg.sender, _amountUsdt, amountStrong);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrongWalletPresale
Line:        131
Source: 
>         uint bonusAmount = amountStrong.mul(bonusPercent).div(1000);
>         STRONG.transfer(_seller, bonusAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellers[_seller] += amountStrong;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrongWalletPresale
Line:        142
Source: 
>         uint bonusAmount = amountStrong.mul(bonusPercent).div(1000);
>         STRONG.transfer(_seller, bonusAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sellers[_seller] += amountStrong;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    StrongWalletPresale
Line:        152
Source: 
>         uint tokenBalanceOfContract = getRemainingToken();
>         STRONG.transfer(_address, tokenBalanceOfContract);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit LogWithdrawal(_address, tokenBalanceOfContract);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    StrongWalletPresale
Line:        68
Source: 
>     address payable public owner;
>     uint public presaleAmount = 3000000 ether;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     ProxyKyberSwap public proxyKyberSwap = ProxyKyberSwap(0x818E6FECD516Ecc3849DAf6845e3EC868087B755);

[0m
