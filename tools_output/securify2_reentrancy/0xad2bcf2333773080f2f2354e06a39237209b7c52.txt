Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DASHTOKEN
Line:        98
Source: 
> 		uint secondsGone = now.sub(user.timestamp);
> 		if (secondsGone == 0 || user.timestamp == 0) return;
>       ^^^^^^^^^^^^^^^^
> 		if(now < startDate) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        263
Source: 
> 	function mul(uint256 a, uint256 b) internal pure returns (uint256) {
> 		if (a == 0) {
>       ^^^^^^
> 			return 0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    SafeMath
Line:        268
Source: 
> 		uint256 c = a * b;
> 		require(c / a == b);
>           ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DASHTOKEN
Line:        62
Source: 
> 	
> 	function getRefLink(address addr) public view returns(uint){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[addr].refLink;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DASHTOKEN
Line:        147
Source: 
> 
> 	function deposit(uint32 refLink) public payable {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.value >= minDeposit);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DASHTOKEN
Line:        218
Source: 
> 
> 	function _changeOwner(address payable newOwner) external restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner = newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DASHTOKEN
Line:        246
Source: 
> 	
> 	function _setStartDate(uint newStartDate) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		startDate = newStartDate;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DASHTOKEN
Line:        250
Source: 
> 	
> 	function _setOwnersPart(uint newPart) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ownersPart = newPart;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DASHTOKEN
Line:        62
Source: 
> 	
> 	function getRefLink(address addr) public view returns(uint){
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return users[addr].refLink;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DASHTOKEN
Line:        223
Source: 
> 	
> 	function _setTiers(uint newTier1, uint newTier2) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		tierPrices[1] = newTier1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DASHTOKEN
Line:        228
Source: 
> 	
> 	function _setRates(uint rate0, uint rate1, uint rate2) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		rates[0] = rate0;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DASHTOKEN
Line:        234
Source: 
> 	
> 	function _setRefReward(uint reward1, uint reward2, uint reward3, uint reward4) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		refReward[0] = reward1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DASHTOKEN
Line:        254
Source: 
> 	
> 	function _setLastRefLink(uint32 newRefLink) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lastRefLink = newRefLink;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DASHTOKEN
Line:        119
Source: 
> 			users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
> 			inviter1.transfer(reward1);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DASHTOKEN
Line:        126
Source: 
> 			users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
> 			inviter2.transfer(reward2);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    DASHTOKEN
Line:        133
Source: 
> 			users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
> 			inviter3.transfer(reward3);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        214
Source: 
> 	
>     function _fallback() external restricted {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		msg.sender.transfer(address(this).balance);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        218
Source: 
> 
> 	function _changeOwner(address payable newOwner) external restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner = newOwner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        223
Source: 
> 	
> 	function _setTiers(uint newTier1, uint newTier2) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		tierPrices[1] = newTier1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        228
Source: 
> 	
> 	function _setRates(uint rate0, uint rate1, uint rate2) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		rates[0] = rate0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        234
Source: 
> 	
> 	function _setRefReward(uint reward1, uint reward2, uint reward3, uint reward4) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		refReward[0] = reward1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        241
Source: 
> 	
> 	function _setMinDeposit(uint newMinDeposit) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(newMinDeposit >= 0.005 ether);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        246
Source: 
> 	
> 	function _setStartDate(uint newStartDate) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		startDate = newStartDate;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        250
Source: 
> 	
> 	function _setOwnersPart(uint newPart) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		ownersPart = newPart;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DASHTOKEN
Line:        254
Source: 
> 	
> 	function _setLastRefLink(uint32 newRefLink) external payable restricted {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		lastRefLink = newRefLink;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.4;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DASHTOKEN
Line:        119
Source: 
> 			users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
> 			inviter1.transfer(reward1);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DASHTOKEN
Line:        126
Source: 
> 			users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
> 			inviter2.transfer(reward2);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DASHTOKEN
Line:        133
Source: 
> 			users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
> 			inviter3.transfer(reward3);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DASHTOKEN
Line:        140
Source: 
> 			users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
> 			inviter4.transfer(reward4);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DASHTOKEN
Line:        144
Source: 
> 		if (refSum == 0) return;
> 		owner.transfer(amount.mul(refSum).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DASHTOKEN
Line:        171
Source: 
> 		user.investment = user.investment.add(msg.value);
> 		owner.transfer(msg.value.mul(ownersPart).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    DASHTOKEN
Line:        185
Source: 
> 		totalInvested = totalInvested.add(amount);
> 		owner.transfer(amount.mul(ownersPart).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        197
Source: 
> 		user.balance = 0;
> 		msg.sender.transfer(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        215
Source: 
>     function _fallback() external restricted {
> 		msg.sender.transfer(address(this).balance);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        119
Source: 
> 			users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
> 			inviter1.transfer(reward1);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        126
Source: 
> 			users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
> 			inviter2.transfer(reward2);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        133
Source: 
> 			users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
> 			inviter3.transfer(reward3);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        140
Source: 
> 			users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
> 			inviter4.transfer(reward4);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        144
Source: 
> 		if (refSum == 0) return;
> 		owner.transfer(amount.mul(refSum).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        171
Source: 
> 		user.investment = user.investment.add(msg.value);
> 		owner.transfer(msg.value.mul(ownersPart).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        185
Source: 
> 		totalInvested = totalInvested.add(amount);
> 		owner.transfer(amount.mul(ownersPart).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DASHTOKEN
Line:        207
Source: 
> 		user.tier++;
> 		owner.transfer(msg.value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        119
Source: 
> 			users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
> 			inviter1.transfer(reward1);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        126
Source: 
> 			users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
> 			inviter2.transfer(reward2);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        133
Source: 
> 			users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
> 			inviter3.transfer(reward3);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        140
Source: 
> 			users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
> 			inviter4.transfer(reward4);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        144
Source: 
> 		if (refSum == 0) return;
> 		owner.transfer(amount.mul(refSum).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        171
Source: 
> 		user.investment = user.investment.add(msg.value);
> 		owner.transfer(msg.value.mul(ownersPart).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        185
Source: 
> 		totalInvested = totalInvested.add(amount);
> 		owner.transfer(amount.mul(ownersPart).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        197
Source: 
> 		user.balance = 0;
> 		msg.sender.transfer(amount);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        207
Source: 
> 		user.tier++;
> 		owner.transfer(msg.value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DASHTOKEN
Line:        215
Source: 
>     function _fallback() external restricted {
> 		msg.sender.transfer(address(this).balance);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DASHTOKEN
Line:        119
Source: 
> 			users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
> 			inviter1.transfer(reward1);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DASHTOKEN
Line:        126
Source: 
> 			users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
> 			inviter2.transfer(reward2);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DASHTOKEN
Line:        133
Source: 
> 			users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
> 			inviter3.transfer(reward3);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DASHTOKEN
Line:        140
Source: 
> 			users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
> 			inviter4.transfer(reward4);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DASHTOKEN
Line:        144
Source: 
> 		if (refSum == 0) return;
> 		owner.transfer(amount.mul(refSum).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    DASHTOKEN
Line:        171
Source: 
> 		user.investment = user.investment.add(msg.value);
> 		owner.transfer(msg.value.mul(ownersPart).div(100));
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        100
Source: 
> 		if(now < startDate) {
> 			user.timestamp = startDate;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		} else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        103
Source: 
> 			uint profit = user.investment.mul(secondsGone).mul(rates[user.tier]).div(1e12);
> 			user.balance = user.balance.add(profit);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			user.timestamp = user.timestamp.add(secondsGone);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        104
Source: 
> 			user.balance = user.balance.add(profit);
> 			user.timestamp = user.timestamp.add(secondsGone);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        118
Source: 
> 			uint reward1 = amount.mul(refReward[0]).div(100);
> 			users[inviter1].totalRefReward = users[inviter1].totalRefReward.add(reward1);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			inviter1.transfer(reward1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        125
Source: 
> 			uint reward2 = amount.mul(refReward[1]).div(100);
> 			users[inviter2].totalRefReward = users[inviter2].totalRefReward.add(reward2);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			inviter2.transfer(reward2);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        132
Source: 
> 			uint reward3 = amount.mul(refReward[2]).div(100);
> 			users[inviter3].totalRefReward = users[inviter3].totalRefReward.add(reward3);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			inviter3.transfer(reward3);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        139
Source: 
> 			uint reward4 = amount.mul(refReward[3]).div(100);
> 			users[inviter4].totalRefReward = users[inviter4].totalRefReward.add(reward4);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			inviter4.transfer(reward4);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        169
Source: 
> 
> 		totalInvested = totalInvested.add(msg.value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		user.investment = user.investment.add(msg.value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    DASHTOKEN
Line:        170
Source: 
> 		totalInvested = totalInvested.add(msg.value);
> 		user.investment = user.investment.add(msg.value);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		owner.transfer(msg.value.mul(ownersPart).div(100));

[0m
