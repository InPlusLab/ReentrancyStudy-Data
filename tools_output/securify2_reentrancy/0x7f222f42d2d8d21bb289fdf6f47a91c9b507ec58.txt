Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        106
Source: 
>   // ERC-20 Methods
>   function name() public pure returns (string memory) { return "EL20 - Bet on US Presidential Election 2020"; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function symbol() public pure returns (string memory) { return "EL20"; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        107
Source: 
>   function name() public pure returns (string memory) { return "EL20 - Bet on US Presidential Election 2020"; }
>   function symbol() public pure returns (string memory) { return "EL20"; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function decimals() public pure returns (uint8) { return 18; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        108
Source: 
>   function symbol() public pure returns (string memory) { return "EL20"; }
>   function decimals() public pure returns (uint8) { return 18; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function totalSupply() public pure returns (uint256) { return 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        109
Source: 
>   function decimals() public pure returns (uint8) { return 18; }
>   function totalSupply() public pure returns (uint256) { return 0; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transfer(address, uint256) public pure returns (bool success) { return false; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        110
Source: 
>   function totalSupply() public pure returns (uint256) { return 0; }
>   function transfer(address, uint256) public pure returns (bool success) { return false; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transferFrom(address, address, uint256) public pure returns (bool success) { return false; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        111
Source: 
>   function transfer(address, uint256) public pure returns (bool success) { return false; }
>   function transferFrom(address, address, uint256) public pure returns (bool success) { return false; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function approve(address, uint256) public pure returns (bool success) { return false; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        112
Source: 
>   function transferFrom(address, address, uint256) public pure returns (bool success) { return false; }
>   function approve(address, uint256) public pure returns (bool success) { return false; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function allowance(address, address) public pure returns (uint256 remaining) { return 0; }

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        113
Source: 
>   function approve(address, uint256) public pure returns (bool success) { return false; }
>   function allowance(address, address) public pure returns (uint256 remaining) { return 0; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    election2020
Line:        115
Source: 
> 
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return betsTrump[_owner] + betsBiden[_owner];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    election2020
Line:        33
Source: 
>    */
>   function setElectionDay(uint256 _electionDay) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(tx.origin == owner && 0 == electionResult);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    election2020
Line:        57
Source: 
>    */
>   function setElectionResult(uint8 _electionResult) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(tx.origin == owner && 0 == electionResult);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    election2020
Line:        95
Source: 
> 
>   function setDAppURL(string memory _dappURL) external {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(tx.origin == owner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    election2020
Line:        110
Source: 
>   function totalSupply() public pure returns (uint256) { return 0; }
>   function transfer(address, uint256) public pure returns (bool success) { return false; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function transferFrom(address, address, uint256) public pure returns (bool success) { return false; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    election2020
Line:        111
Source: 
>   function transfer(address, uint256) public pure returns (bool success) { return false; }
>   function transferFrom(address, address, uint256) public pure returns (bool success) { return false; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function approve(address, uint256) public pure returns (bool success) { return false; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    election2020
Line:        112
Source: 
>   function transferFrom(address, address, uint256) public pure returns (bool success) { return false; }
>   function approve(address, uint256) public pure returns (bool success) { return false; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function allowance(address, address) public pure returns (uint256 remaining) { return 0; }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    election2020
Line:        113
Source: 
>   function approve(address, uint256) public pure returns (bool success) { return false; }
>   function allowance(address, address) public pure returns (uint256 remaining) { return 0; }
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    election2020
Line:        115
Source: 
> 
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return betsTrump[_owner] + betsBiden[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    election2020
Line:        78
Source: 
>     if (1 == electionResult) { // Biden won
>       win = ((betsBiden[tx.origin] * (100000 * betsTrumpTotal / betsBidenTotal)) / 100000) + betsBiden[tx.origin];
>                                       ^^^^^^^^^^^^^^^^^^^^^^^
>     } else { // Trump won

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    election2020
Line:        78
Source: 
>     if (1 == electionResult) { // Biden won
>       win = ((betsBiden[tx.origin] * (100000 * betsTrumpTotal / betsBidenTotal)) / 100000) + betsBiden[tx.origin];
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else { // Trump won

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    election2020
Line:        80
Source: 
>     } else { // Trump won
>       win = ((betsTrump[tx.origin] * (100000 * betsBidenTotal / betsTrumpTotal)) / 100000) + betsTrump[tx.origin];
>                                       ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    election2020
Line:        80
Source: 
>     } else { // Trump won
>       win = ((betsTrump[tx.origin] * (100000 * betsBidenTotal / betsTrumpTotal)) / 100000) + betsTrump[tx.origin];
>               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    election2020
Line:        34
Source: 
>   function setElectionDay(uint256 _electionDay) external {
>     require(tx.origin == owner && 0 == electionResult);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     electionDay = _electionDay;

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    election2020
Line:        58
Source: 
>   function setElectionResult(uint8 _electionResult) external {
>     require(tx.origin == owner && 0 == electionResult);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     electionResult = _electionResult;

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    election2020
Line:        66
Source: 
>   function withdrawFees() external {
>     require(tx.origin == owner && electionResult != 0, "Election not complete!");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     owner.transfer(fees);

[0m
[0;31mSeverity:    HIGH
Pattern:     Possibly unsafe usage of tx-origin
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    election2020
Line:        96
Source: 
>   function setDAppURL(string memory _dappURL) external {
>     require(tx.origin == owner);
>             ^^^^^^^^^^^^^^^^^^
>     dappURL = _dappURL;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    election2020
Line:        67
Source: 
>     require(tx.origin == owner && electionResult != 0, "Election not complete!");
>     owner.transfer(fees);
>     ^^^^^^^^^^^^^^^^^^^^
>     fees = 0;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    election2020
Line:        3
Source: 
> 
> contract election2020 {
> ^^^^^^^^^^^^^^^^^^^^^^^
>   address payable public owner;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    election2020
Line:        5
Source: 
>   address payable public owner;
>   uint256 constant public feePerc = 5;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => uint256) public betsBiden;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1
Source: 
> pragma solidity >=0.4.21 <=0.7.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 
> contract election2020 {

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    election2020
Line:        78
Source: 
>     if (1 == electionResult) { // Biden won
>       win = ((betsBiden[tx.origin] * (100000 * betsTrumpTotal / betsBidenTotal)) / 100000) + betsBiden[tx.origin];
>                                       ^^^^^^
>     } else { // Trump won

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    election2020
Line:        78
Source: 
>     if (1 == electionResult) { // Biden won
>       win = ((betsBiden[tx.origin] * (100000 * betsTrumpTotal / betsBidenTotal)) / 100000) + betsBiden[tx.origin];
>                                                                                    ^^^^^^
>     } else { // Trump won

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    election2020
Line:        80
Source: 
>     } else { // Trump won
>       win = ((betsTrump[tx.origin] * (100000 * betsBidenTotal / betsTrumpTotal)) / 100000) + betsTrump[tx.origin];
>                                       ^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    election2020
Line:        80
Source: 
>     } else { // Trump won
>       win = ((betsTrump[tx.origin] * (100000 * betsBidenTotal / betsTrumpTotal)) / 100000) + betsTrump[tx.origin];
>                                                                                    ^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    election2020
Line:        67
Source: 
>     require(tx.origin == owner && electionResult != 0, "Election not complete!");
>     owner.transfer(fees);
>     ^^^^^^^^^^^^^^^^^^^^
>     fees = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    election2020
Line:        84
Source: 
>     betsTrump[tx.origin] = 0;
>     tx.origin.transfer(win);
>     ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    election2020
Line:        67
Source: 
>     require(tx.origin == owner && electionResult != 0, "Election not complete!");
>     owner.transfer(fees);
>     ^^^^^^^^^^^^^^^^^^^^
>     fees = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    election2020
Line:        67
Source: 
>     require(tx.origin == owner && electionResult != 0, "Election not complete!");
>     owner.transfer(fees);
>     ^^^^^^^^^^^^^^^^^^^^
>     fees = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    election2020
Line:        84
Source: 
>     betsTrump[tx.origin] = 0;
>     tx.origin.transfer(win);
>     ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    election2020
Line:        7
Source: 
>   mapping (address => uint256) public betsBiden;
>   uint256 public betsBidenTotal;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping (address => uint256) public betsTrump;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    election2020
Line:        9
Source: 
>   mapping (address => uint256) public betsTrump;
>   uint256 public betsTrumpTotal;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public fees;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    election2020
Line:        10
Source: 
>   uint256 public betsTrumpTotal;
>   uint256 public fees;
>   ^^^^^^^^^^^^^^^^^^^
>   uint8 public electionResult; // 0 - election not completed, 1 - Biden won, 2 - Trump won

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    election2020
Line:        11
Source: 
>   uint256 public fees;
>   uint8 public electionResult; // 0 - election not completed, 1 - Biden won, 2 - Trump won
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public dappURL;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    election2020
Line:        12
Source: 
>   uint8 public electionResult; // 0 - election not completed, 1 - Biden won, 2 - Trump won
>   string public dappURL;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint256 public electionDay = 1604379600; // 11/3/2020 12:00:00 AM EST

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    election2020
Line:        67
Source: 
>     require(tx.origin == owner && electionResult != 0, "Election not complete!");
>     owner.transfer(fees);
>     ^^^^^^^^^^^^^^^^^^^^
>     fees = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    election2020
Line:        84
Source: 
>     betsTrump[tx.origin] = 0;
>     tx.origin.transfer(win);
>     ^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        35
Source: 
>     require(tx.origin == owner && 0 == electionResult);
>     electionDay = _electionDay;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        41
Source: 
>     uint256 fee = (msg.value * feePerc) / 100;
>     fees += fee;
>     ^^^^^^^^^^^
>     betsBidenTotal += msg.value - fee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        42
Source: 
>     fees += fee;
>     betsBidenTotal += msg.value - fee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     betsBiden[tx.origin] = betsBiden[tx.origin] + msg.value - fee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        43
Source: 
>     betsBidenTotal += msg.value - fee;
>     betsBiden[tx.origin] = betsBiden[tx.origin] + msg.value - fee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        49
Source: 
>     uint256 fee = (msg.value * feePerc) / 100;
>     fees += fee;
>     ^^^^^^^^^^^
>     betsTrumpTotal += msg.value - fee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        50
Source: 
>     fees += fee;
>     betsTrumpTotal += msg.value - fee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     betsTrump[tx.origin] = betsTrump[tx.origin] + msg.value - fee;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        51
Source: 
>     betsTrumpTotal += msg.value - fee;
>     betsTrump[tx.origin] = betsTrump[tx.origin] + msg.value - fee;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        59
Source: 
>     require(tx.origin == owner && 0 == electionResult);
>     electionResult = _electionResult;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        68
Source: 
>     owner.transfer(fees);
>     fees = 0;
>     ^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        82
Source: 
>     }
>     betsBiden[tx.origin] = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     betsTrump[tx.origin] = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        83
Source: 
>     betsBiden[tx.origin] = 0;
>     betsTrump[tx.origin] = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     tx.origin.transfer(win);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    election2020
Line:        97
Source: 
>     require(tx.origin == owner);
>     dappURL = _dappURL;
>     ^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    election2020
Line:        12
Source: 
>   uint8 public electionResult; // 0 - election not completed, 1 - Biden won, 2 - Trump won
>   string public dappURL;
>   ^^^^^^^^^^^^^^^^^^^^^
>   uint256 public electionDay = 1604379600; // 11/3/2020 12:00:00 AM EST

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    election2020
Line:        39
Source: 
>   function betOnBiden() external payable {
>     require(block.timestamp < electionDay, "Too late - election has started!");
>             ^^^^^^^^^^^^^^^
>     uint256 fee = (msg.value * feePerc) / 100;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    election2020
Line:        47
Source: 
>   function betOnTrump() external payable {
>     require(block.timestamp < electionDay, "Too late - election has started!");
>             ^^^^^^^^^^^^^^^
>     uint256 fee = (msg.value * feePerc) / 100;

[0m
