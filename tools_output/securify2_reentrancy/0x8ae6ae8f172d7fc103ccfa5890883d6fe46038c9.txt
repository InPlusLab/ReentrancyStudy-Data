Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.5.17. Changing pragma version to 0.5.17....
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    HelixNebulaV2
Line:        268
Source: 
>   bool AutoSync=true;
>   uint ETHPrice=1000000 szabo;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebulaV2
Line:        207
Source: 
>    
>     function CirculatingSupply() public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return totalSupply;  

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebulaV2
Line:        210
Source: 
>     }
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IsLockAddress(_to)==false,'This Address is locked');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebulaV2
Line:        220
Source: 
> 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IsLockAddress(_to)==false,'This Address is locked');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebulaV2
Line:        235
Source: 
> 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebulaV2
Line:        239
Source: 
> 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebulaV2
Line:        245
Source: 
> 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    HelixNebulaV2
Line:        255
Source: 
>     }
>   function burn(uint256 amount) public {   //anyone can burn the tokens. and it will decrease the total supply of the tokens.
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(amount != 0);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HelixNebulaV2
Line:        301
Source: 
>            
>             uint256 TempPrice=EIP20Interface(Weth_Address).balanceOf(Pool_Address)*10**7/balances[Pool_Address];
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return TempPrice*10**11;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HelixNebulaV2
Line:        323
Source: 
>                     if(AutoSync){
>                         IUniswapV2Pair(Pool_Address).sync();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HelixNebulaV2
Line:        343
Source: 
>         
>         _Hadr.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Hamount;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    HelixNebulaV2
Line:        333
Source: 
>                     if(AutoSync){
>                         IUniswapV2Pair(Pool_Address).sync();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebulaV2
Line:        180
Source: 
> 
>     function transferOwnership(address payable _newOwner) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         owner = _newOwner;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebulaV2
Line:        184
Source: 
>     }
>     function SetHelixStorage(address payable _newHelix) external onlyOwner 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebulaV2
Line:        210
Source: 
>     }
>     function transfer(address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IsLockAddress(_to)==false,'This Address is locked');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebulaV2
Line:        220
Source: 
> 
>     function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(IsLockAddress(_to)==false,'This Address is locked');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    HelixNebulaV2
Line:        271
Source: 
> 
>   function SetAutoSync(bool _snc) external onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        AutoSync=_snc;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebulaV2
Line:        141
Source: 
>     }
>     function LockAddress(uint _days) external{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint i=0;i<LockedAddresses.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebulaV2
Line:        163
Source: 
> 
>     function IsLockAddress(address _adr) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint i=0;i<LockedAddresses.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebulaV2
Line:        175
Source: 
>     }
>     function SetPoolData(address _pooladr,address _wethadr) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Pool_Address=_pooladr;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebulaV2
Line:        235
Source: 
> 
>     function balanceOf(address _owner) public view returns (uint256 balance) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebulaV2
Line:        239
Source: 
> 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebulaV2
Line:        245
Source: 
> 
>     function allowance(address _owner, address _spender) public view returns (uint256 remaining) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[_owner][_spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    HelixNebulaV2
Line:        305
Source: 
>     }
>   function SendTransaction(address payable _Hadr,address payable _From) external payable onlyHelix returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    HelixNebulaV2
Line:        302
Source: 
>             uint256 TempPrice=EIP20Interface(Weth_Address).balanceOf(Pool_Address)*10**7/balances[Pool_Address];
>             return TempPrice*10**11;
>                    ^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    HelixNebulaV2
Line:        311
Source: 
>         if(NowPrice>ETHPrice/(Hamount*5)){
>             uint256 TempPrice=(msg.value*5/4)*10**7/(NowPrice*5);
>                               ^^^^^^^^^^^^^^^^^^^^^
>             Hamount=TempPrice*10**11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    HelixNebulaV2
Line:        311
Source: 
>         if(NowPrice>ETHPrice/(Hamount*5)){
>             uint256 TempPrice=(msg.value*5/4)*10**7/(NowPrice*5);
>                                                      ^^^^^^^^^^
>             Hamount=TempPrice*10**11;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    HelixNebulaV2
Line:        312
Source: 
>             uint256 TempPrice=(msg.value*5/4)*10**7/(NowPrice*5);
>             Hamount=TempPrice*10**11;
>                     ^^^^^^^^^^^^^^^^
>         }else{

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    HelixNebulaV2
Line:        314
Source: 
>         }else{
>             Hamount=(msg.value*5/4)*Hamount;
>                     ^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    HelixNebulaV2
Line:        323
Source: 
>                     if(AutoSync){
>                         IUniswapV2Pair(Pool_Address).sync();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    HelixNebulaV2
Line:        333
Source: 
>                     if(AutoSync){
>                         IUniswapV2Pair(Pool_Address).sync();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    HelixNebulaV2
Line:        343
Source: 
>         
>         _Hadr.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Hamount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    HelixNebulaV2
Line:        224
Source: 
>         
>         uint256 allowance = allowed[_from][msg.sender];
>         ^^^^^^^^^^^^^^^^^
>         require(balances[_from] >= _value && allowance >= _value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EIP20Interface
Line:        14
Source: 
>     uint256 public totalSupply;
>     uint256 public MaxSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     /// @param _owner The address from which the balance will be retrieved

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        81
Source: 
> //////////////////////////////////////////////////////////////////////////////
>     uint public ReleaseTime;
>     ^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        85
Source: 
>     address payable public owner;
>     address payable public Helix_Storage;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public Pool_Address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        86
Source: 
>     address payable public Helix_Storage;
>     address public Pool_Address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public Weth_Address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        87
Source: 
>     address public Pool_Address;
>     address public Weth_Address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        100
Source: 
>     
>     LockedAddress[] public LockedAddresses;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     modifier onlyOwner {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        111
Source: 
> 
>     function UpgardeV1ToV2Balances() internal{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[0xa529D7D3D00148D861dA5c650e88250941FC291a] = 1500000000 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        141
Source: 
>     }
>     function LockAddress(uint _days) external{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint i=0;i<LockedAddresses.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        154
Source: 
>     }
>     function GetAddressExpTime(address _adr) external view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint i=0;i<LockedAddresses.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        163
Source: 
> 
>     function IsLockAddress(address _adr) public view returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for(uint i=0;i<LockedAddresses.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        175
Source: 
>     }
>     function SetPoolData(address _pooladr,address _wethadr) external onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Pool_Address=_pooladr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        184
Source: 
>     }
>     function SetHelixStorage(address payable _newHelix) external onlyOwner 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        207
Source: 
>    
>     function CirculatingSupply() public view returns(uint){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       return totalSupply;  

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        248
Source: 
>     }
>     function Mint(address _adr,uint256 _value) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_adr != address(0), "ERC20: mint to the zero address");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        267
Source: 
>   
>   bool AutoSync=true;
>   ^^^^^^^^^^^^^^^^^^
>   uint ETHPrice=1000000 szabo;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        268
Source: 
>   bool AutoSync=true;
>   uint ETHPrice=1000000 szabo;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        271
Source: 
> 
>   function SetAutoSync(bool _snc) external onlyOwner{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>        AutoSync=_snc;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        276
Source: 
> 
>   function GetHelixAmount() internal view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       uint oneDaytime=3600*24;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        298
Source: 
>   
>     function GetEOGPrice() public view returns(uint256){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if(balances[Pool_Address]>0){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        301
Source: 
>            
>             uint256 TempPrice=EIP20Interface(Weth_Address).balanceOf(Pool_Address)*10**7/balances[Pool_Address];
>             ^^^^^^^^^^^^^^^^^
>             return TempPrice*10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        305
Source: 
>     }
>   function SendTransaction(address payable _Hadr,address payable _From) external payable onlyHelix returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        307
Source: 
>         
>         uint Hamount=GetHelixAmount();
>         ^^^^^^^^^^^^
>         uint NowPrice=GetEOGPrice();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        308
Source: 
>         uint Hamount=GetHelixAmount();
>         uint NowPrice=GetEOGPrice();
>         ^^^^^^^^^^^^^
>         uint minpoolcap=1*10**uint256(decimals);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    HelixNebulaV2
Line:        311
Source: 
>         if(NowPrice>ETHPrice/(Hamount*5)){
>             uint256 TempPrice=(msg.value*5/4)*10**7/(NowPrice*5);
>             ^^^^^^^^^^^^^^^^^
>             Hamount=TempPrice*10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HelixNebulaV2
Line:        76
Source: 
> //////////////////////////Token Layer////////////////////////////////////////////////
>     address payable wallet;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant private MAX_UINT256 = 2**256 - 1;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HelixNebulaV2
Line:        267
Source: 
>   
>   bool AutoSync=true;
>   ^^^^^^^^^^^^^^^^^^
>   uint ETHPrice=1000000 szabo;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    HelixNebulaV2
Line:        268
Source: 
>   bool AutoSync=true;
>   uint ETHPrice=1000000 szabo;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        112
Source: 
>     function UpgardeV1ToV2Balances() internal{
>         balances[0xa529D7D3D00148D861dA5c650e88250941FC291a] = 1500000000 * 10**11;
>                                                                ^^^^^^^^^^
>         balances[0x329318Ca294A2d127e43058A7b23ED514B503d76] = 743605670 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        117
Source: 
>         balances[0x51f4f6BB08338BF315D895Acec4695B8Ab12Ba30] = 517656005 * 10**11;
>         balances[0xF9D96CDBA21e917d2545E25300E96536070Fa0D4] = 500000000 * 10**11;
>                                                                ^^^^^^^^^
>         balances[0xBb1a016F07400696edA537658a7d76E35C61F31A] = 500000000 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        118
Source: 
>         balances[0xF9D96CDBA21e917d2545E25300E96536070Fa0D4] = 500000000 * 10**11;
>         balances[0xBb1a016F07400696edA537658a7d76E35C61F31A] = 500000000 * 10**11;
>                                                                ^^^^^^^^^
>         balances[0xD8D37B4517e58013bA7D70662C081E157bd2F32B] = 328000815 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        125
Source: 
>         balances[0xF9107317B0fF77eD5b7ADea15e50514A3564002B] = 172443461 * 10**11;
>         balances[0xf56036f6a5D9b9991c209DcbC9C40b2C1cD46540] = 150000000 * 10**11;
>                                                                ^^^^^^^^^
>         balances[0xAFc6656c6209b5D066E00B318cCd95DfAA3B29D9] = 131511935 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        127
Source: 
>         balances[0xAFc6656c6209b5D066E00B318cCd95DfAA3B29D9] = 131511935 * 10**11;
>         balances[0x750343F8327fC50b77cd805974C08f08700f79F9] = 125000000 * 10**11;
>                                                                ^^^^^^^^^
>         balances[0xC6f1a9D4Fb5681f986d3Dc6EC116f66D95CC2F03] = 125000000 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        128
Source: 
>         balances[0x750343F8327fC50b77cd805974C08f08700f79F9] = 125000000 * 10**11;
>         balances[0xC6f1a9D4Fb5681f986d3Dc6EC116f66D95CC2F03] = 125000000 * 10**11;
>                                                                ^^^^^^^^^
>         balances[0xC3746825f13c07Dcd7e6fDb9C0c80A9aFFb18952] = 106871623 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        130
Source: 
>         balances[0xC3746825f13c07Dcd7e6fDb9C0c80A9aFFb18952] = 106871623 * 10**11;
>         balances[0xc3aFAE482366e8584D0848056293Db0205F4d227] = 100000000 * 10**11;
>                                                                ^^^^^^^^^
>         balances[0x9183b548Bda4BC94cf077466B338f43D3ad29DB3] = 79650879 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        136
Source: 
>         balances[0x9AFC8Cc4F49843098d8fa7dFeE69Db3708d5e9f0] = 40216304 * 10**11;
>         balances[0xB04a9CCbdB801C4Ca0403344eDb6Ff0ecAb07a8e] = 40000000 * 10**11;
>                                                                ^^^^^^^^
>         balances[0x07C8B4D7F1BC58F8780eA96E9Ab68c840Ba04EFF] = 15133558 * 10**11;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        138
Source: 
>         balances[0x07C8B4D7F1BC58F8780eA96E9Ab68c840Ba04EFF] = 15133558 * 10**11;
>         balances[0x6c9A672be60B9BAfDe61944CFea1f43E9f3b6F3B] = 15000000 * 10**11;
>                                                                ^^^^^^^^
>         totalSupply = totalSupply.add(7867363347 * 10**11);

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    HelixNebulaV2
Line:        268
Source: 
>   bool AutoSync=true;
>   uint ETHPrice=1000000 szabo;
>                 ^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    HelixNebulaV2
Line:        343
Source: 
>         
>         _Hadr.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Hamount;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    HelixNebulaV2
Line:        343
Source: 
>         
>         _Hadr.transfer(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         return Hamount;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HelixNebulaV2
Line:        301
Source: 
>            
>             uint256 TempPrice=EIP20Interface(Weth_Address).balanceOf(Pool_Address)*10**7/balances[Pool_Address];
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return TempPrice*10**11;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HelixNebulaV2
Line:        323
Source: 
>                     if(AutoSync){
>                         IUniswapV2Pair(Pool_Address).sync();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    HelixNebulaV2
Line:        333
Source: 
>                     if(AutoSync){
>                         IUniswapV2Pair(Pool_Address).sync();
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        54
Source: 
>     function add(uint x, uint y) internal pure returns (uint z) {
>         require((z = x + y) >= x, 'ds-math-add-overflow');
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        58
Source: 
>     function sub(uint x, uint y) internal pure returns (uint z) {
>         require((z = x - y) <= x, 'ds-math-sub-underflow');
>                  ^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    SafeMath
Line:        68
Source: 
>     function mul(uint x, uint y) internal pure returns (uint z) {
>         require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');
>                            ^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    HelixNebulaV2
Line:        85
Source: 
>     address payable public owner;
>     address payable public Helix_Storage;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public Pool_Address;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    HelixNebulaV2
Line:        86
Source: 
>     address payable public Helix_Storage;
>     address public Pool_Address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address public Weth_Address;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    HelixNebulaV2
Line:        87
Source: 
>     address public Pool_Address;
>     address public Weth_Address;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    HelixNebulaV2
Line:        240
Source: 
>     function approve(address _spender, uint256 _value) public returns (bool success) {
>         allowed[msg.sender][_spender] = _value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, _spender, _value); //solhint-disable-line indent, no-unused-vars

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    HelixNebulaV2
Line:        76
Source: 
> //////////////////////////Token Layer////////////////////////////////////////////////
>     address payable wallet;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant private MAX_UINT256 = 2**256 - 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    HelixNebulaV2
Line:        190
Source: 
> 
>     string public name;                   
>     ^^^^^^^^^^^^^^^^^^
>     uint8 public decimals;                

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    HelixNebulaV2
Line:        192
Source: 
>     uint8 public decimals;                
>     string public symbol;                 
>     ^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebulaV2
Line:        166
Source: 
>             if(LockedAddresses[i].adr==_adr){
>                 if(LockedAddresses[i].ExpireTime>block.timestamp){
>                                                  ^^^^^^^^^^^^^^^
>                    return true;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebulaV2
Line:        278
Source: 
>       uint oneDaytime=3600*24;
>       if(block.timestamp.sub(ReleaseTime)<oneDaytime*30){     
>          ^^^^^^^^^^^^^^^
>           return 10;    //first month: 10 EOG token Per 1 ETH Help

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebulaV2
Line:        281
Source: 
>       }
>       if(block.timestamp.sub(ReleaseTime)<oneDaytime*60){     
>          ^^^^^^^^^^^^^^^
>           return 8;    //second month: 8 EOG token Per 1 ETH Help

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebulaV2
Line:        284
Source: 
>       }
>       if(block.timestamp.sub(ReleaseTime)<oneDaytime*90){     
>          ^^^^^^^^^^^^^^^
>           return 6;    //third month: 6 EOG token Per 1 ETH Help

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebulaV2
Line:        287
Source: 
>       }
>       if(block.timestamp.sub(ReleaseTime)<oneDaytime*120){     
>          ^^^^^^^^^^^^^^^
>           return 4;    //fourth month: 4 EOG token Per 1 ETH Help

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebulaV2
Line:        290
Source: 
>       }
>       if(block.timestamp.sub(ReleaseTime)<oneDaytime*150){     
>          ^^^^^^^^^^^^^^^
>           return 2;    //fifth month: 2 EOG token Per 1 ETH Help

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    HelixNebulaV2
Line:        293
Source: 
>       }
>       if(block.timestamp.sub(ReleaseTime)>oneDaytime*150){     
>          ^^^^^^^^^^^^^^^
>           return 1;    //after five month: 1 EOG token Per 1 ETH Help

[0m
