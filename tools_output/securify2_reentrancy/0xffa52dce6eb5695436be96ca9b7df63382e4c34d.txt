Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    USDable
Line:        65
Source: 
>     
>     function setUSDcontractaddress(address payable input) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        145
Source: 
>     
>     function setAssetPricerAddress(address payable input) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != USDcontractaddress());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        180
Source: 
>     
>     function assetPricerAddress() public view onlyUSDContract returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _assetPricerAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        184
Source: 
>     
>     function isShort() public view onlyUSDContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _isShort;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    USDable
Line:        65
Source: 
>     
>     function setUSDcontractaddress(address payable input) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        145
Source: 
>     
>     function setAssetPricerAddress(address payable input) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != USDcontractaddress());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        180
Source: 
>     
>     function assetPricerAddress() public view onlyUSDContract returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _assetPricerAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        184
Source: 
>     
>     function isShort() public view onlyUSDContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _isShort;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        196
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        200
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        204
Source: 
> 
>     function transfer(address recipient, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        209
Source: 
> 
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        213
Source: 
> 
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        218
Source: 
> 
>     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
> 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        229
Source: 
> 
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    USDable
Line:        65
Source: 
>     
>     function setUSDcontractaddress(address payable input) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        145
Source: 
>     
>     function setAssetPricerAddress(address payable input) public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != USDcontractaddress());

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        180
Source: 
>     
>     function assetPricerAddress() public view onlyUSDContract returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _assetPricerAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetPriceable
Line:        184
Source: 
>     
>     function isShort() public view onlyUSDContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _isShort;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        196
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        200
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        204
Source: 
> 
>     function transfer(address recipient, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        209
Source: 
> 
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        213
Source: 
> 
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        218
Source: 
> 
>     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
> 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        229
Source: 
> 
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        289
Source: 
> 
>     function name() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _name;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        293
Source: 
> 
>     function symbol() public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _symbol;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Detailed
Line:        297
Source: 
> 
>     function decimals() public view returns (uint8) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _decimals;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetToken
Line:        327
Source: 
> 
>     function assetPriceUpdated(bytes32 customerId, bool marketOpen) public onlyAssetPricer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint valuesent = Customers[customerId].valuesent;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetToken
Line:        342
Source: 
>   
>     function AssetMint(address to, uint256 valuesent) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == USDcontractaddress() || msg.sender == primary(), "You cannot call this function!");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetToken
Line:        347
Source: 
>     
>     function AssetBurn(address to, uint256 valuesent) public  onlyPrimary{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burn(to,valuesent);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetToken
Line:        352
Source: 
>     
>     function getStuckTokens(address _tokenAddress) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token(_tokenAddress).transfer(primary(), token(_tokenAddress).balanceOf(address(this)));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AssetToken
Line:        356
Source: 
> 
>     function getLostFunds() public onlyPrimary {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sendFunds(address(this).balance);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        204
Source: 
> 
>     function transfer(address recipient, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        218
Source: 
> 
>     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        224
Source: 
> 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        229
Source: 
> 
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        204
Source: 
> 
>     function transfer(address recipient, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        218
Source: 
> 
>     function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(sender, recipient, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        224
Source: 
> 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        229
Source: 
> 
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetToken
Line:        327
Source: 
> 
>     function assetPriceUpdated(bytes32 customerId, bool marketOpen) public onlyAssetPricer {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint valuesent = Customers[customerId].valuesent;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetToken
Line:        342
Source: 
>   
>     function AssetMint(address to, uint256 valuesent) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == USDcontractaddress() || msg.sender == primary(), "You cannot call this function!");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AssetToken
Line:        347
Source: 
>     
>     function AssetBurn(address to, uint256 valuesent) public  onlyPrimary{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burn(to,valuesent);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        200
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        209
Source: 
> 
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        213
Source: 
> 
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        200
Source: 
> 
>     function balanceOf(address account) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        209
Source: 
> 
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowances[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        213
Source: 
> 
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AssetToken
Line:        352
Source: 
>     
>     function getStuckTokens(address _tokenAddress) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         token(_tokenAddress).transfer(primary(), token(_tokenAddress).balanceOf(address(this)));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        283
Source: 
> 
>     constructor (string memory name, string memory symbol, uint8 decimals) public {
>                  ^^^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        283
Source: 
> 
>     constructor (string memory name, string memory symbol, uint8 decimals) public {
>                                      ^^^^^^^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    ERC20Detailed
Line:        283
Source: 
> 
>     constructor (string memory name, string memory symbol, uint8 decimals) public {
>                                                            ^^^^^^^^^^^^^^
>         _name = name;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    USDContract
Line:        53
Source: 
>      function assetContracts(address input) external view returns (bool);
>      function USDtrade(address sender,uint amount) external;
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>      function primary() external view returns (address);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    USDable
Line:        59
Source: 
>     
>     address payable private _USDcontractaddress = 0x7c0AFD49D40Ec308d49E2926E5c99B037d54EE7e;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    USDable
Line:        61
Source: 
>     
>     function USDcontractaddress() internal view returns (address){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _USDcontractaddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    USDable
Line:        96
Source: 
>     
>     function USDtrade(address sender,uint amount) internal {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return USDContract(_USDcontractaddress).USDtrade(sender,amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetPricer
Line:        132
Source: 
>     function updateAssetPrice() external payable returns (bytes32);
>     function Fee() external returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function assetUpper(bool isShort) external view returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetPriceable
Line:        143
Source: 
>     
>     bool constant private _isShort = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetPriceable
Line:        160
Source: 
>     
>     function Fee() internal returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         AssetPricer(_assetPricerAddress).updateGasPrice();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    token
Line:        302
Source: 
> 
> interface token {
> ^^^^^^^^^^^^^^^^^
>     function balanceOf(address input) external returns (uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetToken
Line:        309
Source: 
>     
>     mapping(bytes32=>customer) private Customers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetToken
Line:        311
Source: 
>     
>     struct customer {
>     ^^^^^^^^^^^^^^^^^
>         address myAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetToken
Line:        342
Source: 
>   
>     function AssetMint(address to, uint256 valuesent) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == USDcontractaddress() || msg.sender == primary(), "You cannot call this function!");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AssetToken
Line:        347
Source: 
>     
>     function AssetBurn(address to, uint256 valuesent) public  onlyPrimary{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burn(to,valuesent);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.11;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    USDable
Line:        82
Source: 
>     function sendFunds(uint amount) internal {
>         USDContract(_USDcontractaddress).sendFunds.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    AssetToken
Line:        338
Source: 
>             address payable sendto = address(uint160(myAddress));
>             sendto.transfer(valuesent);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }   

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    USDable
Line:        82
Source: 
>     function sendFunds(uint amount) internal {
>         USDContract(_USDcontractaddress).sendFunds.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AssetPriceable
Line:        177
Source: 
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AssetToken
Line:        338
Source: 
>             address payable sendto = address(uint160(myAddress));
>             sendto.transfer(valuesent);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }   

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    USDable
Line:        82
Source: 
>     function sendFunds(uint amount) internal {
>         USDContract(_USDcontractaddress).sendFunds.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AssetPriceable
Line:        177
Source: 
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AssetToken
Line:        338
Source: 
>             address payable sendto = address(uint160(myAddress));
>             sendto.transfer(valuesent);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }   

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        93
Source: 
>     function assetContracts(address input) internal view returns (bool) {
>         return USDContract(_USDcontractaddress).assetContracts(input);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        93
Source: 
>     function assetContracts(address input) internal view returns (bool) {
>         return USDContract(_USDcontractaddress).assetContracts(input);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        93
Source: 
>     function assetContracts(address input) internal view returns (bool) {
>         return USDContract(_USDcontractaddress).assetContracts(input);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        93
Source: 
>     function assetContracts(address input) internal view returns (bool) {
>         return USDContract(_USDcontractaddress).assetContracts(input);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        93
Source: 
>     function assetContracts(address input) internal view returns (bool) {
>         return USDContract(_USDcontractaddress).assetContracts(input);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        90
Source: 
>     function multiplier() internal view returns (uint256) {
>         return USDContract(_USDcontractaddress).multiplier();}
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPriceable
Line:        162
Source: 
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (fee.mul(multiplier().add(100))).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        71
Source: 
>         require(input != address(0));
>         require(msg.sender == USDContract(input).primary());
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        93
Source: 
>     function assetContracts(address input) internal view returns (bool) {
>         return USDContract(_USDcontractaddress).assetContracts(input);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    USDable
Line:        90
Source: 
>     function multiplier() internal view returns (uint256) {
>         return USDContract(_USDcontractaddress).multiplier();}
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    EthPriceable
Line:        126
Source: 
>     function ethLower() internal view returns (uint256) {
>         return EthPricer(ethPricerAddress()).ethLower();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetPriceable
Line:        162
Source: 
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (fee.mul(multiplier().add(100))).div(100);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AssetToken
Line:        353
Source: 
>     function getStuckTokens(address _tokenAddress) public {
>         token(_tokenAddress).transfer(primary(), token(_tokenAddress).balanceOf(address(this)));
>                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    USDable
Line:        86
Source: 
>     function ethPricerAddress() internal view returns (address) {
>         return USDContract(_USDcontractaddress).ethPricerAddress();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    USDable
Line:        97
Source: 
>     function USDtrade(address sender,uint amount) internal {
>         return USDContract(_USDcontractaddress).USDtrade(sender,amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EthPriceable
Line:        122
Source: 
>     function ethUpper() internal view returns (uint256) {
>         return EthPricer(ethPricerAddress()).ethUpper();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPriceable
Line:        161
Source: 
>     function Fee() internal returns (uint256) {
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint fee = AssetPricer(_assetPricerAddress).Fee();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPriceable
Line:        171
Source: 
>     function assetLower() internal view returns (uint256) {
>         return AssetPricer(_assetPricerAddress).assetLower(_isShort);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    USDable
Line:        82
Source: 
>     function sendFunds(uint amount) internal {
>         USDContract(_USDcontractaddress).sendFunds.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    USDable
Line:        86
Source: 
>     function ethPricerAddress() internal view returns (address) {
>         return USDContract(_USDcontractaddress).ethPricerAddress();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    USDable
Line:        97
Source: 
>     function USDtrade(address sender,uint amount) internal {
>         return USDContract(_USDcontractaddress).USDtrade(sender,amount);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    EthPriceable
Line:        122
Source: 
>     function ethUpper() internal view returns (uint256) {
>         return EthPricer(ethPricerAddress()).ethUpper();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPriceable
Line:        161
Source: 
>     function Fee() internal returns (uint256) {
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint fee = AssetPricer(_assetPricerAddress).Fee();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPriceable
Line:        167
Source: 
>     function assetUpper() internal view returns (uint256) {
>         return AssetPricer(_assetPricerAddress).assetUpper(_isShort);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPriceable
Line:        171
Source: 
>     function assetLower() internal view returns (uint256) {
>         return AssetPricer(_assetPricerAddress).assetLower(_isShort);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPriceable
Line:        175
Source: 
>     function updateAssetPrice() internal returns (bytes32) {
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint fee = AssetPricer(_assetPricerAddress).Fee();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPriceable
Line:        176
Source: 
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetPriceable
Line:        177
Source: 
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AssetToken
Line:        353
Source: 
>     function getStuckTokens(address _tokenAddress) public {
>         token(_tokenAddress).transfer(primary(), token(_tokenAddress).balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AssetPriceable
Line:        141
Source: 
>     
>     address payable private _assetPricerAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        194
Source: 
>     mapping (address => mapping (address => uint256)) private _allowances;
>     uint256 private _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    AssetPriceable
Line:        141
Source: 
>     
>     address payable private _assetPricerAddress;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        194
Source: 
>     mapping (address => mapping (address => uint256)) private _allowances;
>     uint256 private _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Warning
Contract:    USDable
Line:        82
Source: 
>     function sendFunds(uint amount) internal {
>         USDContract(_USDcontractaddress).sendFunds.value(amount)();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    AssetPriceable
Line:        177
Source: 
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        264
Source: 
> 
>         _balances[account] = _balances[account].sub(value, "ERC20: burn amount exceeds balance");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        265
Source: 
>         _balances[account] = _balances[account].sub(value, "ERC20: burn amount exceeds balance");
>         _totalSupply = _totalSupply.sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        246
Source: 
>              require(!assetContracts(recipient), "You can only send tokens to their own contract!");
>             _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        247
Source: 
>             _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>             _balances[recipient] = _balances[recipient].add(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        272
Source: 
> 
>         _allowances[owner][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        264
Source: 
> 
>         _balances[account] = _balances[account].sub(value, "ERC20: burn amount exceeds balance");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _totalSupply = _totalSupply.sub(value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        265
Source: 
>         _balances[account] = _balances[account].sub(value, "ERC20: burn amount exceeds balance");
>         _totalSupply = _totalSupply.sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        246
Source: 
>              require(!assetContracts(recipient), "You can only send tokens to their own contract!");
>             _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _balances[recipient] = _balances[recipient].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        247
Source: 
>             _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");
>             _balances[recipient] = _balances[recipient].add(amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        272
Source: 
> 
>         _allowances[owner][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        256
Source: 
> 
>         _totalSupply = _totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[account] = _balances[account].add(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        257
Source: 
>         _totalSupply = _totalSupply.add(amount);
>         _balances[account] = _balances[account].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(this), account, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AssetToken
Line:        324
Source: 
>         uint amount = msg.value.sub(total.sub(address(this).balance));
>         Customers[customerId] = customer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        86
Source: 
>     function ethPricerAddress() internal view returns (address) {
>         return USDContract(_USDcontractaddress).ethPricerAddress();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        90
Source: 
>     function multiplier() internal view returns (uint256) {
>         return USDContract(_USDcontractaddress).multiplier();}
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                                           ^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        86
Source: 
>     function ethPricerAddress() internal view returns (address) {
>         return USDContract(_USDcontractaddress).ethPricerAddress();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        90
Source: 
>     function multiplier() internal view returns (uint256) {
>         return USDContract(_USDcontractaddress).multiplier();}
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                            ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                                           ^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        86
Source: 
>     function ethPricerAddress() internal view returns (address) {
>         return USDContract(_USDcontractaddress).ethPricerAddress();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        90
Source: 
>     function multiplier() internal view returns (uint256) {
>         return USDContract(_USDcontractaddress).multiplier();}
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                            ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EthPriceable
Line:        122
Source: 
>     function ethUpper() internal view returns (uint256) {
>         return EthPricer(ethPricerAddress()).ethUpper();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EthPriceable
Line:        126
Source: 
>     function ethLower() internal view returns (uint256) {
>         return EthPricer(ethPricerAddress()).ethLower();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                                           ^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        86
Source: 
>     function ethPricerAddress() internal view returns (address) {
>         return USDContract(_USDcontractaddress).ethPricerAddress();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        90
Source: 
>     function multiplier() internal view returns (uint256) {
>         return USDContract(_USDcontractaddress).multiplier();}
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                            ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                                           ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetPriceable
Line:        162
Source: 
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return (fee.mul(multiplier().add(100))).div(100);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetPriceable
Line:        167
Source: 
>     function assetUpper() internal view returns (uint256) {
>         return AssetPricer(_assetPricerAddress).assetUpper(_isShort);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetPriceable
Line:        171
Source: 
>     function assetLower() internal view returns (uint256) {
>         return AssetPricer(_assetPricerAddress).assetLower(_isShort);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetPriceable
Line:        176
Source: 
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetPriceable
Line:        177
Source: 
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                                           ^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                            ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    EthPriceable
Line:        126
Source: 
>     function ethLower() internal view returns (uint256) {
>         return EthPricer(ethPricerAddress()).ethLower();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                                           ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetPriceable
Line:        167
Source: 
>     function assetUpper() internal view returns (uint256) {
>         return AssetPricer(_assetPricerAddress).assetUpper(_isShort);
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetPriceable
Line:        176
Source: 
>         AssetPricer(_assetPricerAddress).updateGasPrice();
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AssetPriceable
Line:        177
Source: 
>         uint fee = AssetPricer(_assetPricerAddress).Fee();
>         return AssetPricer(_assetPricerAddress).updateAssetPrice.value(fee)();
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    USDable
Line:        66
Source: 
>     function setUSDcontractaddress(address payable input) public {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                                           ^^^^^^^^^^^^^^^^^^^^
>         require(input != address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        110
Source: 
>     function primary() internal view returns (address) {
>         return USDContract(USDcontractaddress()).primary();
>                            ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Secondary
Line:        105
Source: 
>     modifier onlyPrimary() {
>         require(msg.sender == USDContract(USDcontractaddress()).primary(), "Secondary: caller is not the primary account");
>                                           ^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
