Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LiquidMultiSig
Line:        91
Source: 
>   mapping(address => uint) public signer_join_height;
>   bool public force_no_majority;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        119
Source: 
>   event init_done(address democracy_addr);
>   function do_initialization() public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(liquid_delegate == LiquidDemocracyInterface(address(0x0)), "already initialized");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        133
Source: 
> 
>   function is_signer(address _addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return signers.exists(_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        137
Source: 
> 
>   function get_democracy() public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address(liquid_delegate);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        186
Source: 
>   }
>   function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        224
Source: 
> 
>   function get_sig_status(uint64 id, string memory name) public view returns(uint propose_height, address vote_contract, bool called){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        242
Source: 
> 
>   function reform_signers(uint64 id, address[] memory s)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        267
Source: 
> 
>   function get_unused_invoke_id(string memory name) public view returns(uint64){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return used_invoke_ids[keccak256(abi.encodePacked(name, signers))] + 1;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        270
Source: 
>   }
>   function get_signers() public view returns(address[] memory){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return signers;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSig
Line:        274
Source: 
> 
>   function set_democracy_no_majority(uint64 id, bool t) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     is_majority_sig(id, "set_democracy_no_majority"){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        39
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        47
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    LiquidMultiSigFactory
Line:        285
Source: 
> 
>   function createMultiSig(address[] memory _signers, address _delegate_factory, address _vote_factory) public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     LiquidMultiSig ms = new LiquidMultiSig(_signers, _delegate_factory, _vote_factory);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        21
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        39
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    AddressArray
Line:        47
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        121
Source: 
>     require(liquid_delegate == LiquidDemocracyInterface(address(0x0)), "already initialized");
>     liquid_delegate = LiquidDemocracyInterface(liquid_delegate_factory.createLiquidDemocracy());
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for(uint i = 0; i < signers.length; i++){

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        156
Source: 
>       invokes[invokeHash].processing = false;
>       invokes[invokeHash].vote_contract = VoteInterface(vote_factory.createLiquidVote(address(liquid_delegate)));
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].exists = true;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        158
Source: 
>       invokes[invokeHash].exists = true;
>       invokes[invokeHash].vote_contract.addChoice(choiceHash);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        160
Source: 
> 
>       invokes[invokeHash].vote_contract.recordVoteChoice(choiceHash, sender);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit valid_function_sign(name, id, 1, block.number);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        165
Source: 
>     invoke_status storage invoke = invokes[invokeHash];
>     if(!invoke.vote_contract.isChoiceExist(choiceHash)){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invoke.vote_contract.addChoice(choiceHash);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        166
Source: 
>     if(!invoke.vote_contract.isChoiceExist(choiceHash)){
>       invoke.vote_contract.addChoice(choiceHash);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        172
Source: 
>     require(join_height < invoke.propose_height, "this proposal is already exist before you become a signer");
>     invoke.vote_contract.recordVoteChoice(choiceHash, sender);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     valid_invoke_num = invoke.vote_contract.getChoiceVoteNumber(choiceHash);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        173
Source: 
>     invoke.vote_contract.recordVoteChoice(choiceHash, sender);
>     valid_invoke_num = invoke.vote_contract.getChoiceVoteNumber(choiceHash);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    LiquidMultiSig
Line:        276
Source: 
>     is_majority_sig(id, "set_democracy_no_majority"){
>       liquid_delegate.setNoMajority(t);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    LiquidMultiSig
Line:        123
Source: 
>     for(uint i = 0; i < signers.length; i++){
>       liquid_delegate.setWeight(signers[i], 1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    LiquidMultiSig
Line:        252
Source: 
>         signer_join_height[s[i]] = block.number;
>         liquid_delegate.setWeight(s[i], 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    LiquidMultiSig
Line:        259
Source: 
>         signer_join_height[old_signers[i]] = 0;
>         liquid_delegate.removeVoter(old_signers[i]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidMultiSig
Line:        133
Source: 
> 
>   function is_signer(address _addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return signers.exists(_addr);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidMultiSig
Line:        186
Source: 
>   }
>   function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidMultiSig
Line:        242
Source: 
> 
>   function reform_signers(uint64 id, address[] memory s)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    LiquidMultiSig
Line:        274
Source: 
> 
>   function set_democracy_no_majority(uint64 id, bool t) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     is_majority_sig(id, "set_democracy_no_majority"){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AddressArray
Line:        39
Source: 
> 
>   function remove(address[] storage self, address addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LiquidMultiSig
Line:        267
Source: 
> 
>   function get_unused_invoke_id(string memory name) public view returns(uint64){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return used_invoke_ids[keccak256(abi.encodePacked(name, signers))] + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        21
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        47
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LiquidMultiSigFactory
Line:        285
Source: 
> 
>   function createMultiSig(address[] memory _signers, address _delegate_factory, address _vote_factory) public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     LiquidMultiSig ms = new LiquidMultiSig(_signers, _delegate_factory, _vote_factory);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        21
Source: 
> library AddressArray{
>   function exists(address[] storage self, address addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AddressArray
Line:        47
Source: 
> 
>   function replace(address[] storage self, address old_addr, address new_addr) public returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint index = index_of(self, old_addr);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        121
Source: 
>     require(liquid_delegate == LiquidDemocracyInterface(address(0x0)), "already initialized");
>     liquid_delegate = LiquidDemocracyInterface(liquid_delegate_factory.createLiquidDemocracy());
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for(uint i = 0; i < signers.length; i++){

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        123
Source: 
>     for(uint i = 0; i < signers.length; i++){
>       liquid_delegate.setWeight(signers[i], 1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        156
Source: 
>       invokes[invokeHash].processing = false;
>       invokes[invokeHash].vote_contract = VoteInterface(vote_factory.createLiquidVote(address(liquid_delegate)));
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].exists = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        158
Source: 
>       invokes[invokeHash].exists = true;
>       invokes[invokeHash].vote_contract.addChoice(choiceHash);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        160
Source: 
> 
>       invokes[invokeHash].vote_contract.recordVoteChoice(choiceHash, sender);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit valid_function_sign(name, id, 1, block.number);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        165
Source: 
>     invoke_status storage invoke = invokes[invokeHash];
>     if(!invoke.vote_contract.isChoiceExist(choiceHash)){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invoke.vote_contract.addChoice(choiceHash);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        166
Source: 
>     if(!invoke.vote_contract.isChoiceExist(choiceHash)){
>       invoke.vote_contract.addChoice(choiceHash);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        172
Source: 
>     require(join_height < invoke.propose_height, "this proposal is already exist before you become a signer");
>     invoke.vote_contract.recordVoteChoice(choiceHash, sender);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     valid_invoke_num = invoke.vote_contract.getChoiceVoteNumber(choiceHash);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        173
Source: 
>     invoke.vote_contract.recordVoteChoice(choiceHash, sender);
>     valid_invoke_num = invoke.vote_contract.getChoiceVoteNumber(choiceHash);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        252
Source: 
>         signer_join_height[s[i]] = block.number;
>         liquid_delegate.setWeight(s[i], 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    LiquidMultiSig
Line:        259
Source: 
>         signer_join_height[old_signers[i]] = 0;
>         liquid_delegate.removeVoter(old_signers[i]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AddressArray
Line:        30
Source: 
> 
>   function index_of(address[] storage self, address addr) public view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< self.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        75
Source: 
> 
>   struct invoke_status{
>   ^^^^^^^^^^^^^^^^^^^^^
>     uint propose_height;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        85
Source: 
> 
>   uint public signer_number;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   address[] public signers;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        89
Source: 
>   mapping (bytes32 => invoke_status) public invokes;
>   mapping (bytes32 => uint64) public used_invoke_ids;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   mapping(address => uint) public signer_join_height;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        90
Source: 
>   mapping (bytes32 => uint64) public used_invoke_ids;
>   mapping(address => uint) public signer_join_height;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bool public force_no_majority;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        91
Source: 
>   mapping(address => uint) public signer_join_height;
>   bool public force_no_majority;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        93
Source: 
> 
>   LiquidDelegateFactoryInterface public liquid_delegate_factory;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   LiquidDemocracyInterface public liquid_delegate;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        94
Source: 
>   LiquidDelegateFactoryInterface public liquid_delegate_factory;
>   LiquidDemocracyInterface public liquid_delegate;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   VoteFactoryInterface public vote_factory;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        95
Source: 
>   LiquidDemocracyInterface public liquid_delegate;
>   VoteFactoryInterface public vote_factory;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        97
Source: 
> 
>   event signers_reformed(address[] old_signers, address[] new_signers);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event valid_function_sign(string name, uint64 id, uint64 current_signed_number, uint propose_height);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        98
Source: 
>   event signers_reformed(address[] old_signers, address[] new_signers);
>   event valid_function_sign(string name, uint64 id, uint64 current_signed_number, uint propose_height);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   event function_called(string name, uint64 id, uint propose_height);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        99
Source: 
>   event valid_function_sign(string name, uint64 id, uint64 current_signed_number, uint propose_height);
>   event function_called(string name, uint64 id, uint propose_height);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        101
Source: 
> 
>   modifier enough_signers(address[] memory s){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(s.length >=3, "the number of signers must be >=3");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        118
Source: 
> 
>   event init_done(address democracy_addr);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   function do_initialization() public{

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        119
Source: 
>   event init_done(address democracy_addr);
>   function do_initialization() public{
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(liquid_delegate == LiquidDemocracyInterface(address(0x0)), "already initialized");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        128
Source: 
> 
>   modifier only_signer{
>   ^^^^^^^^^^^^^^^^^^^^^
>     require(signers.exists(msg.sender), "only a signer can call this");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        133
Source: 
> 
>   function is_signer(address _addr) public view returns(bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return signers.exists(_addr);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        137
Source: 
> 
>   function get_democracy() public view returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return address(liquid_delegate);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        140
Source: 
>   }
>   function is_all_minus_sig(uint number, uint64 id, string memory name, bytes32 hash, address sender) internal returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 b = keccak256(abi.encodePacked(name, signers));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        169
Source: 
> 
>     uint valid_invoke_num = 0;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint join_height = signer_join_height[sender];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        170
Source: 
>     uint valid_invoke_num = 0;
>     uint join_height = signer_join_height[sender];
>     ^^^^^^^^^^^^^^^^
>     require(join_height < invoke.propose_height, "this proposal is already exist before you become a signer");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        183
Source: 
> 
>   function get_majority_number() private view returns(uint){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return signer_number/2 + 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        186
Source: 
>   }
>   function update_and_check_reach_majority(uint64 id, string memory name, bytes32 hash, address sender) public returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     //bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        196
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        206
Source: 
> 
>   modifier is_all_sig(uint64 id, string memory name) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        214
Source: 
> 
>   function set_called(bytes32 hash) internal {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     invoke_status storage invoke = invokes[hash];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        224
Source: 
> 
>   function get_sig_status(uint64 id, string memory name) public view returns(uint propose_height, address vote_contract, bool called){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        233
Source: 
> 
>   function array_exist (address[] memory accounts, address p) private pure returns (bool){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for (uint i = 0; i< accounts.length;i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        242
Source: 
> 
>   function reform_signers(uint64 id, address[] memory s)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        247
Source: 
>     is_majority_sig(id, "reform_signers"){
>     address[] memory old_signers = signers;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for(uint i = 0; i < s.length; i++){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        267
Source: 
> 
>   function get_unused_invoke_id(string memory name) public view returns(uint64){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return used_invoke_ids[keccak256(abi.encodePacked(name, signers))] + 1;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        270
Source: 
>   }
>   function get_signers() public view returns(address[] memory){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return signers;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LiquidMultiSig
Line:        274
Source: 
> 
>   function set_democracy_no_majority(uint64 id, bool t) public only_signer
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     is_majority_sig(id, "set_democracy_no_majority"){

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> contract LiquidDemocracyInterface{

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        101
Source: 
> 
>   modifier enough_signers(address[] memory s){
>                           ^^^^^^^^^^^^^^^^^^
>     require(s.length >=3, "the number of signers must be >=3");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        196
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>                            ^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        196
Source: 
> 
>   modifier is_majority_sig(uint64 id, string memory name) {
>                                       ^^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        197
Source: 
>   modifier is_majority_sig(uint64 id, string memory name) {
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     ^^^^^^^^^^^^
>     uint minority = signer_number - get_majority_number();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        198
Source: 
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     uint minority = signer_number - get_majority_number();
>     ^^^^^^^^^^^^^
>     if(!is_all_minus_sig(minority, id, name, hash, msg.sender))

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        201
Source: 
>       return ;
>     bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));
>     ^^^^^^^^^^^^^^^^^^
>     set_called(invokeHash);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        206
Source: 
> 
>   modifier is_all_sig(uint64 id, string memory name) {
>                       ^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        206
Source: 
> 
>   modifier is_all_sig(uint64 id, string memory name) {
>                                  ^^^^^^^^^^^^^^^^^^
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        207
Source: 
>   modifier is_all_sig(uint64 id, string memory name) {
>     bytes32 hash = keccak256(abi.encodePacked(msg.sig, msg.data));
>     ^^^^^^^^^^^^
>     if(!is_all_minus_sig(0, id, name, hash, msg.sender)) return ;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    LiquidMultiSig
Line:        209
Source: 
>     if(!is_all_minus_sig(0, id, name, hash, msg.sender)) return ;
>     bytes32 invokeHash = keccak256(abi.encodePacked(id, name, signers));
>     ^^^^^^^^^^^^^^^^^^
>     set_called(invokeHash);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LiquidMultiSig
Line:        121
Source: 
>     require(liquid_delegate == LiquidDemocracyInterface(address(0x0)), "already initialized");
>     liquid_delegate = LiquidDemocracyInterface(liquid_delegate_factory.createLiquidDemocracy());
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for(uint i = 0; i < signers.length; i++){

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LiquidMultiSig
Line:        165
Source: 
>     invoke_status storage invoke = invokes[invokeHash];
>     if(!invoke.vote_contract.isChoiceExist(choiceHash)){
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invoke.vote_contract.addChoice(choiceHash);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    LiquidMultiSig
Line:        173
Source: 
>     invoke.vote_contract.recordVoteChoice(choiceHash, sender);
>     valid_invoke_num = invoke.vote_contract.getChoiceVoteNumber(choiceHash);
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        123
Source: 
>     for(uint i = 0; i < signers.length; i++){
>       liquid_delegate.setWeight(signers[i], 1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        156
Source: 
>       invokes[invokeHash].processing = false;
>       invokes[invokeHash].vote_contract = VoteInterface(vote_factory.createLiquidVote(address(liquid_delegate)));
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].exists = true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        158
Source: 
>       invokes[invokeHash].exists = true;
>       invokes[invokeHash].vote_contract.addChoice(choiceHash);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        160
Source: 
> 
>       invokes[invokeHash].vote_contract.recordVoteChoice(choiceHash, sender);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       emit valid_function_sign(name, id, 1, block.number);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        166
Source: 
>     if(!invoke.vote_contract.isChoiceExist(choiceHash)){
>       invoke.vote_contract.addChoice(choiceHash);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        172
Source: 
>     require(join_height < invoke.propose_height, "this proposal is already exist before you become a signer");
>     invoke.vote_contract.recordVoteChoice(choiceHash, sender);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     valid_invoke_num = invoke.vote_contract.getChoiceVoteNumber(choiceHash);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        252
Source: 
>         signer_join_height[s[i]] = block.number;
>         liquid_delegate.setWeight(s[i], 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        259
Source: 
>         signer_join_height[old_signers[i]] = 0;
>         liquid_delegate.removeVoter(old_signers[i]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSig
Line:        276
Source: 
>     is_majority_sig(id, "set_democracy_no_majority"){
>       liquid_delegate.setNoMajority(t);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    LiquidMultiSigFactory
Line:        287
Source: 
>     LiquidMultiSig ms = new LiquidMultiSig(_signers, _delegate_factory, _vote_factory);
>     ms.do_initialization();
>     ^^^^^^^^^^^^^^^^^^^^^^
>     emit NewMultiSig(address(ms), _signers);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LiquidMultiSig
Line:        91
Source: 
>   mapping(address => uint) public signer_join_height;
>   bool public force_no_majority;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        145
Source: 
>     if(id > used_invoke_ids[b]){
>       used_invoke_ids[b] = id;
>       ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        151
Source: 
>     if(!invokes[invokeHash].exists){
>       invokes[invokeHash].propose_height = block.number;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].func_name = name;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        152
Source: 
>       invokes[invokeHash].propose_height = block.number;
>       invokes[invokeHash].func_name = name;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].invoke_id = id;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        153
Source: 
>       invokes[invokeHash].func_name = name;
>       invokes[invokeHash].invoke_id = id;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].called = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        154
Source: 
>       invokes[invokeHash].invoke_id = id;
>       invokes[invokeHash].called = false;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].processing = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        155
Source: 
>       invokes[invokeHash].called = false;
>       invokes[invokeHash].processing = false;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].vote_contract = VoteInterface(vote_factory.createLiquidVote(address(liquid_delegate)));

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        156
Source: 
>       invokes[invokeHash].processing = false;
>       invokes[invokeHash].vote_contract = VoteInterface(vote_factory.createLiquidVote(address(liquid_delegate)));
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].exists = true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        157
Source: 
>       invokes[invokeHash].vote_contract = VoteInterface(vote_factory.createLiquidVote(address(liquid_delegate)));
>       invokes[invokeHash].exists = true;
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].vote_contract.addChoice(choiceHash);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        178
Source: 
>     if(valid_invoke_num < signer_number-number) return false;
>     invoke.processing = true;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     return true;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        219
Source: 
>     require(invoke.processing, "cannot call this separately");
>     invoke.called = true;
>     ^^^^^^^^^^^^^^^^^^^^
>     invoke.processing = false;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        220
Source: 
>     invoke.called = true;
>     invoke.processing = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit function_called(invoke.func_name, invoke.invoke_id, invoke.propose_height);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        251
Source: 
>       }else{
>         signer_join_height[s[i]] = block.number;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquid_delegate.setWeight(s[i], 1);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        258
Source: 
>       }else{
>         signer_join_height[old_signers[i]] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquid_delegate.removeVoter(old_signers[i]);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        262
Source: 
>     }
>     signer_number = s.length;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     signers = s;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    LiquidMultiSig
Line:        263
Source: 
>     signer_number = s.length;
>     signers = s;
>     ^^^^^^^^^^^
>     emit signers_reformed(old_signers, signers);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LiquidMultiSig
Line:        121
Source: 
>     require(liquid_delegate == LiquidDemocracyInterface(address(0x0)), "already initialized");
>     liquid_delegate = LiquidDemocracyInterface(liquid_delegate_factory.createLiquidDemocracy());
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     for(uint i = 0; i < signers.length; i++){

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        41
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        44
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        49
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        41
Source: 
>     uint index = index_of(self, addr);
>     self[index] = self[self.length - 1];
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        44
Source: 
>     delete self[self.length-1];
>     self.length--;
>     ^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AddressArray
Line:        49
Source: 
>     uint index = index_of(self, old_addr);
>     self[index] = new_addr;
>     ^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidMultiSig
Line:        123
Source: 
>     for(uint i = 0; i < signers.length; i++){
>       liquid_delegate.setWeight(signers[i], 1);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidMultiSig
Line:        156
Source: 
>       invokes[invokeHash].processing = false;
>       invokes[invokeHash].vote_contract = VoteInterface(vote_factory.createLiquidVote(address(liquid_delegate)));
>                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       invokes[invokeHash].exists = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidMultiSig
Line:        252
Source: 
>         signer_join_height[s[i]] = block.number;
>         liquid_delegate.setWeight(s[i], 1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    LiquidMultiSig
Line:        259
Source: 
>         signer_join_height[old_signers[i]] = 0;
>         liquid_delegate.removeVoter(old_signers[i]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LiquidMultiSig
Line:        87
Source: 
>   address[] public signers;
>   address public owner;
>   ^^^^^^^^^^^^^^^^^^^^
>   mapping (bytes32 => invoke_status) public invokes;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    LiquidMultiSig
Line:        91
Source: 
>   mapping(address => uint) public signer_join_height;
>   bool public force_no_majority;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
