Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        240
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly { size := extcodesize(account) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return size > 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ExchangePool
Line:        369
Source: 
> 
>     function start(address _presale_token, address _currency_token, 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _presale_decimals, uint256 _currency_decimals, uint256 _price) public onlyOwner {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ExchangePool
Line:        385
Source: 
> 
>     function buy(uint256 token_amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(canBuy, "Buy not start yet, please wait...");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ExchangePool
Line:        404
Source: 
> 
>     function sell(uint256 token_amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(canSell, "Not end yet, please wait...");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ExchangePool
Line:        419
Source: 
> 
>     function end() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         canBuy = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ExchangePool
Line:        424
Source: 
> 
>     function finish() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         canBuy = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ExchangePool
Line:        429
Source: 
> 
>     function getback(address account) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 leftPresale = presale_token.balanceOf(address(this));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ExchangePool
Line:        440
Source: 
> 
>     function setMinBuyAmount(uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minBuyAmount = amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeERC20
Line:        285
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    SafeUSDT
Line:        326
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ExchangePool
Line:        369
Source: 
> 
>     function start(address _presale_token, address _currency_token, 
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _presale_decimals, uint256 _currency_decimals, uint256 _price) public onlyOwner {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ExchangePool
Line:        429
Source: 
> 
>     function getback(address account) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 leftPresale = presale_token.balanceOf(address(this));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ExchangePool
Line:        440
Source: 
> 
>     function setMinBuyAmount(uint256 amount) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         minBuyAmount = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ExchangePool
Line:        390
Source: 
>         
>         uint256 currency_amount = token_amount * currency_decimals * price / (PRICE_UNIT * presale_decimals);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 total = presale_token.balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ExchangePool
Line:        390
Source: 
>         
>         uint256 currency_amount = token_amount * currency_decimals * price / (PRICE_UNIT * presale_decimals);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 total = presale_token.balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ExchangePool
Line:        410
Source: 
>         
>         uint256 currency_amount = token_amount * currency_decimals * price / (PRICE_UNIT * presale_decimals);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransfer(msg.sender, currency_amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    ExchangePool
Line:        410
Source: 
>         
>         uint256 currency_amount = token_amount * currency_decimals * price / (PRICE_UNIT * presale_decimals);
>                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransfer(msg.sender, currency_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ExchangePool
Line:        391
Source: 
>         uint256 currency_amount = token_amount * currency_decimals * price / (PRICE_UNIT * presale_decimals);
>         uint256 total = presale_token.balanceOf(address(this));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransferFrom(msg.sender, address(this), currency_amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExchangePool
Line:        343
Source: 
> 
>     IERC20 public presale_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IUSDT  public currency_token;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExchangePool
Line:        344
Source: 
>     IERC20 public presale_token;
>     IUSDT  public currency_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public presale_decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExchangePool
Line:        345
Source: 
>     IUSDT  public currency_token;
>     uint256 public presale_decimals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public currency_decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExchangePool
Line:        346
Source: 
>     uint256 public presale_decimals;
>     uint256 public currency_decimals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExchangePool
Line:        390
Source: 
>         
>         uint256 currency_amount = token_amount * currency_decimals * price / (PRICE_UNIT * presale_decimals);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 total = presale_token.balanceOf(address(this));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ExchangePool
Line:        410
Source: 
>         
>         uint256 currency_amount = token_amount * currency_decimals * price / (PRICE_UNIT * presale_decimals);
>         ^^^^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransfer(msg.sender, currency_amount);

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.8;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    ExchangePool
Line:        353
Source: 
>     uint256 public minBuyAmount = 1000 * 1e18;
>     uint256 constant PRICE_UNIT = 1e8;   
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping(address => uint256) public balanceOf;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ExchangePool
Line:        391
Source: 
>         uint256 currency_amount = token_amount * currency_decimals * price / (PRICE_UNIT * presale_decimals);
>         uint256 total = presale_token.balanceOf(address(this));
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         currency_token.safeTransferFrom(msg.sender, address(this), currency_amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ExchangePool
Line:        430
Source: 
>     function getback(address account) public onlyOwner {
>         uint256 leftPresale = presale_token.balanceOf(address(this));
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (leftPresale > 0) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ExchangePool
Line:        434
Source: 
>         }
>         uint256 leftCurrency = currency_token.balanceOf(address(this));
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (leftCurrency > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        241
Source: 
>         assembly { size := extcodesize(account) }
>         return size > 0;
>                ^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ExchangePool
Line:        343
Source: 
> 
>     IERC20 public presale_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     IUSDT  public currency_token;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ExchangePool
Line:        344
Source: 
>     IERC20 public presale_token;
>     IUSDT  public currency_token;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public presale_decimals;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ExchangePool
Line:        345
Source: 
>     IUSDT  public currency_token;
>     uint256 public presale_decimals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public currency_decimals;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ExchangePool
Line:        346
Source: 
>     uint256 public presale_decimals;
>     uint256 public currency_decimals;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ExchangePool
Line:        348
Source: 
>     
>     uint256 public totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public price;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ExchangePool
Line:        349
Source: 
>     uint256 public totalSupply;
>     uint256 public price;
>     ^^^^^^^^^^^^^^^^^^^^
>     bool public canBuy;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ExchangePool
Line:        350
Source: 
>     uint256 public price;
>     bool public canBuy;
>     ^^^^^^^^^^^^^^^^^^
>     bool public canSell;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ExchangePool
Line:        351
Source: 
>     bool public canBuy;
>     bool public canSell;
>     ^^^^^^^^^^^^^^^^^^^
>     uint256 public minBuyAmount = 1000 * 1e18;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeUSDT
Line:        323
Source: 
>         // solhint-disable-next-line max-line-length
>         require(address(token).isContract(), "SafeERC20: call to non-contract");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SafeUSDT
Line:        326
Source: 
>         // solhint-disable-next-line avoid-low-level-calls
>         (bool success, bytes memory returndata) = address(token).call(data);
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
>       

[0m
