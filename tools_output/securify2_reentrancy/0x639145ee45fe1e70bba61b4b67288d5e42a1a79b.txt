Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DssSpell
Line:        103
Source: 
>         address _action = action;
>         assembly { _tag := extcodehash(_action) }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tag = _tag;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    DssSpell
Line:        111
Source: 
>         require(now <= expiration, "This contract has expired");
>         require(eta == 0, "This spell has already been scheduled");
>                 ^^^^^^^^
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssSpell
Line:        109
Source: 
> 
>     function schedule() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now <= expiration, "This contract has expired");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    DssSpell
Line:        134
Source: 
> 
>     function cast() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!done, "spell-already-cast");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DssSpell
Line:        112
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DssSpell
Line:        113
Source: 
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         eta = now + pause.delay();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DssSpell
Line:        114
Source: 
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>         eta = now + pause.delay();
>                     ^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DssSpell
Line:        115
Source: 
>         eta = now + pause.delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DssSpell
Line:        120
Source: 
>         IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);
>         bytes32[] memory ilks = registry.list();
>                                 ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DssSpell
Line:        137
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DssSpell
Line:        128
Source: 
>             //
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                              ^^^^^^^^^^^^^^^^^^^^^^
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DssSpell
Line:        128
Source: 
>             //
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DssSpell
Line:        129
Source: 
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DssSpell
Line:        129
Source: 
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        112
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        113
Source: 
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         eta = now + pause.delay();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        114
Source: 
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>         eta = now + pause.delay();
>                     ^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        115
Source: 
>         eta = now + pause.delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        120
Source: 
>         IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);
>         bytes32[] memory ilks = registry.list();
>                                 ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        128
Source: 
>             //
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                              ^^^^^^^^^^^^^^^^^^^^^^
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        128
Source: 
>             //
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        129
Source: 
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        129
Source: 
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    DssSpell
Line:        137
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    DssSpell
Line:        128
Source: 
>             //
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                              ^^^^^^^^^^^^^^^^^^^^^^
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    DssSpell
Line:        129
Source: 
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SpellAction
Line:        72
Source: 
>     function execute() external {
>         address MCD_VAT = CHANGELOG.getAddress("MCD_VAT");
>         ^^^^^^^^^^^^^^^
>         require(VatAbstract(MCD_VAT).wards(address(this)) == 1, "no-access");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        95
Source: 
>     // Provides a descriptive tag for bot consumption
>     string constant public description = "DEFCON-5 Emergency Spell";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        98
Source: 
>     constructor() public {
>         address MCD_PAUSE = CHANGELOG.getAddress("MCD_PAUSE");
>         ^^^^^^^^^^^^^^^^^
>         sig = abi.encodeWithSignature("execute()");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        101
Source: 
>         action = address(new SpellAction());
>         bytes32 _tag;
>         ^^^^^^^^^^^^
>         address _action = action;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        102
Source: 
>         bytes32 _tag;
>         address _action = action;
>         ^^^^^^^^^^^^^^^
>         assembly { _tag := extcodehash(_action) }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        112
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>         ^^^^^^^^^^^^^^^^^^^
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DssSpell
Line:        113
Source: 
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>         ^^^^^^^^^^^^^^^^^^^^
>         eta = now + pause.delay();

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        60
Source: 
>     //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json
>     ChainlogAbstract constant CHANGELOG =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        65
Source: 
>     //
>     uint256 constant WAD = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAY = 10**27;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        66
Source: 
>     uint256 constant WAD = 10**18;
>     uint256 constant RAY = 10**27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAD = 10**45;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        67
Source: 
>     uint256 constant RAY = 10**27;
>     uint256 constant RAD = 10**45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant MLN = 10**6;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        68
Source: 
>     uint256 constant RAD = 10**45;
>     uint256 constant MLN = 10**6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant BLN = 10**9;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    SpellAction
Line:        69
Source: 
>     uint256 constant MLN = 10**6;
>     uint256 constant BLN = 10**9;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpell
Line:        81
Source: 
>     //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json
>     ChainlogAbstract constant CHANGELOG =
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    DssSpell
Line:        92
Source: 
> 
>     uint256 constant T2021_07_01_1200UTC = 1625140800;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SpellAction
Line:        73
Source: 
>         address MCD_VAT = CHANGELOG.getAddress("MCD_VAT");
>         require(VatAbstract(MCD_VAT).wards(address(this)) == 1, "no-access");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpell
Line:        114
Source: 
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>         eta = now + pause.delay();
>                     ^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpell
Line:        120
Source: 
>         IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);
>         bytes32[] memory ilks = registry.list();
>                                 ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DssSpell
Line:        128
Source: 
>             //
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SpellAction
Line:        72
Source: 
>     function execute() external {
>         address MCD_VAT = CHANGELOG.getAddress("MCD_VAT");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(VatAbstract(MCD_VAT).wards(address(this)) == 1, "no-access");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        98
Source: 
>     constructor() public {
>         address MCD_PAUSE = CHANGELOG.getAddress("MCD_PAUSE");
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         sig = abi.encodeWithSignature("execute()");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        112
Source: 
>         require(eta == 0, "This spell has already been scheduled");
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        113
Source: 
>         address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         eta = now + pause.delay();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        115
Source: 
>         eta = now + pause.delay();
>         pause.plot(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        128
Source: 
>             //
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                              ^^^^^^^^^^^^^^^^^^^^^^
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        129
Source: 
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));
>                                                      ^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        129
Source: 
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DssSpell
Line:        137
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    DssSpell
Line:        104
Source: 
>         assembly { _tag := extcodehash(_action) }
>         tag = _tag;
>               ^^^^
>         pause = DSPauseAbstract(MCD_PAUSE);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        84
Source: 
> 
>     DSPauseAbstract  public pause;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address          public action;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        85
Source: 
>     DSPauseAbstract  public pause;
>     address          public action;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes32          public tag;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        86
Source: 
>     address          public action;
>     bytes32          public tag;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256          public eta;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        87
Source: 
>     bytes32          public tag;
>     uint256          public eta;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bytes            public sig;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        88
Source: 
>     uint256          public eta;
>     bytes            public sig;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256          public expiration;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        89
Source: 
>     bytes            public sig;
>     uint256          public expiration;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool             public done;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    DssSpell
Line:        90
Source: 
>     uint256          public expiration;
>     bool             public done;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssSpell
Line:        114
Source: 
>         address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");
>         eta = now + pause.delay();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         pause.plot(action, tag, sig, eta);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    DssSpell
Line:        136
Source: 
>         require(!done, "spell-already-cast");
>         done = true;
>         ^^^^^^^^^^^
>         pause.exec(action, tag, sig, eta);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DssSpell
Line:        128
Source: 
>             //
>             if (FlipAbstract(registry.flip(ilks[i])).wards(FLIPPER_MOM) == 1) {
>                              ^^^^^^^^^^^^^^^^^^^^^^
>                 FlipperMomAbstract(FLIPPER_MOM).rely(registry.flip(ilks[i]));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    DssSpell
Line:        137
Source: 
>         done = true;
>         pause.exec(action, tag, sig, eta);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SpellAction
Line:        65
Source: 
>     //
>     uint256 constant WAD = 10**18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAY = 10**27;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SpellAction
Line:        66
Source: 
>     uint256 constant WAD = 10**18;
>     uint256 constant RAY = 10**27;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant RAD = 10**45;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SpellAction
Line:        67
Source: 
>     uint256 constant RAY = 10**27;
>     uint256 constant RAD = 10**45;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant MLN = 10**6;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SpellAction
Line:        68
Source: 
>     uint256 constant RAD = 10**45;
>     uint256 constant MLN = 10**6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant BLN = 10**9;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SpellAction
Line:        69
Source: 
>     uint256 constant MLN = 10**6;
>     uint256 constant BLN = 10**9;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DssSpell
Line:        95
Source: 
>     // Provides a descriptive tag for bot consumption
>     string constant public description = "DEFCON-5 Emergency Spell";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
