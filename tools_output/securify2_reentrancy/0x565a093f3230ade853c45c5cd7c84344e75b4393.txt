Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Bet
Line:        990
Source: 
>         /// @dev betDeEx contract transfers the tokens to it self
>         require(betDeEx.collectBettorTokens(msg.sender, _betTokensInExaEs), "betting tokens should be collected");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    Bet
Line:        1002
Source: 
> 
>         betDeEx.emitNewBettingEvent(msg.sender, _choice, _betTokensInExaEs);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EraswapERC20
Line:        404
Source: 
> contract EraswapERC20 is DetailedERC20, BurnableToken, CappedToken {
>   string private name = "Eraswap";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string private symbol = "EST";

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EraswapERC20
Line:        405
Source: 
>   string private name = "Eraswap";
>   string private symbol = "EST";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 private decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EraswapERC20
Line:        406
Source: 
>   string private symbol = "EST";
>   uint8 private decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private cap = 9100000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    EraswapERC20
Line:        407
Source: 
>   uint8 private decimals = 18;
>   uint256 private cap = 9100000000000000000000000000;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Bet
Line:        944
Source: 
>     uint256 public prizePercentPerThousand; /// @dev percentage of bet balance which will be dristributed to winners and rest is platform fee
>     uint256[3] public totalBetTokensInExaEsByChoice = [0, 0, 0]; /// @dev array of total bet value of no, yes, draw voters
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256[3] public getNumberOfChoiceBettors = [0, 0, 0]; /// @dev stores number of bettors in a choice

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Bet
Line:        945
Source: 
>     uint256[3] public totalBetTokensInExaEsByChoice = [0, 0, 0]; /// @dev array of total bet value of no, yes, draw voters
>     uint256[3] public getNumberOfChoiceBettors = [0, 0, 0]; /// @dev stores number of bettors in a choice
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        28
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        37
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        28
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        37
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BurnableToken
Line:        66
Source: 
>    */
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(msg.sender, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        28
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        37
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        223
Source: 
>    */
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        305
Source: 
>    */
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        28
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        37
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        223
Source: 
>    */
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        305
Source: 
>    */
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        347
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        367
Source: 
>    */
>   function finishMinting() public onlyOwner canMint returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mintingFinished = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        28
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        37
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        223
Source: 
>    */
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        305
Source: 
>    */
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        367
Source: 
>    */
>   function finishMinting() public onlyOwner canMint returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mintingFinished = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        28
Source: 
>   */
>   function totalSupply() public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return totalSupply_;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        37
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BurnableToken
Line:        66
Source: 
>    */
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(msg.sender, _value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        223
Source: 
>    */
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        305
Source: 
>    */
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        367
Source: 
>    */
>   function finishMinting() public onlyOwner canMint returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mintingFinished = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        37
Source: 
>   */
>   function transfer(address _to, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_value <= balances[msg.sender]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        223
Source: 
>    */
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        305
Source: 
>    */
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        367
Source: 
>    */
>   function finishMinting() public onlyOwner canMint returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mintingFinished = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        367
Source: 
>    */
>   function finishMinting() public onlyOwner canMint returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mintingFinished = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        578
Source: 
> 
>   function transfer(
>   ^^^^^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        589
Source: 
> 
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        601
Source: 
> 
>   function approve(
>   ^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        612
Source: 
> 
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        623
Source: 
> 
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        142
Source: 
>    */
>   function renounceOwnership() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit OwnershipRenounced(owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MintableToken
Line:        367
Source: 
>    */
>   function finishMinting() public onlyOwner canMint returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mintingFinished = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        578
Source: 
> 
>   function transfer(
>   ^^^^^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        589
Source: 
> 
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        601
Source: 
> 
>   function approve(
>   ^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        612
Source: 
> 
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    PausableEraswap
Line:        623
Source: 
> 
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EraswapToken
Line:        669
Source: 
> 
>     function UpdateAddresses (address[] memory pool) onlyOwner public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        832
Source: 
>     /// @return address of newly deployed bet contract. This is for UI of Admin panel.
>     function createBet(
>     ^^^^^^^^^^^^^^^^^^^
>         string memory _description,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        866
Source: 
>     /// @return number of Bet contracts deployed by BetDeEx
>     function getNumberOfBets() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return bets.length;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        878
Source: 
>     /// @param _manager is address of new manager
>     function addManager(address _manager) public onlySuperManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isManager[_manager] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        884
Source: 
>     /// @param _manager is address of manager who is to be converted into a former manager
>     function removeManager(address _manager) public onlySuperManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isManager[_manager] = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        889
Source: 
>     /// @notice this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
>     function emitNewBettingEvent(address _bettorAddress, uint8 _choice, uint256 _betTokensInExaEs) public onlyBetContract {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit NewBetting(msg.sender, _bettorAddress, _choice, _betTokensInExaEs);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        894
Source: 
>     /// @notice this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
>     function emitEndEvent(address _ender, uint8 _result, uint256 _gasFee) public onlyBetContract {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit EndBetContract(_ender, msg.sender, _result, betBalanceInExaEs[msg.sender], _gasFee);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        899
Source: 
>     /// @notice this is an internal functionality that is used to transfer tokens from bettor wallet to BetDeEx contract
>     function collectBettorTokens(address _from, uint256 _betTokensInExaEs) public onlyBetContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(esTokenContract.transferFrom(_from, address(this), _betTokensInExaEs), "tokens should be collected from user");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        906
Source: 
>     /// @notice this is an internal functionality that is used to transfer prizes to winners
>     function sendTokensToAddress(address _to, uint256 _tokensInExaEs) public onlyBetContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         betBalanceInExaEs[msg.sender] = betBalanceInExaEs[msg.sender].sub(_tokensInExaEs);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BetDeEx
Line:        915
Source: 
>     /// @notice this is an internal functionality that is used to collect platform fee
>     function collectPlatformFee(uint256 _platformFee) public onlyBetContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(esTokenContract.transfer(superManager, _platformFee), "platform fee should be collected");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Bet
Line:        985
Source: 
>     /// @param _betTokensInExaEs is amount of bet
>     function enterBet(uint8 _choice, uint256 _betTokensInExaEs) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now < pauseTimestamp, "cannot enter after pause time");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Bet
Line:        1007
Source: 
>     /// @param _choice is the correct choice
>     function endBet(uint8 _choice) public onlyManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(now >= pauseTimestamp, "cannot end bet before pause time");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Bet
Line:        1036
Source: 
>     /// @return winner prize of input address
>     function seeWinnerPrize(address _bettorAddress) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(endTimestamp > 0, "cannot see prize before bet ends");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Bet
Line:        1043
Source: 
>     /// @notice this function will be called after bet ends and winner bettors can withdraw their prize share
>     function withdrawPrize() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(endTimestamp > 0, "cannot withdraw before end time");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BurnableToken
Line:        66
Source: 
>    */
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(msg.sender, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintableToken
Line:        347
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintableToken
Line:        347
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BurnableToken
Line:        66
Source: 
>    */
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(msg.sender, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintableToken
Line:        347
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BurnableToken
Line:        66
Source: 
>    */
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(msg.sender, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintableToken
Line:        347
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BurnableToken
Line:        66
Source: 
>    */
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(msg.sender, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintableToken
Line:        347
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PausableEraswap
Line:        578
Source: 
> 
>   function transfer(
>   ^^^^^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PausableEraswap
Line:        589
Source: 
> 
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PausableEraswap
Line:        612
Source: 
> 
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PausableEraswap
Line:        623
Source: 
> 
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BurnableToken
Line:        66
Source: 
>    */
>   function burn(uint256 _value) public {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _burn(msg.sender, _value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        151
Source: 
>    */
>   function transferOwnership(address _newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     _transferOwnership(_newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    StandardToken
Line:        283
Source: 
>    */
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    MintableToken
Line:        347
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    CappedToken
Line:        389
Source: 
>    */
>   function mint(
>   ^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PausableEraswap
Line:        578
Source: 
> 
>   function transfer(
>   ^^^^^^^^^^^^^^^^^^
>     address _to,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PausableEraswap
Line:        589
Source: 
> 
>   function transferFrom(
>   ^^^^^^^^^^^^^^^^^^^^^^
>     address _from,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PausableEraswap
Line:        612
Source: 
> 
>   function increaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    PausableEraswap
Line:        623
Source: 
> 
>   function decreaseApproval(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BetDeEx
Line:        899
Source: 
>     /// @notice this is an internal functionality that is used to transfer tokens from bettor wallet to BetDeEx contract
>     function collectBettorTokens(address _from, uint256 _betTokensInExaEs) public onlyBetContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(esTokenContract.transferFrom(_from, address(this), _betTokensInExaEs), "tokens should be collected from user");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BetDeEx
Line:        906
Source: 
>     /// @notice this is an internal functionality that is used to transfer prizes to winners
>     function sendTokensToAddress(address _to, uint256 _tokensInExaEs) public onlyBetContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         betBalanceInExaEs[msg.sender] = betBalanceInExaEs[msg.sender].sub(_tokensInExaEs);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BetDeEx
Line:        915
Source: 
>     /// @notice this is an internal functionality that is used to collect platform fee
>     function collectPlatformFee(uint256 _platformFee) public onlyBetContract returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(esTokenContract.transfer(superManager, _platformFee), "platform fee should be collected");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Bet
Line:        1036
Source: 
>     /// @return winner prize of input address
>     function seeWinnerPrize(address _bettorAddress) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(endTimestamp > 0, "cannot see prize before bet ends");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PausableEraswap
Line:        601
Source: 
> 
>   function approve(
>   ^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BasicToken
Line:        52
Source: 
>   */
>   function balanceOf(address _owner) public view returns (uint256) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     return balances[_owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        251
Source: 
>    */
>   function approve(address _spender, uint256 _value) public returns (bool) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     allowed[msg.sender][_spender] = _value;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    StandardToken
Line:        263
Source: 
>    */
>   function allowance(
>   ^^^^^^^^^^^^^^^^^^^
>     address _owner,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PausableEraswap
Line:        601
Source: 
> 
>   function approve(
>   ^^^^^^^^^^^^^^^^^
>     address _spender,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BetDeEx
Line:        832
Source: 
>     /// @return address of newly deployed bet contract. This is for UI of Admin panel.
>     function createBet(
>     ^^^^^^^^^^^^^^^^^^^
>         string memory _description,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BetDeEx
Line:        878
Source: 
>     /// @param _manager is address of new manager
>     function addManager(address _manager) public onlySuperManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isManager[_manager] = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BetDeEx
Line:        884
Source: 
>     /// @param _manager is address of manager who is to be converted into a former manager
>     function removeManager(address _manager) public onlySuperManager {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         isManager[_manager] = false;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BetDeEx
Line:        889
Source: 
>     /// @notice this is an internal functionality that is only for bet contracts to emit a event when a new bet is placed so that front end can get the information by subscribing to  contract
>     function emitNewBettingEvent(address _bettorAddress, uint8 _choice, uint256 _betTokensInExaEs) public onlyBetContract {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit NewBetting(msg.sender, _bettorAddress, _choice, _betTokensInExaEs);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BetDeEx
Line:        894
Source: 
>     /// @notice this is an internal functionality that is only for bet contracts to emit event when a bet is ended so that front end can get the information by subscribing to  contract
>     function emitEndEvent(address _ender, uint8 _result, uint256 _gasFee) public onlyBetContract {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit EndBetContract(_ender, msg.sender, _result, betBalanceInExaEs[msg.sender], _gasFee);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        179
Source: 
> 
>     c = _a * _b;
>         ^^^^^^^
>     assert(c / _a == _b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Bet
Line:        953
Source: 
>     modifier onlyManager() {
>         require(betDeEx.isManager(msg.sender), "only manager can call");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Bet
Line:        1028
Source: 
>         /// @dev sending plaftrom fee to the super manager
>         require(betDeEx.collectPlatformFee(_platformFee), "platform fee should be collected");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Bet
Line:        1030
Source: 
> 
>         betDeEx.emitEndEvent(endedBy, _choice, _platformFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Bet
Line:        1049
Source: 
>         bettorHasClaimed[msg.sender] = true;
>         betDeEx.sendTokensToAddress(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        423
Source: 
> 
>   uint256 public LastNRTRelease;              // variable to store last release date
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public MonthlyNRTAmount;            // variable to store Monthly NRT amount to be released

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        424
Source: 
>   uint256 public LastNRTRelease;              // variable to store last release date
>   uint256 public MonthlyNRTAmount;            // variable to store Monthly NRT amount to be released
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public AnnualNRTAmount;             // variable to store Annual NRT amount to be released

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        425
Source: 
>   uint256 public MonthlyNRTAmount;            // variable to store Monthly NRT amount to be released
>   uint256 public AnnualNRTAmount;             // variable to store Annual NRT amount to be released
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public MonthCount;                  // variable to store the count of months from the intial date

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        426
Source: 
>   uint256 public AnnualNRTAmount;             // variable to store Annual NRT amount to be released
>   uint256 public MonthCount;                  // variable to store the count of months from the intial date
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public luckPoolBal;                 // Luckpool Balance

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        439
Source: 
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers
>   address public TimeAlly;                     //address of TimeAlly Contract
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        448
Source: 
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public timeSwappersNRT;              // variable to store last NRT released to the address;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        481
Source: 
>       else{
>         uint MaxAmount = ((totalSupply()).mul(2)).div(100);   // max amount permitted to burn in a month
>         ^^^^^^^^^^^^^^
>         if(MaxAmount >= burnTokenBal ){

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        499
Source: 
> 
>     function MonthlyNRTRelease() external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(now.sub(LastNRTRelease)> 2592000);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NRTManager
Line:        501
Source: 
>       require(now.sub(LastNRTRelease)> 2592000);
>       uint256 NRTBal = MonthlyNRTAmount.add(luckPoolBal);        // Total NRT available.
>       ^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EraswapToken
Line:        656
Source: 
>     */
>     modifier OnlyTimeAlly() {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(msg.sender == TimeAlly);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EraswapToken
Line:        669
Source: 
> 
>     function UpdateAddresses (address[] memory pool) onlyOwner public returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EraswapToken
Line:        716
Source: 
>     */
>     function UpdateLuckpool(uint256 amount) OnlyTimeAlly external returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(allowance(msg.sender, address(this)) >= amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EraswapToken
Line:        728
Source: 
>     */
>     function UpdateBurnBal(uint256 amount) OnlyTimeAlly external returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       require(allowance(msg.sender, address(this)) >= amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    EraswapToken
Line:        741
Source: 
>     */
>     function UpdateBalance(address[100] calldata TokenTransferList, uint256[100] calldata TokenTransferBalance) OnlyTimeAlly external returns(bool){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         for (uint256 i = 0; i < TokenTransferList.length; i++) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BetDeEx
Line:        841
Source: 
>     ) public onlyManager returns (address) {
>         Bet _newBet = new Bet(
>         ^^^^^^^^^^^
>           _description,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Bet
Line:        1025
Source: 
>         /// @dev this is the left platform fee according to the totalPrize variable above
>         uint256 _platformFee = betBalanceInExaEs().sub(totalPrize);
>         ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Bet
Line:        1047
Source: 
>         require(bettorBetAmountInExaEsByChoice[msg.sender][finalResult] > minimumBetInExaEs, "caller should have a betting"); /// @dev to keep out option 0
>         uint256 _winningAmount = bettorBetAmountInExaEsByChoice[msg.sender][finalResult].mul(totalPrize).div(totalBetTokensInExaEsByChoice[finalResult]);
>         ^^^^^^^^^^^^^^^^^^^^^^
>         bettorHasClaimed[msg.sender] = true;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.10;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        9
Source: 
> 
> pragma solidity ^0.5.9;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    EraswapERC20
Line:        404
Source: 
> contract EraswapERC20 is DetailedERC20, BurnableToken, CappedToken {
>   string private name = "Eraswap";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string private symbol = "EST";

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    EraswapERC20
Line:        405
Source: 
>   string private name = "Eraswap";
>   string private symbol = "EST";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 private decimals = 18;

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    EraswapERC20
Line:        406
Source: 
>   string private symbol = "EST";
>   uint8 private decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private cap = 9100000000000000000000000000;

[0m
[0;31mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Violation
Contract:    EraswapERC20
Line:        407
Source: 
>   uint8 private decimals = 18;
>   uint256 private cap = 9100000000000000000000000000;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BetDeEx
Line:        764
Source: 
> 
>     EraswapToken esTokenContract;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Bet
Line:        928
Source: 
> 
>     BetDeEx betDeEx;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EraswapERC20
Line:        407
Source: 
>   uint8 private decimals = 18;
>   uint256 private cap = 9100000000000000000000000000;
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    EraswapERC20
Line:        414
Source: 
>   constructor() internal DetailedERC20("Eraswap", "EST", 18) CappedToken(cap){
>     mint(msg.sender, 910000000000000000000000000);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    NRTManager
Line:        560
Source: 
>     LastNRTRelease = now;
>     AnnualNRTAmount = 819000000000000000000000000;
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     MonthlyNRTAmount = AnnualNRTAmount.div(uint256(12));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BetDeEx
Line:        900
Source: 
>     function collectBettorTokens(address _from, uint256 _betTokensInExaEs) public onlyBetContract returns (bool) {
>         require(esTokenContract.transferFrom(_from, address(this), _betTokensInExaEs), "tokens should be collected from user");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         betBalanceInExaEs[msg.sender] = betBalanceInExaEs[msg.sender].add(_betTokensInExaEs);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BetDeEx
Line:        908
Source: 
>         betBalanceInExaEs[msg.sender] = betBalanceInExaEs[msg.sender].sub(_tokensInExaEs);
>         require(esTokenContract.transfer(_to, _tokensInExaEs), "tokens should be sent");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BetDeEx
Line:        916
Source: 
>     function collectPlatformFee(uint256 _platformFee) public onlyBetContract returns (bool) {
>         require(esTokenContract.transfer(superManager, _platformFee), "platform fee should be collected");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Bet
Line:        990
Source: 
>         /// @dev betDeEx contract transfers the tokens to it self
>         require(betDeEx.collectBettorTokens(msg.sender, _betTokensInExaEs), "betting tokens should be collected");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Bet
Line:        953
Source: 
>     modifier onlyManager() {
>         require(betDeEx.isManager(msg.sender), "only manager can call");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Bet
Line:        1028
Source: 
>         /// @dev sending plaftrom fee to the super manager
>         require(betDeEx.collectPlatformFee(_platformFee), "platform fee should be collected");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Bet
Line:        979
Source: 
>     function betBalanceInExaEs() public view returns (uint256) {
>         return betDeEx.betBalanceInExaEs(address(this));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Bet
Line:        1002
Source: 
> 
>         betDeEx.emitNewBettingEvent(msg.sender, _choice, _betTokensInExaEs);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Bet
Line:        1030
Source: 
> 
>         betDeEx.emitEndEvent(endedBy, _choice, _platformFee);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Bet
Line:        1049
Source: 
>         bettorHasClaimed[msg.sender] = true;
>         betDeEx.sendTokensToAddress(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    BasicToken
Line:        23
Source: 
> 
>   uint256 internal totalSupply_;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        427
Source: 
>   uint256 public MonthCount;                  // variable to store the count of months from the intial date
>   uint256 public luckPoolBal;                 // Luckpool Balance
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public burnTokenBal;                // tokens to be burned

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        428
Source: 
>   uint256 public luckPoolBal;                 // Luckpool Balance
>   uint256 public burnTokenBal;                // tokens to be burned
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        441
Source: 
> 
>   uint256 public newTalentsAndPartnershipsBal; // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        442
Source: 
>   uint256 public newTalentsAndPartnershipsBal; // variable to store last NRT released to the address;
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        443
Source: 
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        444
Source: 
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        445
Source: 
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        446
Source: 
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        447
Source: 
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        448
Source: 
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public timeSwappersNRT;              // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        449
Source: 
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;
>   uint256 public timeSwappersNRT;              // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        427
Source: 
>   uint256 public MonthCount;                  // variable to store the count of months from the intial date
>   uint256 public luckPoolBal;                 // Luckpool Balance
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public burnTokenBal;                // tokens to be burned

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        428
Source: 
>   uint256 public luckPoolBal;                 // Luckpool Balance
>   uint256 public burnTokenBal;                // tokens to be burned
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        441
Source: 
> 
>   uint256 public newTalentsAndPartnershipsBal; // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        442
Source: 
>   uint256 public newTalentsAndPartnershipsBal; // variable to store last NRT released to the address;
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        443
Source: 
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        444
Source: 
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        445
Source: 
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        446
Source: 
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        447
Source: 
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        448
Source: 
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public timeSwappersNRT;              // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        449
Source: 
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;
>   uint256 public timeSwappersNRT;              // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        427
Source: 
>   uint256 public MonthCount;                  // variable to store the count of months from the intial date
>   uint256 public luckPoolBal;                 // Luckpool Balance
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public burnTokenBal;                // tokens to be burned

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        428
Source: 
>   uint256 public luckPoolBal;                 // Luckpool Balance
>   uint256 public burnTokenBal;                // tokens to be burned
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        431
Source: 
>   // different pool address
>   address public newTalentsAndPartnerships;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public platformMaintenance;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        432
Source: 
>   address public newTalentsAndPartnerships;
>   address public platformMaintenance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public marketingAndRNR;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        433
Source: 
>   address public platformMaintenance;
>   address public marketingAndRNR;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public kmPards;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        434
Source: 
>   address public marketingAndRNR;
>   address public kmPards;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public contingencyFunds;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        435
Source: 
>   address public kmPards;
>   address public contingencyFunds;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public researchAndDevelopment;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        436
Source: 
>   address public contingencyFunds;
>   address public researchAndDevelopment;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public buzzCafe;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        437
Source: 
>   address public researchAndDevelopment;
>   address public buzzCafe;
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        438
Source: 
>   address public buzzCafe;
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public TimeAlly;                     //address of TimeAlly Contract

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        439
Source: 
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers
>   address public TimeAlly;                     //address of TimeAlly Contract
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        441
Source: 
> 
>   uint256 public newTalentsAndPartnershipsBal; // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        442
Source: 
>   uint256 public newTalentsAndPartnershipsBal; // variable to store last NRT released to the address;
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        443
Source: 
>   uint256 public platformMaintenanceBal;       // variable to store last NRT released to the address;
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        444
Source: 
>   uint256 public marketingAndRNRBal;           // variable to store last NRT released to the address;
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        445
Source: 
>   uint256 public kmPardsBal;                   // variable to store last NRT released to the address;
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        446
Source: 
>   uint256 public contingencyFundsBal;          // variable to store last NRT released to the address;
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        447
Source: 
>   uint256 public researchAndDevelopmentBal;    // variable to store last NRT released to the address;
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        448
Source: 
>   uint256 public buzzCafeNRT;                  // variable to store last NRT released to the address;
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public timeSwappersNRT;              // variable to store last NRT released to the address;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NRTManager
Line:        449
Source: 
>   uint256 public TimeAllyNRT;                   // variable to store last NRT released to the address;
>   uint256 public timeSwappersNRT;              // variable to store last NRT released to the address;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Bet
Line:        935
Source: 
> 
>     uint8 public finalResult; /// @dev given a value when manager ends bet
>     ^^^^^^^^^^^^^^^^^^^^^^^^
>     address public endedBy; /// @dev address of manager who enters the correct choice while ending the bet

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Bet
Line:        936
Source: 
>     uint8 public finalResult; /// @dev given a value when manager ends bet
>     address public endedBy; /// @dev address of manager who enters the correct choice while ending the bet
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Bet
Line:        940
Source: 
>     uint256 public pauseTimestamp; /// @dev set as an argument by deployer
>     uint256 public endTimestamp; /// @dev set when a manager ends bet and prizes are distributed
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Bet
Line:        947
Source: 
> 
>     uint256 public totalPrize; /// @dev this is the prize (platform fee is already excluded)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    BasicToken
Line:        23
Source: 
> 
>   uint256 internal totalSupply_;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        431
Source: 
>   // different pool address
>   address public newTalentsAndPartnerships;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public platformMaintenance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        432
Source: 
>   address public newTalentsAndPartnerships;
>   address public platformMaintenance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public marketingAndRNR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        433
Source: 
>   address public platformMaintenance;
>   address public marketingAndRNR;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public kmPards;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        434
Source: 
>   address public marketingAndRNR;
>   address public kmPards;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public contingencyFunds;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        435
Source: 
>   address public kmPards;
>   address public contingencyFunds;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public researchAndDevelopment;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        436
Source: 
>   address public contingencyFunds;
>   address public researchAndDevelopment;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public buzzCafe;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        437
Source: 
>   address public researchAndDevelopment;
>   address public buzzCafe;
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        438
Source: 
>   address public buzzCafe;
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public TimeAlly;                     //address of TimeAlly Contract

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        439
Source: 
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers
>   address public TimeAlly;                     //address of TimeAlly Contract
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        431
Source: 
>   // different pool address
>   address public newTalentsAndPartnerships;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public platformMaintenance;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        432
Source: 
>   address public newTalentsAndPartnerships;
>   address public platformMaintenance;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public marketingAndRNR;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        433
Source: 
>   address public platformMaintenance;
>   address public marketingAndRNR;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public kmPards;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        434
Source: 
>   address public marketingAndRNR;
>   address public kmPards;
>   ^^^^^^^^^^^^^^^^^^^^^^
>   address public contingencyFunds;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        435
Source: 
>   address public kmPards;
>   address public contingencyFunds;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public researchAndDevelopment;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        436
Source: 
>   address public contingencyFunds;
>   address public researchAndDevelopment;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public buzzCafe;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        437
Source: 
>   address public researchAndDevelopment;
>   address public buzzCafe;
>   ^^^^^^^^^^^^^^^^^^^^^^^
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        438
Source: 
>   address public buzzCafe;
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public TimeAlly;                     //address of TimeAlly Contract

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    NRTManager
Line:        439
Source: 
>   address public timeSwappers;                 // which include powerToken , curators ,timeTraders , daySwappers
>   address public TimeAlly;                     //address of TimeAlly Contract
>   ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        75
Source: 
> 
>     balances[_who] = balances[_who].sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalSupply_ = totalSupply_.sub(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        76
Source: 
>     balances[_who] = balances[_who].sub(_value);
>     totalSupply_ = totalSupply_.sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Burn(_who, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        75
Source: 
> 
>     balances[_who] = balances[_who].sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalSupply_ = totalSupply_.sub(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        76
Source: 
>     balances[_who] = balances[_who].sub(_value);
>     totalSupply_ = totalSupply_.sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Burn(_who, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        75
Source: 
> 
>     balances[_who] = balances[_who].sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalSupply_ = totalSupply_.sub(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        76
Source: 
>     balances[_who] = balances[_who].sub(_value);
>     totalSupply_ = totalSupply_.sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Burn(_who, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        484
Source: 
>           burn(burnTokenBal);
>           burnTokenBal = 0;
>           ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        487
Source: 
>         else{
>           burnTokenBal = burnTokenBal.sub(MaxAmount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           burn(MaxAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        75
Source: 
> 
>     balances[_who] = balances[_who].sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalSupply_ = totalSupply_.sub(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        76
Source: 
>     balances[_who] = balances[_who].sub(_value);
>     totalSupply_ = totalSupply_.sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Burn(_who, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        484
Source: 
>           burn(burnTokenBal);
>           burnTokenBal = 0;
>           ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        487
Source: 
>         else{
>           burnTokenBal = burnTokenBal.sub(MaxAmount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           burn(MaxAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        75
Source: 
> 
>     balances[_who] = balances[_who].sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     totalSupply_ = totalSupply_.sub(_value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    BurnableToken
Line:        76
Source: 
>     balances[_who] = balances[_who].sub(_value);
>     totalSupply_ = totalSupply_.sub(_value);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Burn(_who, _value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        484
Source: 
>           burn(burnTokenBal);
>           burnTokenBal = 0;
>           ^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        487
Source: 
>         else{
>           burnTokenBal = burnTokenBal.sub(MaxAmount);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           burn(MaxAmount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        504
Source: 
>       // Calculating NRT to be released to each of the pools
>       newTalentsAndPartnershipsBal = (NRTBal.mul(5)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        505
Source: 
>       newTalentsAndPartnershipsBal = (NRTBal.mul(5)).div(100);
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        506
Source: 
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       kmPardsBal = (NRTBal.mul(10)).div(100);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        507
Source: 
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);
>       kmPardsBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        508
Source: 
>       kmPardsBal = (NRTBal.mul(10)).div(100);
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        509
Source: 
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        510
Source: 
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        511
Source: 
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       timeSwappersNRT = (NRTBal.mul(325)).div(1000);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    NRTManager
Line:        512
Source: 
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);
>       timeSwappersNRT = (NRTBal.mul(325)).div(1000);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Bet
Line:        1013
Source: 
>         if(_choice < 2  || (_choice == 2 && isDrawPossible)) {
>             finalResult = _choice;
>             ^^^^^^^^^^^^^^^^^^^^^
>         } else {

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Bet
Line:        1018
Source: 
> 
>         endedBy = msg.sender;
>         ^^^^^^^^^^^^^^^^^^^^
>         endTimestamp = now;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Bet
Line:        1019
Source: 
>         endedBy = msg.sender;
>         endTimestamp = now;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Bet
Line:        1022
Source: 
>         /// @dev the platform fee is excluded from entire bet balance and this is the amount to be distributed
>         totalPrize = betBalanceInExaEs().mul(prizePercentPerThousand).div(1000);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        252
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        290
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        252
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        290
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        252
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        290
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        252
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        290
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        252
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        290
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        504
Source: 
>       // Calculating NRT to be released to each of the pools
>       newTalentsAndPartnershipsBal = (NRTBal.mul(5)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        505
Source: 
>       newTalentsAndPartnershipsBal = (NRTBal.mul(5)).div(100);
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        506
Source: 
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       kmPardsBal = (NRTBal.mul(10)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        507
Source: 
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);
>       kmPardsBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        508
Source: 
>       kmPardsBal = (NRTBal.mul(10)).div(100);
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        509
Source: 
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        510
Source: 
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        511
Source: 
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       timeSwappersNRT = (NRTBal.mul(325)).div(1000);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        512
Source: 
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);
>       timeSwappersNRT = (NRTBal.mul(325)).div(1000);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        536
Source: 
>       emit NRTDistributed(NRTBal);
>       luckPoolBal = 0;
>       ^^^^^^^^^^^^^^^
>       LastNRTRelease = LastNRTRelease.add(30 days); // resetting release date again

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        537
Source: 
>       luckPoolBal = 0;
>       LastNRTRelease = LastNRTRelease.add(30 days); // resetting release date again
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       burnTokens();                                 // burning burnTokenBal

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        543
Source: 
>       if(MonthCount == 11){
>         MonthCount = 0;
>         ^^^^^^^^^^^^^^
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        544
Source: 
>         MonthCount = 0;
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         MonthlyNRTAmount = MonthlyNRTAmount.div(12);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        545
Source: 
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);
>         MonthlyNRTAmount = MonthlyNRTAmount.div(12);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        548
Source: 
>       else{
>         MonthCount = MonthCount.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        252
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        290
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        504
Source: 
>       // Calculating NRT to be released to each of the pools
>       newTalentsAndPartnershipsBal = (NRTBal.mul(5)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        505
Source: 
>       newTalentsAndPartnershipsBal = (NRTBal.mul(5)).div(100);
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        506
Source: 
>       platformMaintenanceBal = (NRTBal.mul(10)).div(100);
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       kmPardsBal = (NRTBal.mul(10)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        507
Source: 
>       marketingAndRNRBal = (NRTBal.mul(10)).div(100);
>       kmPardsBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        508
Source: 
>       kmPardsBal = (NRTBal.mul(10)).div(100);
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        509
Source: 
>       contingencyFundsBal = (NRTBal.mul(10)).div(100);
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        510
Source: 
>       researchAndDevelopmentBal = (NRTBal.mul(5)).div(100);
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        511
Source: 
>       buzzCafeNRT = (NRTBal.mul(25)).div(1000);
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       timeSwappersNRT = (NRTBal.mul(325)).div(1000);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        512
Source: 
>       TimeAllyNRT = (NRTBal.mul(15)).div(100);
>       timeSwappersNRT = (NRTBal.mul(325)).div(1000);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        536
Source: 
>       emit NRTDistributed(NRTBal);
>       luckPoolBal = 0;
>       ^^^^^^^^^^^^^^^
>       LastNRTRelease = LastNRTRelease.add(30 days); // resetting release date again

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        537
Source: 
>       luckPoolBal = 0;
>       LastNRTRelease = LastNRTRelease.add(30 days); // resetting release date again
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       burnTokens();                                 // burning burnTokenBal

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        543
Source: 
>       if(MonthCount == 11){
>         MonthCount = 0;
>         ^^^^^^^^^^^^^^
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        544
Source: 
>         MonthCount = 0;
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         MonthlyNRTAmount = MonthlyNRTAmount.div(12);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        545
Source: 
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);
>         MonthlyNRTAmount = MonthlyNRTAmount.div(12);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        548
Source: 
>       else{
>         MonthCount = MonthCount.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        252
Source: 
>   function approve(address _spender, uint256 _value) public returns (bool) {
>     allowed[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    StandardToken
Line:        290
Source: 
>   {
>     allowed[msg.sender][_spender] = (
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       allowed[msg.sender][_spender].add(_addedValue));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        536
Source: 
>       emit NRTDistributed(NRTBal);
>       luckPoolBal = 0;
>       ^^^^^^^^^^^^^^^
>       LastNRTRelease = LastNRTRelease.add(30 days); // resetting release date again

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        537
Source: 
>       luckPoolBal = 0;
>       LastNRTRelease = LastNRTRelease.add(30 days); // resetting release date again
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       burnTokens();                                 // burning burnTokenBal

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        543
Source: 
>       if(MonthCount == 11){
>         MonthCount = 0;
>         ^^^^^^^^^^^^^^
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        544
Source: 
>         MonthCount = 0;
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         MonthlyNRTAmount = MonthlyNRTAmount.div(12);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        545
Source: 
>         AnnualNRTAmount = (AnnualNRTAmount.mul(9)).div(10);
>         MonthlyNRTAmount = MonthlyNRTAmount.div(12);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NRTManager
Line:        548
Source: 
>       else{
>         MonthCount = MonthCount.add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Bet
Line:        997
Source: 
> 
>         getNumberOfChoiceBettors[_choice] = getNumberOfChoiceBettors[_choice].add(1);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalBetTokensInExaEsByChoice[_choice] = totalBetTokensInExaEsByChoice[_choice].add(_betTokensInExaEs);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Bet
Line:        998
Source: 
>         getNumberOfChoiceBettors[_choice] = getNumberOfChoiceBettors[_choice].add(1);
>         totalBetTokensInExaEsByChoice[_choice] = totalBetTokensInExaEsByChoice[_choice].add(_betTokensInExaEs);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Bet
Line:        1000
Source: 
> 
>         bettorBetAmountInExaEsByChoice[msg.sender][_choice] = bettorBetAmountInExaEsByChoice[msg.sender][_choice].add(_betTokensInExaEs);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Bet
Line:        1049
Source: 
>         bettorHasClaimed[msg.sender] = true;
>         betDeEx.sendTokensToAddress(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             msg.sender,

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        98
Source: 
> contract DetailedERC20 is ERC20 {
>   string public name;
>   ^^^^^^^^^^^^^^^^^^
>   string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        99
Source: 
>   string public name;
>   string public symbol;
>   ^^^^^^^^^^^^^^^^^^^^
>   uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        100
Source: 
>   string public symbol;
>   uint8 public decimals;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        404
Source: 
> contract EraswapERC20 is DetailedERC20, BurnableToken, CappedToken {
>   string private name = "Eraswap";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string private symbol = "EST";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        405
Source: 
>   string private name = "Eraswap";
>   string private symbol = "EST";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 private decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        406
Source: 
>   string private symbol = "EST";
>   uint8 private decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private cap = 9100000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        98
Source: 
> contract DetailedERC20 is ERC20 {
>   string public name;
>   ^^^^^^^^^^^^^^^^^^
>   string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        99
Source: 
>   string public name;
>   string public symbol;
>   ^^^^^^^^^^^^^^^^^^^^
>   uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        100
Source: 
>   string public symbol;
>   uint8 public decimals;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        404
Source: 
> contract EraswapERC20 is DetailedERC20, BurnableToken, CappedToken {
>   string private name = "Eraswap";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string private symbol = "EST";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        405
Source: 
>   string private name = "Eraswap";
>   string private symbol = "EST";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 private decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        406
Source: 
>   string private symbol = "EST";
>   uint8 private decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private cap = 9100000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        98
Source: 
> contract DetailedERC20 is ERC20 {
>   string public name;
>   ^^^^^^^^^^^^^^^^^^
>   string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        99
Source: 
>   string public name;
>   string public symbol;
>   ^^^^^^^^^^^^^^^^^^^^
>   uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        100
Source: 
>   string public symbol;
>   uint8 public decimals;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        404
Source: 
> contract EraswapERC20 is DetailedERC20, BurnableToken, CappedToken {
>   string private name = "Eraswap";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string private symbol = "EST";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        405
Source: 
>   string private name = "Eraswap";
>   string private symbol = "EST";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 private decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        406
Source: 
>   string private symbol = "EST";
>   uint8 private decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private cap = 9100000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        98
Source: 
> contract DetailedERC20 is ERC20 {
>   string public name;
>   ^^^^^^^^^^^^^^^^^^
>   string public symbol;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        99
Source: 
>   string public name;
>   string public symbol;
>   ^^^^^^^^^^^^^^^^^^^^
>   uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    DetailedERC20
Line:        100
Source: 
>   string public symbol;
>   uint8 public decimals;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        404
Source: 
> contract EraswapERC20 is DetailedERC20, BurnableToken, CappedToken {
>   string private name = "Eraswap";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string private symbol = "EST";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        405
Source: 
>   string private name = "Eraswap";
>   string private symbol = "EST";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 private decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    EraswapERC20
Line:        406
Source: 
>   string private symbol = "EST";
>   uint8 private decimals = 18;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 private cap = 9100000000000000000000000000;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Bet
Line:        930
Source: 
> 
>     string public description; /// @dev question text of the bet
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     bool public isDrawPossible; /// @dev if false then user cannot bet on draw choice

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Bet
Line:        932
Source: 
>     bool public isDrawPossible; /// @dev if false then user cannot bet on draw choice
>     uint8 public category; /// @dev sports, movies
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint8 public subCategory; /// @dev cricket, football

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Bet
Line:        933
Source: 
>     uint8 public category; /// @dev sports, movies
>     uint8 public subCategory; /// @dev cricket, football
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Bet
Line:        938
Source: 
> 
>     uint256 public creationTimestamp; /// @dev set during bet creation
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public pauseTimestamp; /// @dev set as an argument by deployer

[0m
