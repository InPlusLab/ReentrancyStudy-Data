Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;33mSeverity:    LOW
Pattern:     Benign Reentrancy
Description: Reentrancy is equivalent with two consecutive calls of
             the function
Type:        Warning
Contract:    InBitToken
Line:        310
Source: 
>     if (unlockableTokens > 0)
>       this.transfer(_of, unlockableTokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    InBitToken
Line:        79
Source: 
> 
>   string public name = 'InBit Token';
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public symbol = 'InBit';

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    InBitToken
Line:        80
Source: 
>   string public name = 'InBit Token';
>   string public symbol = 'InBit';
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public standard = 'InBit Token v1.0';

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    InBitToken
Line:        81
Source: 
>   string public symbol = 'InBit';
>   string public standard = 'InBit Token v1.0';
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public totalSupply;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    InBitToken
Line:        231
Source: 
>     uint256 validUntil = now.add(_time);
>     require(tokensLocked(msg.sender, _reason) == 0, 'Tokens already locked');
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     // If tokens are already locked, then functions extendLock or

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    InBitToken
Line:        260
Source: 
>     uint256 validUntil = now.add(_time);
>     require(tokensLocked(_to, _reason) == 0, 'Tokens already locked');
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(_amount != 0, 'Amount can not be 0');

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    InBitToken
Line:        262
Source: 
>     require(_amount != 0, 'Amount can not be 0');
>     if (locked[_to][_reason].amount == 0)
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       lockReason[_to].push(_reason);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        191
Source: 
>   // with _value.
>   function approve(address _spender, uint256 _value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        207
Source: 
>   // or greater than the amount transferred
>   function transferFrom(address _from, address _to, uint256 _value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        226
Source: 
>   // @param _time Lock time in seconds
>   function lock(bytes32 _reason, uint256 _amount, uint256 _time)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        250
Source: 
>   // @param _time Lock time in seconds
>   function transferWithLock(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        274
Source: 
>   // @param _time Desirable lock extension time in seconds
>   function extendLock(bytes32 _reason, uint256 _time)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        287
Source: 
>   // @param _amount Number of tokens to be increased
>   function increaseLockAmount(bytes32 _reason, uint256 _amount) public returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        299
Source: 
>   // @param _of Address of user, claiming back unlockable tokens
>   function unlock(address _of) public returns (uint256 unlockableTokens) {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 lockedTokens;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        315
Source: 
>   // @parram _value the number of tokens to be burned
>   function burn(uint256 _value) public returns (bool success)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        347
Source: 
>   // In the future, we cannot predict the behavior of the user and can show only locked ones.
>   function tokensLockedAtTime(address _of, bytes32 _reason, uint256 _time)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        358
Source: 
>   // @param _of The address to query the total balance of
>   function totalBalanceOf(address _of)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    InBitToken
Line:        385
Source: 
>   // @param _of The address to query the unlockable token count of
>   function getUnlockableTokens(address _of)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    InBitToken
Line:        310
Source: 
>     if (unlockableTokens > 0)
>       this.transfer(_of, unlockableTokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InBitToken
Line:        174
Source: 
>   // @param _value the amount that _spender can spend on behalf of _owner
>   function transfer(address _to, uint256 _value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InBitToken
Line:        207
Source: 
>   // or greater than the amount transferred
>   function transferFrom(address _from, address _to, uint256 _value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InBitToken
Line:        274
Source: 
>   // @param _time Desirable lock extension time in seconds
>   function extendLock(bytes32 _reason, uint256 _time)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    InBitToken
Line:        287
Source: 
>   // @param _amount Number of tokens to be increased
>   function increaseLockAmount(bytes32 _reason, uint256 _amount) public returns (bool)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InBitToken
Line:        191
Source: 
>   // with _value.
>   function approve(address _spender, uint256 _value)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InBitToken
Line:        226
Source: 
>   // @param _time Lock time in seconds
>   function lock(bytes32 _reason, uint256 _amount, uint256 _time)
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    InBitToken
Line:        250
Source: 
>   // @param _time Lock time in seconds
>   function transferWithLock(
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address _to,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    InBitToken
Line:        155
Source: 
>   // (unlocked and transferred to the address)
>   struct lockToken {
>   ^^^^^^^^^^^^^^^^^^
>     uint256 amount;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >= 0.4.5<0.60;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    InBitToken
Line:        310
Source: 
>     if (unlockableTokens > 0)
>       this.transfer(_of, unlockableTokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    InBitToken
Line:        238
Source: 
>     transfer(address(this), _amount);
>     locked[msg.sender][_reason] = lockToken(_amount, validUntil, false);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Locked(msg.sender, _reason, _amount, validUntil);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    InBitToken
Line:        279
Source: 
>     require(tokensLocked(msg.sender, _reason) > 0, 'There are no tokens locked for specified reason');
>     locked[msg.sender][_reason].validity = locked[msg.sender][_reason].validity.add(_time);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Locked(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    InBitToken
Line:        291
Source: 
>     transfer(address(this), _amount);
>     locked[msg.sender][_reason].amount = locked[msg.sender][_reason].amount.add(_amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Locked(msg.sender, _reason, locked[msg.sender][_reason].amount, locked[msg.sender][_reason].validity);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InBitToken
Line:        195
Source: 
>   {
>     allowance[msg.sender][_spender] = _value;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Approval(msg.sender, _spender, _value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InBitToken
Line:        263
Source: 
>     if (locked[_to][_reason].amount == 0)
>       lockReason[_to].push(_reason);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     transfer(address(this), _amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InBitToken
Line:        265
Source: 
>     transfer(address(this), _amount);
>     locked[_to][_reason] = lockToken(_amount, validUntil, false);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     emit Locked(_to, _reason, _amount, validUntil);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    InBitToken
Line:        305
Source: 
>         unlockableTokens = unlockableTokens.add(lockedTokens);
>         locked[_of][lockReason[_of][i]].claimed = true;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Unlocked(_of, lockReason[_of][i], lockedTokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    InBitToken
Line:        310
Source: 
>     if (unlockableTokens > 0)
>       this.transfer(_of, unlockableTokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InBitToken
Line:        79
Source: 
> 
>   string public name = 'InBit Token';
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public symbol = 'InBit';

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InBitToken
Line:        80
Source: 
>   string public name = 'InBit Token';
>   string public symbol = 'InBit';
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public standard = 'InBit Token v1.0';

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InBitToken
Line:        81
Source: 
>   string public symbol = 'InBit';
>   string public standard = 'InBit Token v1.0';
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public totalSupply;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    InBitToken
Line:        83
Source: 
>   uint256 public totalSupply;
>   uint8 public decimals;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
