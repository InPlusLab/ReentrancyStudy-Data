Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.12. Changing pragma version to 0.6.12....
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Epoch
Line:        849
Source: 
>     function getNextEpoch() public view returns (uint256) {
>         if (startTime == lastExecutedAt) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             return getLastEpoch();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        700
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        719
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        728
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        700
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        719
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        728
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        758
Source: 
> 
>     function operator() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operator;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        770
Source: 
> 
>     function isOperator() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _msgSender() == _operator;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        774
Source: 
> 
>     function transferOperator(address newOperator_) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOperator(newOperator_);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        700
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        719
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        728
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        758
Source: 
> 
>     function operator() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operator;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        770
Source: 
> 
>     function isOperator() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _msgSender() == _operator;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        774
Source: 
> 
>     function transferOperator(address newOperator_) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOperator(newOperator_);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Epoch
Line:        835
Source: 
> 
>     function callable() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getCurrentEpoch() >= getNextEpoch();

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Epoch
Line:        855
Source: 
> 
>     function nextEpochPoint() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return startTime.add(getNextEpoch().mul(period));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Epoch
Line:        860
Source: 
>     // params
>     function getPeriod() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return period;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Epoch
Line:        864
Source: 
> 
>     function getStartTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return startTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        700
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        719
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        728
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        758
Source: 
> 
>     function operator() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _operator;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        770
Source: 
> 
>     function isOperator() public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _msgSender() == _operator;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Operator
Line:        774
Source: 
> 
>     function transferOperator(address newOperator_) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOperator(newOperator_);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Epoch
Line:        855
Source: 
> 
>     function nextEpochPoint() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return startTime.add(getNextEpoch().mul(period));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Epoch
Line:        860
Source: 
>     // params
>     function getPeriod() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return period;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Epoch
Line:        864
Source: 
> 
>     function getStartTime() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return startTime;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiUniswapOracle
Line:        1159
Source: 
>     /** @dev Updates 1-day EMA price from Uniswap.  */
>     function update() public override checkEpoch {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address[] memory path = new address[](tokensCount);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    MultiUniswapOracle
Line:        1185
Source: 
> 
>     function getPrice() public view override returns (uint256 amountOut) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return price;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Operator
Line:        774
Source: 
> 
>     function transferOperator(address newOperator_) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOperator(newOperator_);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Epoch
Line:        870
Source: 
> 
>     function setPeriod(uint256 _period) external onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         period = _period;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Operator
Line:        774
Source: 
> 
>     function transferOperator(address newOperator_) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOperator(newOperator_);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Epoch
Line:        870
Source: 
> 
>     function setPeriod(uint256 _period) external onlyOperator {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         period = _period;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    MultiUniswapOracle
Line:        1179
Source: 
>         uint256[] memory amountsOut =
>             IUniswapV2Router02(uniswapRouter).getAmountsOut(1e18, path);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price = amountsOut[tokensCount - 1];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixedPoint
Line:        211
Source: 
>     // resolution: 1 / 2**112
>     struct uq112x112 {
>     ^^^^^^^^^^^^^^^^^^
>         uint224 _x;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FixedPoint
Line:        217
Source: 
>     // resolution: 1 / 2**112
>     struct uq144x112 {
>     ^^^^^^^^^^^^^^^^^^
>         uint256 _x;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        340
Source: 
> 
>     function DOMAIN_SEPARATOR() external view returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        342
Source: 
> 
>     function PERMIT_TYPEHASH() external pure returns (bytes32);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Pair
Line:        373
Source: 
> 
>     function MINIMUM_LIQUIDITY() external pure returns (uint256);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapV2Library
Line:        465
Source: 
>     ) internal view returns (uint256 reserveA, uint256 reserveB) {
>         (address token0, ) = sortTokens(tokenA, tokenB);
>          ^^^^^^^^^^^^^^
>         (uint256 reserve0, uint256 reserve1, ) =

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    UniswapV2Library
Line:        466
Source: 
>         (address token0, ) = sortTokens(tokenA, tokenB);
>         (uint256 reserve0, uint256 reserve1, ) =
>          ^^^^^^^^^^^^^^^^
>             IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    IUniswapV2Router01
Line:        902
Source: 
> 
>     function WETH() external pure returns (address);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        897
Source: 
> 
> pragma solidity >=0.6.2;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1060
Source: 
> 
> pragma solidity >=0.6.2;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    MultiUniswapOracle
Line:        1130
Source: 
>     uint256 public tokensCount;
>     uint256 price;
>     ^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    MultiUniswapOracle
Line:        1179
Source: 
>         uint256[] memory amountsOut =
>             IUniswapV2Router02(uniswapRouter).getAmountsOut(1e18, path);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price = amountsOut[tokensCount - 1];

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    FixedPoint
Line:        254
Source: 
>         require(
>             y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x),
>                        ^
>             'FixedPoint: MULTIPLICATION_OVERFLOW'

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    UniswapV2Library
Line:        529
Source: 
>         amounts[0] = amountIn;
>         for (uint256 i; i < path.length - 1; i++) {
>                                              ^
>             (uint256 reserveIn, uint256 reserveOut) =

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    MultiUniswapOracle
Line:        1130
Source: 
>     uint256 public tokensCount;
>     uint256 price;
>     ^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    MultiUniswapOracle
Line:        1180
Source: 
>             IUniswapV2Router02(uniswapRouter).getAmountsOut(1e18, path);
>         price = amountsOut[tokensCount - 1];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Epoch
Line:        830
Source: 
> 
>         lastExecutedAt = block.timestamp;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        467
Source: 
>         (uint256 reserve0, uint256 reserve1, ) =
>             IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        578
Source: 
>     {
>         blockTimestamp = currentBlockTimestamp();
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        579
Source: 
>         blockTimestamp = currentBlockTimestamp();
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        580
Source: 
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        584
Source: 
>         (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) =
>             IUniswapV2Pair(pair).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (blockTimestampLast != blockTimestamp) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        467
Source: 
>         (uint256 reserve0, uint256 reserve1, ) =
>             IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        578
Source: 
>     {
>         blockTimestamp = currentBlockTimestamp();
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        579
Source: 
>         blockTimestamp = currentBlockTimestamp();
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        580
Source: 
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        584
Source: 
>         (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) =
>             IUniswapV2Pair(pair).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (blockTimestampLast != blockTimestamp) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Operator
Line:        771
Source: 
>     function isOperator() public view returns (bool) {
>         return _msgSender() == _operator;
>                ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        467
Source: 
>         (uint256 reserve0, uint256 reserve1, ) =
>             IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        578
Source: 
>     {
>         blockTimestamp = currentBlockTimestamp();
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        579
Source: 
>         blockTimestamp = currentBlockTimestamp();
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        580
Source: 
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        584
Source: 
>         (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) =
>             IUniswapV2Pair(pair).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (blockTimestampLast != blockTimestamp) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Operator
Line:        771
Source: 
>     function isOperator() public view returns (bool) {
>         return _msgSender() == _operator;
>                ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        467
Source: 
>         (uint256 reserve0, uint256 reserve1, ) =
>             IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        578
Source: 
>     {
>         blockTimestamp = currentBlockTimestamp();
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        579
Source: 
>         blockTimestamp = currentBlockTimestamp();
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        580
Source: 
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        584
Source: 
>         (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) =
>             IUniswapV2Pair(pair).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (blockTimestampLast != blockTimestamp) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Operator
Line:        771
Source: 
>     function isOperator() public view returns (bool) {
>         return _msgSender() == _operator;
>                ^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2Library
Line:        467
Source: 
>         (uint256 reserve0, uint256 reserve1, ) =
>             IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         (reserveA, reserveB) = tokenA == token0

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        578
Source: 
>     {
>         blockTimestamp = currentBlockTimestamp();
>                          ^^^^^^^^^^^^^^^^^^^^^^^
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        579
Source: 
>         blockTimestamp = currentBlockTimestamp();
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        580
Source: 
>         price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();
>         price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();
>                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    UniswapV2OracleLibrary
Line:        584
Source: 
>         (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) =
>             IUniswapV2Pair(pair).getReserves();
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (blockTimestampLast != blockTimestamp) {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        221
Source: 
> 
>     uint8 private constant RESOLUTION = 112;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        222
Source: 
>     uint8 private constant RESOLUTION = 112;
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 private constant Q224 = Q112 << RESOLUTION;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FixedPoint
Line:        223
Source: 
>     uint256 private constant Q112 = uint256(1) << RESOLUTION;
>     uint256 private constant Q224 = Q112 << RESOLUTION;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Epoch
Line:        810
Source: 
>     ) public {
>         require(_startTime > block.timestamp, 'Epoch: invalid start time');
>                              ^^^^^^^^^^^^^^^
>         period = _period;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Epoch
Line:        845
Source: 
>     function getCurrentEpoch() public view returns (uint256) {
>         return Math.max(startTime, block.timestamp).sub(startTime).div(period);
>                                    ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Epoch
Line:        810
Source: 
>     ) public {
>         require(_startTime > block.timestamp, 'Epoch: invalid start time');
>                              ^^^^^^^^^^^^^^^
>         period = _period;

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Epoch
Line:        845
Source: 
>     function getCurrentEpoch() public view returns (uint256) {
>         return Math.max(startTime, block.timestamp).sub(startTime).div(period);
>                                    ^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Violation
Contract:    Epoch
Line:        830
Source: 
> 
>         lastExecutedAt = block.timestamp;
>                          ^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    MultiUniswapOracle
Line:        1142
Source: 
>         uint256 _period
>     ) public Epoch(_period, block.timestamp + 1, 0) {
>                             ^^^^^^^^^^^^^^^
>         require(_tokensCount >= 2, 'At least two tokens');

[0m
