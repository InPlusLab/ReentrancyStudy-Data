[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Account
Line:        102
Source: 
>                 // solium-disable-next-line security/no-inline-assembly
>                 assembly {
>                 ^^^^^^^^^^
>                     calldatacopy(0, 0, calldatasize())

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BaseLogic
Line:        713
Source: 
>         // solhint-disable-next-line no-inline-assembly
>         assembly {
>         ^^^^^^^^^^
>             r := mload(add(signature, 0x20))

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BaseLogic
Line:        748
Source: 
>         // solium-disable-next-line security/no-inline-assembly
>         assembly {
>            ^^^^^^^
>             let mask := 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BaseLogic
Line:        762
Source: 
>         // solium-disable-next-line security/no-inline-assembly
>         assembly {
>            ^^^^^^^
>             // 32 bytes is the length of the bytes array

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DualsigsLogic
Line:        999
Source: 
> 		// solium-disable-next-line security/no-inline-assembly
> 		assembly {
>      ^^^^^^^
> 			//68 = 32 + 4 + 32

[0m
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    DualsigsLogic
Line:        1009
Source: 
>         // solium-disable-next-line security/no-inline-assembly
>         assembly {
>            ^^^^^^^
> 			/* 'proposeByBoth' data example:

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Account
Line:        6
Source: 
>     // The implementation of the proxy
>     address public implementation;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    LogicManager
Line:        178
Source: 
> 
>     pendingTime public pt;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    BaseLogic
Line:        678
Source: 
>         address recoveredAddr = recover(_signHash, _signature);
>         require(recoveredAddr == _signingKey, "signature verification failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Account
Line:        43
Source: 
> 
>         AccountStorage(_accountStorage).initAccount(this, _keys, _backups);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Account
Line:        22
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly {
>         require(LogicManager(manager).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Account
Line:        61
Source: 
>         // solium-disable-next-line security/no-call-value
>         (success, _res) = _target.call.value(_value)(_data);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call to target failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Account
Line:        22
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly {
>         require(LogicManager(manager).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Account
Line:        100
Source: 
>             else {
>                 require(LogicManager(manager).isAuthorized(logic), "must be an authorized logic for static call");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 // solium-disable-next-line security/no-inline-assembly

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BaseLogic
Line:        771
Source: 
>         if (_index > 0) {
>             require(accountStorage.getKeyStatus(_account, _index) != 1, "frozen key");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DualsigsLogic
Line:        898
Source: 
> 		// solium-disable-next-line security/no-low-level-calls
> 		(bool success,) = address(this).call(_data);
>                        ^^^^^^^^^^^^^^^^^^^^^^^
> 		require(success, "enterWithDualSigs failed");

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DualsigsLogic
Line:        924
Source: 
> 		checkKeyStatus(backup, backupKeyIndex);
> 		address signingKey = accountStorage.getKeyData(backup, backupKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		checkAndUpdateNonce(signingKey, _backupNonce);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DualsigsLogic
Line:        908
Source: 
> 		checkKeyStatus(client, clientKeyIndex);
> 		address signingKey = accountStorage.getKeyData(client, clientKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if ((getMethodId(_data) == PROPOSE_BY_BOTH) && 

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DualsigsLogic
Line:        936
Source: 
> 		require(index <= MAX_DEFINED_BACKUP_INDEX, "invalid or duplicate or no vacancy");
> 		accountStorage.setBackup(_account, index, _backup, now + DELAY_CHANGE_BACKUP, uint256(-1));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit AddBackup(_account, _backup);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    DualsigsLogic
Line:        980
Source: 
> 		bytes32 functionHash = keccak256(_functionData);
> 		accountStorage.setProposalData(_client, _client, proposedActionId, functionHash, _backup);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit ProposeByBoth(_client, _backup, _functionData);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Account
Line:        38
Source: 
>             address logic = _logics[i];
>             require(LogicManager(manager).isAuthorized(logic), "must be authorized logic");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Account
Line:        40
Source: 
> 
>             BaseLogic(logic).initAccount(this);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    AccountBaseLogic
Line:        827
Source: 
>         for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_client, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    AccountBaseLogic
Line:        828
Source: 
>             address backup = accountStorage.getBackupAddress(_client, i);
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    AccountBaseLogic
Line:        829
Source: 
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // backup match and effective and not expired

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DualsigsLogic
Line:        948
Source: 
> 		for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_account, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    DualsigsLogic
Line:        949
Source: 
>             address backup = accountStorage.getBackupAddress(_account, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			// _backup already exists and not expired

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    Account
Line:        61
Source: 
>         // solium-disable-next-line security/no-call-value
>         (success, _res) = _target.call.value(_value)(_data);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call to target failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    DualsigsLogic
Line:        898
Source: 
> 		// solium-disable-next-line security/no-low-level-calls
> 		(bool success,) = address(this).call(_data);
>                        ^^^^^^^^^^^^^^^^^^^^^^^
> 		require(success, "enterWithDualSigs failed");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Account
Line:        29
Source: 
>      */
>     function init(address _manager, address _accountStorage, address[] calldata _logics, address[] calldata _keys, address[] calldata _backups)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    AccountStorage
Line:        458
Source: 
> 
>     function setProposalData(address payable _client, address _proposer, bytes4 _actionId, bytes32 _hash, address _approvedBackup)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DualsigsLogic
Line:        932
Source: 
>     // called from 'enter'
> 	function addBackup(address payable _account, address _backup) external allowSelfCallsOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_account != _backup, "cannot be backup of oneself");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DualsigsLogic
Line:        942
Source: 
>     // 'available' means an empty slot or an expired backup
> 	function findAvailableSlot(address _account, address _backup) public view returns(uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		uint index = MAX_DEFINED_BACKUP_INDEX + 1;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    DualsigsLogic
Line:        973
Source: 
>     */
> 	function proposeByBoth(address payable _client, address _backup, bytes calldata _functionData) external allowSelfCallsOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(getSignerAddress(_functionData) == _client, "invalid _client");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Account
Line:        54
Source: 
>     */
>     function invoke(address _target, uint _value, bytes calldata _data)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Account
Line:        71
Source: 
>     */
>     function enableStaticCall(address _module, bytes4 _method) external allowAuthorizedLogicContractsCallsOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         enabled[_method] = _module;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LogicManager
Line:        201
Source: 
>      */
>     function submitUpdatePendingTime(uint _pendingTime) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pt.nextPendingTime = _pendingTime;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LogicManager
Line:        217
Source: 
>      */
>     function isAuthorized(address _logic) external view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return authorized[_logic];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LogicManager
Line:        233
Source: 
>      */
>     function submitUpdate(address _logic, bool _value) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         pending storage p = pendingLogics[_logic];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    LogicManager
Line:        243
Source: 
>      */
>     function cancelUpdate(address _logic) external onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete pendingLogics[_logic];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        352
Source: 
> 
>     function getOperationKeyCount(address _account) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return operationKeyCount[_account];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        356
Source: 
> 
>     function increaseKeyCount(address payable _account) external allowAuthorizedLogicContractsCallsOnly(_account) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         operationKeyCount[_account] = operationKeyCount[_account] + 1;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        362
Source: 
> 
>     function getKeyData(address _account, uint256 _index) public view returns(address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         KeyItem memory item = keyData[_account][_index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        367
Source: 
> 
>     function setKeyData(address payable _account, uint256 _index, address _key) external allowAuthorizedLogicContractsCallsOnly(_account) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_key != address(0), "invalid _key value");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        375
Source: 
> 
>     function getKeyStatus(address _account, uint256 _index) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         KeyItem memory item = keyData[_account][_index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        380
Source: 
> 
>     function setKeyStatus(address payable _account, uint256 _index, uint256 _status) external allowAuthorizedLogicContractsCallsOnly(_account) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         KeyItem storage item = keyData[_account][_index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        387
Source: 
> 
>     function getBackupAddress(address _account, uint256 _index) external view returns(address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         BackupAccount memory b = backupData[_account][_index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        392
Source: 
> 
>     function getBackupEffectiveDate(address _account, uint256 _index) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         BackupAccount memory b = backupData[_account][_index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        397
Source: 
> 
>     function getBackupExpiryDate(address _account, uint256 _index) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         BackupAccount memory b = backupData[_account][_index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        402
Source: 
> 
>     function setBackup(address payable _account, uint256 _index, address _backup, uint256 _effective, uint256 _expiry)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        412
Source: 
> 
>     function setBackupExpiryDate(address payable _account, uint256 _index, uint256 _expiry)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        420
Source: 
> 
>     function clearBackupData(address payable _account, uint256 _index) external allowAuthorizedLogicContractsCallsOnly(_account) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete backupData[_account][_index];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        426
Source: 
> 
>     function getDelayDataHash(address payable _account, bytes4 _actionId) external view returns(bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DelayItem memory item = delayData[_account][_actionId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        431
Source: 
> 
>     function getDelayDataDueTime(address payable _account, bytes4 _actionId) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DelayItem memory item = delayData[_account][_actionId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        436
Source: 
> 
>     function setDelayData(address payable _account, bytes4 _actionId, bytes32 _hash, uint256 _dueTime) external allowAuthorizedLogicContractsCallsOnly(_account) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         DelayItem storage item = delayData[_account][_actionId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        442
Source: 
> 
>     function clearDelayData(address payable _account, bytes4 _actionId) external allowAuthorizedLogicContractsCallsOnly(_account) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete delayData[_account][_actionId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        448
Source: 
> 
>     function getProposalDataHash(address _client, address _proposer, bytes4 _actionId) external view returns(bytes32) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Proposal memory p = proposalData[_client][_proposer][_actionId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        453
Source: 
> 
>     function getProposalDataApproval(address _client, address _proposer, bytes4 _actionId) external view returns(address[] memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         Proposal memory p = proposalData[_client][_proposer][_actionId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    AccountStorage
Line:        479
Source: 
> 
>     function clearProposalData(address payable _client, address _proposer, bytes4 _actionId) external allowAuthorizedLogicContractsCallsOnly(_client) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         delete proposalData[_client][_proposer][_actionId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseLogic
Line:        656
Source: 
> 
>     function initAccount(Account _account) external allowAccountCallsOnly(_account){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseLogic
Line:        661
Source: 
> 
>     function getKeyNonce(address _key) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keyNonce[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseLogic
Line:        656
Source: 
> 
>     function initAccount(Account _account) external allowAccountCallsOnly(_account){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseLogic
Line:        661
Source: 
> 
>     function getKeyNonce(address _key) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keyNonce[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseLogic
Line:        656
Source: 
> 
>     function initAccount(Account _account) external allowAccountCallsOnly(_account){
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BaseLogic
Line:        661
Source: 
> 
>     function getKeyNonce(address _key) external view returns(uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return keyNonce[_key];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    DualsigsLogic
Line:        889
Source: 
>     */
> 	function enter(
>     ^^^^^^^^^^^^
> 		bytes calldata _data, bytes calldata _clientSig, bytes calldata _backupSig, uint256 _clientNonce, uint256 _backupNonce

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Account
Line:        38
Source: 
>             address logic = _logics[i];
>             require(LogicManager(manager).isAuthorized(logic), "must be authorized logic");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Account
Line:        40
Source: 
> 
>             BaseLogic(logic).initAccount(this);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Account
Line:        43
Source: 
> 
>         AccountStorage(_accountStorage).initAccount(this, _keys, _backups);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Account
Line:        22
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly {
>         require(LogicManager(manager).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LogicManager
Line:        151
Source: 
> 
>     struct pending {
>     ^^^^^^^^^^^^^^^^
>         bool value; //True: enable a new logic; False: disable an old logic.

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    LogicManager
Line:        172
Source: 
> 
>     struct pendingTime {
>     ^^^^^^^^^^^^^^^^^^^^
>         uint curPendingTime; //current pending time

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AccountStorage
Line:        502
Source: 
>         for (uint256 index = 0; index < _keys.length; index++) {
>             address _key = _keys[index];
>             ^^^^^^^^^^^^
>             require(_key != address(0), "_key cannot be 0x0");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    AccountStorage
Line:        521
Source: 
>         for (uint256 index = 0; index < _backups.length; index++) {
>             address _backup = _backups[index];
>             ^^^^^^^^^^^^^^^
>             require(_backup != address(0), "backup cannot be 0x0");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    DualsigsLogic
Line:        898
Source: 
> 		// solium-disable-next-line security/no-low-level-calls
> 		(bool success,) = address(this).call(_data);
>       ^^^^^^^^^^^^
> 		require(success, "enterWithDualSigs failed");

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1
Source: 
> pragma solidity ^0.5.4;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 
> contract Account {

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        633
Source: 
> 
>     bytes constant internal SIGN_HASH_PREFIX = "\x19Ethereum Signed Message:\n32";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        635
Source: 
> 
>     mapping (address => uint256) keyNonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     AccountStorage public accountStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        636
Source: 
>     mapping (address => uint256) keyNonce;
>     AccountStorage public accountStorage;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        633
Source: 
> 
>     bytes constant internal SIGN_HASH_PREFIX = "\x19Ethereum Signed Message:\n32";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        635
Source: 
> 
>     mapping (address => uint256) keyNonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     AccountStorage public accountStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        636
Source: 
>     mapping (address => uint256) keyNonce;
>     AccountStorage public accountStorage;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        786
Source: 
> 
>     uint256 constant internal DELAY_CHANGE_ADMIN_KEY = 21 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal DELAY_CHANGE_OPERATION_KEY = 7 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        787
Source: 
>     uint256 constant internal DELAY_CHANGE_ADMIN_KEY = 21 days;
>     uint256 constant internal DELAY_CHANGE_OPERATION_KEY = 7 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal DELAY_UNFREEZE_KEY = 7 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        788
Source: 
>     uint256 constant internal DELAY_CHANGE_OPERATION_KEY = 7 days;
>     uint256 constant internal DELAY_UNFREEZE_KEY = 7 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal DELAY_CHANGE_BACKUP = 21 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        789
Source: 
>     uint256 constant internal DELAY_UNFREEZE_KEY = 7 days;
>     uint256 constant internal DELAY_CHANGE_BACKUP = 21 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal DELAY_CHANGE_ADMIN_KEY_BY_BACKUP = 30 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        790
Source: 
>     uint256 constant internal DELAY_CHANGE_BACKUP = 21 days;
>     uint256 constant internal DELAY_CHANGE_ADMIN_KEY_BY_BACKUP = 30 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        792
Source: 
> 
>     uint256 constant internal MAX_DEFINED_BACKUP_INDEX = 5;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        795
Source: 
> 	// Equals to bytes4(keccak256("changeAdminKey(address,address)"))
> 	bytes4 internal constant CHANGE_ADMIN_KEY = 0xd595d935;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("changeAdminKeyByBackup(address,address)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        797
Source: 
> 	// Equals to bytes4(keccak256("changeAdminKeyByBackup(address,address)"))
> 	bytes4 internal constant CHANGE_ADMIN_KEY_BY_BACKUP = 0xfdd54ba1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("changeAdminKeyWithoutDelay(address,address)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        799
Source: 
> 	// Equals to bytes4(keccak256("changeAdminKeyWithoutDelay(address,address)"))
> 	bytes4 internal constant CHANGE_ADMIN_KEY_WITHOUT_DELAY = 0x441d2e50;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("changeAllOperationKeysWithoutDelay(address,address[])"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        801
Source: 
> 	// Equals to bytes4(keccak256("changeAllOperationKeysWithoutDelay(address,address[])"))
> 	bytes4 internal constant CHANGE_ALL_OPERATION_KEYS_WITHOUT_DELAY = 0x02064abc;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("unfreezeWithoutDelay(address)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        803
Source: 
> 	// Equals to bytes4(keccak256("unfreezeWithoutDelay(address)"))
> 	bytes4 internal constant UNFREEZE_WITHOUT_DELAY = 0x69521650;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("changeAllOperationKeys(address,address[])"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        805
Source: 
> 	// Equals to bytes4(keccak256("changeAllOperationKeys(address,address[])"))
> 	bytes4 internal constant CHANGE_ALL_OPERATION_KEYS = 0xd3b9d4d6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("unfreeze(address)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        807
Source: 
> 	// Equals to bytes4(keccak256("unfreeze(address)"))
> 	bytes4 internal constant UNFREEZE = 0x45c8b1a6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        633
Source: 
> 
>     bytes constant internal SIGN_HASH_PREFIX = "\x19Ethereum Signed Message:\n32";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        635
Source: 
> 
>     mapping (address => uint256) keyNonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     AccountStorage public accountStorage;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    BaseLogic
Line:        636
Source: 
>     mapping (address => uint256) keyNonce;
>     AccountStorage public accountStorage;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        786
Source: 
> 
>     uint256 constant internal DELAY_CHANGE_ADMIN_KEY = 21 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal DELAY_CHANGE_OPERATION_KEY = 7 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        787
Source: 
>     uint256 constant internal DELAY_CHANGE_ADMIN_KEY = 21 days;
>     uint256 constant internal DELAY_CHANGE_OPERATION_KEY = 7 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal DELAY_UNFREEZE_KEY = 7 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        788
Source: 
>     uint256 constant internal DELAY_CHANGE_OPERATION_KEY = 7 days;
>     uint256 constant internal DELAY_UNFREEZE_KEY = 7 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal DELAY_CHANGE_BACKUP = 21 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        789
Source: 
>     uint256 constant internal DELAY_UNFREEZE_KEY = 7 days;
>     uint256 constant internal DELAY_CHANGE_BACKUP = 21 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 constant internal DELAY_CHANGE_ADMIN_KEY_BY_BACKUP = 30 days;

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        790
Source: 
>     uint256 constant internal DELAY_CHANGE_BACKUP = 21 days;
>     uint256 constant internal DELAY_CHANGE_ADMIN_KEY_BY_BACKUP = 30 days;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        792
Source: 
> 
>     uint256 constant internal MAX_DEFINED_BACKUP_INDEX = 5;
>        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        795
Source: 
> 	// Equals to bytes4(keccak256("changeAdminKey(address,address)"))
> 	bytes4 internal constant CHANGE_ADMIN_KEY = 0xd595d935;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("changeAdminKeyByBackup(address,address)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        797
Source: 
> 	// Equals to bytes4(keccak256("changeAdminKeyByBackup(address,address)"))
> 	bytes4 internal constant CHANGE_ADMIN_KEY_BY_BACKUP = 0xfdd54ba1;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("changeAdminKeyWithoutDelay(address,address)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        799
Source: 
> 	// Equals to bytes4(keccak256("changeAdminKeyWithoutDelay(address,address)"))
> 	bytes4 internal constant CHANGE_ADMIN_KEY_WITHOUT_DELAY = 0x441d2e50;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("changeAllOperationKeysWithoutDelay(address,address[])"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        801
Source: 
> 	// Equals to bytes4(keccak256("changeAllOperationKeysWithoutDelay(address,address[])"))
> 	bytes4 internal constant CHANGE_ALL_OPERATION_KEYS_WITHOUT_DELAY = 0x02064abc;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("unfreezeWithoutDelay(address)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        803
Source: 
> 	// Equals to bytes4(keccak256("unfreezeWithoutDelay(address)"))
> 	bytes4 internal constant UNFREEZE_WITHOUT_DELAY = 0x69521650;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("changeAllOperationKeys(address,address[])"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        805
Source: 
> 	// Equals to bytes4(keccak256("changeAllOperationKeys(address,address[])"))
> 	bytes4 internal constant CHANGE_ALL_OPERATION_KEYS = 0xd3b9d4d6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("unfreeze(address)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    AccountBaseLogic
Line:        807
Source: 
> 	// Equals to bytes4(keccak256("unfreeze(address)"))
> 	bytes4 internal constant UNFREEZE = 0x45c8b1a6;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DualsigsLogic
Line:        866
Source: 
> 	// Equals to bytes4(keccak256("addBackup(address,address)"))
> 	bytes4 private constant ADD_BACKUP = 0x426b7407;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	// Equals to bytes4(keccak256("proposeByBoth(address,address,bytes)"))

[0m
[0;33mSeverity:    HIGH
Pattern:     State Variable Shadowing
Description: State variables in inherited contract should not be named
             identically to inherited variables
Type:        Warning
Contract:    DualsigsLogic
Line:        868
Source: 
> 	// Equals to bytes4(keccak256("proposeByBoth(address,address,bytes)"))
> 	bytes4 private constant PROPOSE_BY_BOTH = 0x7548cb94;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AccountStorage
Line:        300
Source: 
> 
>     modifier allowAccountCallsOnly(Account _account) {
>                                    ^^^^^^^^^^^^^^^^
>         require(msg.sender == address(_account), "caller must be account");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AccountStorage
Line:        305
Source: 
> 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>                                                     ^^^^^^^^^^^^^^^^^^^^^^^^
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AccountStorage
Line:        332
Source: 
>     // account => quantity of operation keys (index >= 1)
>     mapping (address => uint256) operationKeyCount;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AccountStorage
Line:        335
Source: 
>     // account => index => KeyItem
>     mapping (address => mapping(uint256 => KeyItem)) keyData;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AccountStorage
Line:        338
Source: 
>     // account => index => backup account
>     mapping (address => mapping(uint256 => BackupAccount)) backupData;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AccountStorage
Line:        345
Source: 
>     */
>     mapping (address => mapping(bytes4 => DelayItem)) delayData;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    AccountStorage
Line:        348
Source: 
>     // client account => proposer account => proposed actionId => Proposal
>     mapping (address => mapping(address => mapping(bytes4 => Proposal))) proposalData;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BaseLogic
Line:        635
Source: 
> 
>     mapping (address => uint256) keyNonce;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     AccountStorage public accountStorage;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    BaseLogic
Line:        643
Source: 
> 
>     modifier allowAccountCallsOnly(Account _account) {
>                                    ^^^^^^^^^^^^^^^^
>         require(msg.sender == address(_account), "caller must be account");

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    BaseLogic
Line:        778
Source: 
>         require(_nonce > keyNonce[_key], "nonce too small");
>         require(SafeMath.div(_nonce, 1000000) <= now + 86400, "nonce too big"); // 86400=24*3600 seconds
>                                         ^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Account
Line:        61
Source: 
>         // solium-disable-next-line security/no-call-value
>         (success, _res) = _target.call.value(_value)(_data);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call to target failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    BaseLogic
Line:        771
Source: 
>         if (_index > 0) {
>             require(accountStorage.getKeyStatus(_account, _index) != 1, "frozen key");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AccountBaseLogic
Line:        827
Source: 
>         for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_client, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AccountBaseLogic
Line:        828
Source: 
>             address backup = accountStorage.getBackupAddress(_client, i);
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    AccountBaseLogic
Line:        829
Source: 
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // backup match and effective and not expired

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DualsigsLogic
Line:        924
Source: 
> 		checkKeyStatus(backup, backupKeyIndex);
> 		address signingKey = accountStorage.getKeyData(backup, backupKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		checkAndUpdateNonce(signingKey, _backupNonce);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DualsigsLogic
Line:        908
Source: 
> 		checkKeyStatus(client, clientKeyIndex);
> 		address signingKey = accountStorage.getKeyData(client, clientKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if ((getMethodId(_data) == PROPOSE_BY_BOTH) && 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DualsigsLogic
Line:        936
Source: 
> 		require(index <= MAX_DEFINED_BACKUP_INDEX, "invalid or duplicate or no vacancy");
> 		accountStorage.setBackup(_account, index, _backup, now + DELAY_CHANGE_BACKUP, uint256(-1));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit AddBackup(_account, _backup);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DualsigsLogic
Line:        948
Source: 
> 		for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_account, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DualsigsLogic
Line:        949
Source: 
>             address backup = accountStorage.getBackupAddress(_account, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			// _backup already exists and not expired

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    DualsigsLogic
Line:        980
Source: 
> 		bytes32 functionHash = keccak256(_functionData);
> 		accountStorage.setProposalData(_client, _client, proposedActionId, functionHash, _backup);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit ProposeByBoth(_client, _backup, _functionData);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Account
Line:        61
Source: 
>         // solium-disable-next-line security/no-call-value
>         (success, _res) = _target.call.value(_value)(_data);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call to target failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    BaseLogic
Line:        771
Source: 
>         if (_index > 0) {
>             require(accountStorage.getKeyStatus(_account, _index) != 1, "frozen key");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AccountBaseLogic
Line:        827
Source: 
>         for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_client, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AccountBaseLogic
Line:        828
Source: 
>             address backup = accountStorage.getBackupAddress(_client, i);
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    AccountBaseLogic
Line:        829
Source: 
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // backup match and effective and not expired

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DualsigsLogic
Line:        898
Source: 
> 		// solium-disable-next-line security/no-low-level-calls
> 		(bool success,) = address(this).call(_data);
>                        ^^^^^^^^^^^^^^^^^^^^^^^
> 		require(success, "enterWithDualSigs failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DualsigsLogic
Line:        924
Source: 
> 		checkKeyStatus(backup, backupKeyIndex);
> 		address signingKey = accountStorage.getKeyData(backup, backupKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		checkAndUpdateNonce(signingKey, _backupNonce);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DualsigsLogic
Line:        908
Source: 
> 		checkKeyStatus(client, clientKeyIndex);
> 		address signingKey = accountStorage.getKeyData(client, clientKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if ((getMethodId(_data) == PROPOSE_BY_BOTH) && 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DualsigsLogic
Line:        936
Source: 
> 		require(index <= MAX_DEFINED_BACKUP_INDEX, "invalid or duplicate or no vacancy");
> 		accountStorage.setBackup(_account, index, _backup, now + DELAY_CHANGE_BACKUP, uint256(-1));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit AddBackup(_account, _backup);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DualsigsLogic
Line:        948
Source: 
> 		for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_account, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DualsigsLogic
Line:        949
Source: 
>             address backup = accountStorage.getBackupAddress(_account, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			// _backup already exists and not expired

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    DualsigsLogic
Line:        980
Source: 
> 		bytes32 functionHash = keccak256(_functionData);
> 		accountStorage.setProposalData(_client, _client, proposedActionId, functionHash, _backup);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit ProposeByBoth(_client, _backup, _functionData);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Account
Line:        38
Source: 
>             address logic = _logics[i];
>             require(LogicManager(manager).isAuthorized(logic), "must be authorized logic");
>                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Account
Line:        22
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly {
>         require(LogicManager(manager).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Account
Line:        100
Source: 
>             else {
>                 require(LogicManager(manager).isAuthorized(logic), "must be an authorized logic for static call");
>                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 // solium-disable-next-line security/no-inline-assembly

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BaseLogic
Line:        771
Source: 
>         if (_index > 0) {
>             require(accountStorage.getKeyStatus(_account, _index) != 1, "frozen key");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AccountBaseLogic
Line:        827
Source: 
>         for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_client, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AccountBaseLogic
Line:        828
Source: 
>             address backup = accountStorage.getBackupAddress(_client, i);
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    AccountBaseLogic
Line:        829
Source: 
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // backup match and effective and not expired

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DualsigsLogic
Line:        924
Source: 
> 		checkKeyStatus(backup, backupKeyIndex);
> 		address signingKey = accountStorage.getKeyData(backup, backupKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		checkAndUpdateNonce(signingKey, _backupNonce);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DualsigsLogic
Line:        908
Source: 
> 		checkKeyStatus(client, clientKeyIndex);
> 		address signingKey = accountStorage.getKeyData(client, clientKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if ((getMethodId(_data) == PROPOSE_BY_BOTH) && 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DualsigsLogic
Line:        948
Source: 
> 		for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_account, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    DualsigsLogic
Line:        949
Source: 
>             address backup = accountStorage.getBackupAddress(_account, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			// _backup already exists and not expired

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Account
Line:        40
Source: 
> 
>             BaseLogic(logic).initAccount(this);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Account
Line:        43
Source: 
> 
>         AccountStorage(_accountStorage).initAccount(this, _keys, _backups);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DualsigsLogic
Line:        936
Source: 
> 		require(index <= MAX_DEFINED_BACKUP_INDEX, "invalid or duplicate or no vacancy");
> 		accountStorage.setBackup(_account, index, _backup, now + DELAY_CHANGE_BACKUP, uint256(-1));
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit AddBackup(_account, _backup);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    DualsigsLogic
Line:        980
Source: 
> 		bytes32 functionHash = keccak256(_functionData);
> 		accountStorage.setProposalData(_client, _client, proposedActionId, functionHash, _backup);
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit ProposeByBoth(_client, _backup, _functionData);

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    BaseLogic
Line:        728
Source: 
>         // these malleable signatures as well.
>         if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {
>                        ^
>             return address(0);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Account
Line:        9
Source: 
>     // Logic manager
>     address public manager;
>     ^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    LogicManager
Line:        181
Source: 
>     // how many authorized logics
>     uint public logicCount;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Account
Line:        6
Source: 
>     // The implementation of the proxy
>     address public implementation;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    LogicManager
Line:        178
Source: 
> 
>     pendingTime public pt;
>     ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Account
Line:        61
Source: 
>         // solium-disable-next-line security/no-call-value
>         (success, _res) = _target.call.value(_value)(_data);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(success, "call to target failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    BaseLogic
Line:        771
Source: 
>         if (_index > 0) {
>             require(accountStorage.getKeyStatus(_account, _index) != 1, "frozen key");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DualsigsLogic
Line:        898
Source: 
> 		// solium-disable-next-line security/no-low-level-calls
> 		(bool success,) = address(this).call(_data);
>                        ^^^^^^^^^^^^^^^^^^^^^^^
> 		require(success, "enterWithDualSigs failed");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DualsigsLogic
Line:        924
Source: 
> 		checkKeyStatus(backup, backupKeyIndex);
> 		address signingKey = accountStorage.getKeyData(backup, backupKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		checkAndUpdateNonce(signingKey, _backupNonce);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DualsigsLogic
Line:        908
Source: 
> 		checkKeyStatus(client, clientKeyIndex);
> 		address signingKey = accountStorage.getKeyData(client, clientKeyIndex);
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if ((getMethodId(_data) == PROPOSE_BY_BOTH) && 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DualsigsLogic
Line:        948
Source: 
> 		for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_account, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    DualsigsLogic
Line:        949
Source: 
>             address backup = accountStorage.getBackupAddress(_account, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_account, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			// _backup already exists and not expired

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Account
Line:        34
Source: 
>         require(_manager != address(0) && _accountStorage != address(0), "Account: address is null");
>         manager = _manager;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Account
Line:        84
Source: 
>         require(_newMgr != manager, "already changed");
>         manager = _newMgr;
>         ^^^^^^^^^^^^^^^^^
>         emit ManagerChanged(_newMgr);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Account
Line:        72
Source: 
>     function enableStaticCall(address _module, bytes4 _method) external allowAuthorizedLogicContractsCallsOnly {
>         enabled[_method] = _module;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit EnabledStaticCall(_module, _method);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LogicManager
Line:        211
Source: 
>         require(pt.dueTime <= now, "too early to trigger updatePendingTime");
>         pt.curPendingTime = pt.nextPendingTime;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LogicManager
Line:        257
Source: 
>         updateLogic(_logic, p.value);
>         delete pendingLogics[_logic];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LogicManager
Line:        268
Source: 
>             if(_value) {
>                 logicCount += 1;
>                 ^^^^^^^^^^^^^^^
>                 authorized[_logic] = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LogicManager
Line:        269
Source: 
>                 logicCount += 1;
>                 authorized[_logic] = true;
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^
>                 authorizedLogics.push(_logic);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LogicManager
Line:        270
Source: 
>                 authorized[_logic] = true;
>                 authorizedLogics.push(_logic);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LogicManager
Line:        273
Source: 
>             else {
>                 logicCount -= 1;
>                 ^^^^^^^^^^^^^^^
>                 require(logicCount > 0, "must have at least one logic module");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LogicManager
Line:        288
Source: 
>                  if (_logic == authorizedLogics[i]) {
>                      authorizedLogics[i] = lastLogic;
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                      break;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    LogicManager
Line:        293
Source: 
>         }
>         authorizedLogics.length--;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        357
Source: 
>     function increaseKeyCount(address payable _account) external allowAuthorizedLogicContractsCallsOnly(_account) {
>         operationKeyCount[_account] = operationKeyCount[_account] + 1;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        370
Source: 
>         KeyItem storage item = keyData[_account][_index];
>         item.pubKey = _key;
>         ^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        382
Source: 
>         KeyItem storage item = keyData[_account][_index];
>         item.status = _status;
>         ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        407
Source: 
>         BackupAccount storage b = backupData[_account][_index];
>         b.backup = _backup;
>         ^^^^^^^^^^^^^^^^^^
>         b.effectiveDate = _effective;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        408
Source: 
>         b.backup = _backup;
>         b.effectiveDate = _effective;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         b.expiryDate = _expiry;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        409
Source: 
>         b.effectiveDate = _effective;
>         b.expiryDate = _expiry;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        417
Source: 
>         BackupAccount storage b = backupData[_account][_index];
>         b.expiryDate = _expiry;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        421
Source: 
>     function clearBackupData(address payable _account, uint256 _index) external allowAuthorizedLogicContractsCallsOnly(_account) {
>         delete backupData[_account][_index];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        438
Source: 
>         DelayItem storage item = delayData[_account][_actionId];
>         item.hash = _hash;
>         ^^^^^^^^^^^^^^^^^
>         item.dueTime = _dueTime;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        439
Source: 
>         item.hash = _hash;
>         item.dueTime = _dueTime;
>         ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        443
Source: 
>     function clearDelayData(address payable _account, bytes4 _actionId) external allowAuthorizedLogicContractsCallsOnly(_account) {
>         delete delayData[_account][_actionId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        468
Source: 
>                 }
>                 p.approval.push(_approvedBackup);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        470
Source: 
>             } else {
>                 p.hash = _hash;
>                 ^^^^^^^^^^^^^^
>                 p.approval.length = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        471
Source: 
>                 p.hash = _hash;
>                 p.approval.length = 0;
>                 ^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        474
Source: 
>         } else {
>             p.hash = _hash;
>             ^^^^^^^^^^^^^^
>             p.approval.push(_approvedBackup);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        475
Source: 
>             p.hash = _hash;
>             p.approval.push(_approvedBackup);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    AccountStorage
Line:        480
Source: 
>     function clearProposalData(address payable _client, address _proposer, bytes4 _actionId) external allowAuthorizedLogicContractsCallsOnly(_client) {
>         delete proposalData[_client][_proposer][_actionId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    BaseLogic
Line:        780
Source: 
> 
>         keyNonce[_key] = _nonce;
>            ^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AccountStorage
Line:        306
Source: 
>     modifier allowAuthorizedLogicContractsCallsOnly(address payable _account) {
>         require(LogicManager(Account(_account).manager()).isAuthorized(msg.sender), "not an authorized logic");
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BaseLogic
Line:        771
Source: 
>         if (_index > 0) {
>             require(accountStorage.getKeyStatus(_account, _index) != 1, "frozen key");
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AccountBaseLogic
Line:        827
Source: 
>         for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_client, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AccountBaseLogic
Line:        828
Source: 
>             address backup = accountStorage.getBackupAddress(_client, i);
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AccountBaseLogic
Line:        829
Source: 
>             uint256 effectiveDate = accountStorage.getBackupEffectiveDate(_client, i);
>             uint256 expiryDate = accountStorage.getBackupExpiryDate(_client, i);
>                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             // backup match and effective and not expired

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    AccountBaseLogic
Line:        851
Source: 
>         for (uint256 i = 0; i <= MAX_DEFINED_BACKUP_INDEX; i++) {
>             address backup = accountStorage.getBackupAddress(_client, i);
>                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             if (backup != address(0)) {

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Account
Line:        6
Source: 
>     // The implementation of the proxy
>     address public implementation;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
