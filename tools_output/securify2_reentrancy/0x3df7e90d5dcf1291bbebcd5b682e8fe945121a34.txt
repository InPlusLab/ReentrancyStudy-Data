[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OneTimeMint
Line:        53
Source: 
> 
>   function mint() public{
>   ^^^^^^^^^^^^^^^^^^^^^^^
>     require(is_minted == false, "already minted");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    OneTimeMintFactory
Line:        63
Source: 
> 
>   function createOneTimeMint(address _token, address _target, uint _amount)public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     OneTimeMint otm = new OneTimeMint(_token, _target, _amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    TokenClaimer
Line:        29
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    OneTimeMintFactory
Line:        63
Source: 
> 
>   function createOneTimeMint(address _token, address _target, uint _amount)public returns(address){
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     OneTimeMint otm = new OneTimeMint(_token, _target, _amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Violation
Contract:    OneTimeMint
Line:        55
Source: 
>     require(is_minted == false, "already minted");
>     token_contract.generateTokens(target_addr, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     is_minted = true;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    TokenClaimer
Line:        29
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>          ^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneTimeMint
Line:        41
Source: 
> contract OneTimeMint{
>   TokenInterface public token_contract;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   address public target_addr;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneTimeMint
Line:        42
Source: 
>   TokenInterface public token_contract;
>   address public target_addr;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint public amount;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    OneTimeMint
Line:        44
Source: 
>   uint public amount;
>   bool public is_minted;
>   ^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity >=0.4.21 <0.6.0;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    OneTimeMint
Line:        55
Source: 
>     require(is_minted == false, "already minted");
>     token_contract.generateTokens(target_addr, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     is_minted = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    OneTimeMint
Line:        56
Source: 
>     token_contract.generateTokens(target_addr, amount);
>     is_minted = true;
>     ^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        27
Source: 
>         TransferableToken token = TransferableToken(_token);
>         uint balance = token.balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    TokenClaimer
Line:        29
Source: 
> 
>         (bool status,) = _token.call(abi.encodeWithSignature("transfer(address,uint256)", to, balance));
>                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(status, "call failed");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    OneTimeMint
Line:        55
Source: 
>     require(is_minted == false, "already minted");
>     token_contract.generateTokens(target_addr, amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     is_minted = true;

[0m
