Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ESMFab
Line:        106
Source: 
> contract ESMFab {
>     function newESM(address gov, address end, address proxy, uint min) public returns (ESM esm) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         esm = new ESM(gov, end, proxy, min);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ESM
Line:        89
Source: 
> 
>     function join(uint256 wad) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(end.live() == 1, "ESM/system-already-shutdown");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ESM
Line:        83
Source: 
> 
>     function deny(address target) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(Sum >= min,  "ESM/min-not-reached");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ESMFab
Line:        106
Source: 
> contract ESMFab {
>     function newESM(address gov, address end, address proxy, uint min) public returns (ESM esm) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         esm = new ESM(gov, end, proxy, min);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ESM
Line:        90
Source: 
>     function join(uint256 wad) external {
>         require(end.live() == 1, "ESM/system-already-shutdown");
>                 ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    ESM
Line:        95
Source: 
> 
>         require(gem.transferFrom(msg.sender, address(this), wad), "ESM/transfer-failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Join(msg.sender, wad);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    ESM
Line:        50
Source: 
>     mapping(address => uint256) public sum; // per-address balance
>     uint256 public Sum; // total balance
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        24
Source: 
> 
> pragma solidity >=0.5.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESM
Line:        90
Source: 
>     function join(uint256 wad) external {
>         require(end.live() == 1, "ESM/system-already-shutdown");
>                 ^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESM
Line:        95
Source: 
> 
>         require(gem.transferFrom(msg.sender, address(this), wad), "ESM/transfer-failed");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Join(msg.sender, wad);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    ESM
Line:        100
Source: 
>     function burn() external {
>         gem.burn(gem.balanceOf(address(this)));
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESM
Line:        76
Source: 
>         if (proxy != address(0)) {
>             DenyLike(end.vat()).deny(proxy);
>                      ^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESM
Line:        76
Source: 
>         if (proxy != address(0)) {
>             DenyLike(end.vat()).deny(proxy);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESM
Line:        78
Source: 
>         }
>         end.cage();
>         ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESM
Line:        86
Source: 
> 
>         DenyLike(target).deny(proxy);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    ESM
Line:        100
Source: 
>     function burn() external {
>         gem.burn(gem.balanceOf(address(this)));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ESM
Line:        50
Source: 
>     mapping(address => uint256) public sum; // per-address balance
>     uint256 public Sum; // total balance
>     ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ESM
Line:        93
Source: 
>         sum[msg.sender] = add(sum[msg.sender], wad);
>         Sum = add(Sum, wad);
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    ESM
Line:        76
Source: 
>         if (proxy != address(0)) {
>             DenyLike(end.vat()).deny(proxy);
>                      ^^^^^^^^^
>         }

[0m
