[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Keep3r
Line:        1132
Source: 
>         uint chainId;
>         assembly { chainId := chainid() }
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return chainId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Dangerous Strict Equalities
Description: Strict equalities that use account's balance, timestamps
             and block numbers should be avoided
Type:        Violation
Contract:    Keep3r
Line:        408
Source: 
> 
>       if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
>                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Keep3r
Line:        302
Source: 
>      */
>     function delegate(address delegatee) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _delegate(msg.sender, delegatee);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Keep3r
Line:        315
Source: 
>      */
>     function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Keep3r
Line:        343
Source: 
>      */
>     function getPriorVotes(address account, uint blockNumber) public view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(blockNumber < block.number, "::getPriorVotes: not yet determined");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Keep3r
Line:        1048
Source: 
>      */
>     function approve(address spender, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Keep3r
Line:        1094
Source: 
>      */
>     function transfer(address dst, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferTokens(msg.sender, dst, amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        577
Source: 
>         require(jobs[job], "::addCreditETH: not a valid job");
>         uint _before = ERC20(credit).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        578
Source: 
>         uint _before = ERC20(credit).balanceOf(address(this));
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = ERC20(credit).balanceOf(address(this));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        579
Source: 
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);
>         uint _after = ERC20(credit).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         credits[job][credit] = credits[job][credit].add(_after.sub(_before));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        620
Source: 
>         require(liquidityAccepted[liquidity], "::addLiquidityToJob: asset not accepted as liquidity");
>         UniswapPair(liquidity).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        627
Source: 
>         if (!jobs[job] && jobProposalDelay[job] < now) {
>             Governance(governance).proposeJob(job);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             jobProposalDelay[job] = now.add(UNBOND);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        644
Source: 
>         uint _liquidity = balances[address(liquidity)];
>         uint _credit = _liquidity.mul(liquidityAmount[msg.sender][liquidity][job]).div(UniswapPair(liquidity).totalSupply());
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(address(this), _credit);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        665
Source: 
>         uint _liquidity = balances[address(liquidity)];
>         uint _credit = _liquidity.mul(amount).div(UniswapPair(liquidity).totalSupply());
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_credit > credits[job][address(this)]) {

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        758
Source: 
>         lastJob[keeper] = now;
>         ERC20(credit).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperWorked(credit, msg.sender, keeper, block.number);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        771
Source: 
>         lastJob[keeper] = now;
>         payable(keeper).transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperWorked(ETH, msg.sender, keeper, block.number);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        903
Source: 
>         } else {
>             ERC20(bonding).transferFrom(msg.sender, address(this), amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        957
Source: 
>         } else {
>             ERC20(bonding).transfer(msg.sender, partialUnbonding[msg.sender][bonding]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Keep3r
Line:        1002
Source: 
>         } else {
>             ERC20(bonded).transfer(governance, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        302
Source: 
>      */
>     function delegate(address delegatee) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _delegate(msg.sender, delegatee);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        575
Source: 
>      */
>     function addCredit(address credit, address job, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(jobs[job], "::addCreditETH: not a valid job");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        618
Source: 
>      */
>     function addLiquidityToJob(address liquidity, address job, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(liquidityAccepted[liquidity], "::addLiquidityToJob: asset not accepted as liquidity");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        658
Source: 
>      */
>     function unbondLiquidityFromJob(address liquidity, address job, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(liquidityAmount[msg.sender][liquidity][job] == 0, "::credit: pending credit, settle first");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        682
Source: 
>      */
>     function removeLiquidityFromJob(address liquidity, address job) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(liquidityUnbonding[msg.sender][liquidity][job] != 0, "::removeJob: unbond first");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        697
Source: 
>      */
>     function mint(uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::mint: governance only");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        706
Source: 
>      */
>     function burn(uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burn(msg.sender, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        729
Source: 
>      */
>     function worked(address keeper) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         workReceipt(keeper, KPRH.getQuoteLimit(_gasUsed.sub(gasleft())));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        738
Source: 
>      */
>     function workReceipt(address keeper, uint amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(jobs[msg.sender], "::workReceipt: only jobs can approve work");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        835
Source: 
>      */
>     function setGovernance(address _governance) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::setGovernance: only governance can set");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        896
Source: 
>      */
>     function bond(address bonding, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(pendingbonds[msg.sender][bonding] == 0, "::bond: current pending bond");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        939
Source: 
>      */
>     function unbond(address bonding, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         unbondings[msg.sender][bonding] = now.add(UNBOND);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        967
Source: 
>      */
>     function down(address keeper) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(keepers[msg.sender], "::down: not a keeper");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        997
Source: 
>      */
>     function slash(address bonded, address keeper, uint amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::slash: only governance can resolve");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        1013
Source: 
>      */
>     function revoke(address keeper) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::slash: only governance can resolve");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        1094
Source: 
>      */
>     function transfer(address dst, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferTokens(msg.sender, dst, amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Keep3r
Line:        1106
Source: 
>      */
>     function transferFrom(address src, address dst, uint amount) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address spender = msg.sender;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        600
Source: 
>      */
>     function revokeLiquidity(address liquidity) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::revokeLiquidity: governance only");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        754
Source: 
>      */
>     function receipt(address credit, address keeper, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(jobs[msg.sender], "::receipt: only jobs can approve work");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        767
Source: 
>      */
>     function receiptETH(address keeper, uint amount) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(jobs[msg.sender], "::receipt: only jobs can approve work");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        816
Source: 
>      */
>     function removeJob(address job) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::removeJob: only governance can remove jobs");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        826
Source: 
>      */
>     function setKeep3rHelper(Keep3rHelper _kprh) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::setKeep3rHelper: only governance can set");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        853
Source: 
>      */
>     function isKeeper(address keeper) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _gasUsed = gasleft();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        866
Source: 
>      */
>     function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _gasUsed = gasleft();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        883
Source: 
>      */
>     function isBondedKeeper(address keeper, address bond, uint minBond, uint earned, uint age) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _gasUsed = gasleft();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        985
Source: 
>      */
>     function dispute(address keeper) external returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::dispute: only governance can dispute");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        1024
Source: 
>      */
>     function resolve(address keeper) external {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender == governance, "::resolve: only governance can resolve");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        1036
Source: 
>      */
>     function allowance(address account, address spender) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowances[account][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        1048
Source: 
>      */
>     function approve(address spender, uint amount) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowances[msg.sender][spender] = amount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Keep3r
Line:        1084
Source: 
>      */
>     function balanceOf(address account) external view returns (uint) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[account];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Keep3r
Line:        620
Source: 
>         require(liquidityAccepted[liquidity], "::addLiquidityToJob: asset not accepted as liquidity");
>         UniswapPair(liquidity).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Keep3r
Line:        627
Source: 
>         if (!jobs[job] && jobProposalDelay[job] < now) {
>             Governance(governance).proposeJob(job);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             jobProposalDelay[job] = now.add(UNBOND);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Keep3r
Line:        1002
Source: 
>         } else {
>             ERC20(bonded).transfer(governance, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Warning
Contract:    Keep3r
Line:        771
Source: 
>         lastJob[keeper] = now;
>         payable(keeper).transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperWorked(ETH, msg.sender, keeper, block.number);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Keep3r
Line:        577
Source: 
>         require(jobs[job], "::addCreditETH: not a valid job");
>         uint _before = ERC20(credit).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Repeated Call to Untrusted Contract
Description: Repeated call to an untrusted contract may result in
             different values
Type:        Violation
Contract:    Keep3r
Line:        579
Source: 
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);
>         uint _after = ERC20(credit).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         credits[job][credit] = credits[job][credit].add(_after.sub(_before));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        430
Source: 
>     /// @notice Submit a job
>     event SubmitJob(address indexed job, address indexed provider, uint block, uint credit);
>                                                                    ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        433
Source: 
>     /// @notice Apply credit to a job
>     event ApplyCredit(address indexed job, address indexed provider, uint block, uint credit);
>                                                                      ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        436
Source: 
>     /// @notice Remove credit for a job
>     event RemoveJob(address indexed job, address indexed provider, uint block, uint credit);
>                                                                    ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        439
Source: 
>     /// @notice Unbond credit for a job
>     event UnbondJob(address indexed job, address indexed provider, uint block, uint credit);
>                                                                    ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        442
Source: 
>     /// @notice Added a Job
>     event JobAdded(address indexed job, uint block, address governance);
>                                         ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        445
Source: 
>     /// @notice Removed a job
>     event JobRemoved(address indexed job, uint block, address governance);
>                                           ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        448
Source: 
>     /// @notice Worked a job
>     event KeeperWorked(address indexed credit, address indexed job, address indexed keeper, uint block);
>                                                                                             ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        451
Source: 
>     /// @notice Keeper bonding
>     event KeeperBonding(address indexed keeper, uint block, uint active, uint bond);
>                                                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        454
Source: 
>     /// @notice Keeper bonded
>     event KeeperBonded(address indexed keeper, uint block, uint activated, uint bond);
>                                                ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        457
Source: 
>     /// @notice Keeper unbonding
>     event KeeperUnbonding(address indexed keeper, uint block, uint deactive, uint bond);
>                                                   ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        460
Source: 
>     /// @notice Keeper unbound
>     event KeeperUnbound(address indexed keeper, uint block, uint deactivated, uint bond);
>                                                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        463
Source: 
>     /// @notice Keeper slashed
>     event KeeperSlashed(address indexed keeper, address indexed slasher, uint block, uint slash);
>                                                                          ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        466
Source: 
>     /// @notice Keeper disputed
>     event KeeperDispute(address indexed keeper, uint block);
>                                                 ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        469
Source: 
>     /// @notice Keeper resolved
>     event KeeperResolved(address indexed keeper, uint block);
>                                                  ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Builtin
Description: Reports declarations that shadow Solidity's builtin
             symbols.
Type:        Violation
Contract:    Keep3r
Line:        471
Source: 
> 
>     event AddCredit(address indexed credit, address indexed job, address indexed creditor, uint block, uint amount);
>                                                                                            ^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Shadowed Local Variable
Description: Reports local variable declarations that shadow
             declarations from outer scopes.
Type:        Violation
Contract:    Keep3r
Line:        883
Source: 
>      */
>     function isBondedKeeper(address keeper, address bond, uint minBond, uint earned, uint age) external returns (bool) {
>                                             ^^^^^^^^^^^^
>         _gasUsed = gasleft();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        247
Source: 
>     /// @notice Keep3r Helper to set max prices for the ecosystem
>     Keep3rHelper public KPRH;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        250
Source: 
>     /// @notice EIP-20 token name for this token
>     string public constant name = "Keep3r";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        253
Source: 
>     /// @notice EIP-20 token symbol for this token
>     string public constant symbol = "KPR";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        256
Source: 
>     /// @notice EIP-20 token decimals for this token
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        577
Source: 
>         require(jobs[job], "::addCreditETH: not a valid job");
>         uint _before = ERC20(credit).balanceOf(address(this));
>         ^^^^^^^^^^^^
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        579
Source: 
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);
>         uint _after = ERC20(credit).balanceOf(address(this));
>         ^^^^^^^^^^^
>         credits[job][credit] = credits[job][credit].add(_after.sub(_before));

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        643
Source: 
>         require(liquidityApplied[provider][liquidity][job] < now, "::credit: still bonding");
>         uint _liquidity = balances[address(liquidity)];
>         ^^^^^^^^^^^^^^^
>         uint _credit = _liquidity.mul(liquidityAmount[msg.sender][liquidity][job]).div(UniswapPair(liquidity).totalSupply());

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        644
Source: 
>         uint _liquidity = balances[address(liquidity)];
>         uint _credit = _liquidity.mul(liquidityAmount[msg.sender][liquidity][job]).div(UniswapPair(liquidity).totalSupply());
>         ^^^^^^^^^^^^
>         _mint(address(this), _credit);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        664
Source: 
> 
>         uint _liquidity = balances[address(liquidity)];
>         ^^^^^^^^^^^^^^^
>         uint _credit = _liquidity.mul(amount).div(UniswapPair(liquidity).totalSupply());

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        665
Source: 
>         uint _liquidity = balances[address(liquidity)];
>         uint _credit = _liquidity.mul(amount).div(UniswapPair(liquidity).totalSupply());
>         ^^^^^^^^^^^^
>         if (_credit > credits[job][address(this)]) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        685
Source: 
>         require(liquidityUnbonding[msg.sender][liquidity][job] < now, "::removeJob: still unbonding");
>         uint _amount = liquidityAmountsUnbonding[msg.sender][liquidity][job];
>         ^^^^^^^^^^^^
>         liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].sub(_amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Keep3r
Line:        971
Source: 
>         require(lastJob[keeper].add(DOWNTIME) < now, "::down: keeper safe");
>         uint _slash = bonds[keeper][address(this)].mul(DOWNTIMESLASH).div(BASE);
>         ^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        10
Source: 
> // SPDX-License-Identifier: MIT
> pragma solidity ^0.6.6;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    Keep3r
Line:        771
Source: 
>         lastJob[keeper] = now;
>         payable(keeper).transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperWorked(ETH, msg.sender, keeper, block.number);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Warning
Contract:    Keep3r
Line:        771
Source: 
>         lastJob[keeper] = now;
>         payable(keeper).transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperWorked(ETH, msg.sender, keeper, block.number);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Keep3r
Line:        771
Source: 
>         lastJob[keeper] = now;
>         payable(keeper).transfer(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperWorked(ETH, msg.sender, keeper, block.number);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Keep3r
Line:        730
Source: 
>     function worked(address keeper) external {
>         workReceipt(keeper, KPRH.getQuoteLimit(_gasUsed.sub(gasleft())));
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Keep3r
Line:        740
Source: 
>         require(jobs[msg.sender], "::workReceipt: only jobs can approve work");
>         require(amount <= KPRH.getQuoteLimit(_gasUsed.sub(gasleft())), "::workReceipt: spending over max limit");
>                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         credits[msg.sender][address(this)] = credits[msg.sender][address(this)].sub(amount, "::workReceipt: insuffient funds to pay keeper");

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        577
Source: 
>         require(jobs[job], "::addCreditETH: not a valid job");
>         uint _before = ERC20(credit).balanceOf(address(this));
>                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        578
Source: 
>         uint _before = ERC20(credit).balanceOf(address(this));
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = ERC20(credit).balanceOf(address(this));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        579
Source: 
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);
>         uint _after = ERC20(credit).balanceOf(address(this));
>                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         credits[job][credit] = credits[job][credit].add(_after.sub(_before));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        620
Source: 
>         require(liquidityAccepted[liquidity], "::addLiquidityToJob: asset not accepted as liquidity");
>         UniswapPair(liquidity).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        627
Source: 
>         if (!jobs[job] && jobProposalDelay[job] < now) {
>             Governance(governance).proposeJob(job);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             jobProposalDelay[job] = now.add(UNBOND);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        644
Source: 
>         uint _liquidity = balances[address(liquidity)];
>         uint _credit = _liquidity.mul(liquidityAmount[msg.sender][liquidity][job]).div(UniswapPair(liquidity).totalSupply());
>                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(address(this), _credit);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        665
Source: 
>         uint _liquidity = balances[address(liquidity)];
>         uint _credit = _liquidity.mul(amount).div(UniswapPair(liquidity).totalSupply());
>                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_credit > credits[job][address(this)]) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        688
Source: 
>         liquidityAmountsUnbonding[msg.sender][liquidity][job] = 0;
>         UniswapPair(liquidity).transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        758
Source: 
>         lastJob[keeper] = now;
>         ERC20(credit).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperWorked(credit, msg.sender, keeper, block.number);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        903
Source: 
>         } else {
>             ERC20(bonding).transferFrom(msg.sender, address(this), amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        957
Source: 
>         } else {
>             ERC20(bonding).transfer(msg.sender, partialUnbonding[msg.sender][bonding]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Keep3r
Line:        1002
Source: 
>         } else {
>             ERC20(bonded).transfer(governance, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Keep3r
Line:        247
Source: 
>     /// @notice Keep3r Helper to set max prices for the ecosystem
>     Keep3rHelper public KPRH;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Keep3r
Line:        543
Source: 
>     address public governance;
>     address public pendingGovernance;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Keep3r
Line:        550
Source: 
> 
>     uint internal _gasUsed;
>     ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Keep3r
Line:        720
Source: 
>         require(dst != address(0), "::_burn: burn from the zero address");
>         balances[dst] = balances[dst].sub(amount, "::_burn: burn amount exceeds balance");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalSupply = totalSupply.sub(amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Keep3r
Line:        721
Source: 
>         balances[dst] = balances[dst].sub(amount, "::_burn: burn amount exceeds balance");
>         totalSupply = totalSupply.sub(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(dst, address(0), amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Keep3r
Line:        776
Source: 
>     function _bond(address bonding, address _from, uint _amount) internal {
>         bonds[_from][bonding] = bonds[_from][bonding].add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalBonded = totalBonded.add(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Keep3r
Line:        777
Source: 
>         bonds[_from][bonding] = bonds[_from][bonding].add(_amount);
>         totalBonded = totalBonded.add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_from == address(this)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        380
Source: 
>         uint delegatorBalance = bonds[delegator][address(this)];
>         delegates[delegator] = delegatee;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        409
Source: 
>       if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {
>           checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       } else {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        411
Source: 
>       } else {
>           checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>           numCheckpoints[delegatee] = nCheckpoints + 1;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        412
Source: 
>           checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);
>           numCheckpoints[delegatee] = nCheckpoints + 1;
>           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        321
Source: 
>         require(signatory != address(0), "::delegateBySig: invalid signature");
>         require(nonce == nonces[signatory]++, "::delegateBySig: invalid nonce");
>                          ^^^^^^^^^^^^^^^^^^^
>         require(now <= expiry, "::delegateBySig: signature expired");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        712
Source: 
>         // mint the amount
>         totalSupply = totalSupply.add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         // transfer the amount to the recipient

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        714
Source: 
>         // transfer the amount to the recipient
>         balances[dst] = balances[dst].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), dst, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        564
Source: 
>         require(jobs[job], "::addCreditETH: not a valid job");
>         credits[job][ETH] = credits[job][ETH].add(msg.value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        580
Source: 
>         uint _after = ERC20(credit).balanceOf(address(this));
>         credits[job][credit] = credits[job][credit].add(_after.sub(_before));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        621
Source: 
>         UniswapPair(liquidity).transferFrom(msg.sender, address(this), amount);
>         liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        623
Source: 
> 
>         liquidityApplied[msg.sender][liquidity][job] = now.add(LIQUIDITYBOND);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAmount[msg.sender][liquidity][job] = liquidityAmount[msg.sender][liquidity][job].add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        624
Source: 
>         liquidityApplied[msg.sender][liquidity][job] = now.add(LIQUIDITYBOND);
>         liquidityAmount[msg.sender][liquidity][job] = liquidityAmount[msg.sender][liquidity][job].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        628
Source: 
>             Governance(governance).proposeJob(job);
>             jobProposalDelay[job] = now.add(UNBOND);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        646
Source: 
>         _mint(address(this), _credit);
>         credits[job][address(this)] = credits[job][address(this)].add(_credit);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityAmount[msg.sender][liquidity][job] = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        647
Source: 
>         credits[job][address(this)] = credits[job][address(this)].add(_credit);
>         liquidityAmount[msg.sender][liquidity][job] = 0;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        784
Source: 
>     function _unbond(address bonding, address _from, uint _amount) internal {
>         bonds[_from][bonding] = bonds[_from][bonding].sub(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalBonded = totalBonded.sub(_amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        785
Source: 
>         bonds[_from][bonding] = bonds[_from][bonding].sub(_amount);
>         totalBonded = totalBonded.sub(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (bonding == address(this)) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        854
Source: 
>     function isKeeper(address keeper) external returns (bool) {
>         _gasUsed = gasleft();
>         ^^^^^^^^^^^^^^^^^^^^
>         return keepers[keeper];

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        867
Source: 
>     function isMinKeeper(address keeper, uint minBond, uint earned, uint age) external returns (bool) {
>         _gasUsed = gasleft();
>         ^^^^^^^^^^^^^^^^^^^^
>         return keepers[keeper]

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        884
Source: 
>     function isBondedKeeper(address keeper, address bond, uint minBond, uint earned, uint age) external returns (bool) {
>         _gasUsed = gasleft();
>         ^^^^^^^^^^^^^^^^^^^^
>         return keepers[keeper]

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        1125
Source: 
> 
>         balances[src] = balances[src].sub(amount, "::_transferTokens: transfer amount exceeds balance");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[dst] = balances[dst].add(amount, "::_transferTokens: transfer amount overflows");

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        1126
Source: 
>         balances[src] = balances[src].sub(amount, "::_transferTokens: transfer amount exceeds balance");
>         balances[dst] = balances[dst].add(amount, "::_transferTokens: transfer amount overflows");
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(src, dst, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        940
Source: 
>     function unbond(address bonding, uint amount) external {
>         unbondings[msg.sender][bonding] = now.add(UNBOND);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _unbond(bonding, msg.sender, amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        942
Source: 
>         _unbond(bonding, msg.sender, amount);
>         partialUnbonding[msg.sender][bonding] = partialUnbonding[msg.sender][bonding].add(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperUnbonding(msg.sender, block.number, unbondings[msg.sender][bonding], amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        1049
Source: 
>     function approve(address spender, uint amount) public returns (bool) {
>         allowances[msg.sender][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        1067
Source: 
>         bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), _getChainId(), address(this)));
>         bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, amount, nonces[owner]++, deadline));
>                                                                                            ^^^^^^^^^^^^^^^
>         bytes32 digest = keccak256(abi.encodePacked("\x19\x01", domainSeparator, structHash));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Keep3r
Line:        1074
Source: 
> 
>         allowances[owner][spender] = amount;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Keep3r
Line:        578
Source: 
>         uint _before = ERC20(credit).balanceOf(address(this));
>         ERC20(credit).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint _after = ERC20(credit).balanceOf(address(this));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Keep3r
Line:        620
Source: 
>         require(liquidityAccepted[liquidity], "::addLiquidityToJob: asset not accepted as liquidity");
>         UniswapPair(liquidity).transferFrom(msg.sender, address(this), amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         liquidityProvided[msg.sender][liquidity][job] = liquidityProvided[msg.sender][liquidity][job].add(amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Keep3r
Line:        627
Source: 
>         if (!jobs[job] && jobProposalDelay[job] < now) {
>             Governance(governance).proposeJob(job);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             jobProposalDelay[job] = now.add(UNBOND);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Keep3r
Line:        688
Source: 
>         liquidityAmountsUnbonding[msg.sender][liquidity][job] = 0;
>         UniswapPair(liquidity).transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Keep3r
Line:        758
Source: 
>         lastJob[keeper] = now;
>         ERC20(credit).transfer(msg.sender, amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit KeeperWorked(credit, msg.sender, keeper, block.number);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Keep3r
Line:        903
Source: 
>         } else {
>             ERC20(bonding).transferFrom(msg.sender, address(this), amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Keep3r
Line:        957
Source: 
>         } else {
>             ERC20(bonding).transfer(msg.sender, partialUnbonding[msg.sender][bonding]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Keep3r
Line:        1002
Source: 
>         } else {
>             ERC20(bonded).transfer(governance, amount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Keep3r
Line:        253
Source: 
>     /// @notice EIP-20 token symbol for this token
>     string public constant symbol = "KPR";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Keep3r
Line:        256
Source: 
>     /// @notice EIP-20 token decimals for this token
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Keep3r
Line:        511
Source: 
>     /// @notice tracks the amount of job executions for a keeper
>     mapping(address => uint) public work;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     /// @notice tracks the total job executions for a keeper

[0m
