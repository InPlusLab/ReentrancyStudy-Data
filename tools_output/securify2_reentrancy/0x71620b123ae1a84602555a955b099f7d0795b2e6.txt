Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Assembly Usage
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Address
Line:        534
Source: 
>         // contracts then.
>         assembly {
>         ^^^^^^^^^^
>             codehash := extcodehash(account)

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        64
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        90
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        99
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        90
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        99
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        597
Source: 
> 
>     function setLimitPerWallet(uint256 limit) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _limitPerWallet = limit;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        602
Source: 
> 
>     function setSalesPerson(address newSalesPerson)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        611
Source: 
> 
>     function getEarning(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _earning[_cardId];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        615
Source: 
> 
>     function startSale() public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _saleStarted = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        620
Source: 
> 
>     function stopSale() public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _saleStarted = false;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        625
Source: 
> 
>     function createCard(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _contractAddress,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        671
Source: 
> 
>     function purchaseNFT(uint256 _cardId, uint256 _amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        760
Source: 
> 
>     function cancelCard(uint256 _cardId) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _cards[_cardId].isFinished = true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        767
Source: 
> 
>     function setCardPaymentToken(uint256 _cardId, address _newTokenAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        778
Source: 
> 
>     function setCardPrice(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _cardId,

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        790
Source: 
> 
>     function setCardAmount(uint256 _cardId, uint256 _amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        803
Source: 
> 
>     function setCardVisibility(uint256 _cardId, bool _isPrivate)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        814
Source: 
> 
>     function addWhiteListAddress(uint256 _cardId, address addr)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        825
Source: 
> 
>     function batchAddWhiteListAddress(uint256 _cardId, address[] memory addr)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        839
Source: 
> 
>     function removeWhiteListAddress(uint256 _cardId, address addr)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        850
Source: 
> 
>     function batchRemoveWhiteListAddress(uint256 _cardId, address[] memory addr)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        864
Source: 
> 
>     function isCardPrivate(uint256 _cardId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].isPrivate;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        868
Source: 
> 
>     function isAllowedCard(uint256 _cardId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].whitelist[msg.sender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        872
Source: 
> 
>     function isCardCompleted(uint256 _cardId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].isFinished;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        876
Source: 
> 
>     function isCardFree(uint256 _cardId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_cards[_cardId].basePrice == 0) return true;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        882
Source: 
> 
>     function getCardPaymentToken(uint256 _cardId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        890
Source: 
> 
>     function getCardRequirement(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].limitForFree;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        894
Source: 
> 
>     function getCardContract(uint256 _cardId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].contractAddress;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        898
Source: 
> 
>     function getCardTokenId(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].tokenId;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        902
Source: 
> 
>     function getCardTotalAmount(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].totalAmount;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        906
Source: 
> 
>     function getCardCurrentAmount(uint256 _cardId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        914
Source: 
> 
>     function getCardBasePrice(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].basePrice;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    BCCGDistributor
Line:        918
Source: 
> 
>     function getCardURL(uint256 _cardId) public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BCCGDistributor
Line:        636
Source: 
>         require(
>             _contract.balanceOf(msg.sender, _tokenId) >= _totalAmount,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Initial supply cannot be more than available supply"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BCCGDistributor
Line:        640
Source: 
>         require(
>             _contract.isApprovedForAll(msg.sender, address(this)) == true,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Contract must be whitelisted by owner"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BCCGDistributor
Line:        713
Source: 
>             require(
>                 _paymentContract.balanceOf(msg.sender) >= _price,
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Do not have enough funds"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BCCGDistributor
Line:        717
Source: 
>             require(
>                 _paymentContract.allowance(msg.sender, address(this)) >= _price,
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Must be approved for purchase"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BCCGDistributor
Line:        721
Source: 
> 
>             _paymentContract.transferFrom(msg.sender, _salesperson, _price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _earning[_cardId] = _earning[_cardId].add(_price);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BCCGDistributor
Line:        733
Source: 
> 
>         _contract.safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner(),

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BCCGDistributor
Line:        727
Source: 
>             require(
>                 _paymentContract.balanceOf(msg.sender).add(accountBalance) >=
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _currentCard.limitForFree,

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    BCCGDistributor
Line:        920
Source: 
>         return
>             IERC1155Metadata(_cards[_cardId].contractAddress).uri(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _cards[_cardId].tokenId

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        99
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BCCGDistributor
Line:        597
Source: 
> 
>     function setLimitPerWallet(uint256 limit) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _limitPerWallet = limit;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BCCGDistributor
Line:        602
Source: 
> 
>     function setSalesPerson(address newSalesPerson)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BCCGDistributor
Line:        790
Source: 
> 
>     function setCardAmount(uint256 _cardId, uint256 _amount)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    BCCGDistributor
Line:        918
Source: 
> 
>     function getCardURL(uint256 _cardId) public view returns (string memory) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        611
Source: 
> 
>     function getEarning(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _earning[_cardId];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        625
Source: 
> 
>     function createCard(
>     ^^^^^^^^^^^^^^^^^^^^
>         address _contractAddress,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        760
Source: 
> 
>     function cancelCard(uint256 _cardId) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _cards[_cardId].isFinished = true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        767
Source: 
> 
>     function setCardPaymentToken(uint256 _cardId, address _newTokenAddress)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        778
Source: 
> 
>     function setCardPrice(
>     ^^^^^^^^^^^^^^^^^^^^^^
>         uint256 _cardId,

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        803
Source: 
> 
>     function setCardVisibility(uint256 _cardId, bool _isPrivate)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        814
Source: 
> 
>     function addWhiteListAddress(uint256 _cardId, address addr)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        825
Source: 
> 
>     function batchAddWhiteListAddress(uint256 _cardId, address[] memory addr)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        839
Source: 
> 
>     function removeWhiteListAddress(uint256 _cardId, address addr)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        850
Source: 
> 
>     function batchRemoveWhiteListAddress(uint256 _cardId, address[] memory addr)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        864
Source: 
> 
>     function isCardPrivate(uint256 _cardId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].isPrivate;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        868
Source: 
> 
>     function isAllowedCard(uint256 _cardId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].whitelist[msg.sender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        872
Source: 
> 
>     function isCardCompleted(uint256 _cardId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].isFinished;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        876
Source: 
> 
>     function isCardFree(uint256 _cardId) public view returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (_cards[_cardId].basePrice == 0) return true;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        882
Source: 
> 
>     function getCardPaymentToken(uint256 _cardId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        890
Source: 
> 
>     function getCardRequirement(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].limitForFree;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        894
Source: 
> 
>     function getCardContract(uint256 _cardId) public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].contractAddress;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        898
Source: 
> 
>     function getCardTokenId(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].tokenId;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        902
Source: 
> 
>     function getCardTotalAmount(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].totalAmount;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        906
Source: 
> 
>     function getCardCurrentAmount(uint256 _cardId)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         public

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    BCCGDistributor
Line:        914
Source: 
> 
>     function getCardBasePrice(uint256 _cardId) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _cards[_cardId].basePrice;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BCCGDistributor
Line:        636
Source: 
>         require(
>             _contract.balanceOf(msg.sender, _tokenId) >= _totalAmount,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Initial supply cannot be more than available supply"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BCCGDistributor
Line:        640
Source: 
>         require(
>             _contract.isApprovedForAll(msg.sender, address(this)) == true,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Contract must be whitelisted by owner"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BCCGDistributor
Line:        713
Source: 
>             require(
>                 _paymentContract.balanceOf(msg.sender) >= _price,
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Do not have enough funds"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BCCGDistributor
Line:        717
Source: 
>             require(
>                 _paymentContract.allowance(msg.sender, address(this)) >= _price,
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Must be approved for purchase"

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BCCGDistributor
Line:        721
Source: 
> 
>             _paymentContract.transferFrom(msg.sender, _salesperson, _price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _earning[_cardId] = _earning[_cardId].add(_price);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BCCGDistributor
Line:        733
Source: 
> 
>         _contract.safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner(),

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    BCCGDistributor
Line:        727
Source: 
>             require(
>                 _paymentContract.balanceOf(msg.sender).add(accountBalance) >=
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _currentCard.limitForFree,

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        367
Source: 
>     ) internal pure returns (string memory) {
>         bytes memory _ba = bytes(_a);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bb = bytes(_b);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        368
Source: 
>         bytes memory _ba = bytes(_a);
>         bytes memory _bb = bytes(_b);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bc = bytes(_c);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        369
Source: 
>         bytes memory _bb = bytes(_b);
>         bytes memory _bc = bytes(_c);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _bd = bytes(_d);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        370
Source: 
>         bytes memory _bc = bytes(_c);
>         bytes memory _bd = bytes(_d);
>         ^^^^^^^^^^^^^^^^
>         bytes memory _be = bytes(_e);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Strings
Line:        371
Source: 
>         bytes memory _bd = bytes(_d);
>         bytes memory _be = bytes(_e);
>         ^^^^^^^^^^^^^^^^
>         string memory abcde = new string(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        546
Source: 
> 
>     uint256 public _currentCardId = 0;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address private _salesperson;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        549
Source: 
>     uint256 private _limitPerWallet;
>     bool public _saleStarted = false;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        634
Source: 
>     ) public onlyOwner returns (uint256) {
>         IERC1155 _contract = IERC1155(_contractAddress);
>         ^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        643
Source: 
>         );
>         uint256 _id = _getNextCardID();
>         ^^^^^^^^^^^
>         _incrementCardId();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        645
Source: 
>         _incrementCardId();
>         Card memory _newCard;
>         ^^^^^^^^^^^^^^^^^^^^
>         _newCard.cardId = _id;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        677
Source: 
> 
>         Card storage _currentCard = _cards[_cardId];
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(_currentCard.isFinished == false, "Card is finished");

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        686
Source: 
> 
>         IERC1155 _contract = IERC1155(_currentCard.contractAddress);
>         ^^^^^^^^^^^^^^^^^^
>         require(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        692
Source: 
> 
>         History storage _currentHistory =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _history[_currentCard.contractAddress];

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        694
Source: 
>             _history[_currentCard.contractAddress];
>         uint256 _currentBoughtAmount =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _currentHistory.purchasedHistories[_currentCard.tokenId][

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        710
Source: 
>         if (_currentCard.basePrice != 0) {
>             IERC20 _paymentContract = IERC20(_currentCard.paymentToken);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 _price = _currentCard.basePrice.mul(availableAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        711
Source: 
>             IERC20 _paymentContract = IERC20(_currentCard.paymentToken);
>             uint256 _price = _currentCard.basePrice.mul(availableAmount);
>             ^^^^^^^^^^^^^^
>             require(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    BCCGDistributor
Line:        724
Source: 
>         } else {
>             IERC20 _paymentContract = IERC20(_currentCard.paymentToken);
>             ^^^^^^^^^^^^^^^^^^^^^^^
>             uint256 accountBalance = msg.sender.balance;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.5.0;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BCCGDistributor
Line:        636
Source: 
>         require(
>             _contract.balanceOf(msg.sender, _tokenId) >= _totalAmount,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Initial supply cannot be more than available supply"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BCCGDistributor
Line:        640
Source: 
>         require(
>             _contract.isApprovedForAll(msg.sender, address(this)) == true,
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "Contract must be whitelisted by owner"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BCCGDistributor
Line:        713
Source: 
>             require(
>                 _paymentContract.balanceOf(msg.sender) >= _price,
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Do not have enough funds"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BCCGDistributor
Line:        717
Source: 
>             require(
>                 _paymentContract.allowance(msg.sender, address(this)) >= _price,
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 "Must be approved for purchase"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    BCCGDistributor
Line:        727
Source: 
>             require(
>                 _paymentContract.balanceOf(msg.sender).add(accountBalance) >=
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                     _currentCard.limitForFree,

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BCCGDistributor
Line:        721
Source: 
> 
>             _paymentContract.transferFrom(msg.sender, _salesperson, _price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _earning[_cardId] = _earning[_cardId].add(_price);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BCCGDistributor
Line:        733
Source: 
> 
>         _contract.safeTransferFrom(
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             owner(),

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    BCCGDistributor
Line:        920
Source: 
>         return
>             IERC1155Metadata(_cards[_cardId].contractAddress).uri(
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>                 _cards[_cardId].tokenId

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Strings
Line:        421
Source: 
>         while (j != 0) {
>             len++;
>             ^^^
>             j /= 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    Address
Line:        537
Source: 
>         }
>         return (codehash != 0x0 && codehash != accountHash);
>                 ^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Uninitialized Local Variables
Description: A variable is declared but never initialized.
Type:        Violation
Contract:    BCCGDistributor
Line:        646
Source: 
>         Card memory _newCard;
>         _newCard.cardId = _id;
>         ^^^^^^^^
>         _newCard.contractAddress = _contractAddress;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    BCCGDistributor
Line:        721
Source: 
> 
>             _paymentContract.transferFrom(msg.sender, _salesperson, _price);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             _earning[_cardId] = _earning[_cardId].add(_price);

[0m
