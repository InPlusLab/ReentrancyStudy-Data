Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        31
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        57
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        66
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        205
Source: 
>      */
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        214
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowed[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        233
Source: 
>      */
>     function transfer(address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        247
Source: 
>      */
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        260
Source: 
>      */
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        276
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        291
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        205
Source: 
>      */
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        214
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowed[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        233
Source: 
>      */
>     function transfer(address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        247
Source: 
>      */
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        260
Source: 
>      */
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        276
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        291
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        381
Source: 
>      */
>     function burn(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burn(msg.sender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        390
Source: 
>      */
>     function burnFrom(address from, uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burnFrom(from, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        31
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        57
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        66
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        205
Source: 
>      */
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        214
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowed[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        233
Source: 
>      */
>     function transfer(address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        247
Source: 
>      */
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        260
Source: 
>      */
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        276
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        291
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Mintable
Line:        412
Source: 
>      */
>     function mint(address to, uint256 value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        31
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        57
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        66
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        205
Source: 
>      */
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        214
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[owner];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowed[owner][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        233
Source: 
>      */
>     function transfer(address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        247
Source: 
>      */
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        260
Source: 
>      */
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        276
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20
Line:        291
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        381
Source: 
>      */
>     function burn(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burn(msg.sender, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Burnable
Line:        390
Source: 
>      */
>     function burnFrom(address from, uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burnFrom(from, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    ERC20Mintable
Line:        412
Source: 
>      */
>     function mint(address to, uint256 value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(to, value);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        31
Source: 
>      */
>     function owner() public view returns (address) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        57
Source: 
>      */
>     function renounceOwnership() public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        66
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FTICrowdsale
Line:        495
Source: 
>    */
>   function pause() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(!isPaused, 'Sales must be not paused');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FTICrowdsale
Line:        503
Source: 
>    */
>   function unpause() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(isPaused, 'Sales must be paused');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FTICrowdsale
Line:        512
Source: 
>    */
>   function changeWallet(address payable newWallet) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(newWallet != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FTICrowdsale
Line:        520
Source: 
>    */
>   function transferTokenOwnership(address newOwner) public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(newOwner != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FTICrowdsale
Line:        528
Source: 
>    */
>   function burnUnsold() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     token.burn(token.balanceOf(address(this)));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FTICrowdsale
Line:        535
Source: 
>    */
>   function releaseStage1() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(now > stage1ReleaseTime, 'Release time has not come yet');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FTICrowdsale
Line:        546
Source: 
>    */
>   function releaseStage2() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(now > stage2ReleaseTime, 'Release time has not come yet');

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FTICrowdsale
Line:        557
Source: 
>    */
>   function releaseStage3() public onlyOwner {
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     require(now > stage3ReleaseTime, 'Release time has not come yet');

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        66
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        233
Source: 
>      */
>     function transfer(address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        260
Source: 
>      */
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        276
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        291
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        233
Source: 
>      */
>     function transfer(address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        260
Source: 
>      */
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        276
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        291
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        381
Source: 
>      */
>     function burn(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burn(msg.sender, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        390
Source: 
>      */
>     function burnFrom(address from, uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burnFrom(from, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        66
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        233
Source: 
>      */
>     function transfer(address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        260
Source: 
>      */
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        276
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        291
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Mintable
Line:        412
Source: 
>      */
>     function mint(address to, uint256 value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        66
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        233
Source: 
>      */
>     function transfer(address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(msg.sender, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        260
Source: 
>      */
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transfer(from, to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        276
Source: 
>      */
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20
Line:        291
Source: 
>      */
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        381
Source: 
>      */
>     function burn(uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burn(msg.sender, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Burnable
Line:        390
Source: 
>      */
>     function burnFrom(address from, uint256 value) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _burnFrom(from, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    ERC20Mintable
Line:        412
Source: 
>      */
>     function mint(address to, uint256 value) public onlyOwner returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _mint(to, value);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Ownable
Line:        66
Source: 
>      */
>     function transferOwnership(address newOwner) public onlyOwner {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _transferOwnership(newOwner);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        214
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        247
Source: 
>      */
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        214
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        247
Source: 
>      */
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        214
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        247
Source: 
>      */
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        214
Source: 
>      */
>     function balanceOf(address owner) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _balances[owner];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        224
Source: 
>      */
>     function allowance(address owner, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _allowed[owner][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    ERC20
Line:        247
Source: 
>      */
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _approve(msg.sender, spender, value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Multiplication after division
Description: Information might be lost due to division before
             multiplication
Type:        Violation
Contract:    SafeMath
Line:        101
Source: 
> 
>         uint256 c = a * b;
>                     ^^^^^
>         require(c / a == b);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FTICrowdsale
Line:        540
Source: 
>     stage1Released = true;
>     token.mint(wallet, stage1Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FTICrowdsale
Line:        551
Source: 
>     stage2Released = true;
>     token.mint(wallet, stage2Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FTICrowdsale
Line:        562
Source: 
>     stage3Released = true;
>     token.mint(wallet, stage3Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FTIToken
Line:        425
Source: 
> contract FTIToken is ERC20Burnable, ERC20Mintable {
>   string public constant name = "FTI NEWS Token";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public constant symbol = "TECH";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FTIToken
Line:        426
Source: 
>   string public constant name = "FTI NEWS Token";
>   string public constant symbol = "TECH";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 public constant decimals = 10;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FTIToken
Line:        427
Source: 
>   string public constant symbol = "TECH";
>   uint8 public constant decimals = 10;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FTIToken
Line:        429
Source: 
> 
>   uint256 public constant initialSupply = 299540000 * (10 ** uint256(decimals)); 
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FTICrowdsale
Line:        477
Source: 
> 
>     minPurchase = 0.00000000000005 ether; // price of the minimum part of the token
>                   ^^^^^^^^^^^^^^^^^^^^^^
>     rate = 0.000194 ether;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    FTICrowdsale
Line:        480
Source: 
> 
>     maxSupply = 2395600000 * (10 ** 10); // 2395600000 * (10^(decimals))
>                 ^^^^^^^^^^
>     wallet = 0x8D44D27D2AF7BE632baA340eA52E443756ea1aD3;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FTICrowdsale
Line:        625
Source: 
> 
>     wallet.transfer(cleanWei);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Warning
Contract:    FTICrowdsale
Line:        628
Source: 
>     if (change > 0) {
>       inv.transfer(change); 
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FTICrowdsale
Line:        625
Source: 
> 
>     wallet.transfer(cleanWei);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    FTICrowdsale
Line:        628
Source: 
>     if (change > 0) {
>       inv.transfer(change); 
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FTICrowdsale
Line:        625
Source: 
> 
>     wallet.transfer(cleanWei);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    FTICrowdsale
Line:        628
Source: 
>     if (change > 0) {
>       inv.transfer(change); 
>       ^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FTICrowdsale
Line:        529
Source: 
>   function burnUnsold() public onlyOwner {
>     token.burn(token.balanceOf(address(this)));
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FTICrowdsale
Line:        598
Source: 
> 
>     totalSupply = token.totalSupply();
>                   ^^^^^^^^^^^^^^^^^^^
>     supply = totalSupply.sub(token.balanceOf(address(this)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FTICrowdsale
Line:        599
Source: 
>     totalSupply = token.totalSupply();
>     supply = totalSupply.sub(token.balanceOf(address(this)));
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FTICrowdsale
Line:        614
Source: 
> 
>     if (token.balanceOf(address(this)) >= tokens) {
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(inv, tokens);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FTICrowdsale
Line:        616
Source: 
>       token.transfer(inv, tokens);
>     } else if (token.balanceOf(address(this)) == 0) {
>                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.mint(inv, tokens);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FTICrowdsale
Line:        619
Source: 
>     } else {
>       uint256 mintAmount = tokens.sub(token.balanceOf(address(this)));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        487
Source: 
> 
>     stage1Amount = 299540000 * (10 ** uint256(token.decimals()));
>                                               ^^^^^^^^^^^^^^^^
>     stage2Amount = 299540000 * (10 ** uint256(token.decimals()));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        488
Source: 
>     stage1Amount = 299540000 * (10 ** uint256(token.decimals()));
>     stage2Amount = 299540000 * (10 ** uint256(token.decimals()));
>                                               ^^^^^^^^^^^^^^^^
>     stage3Amount = 299540000 * (10 ** uint256(token.decimals()));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        489
Source: 
>     stage2Amount = 299540000 * (10 ** uint256(token.decimals()));
>     stage3Amount = 299540000 * (10 ** uint256(token.decimals()));
>                                               ^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        522
Source: 
>     require(newOwner != address(0));
>     token.transferOwnership(newOwner);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        529
Source: 
>   function burnUnsold() public onlyOwner {
>     token.burn(token.balanceOf(address(this)));
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        540
Source: 
>     stage1Released = true;
>     token.mint(wallet, stage1Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        551
Source: 
>     stage2Released = true;
>     token.mint(wallet, stage2Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        562
Source: 
>     stage3Released = true;
>     token.mint(wallet, stage3Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        615
Source: 
>     if (token.balanceOf(address(this)) >= tokens) {
>       token.transfer(inv, tokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (token.balanceOf(address(this)) == 0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        617
Source: 
>     } else if (token.balanceOf(address(this)) == 0) {
>       token.mint(inv, tokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>     } else {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        621
Source: 
> 
>       token.mint(address(this), mintAmount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(inv, tokens);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FTICrowdsale
Line:        622
Source: 
>       token.mint(address(this), mintAmount);
>       token.transfer(inv, tokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    ERC20
Line:        200
Source: 
> 
>     uint256 internal _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FTICrowdsale
Line:        457
Source: 
>   // Amount of reserved tokens
>   uint256 public stage1Amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public stage2Amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FTICrowdsale
Line:        458
Source: 
>   uint256 public stage1Amount;
>   uint256 public stage2Amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint256 public stage3Amount;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FTICrowdsale
Line:        459
Source: 
>   uint256 public stage2Amount;
>   uint256 public stage3Amount;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FTICrowdsale
Line:        461
Source: 
> 
>   bool public stage1Released;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bool public stage2Released;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FTICrowdsale
Line:        462
Source: 
>   bool public stage1Released;
>   bool public stage2Released;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
>   bool public stage3Released;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FTICrowdsale
Line:        463
Source: 
>   bool public stage2Released;
>   bool public stage3Released;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FTICrowdsale
Line:        470
Source: 
> 
>   bool public isPaused;
>   ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    ERC20
Line:        200
Source: 
> 
>     uint256 internal _totalSupply;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        349
Source: 
> 
>         _allowed[owner][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        334
Source: 
> 
>         _totalSupply = _totalSupply.sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[account] = _balances[account].sub(value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        349
Source: 
> 
>         _allowed[owner][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(owner, spender, value);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ERC20
Line:        334
Source: 
> 
>         _totalSupply = _totalSupply.sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[account] = _balances[account].sub(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        305
Source: 
> 
>         _balances[from] = _balances[from].sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[to] = _balances[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        306
Source: 
>         _balances[from] = _balances[from].sub(value);
>         _balances[to] = _balances[to].add(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(from, to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        305
Source: 
> 
>         _balances[from] = _balances[from].sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[to] = _balances[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        306
Source: 
>         _balances[from] = _balances[from].sub(value);
>         _balances[to] = _balances[to].add(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(from, to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        335
Source: 
>         _totalSupply = _totalSupply.sub(value);
>         _balances[account] = _balances[account].sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(account, address(0), value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        305
Source: 
> 
>         _balances[from] = _balances[from].sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[to] = _balances[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        306
Source: 
>         _balances[from] = _balances[from].sub(value);
>         _balances[to] = _balances[to].add(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(from, to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        305
Source: 
> 
>         _balances[from] = _balances[from].sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _balances[to] = _balances[to].add(value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        306
Source: 
>         _balances[from] = _balances[from].sub(value);
>         _balances[to] = _balances[to].add(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(from, to, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    ERC20
Line:        335
Source: 
>         _totalSupply = _totalSupply.sub(value);
>         _balances[account] = _balances[account].sub(value);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(account, address(0), value);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FTICrowdsale
Line:        540
Source: 
>     stage1Released = true;
>     token.mint(wallet, stage1Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FTICrowdsale
Line:        551
Source: 
>     stage2Released = true;
>     token.mint(wallet, stage2Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FTICrowdsale
Line:        562
Source: 
>     stage3Released = true;
>     token.mint(wallet, stage3Amount);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FTICrowdsale
Line:        615
Source: 
>     if (token.balanceOf(address(this)) >= tokens) {
>       token.transfer(inv, tokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     } else if (token.balanceOf(address(this)) == 0) {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FTICrowdsale
Line:        617
Source: 
>     } else if (token.balanceOf(address(this)) == 0) {
>       token.mint(inv, tokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^
>     } else {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FTICrowdsale
Line:        621
Source: 
> 
>       token.mint(address(this), mintAmount);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>       token.transfer(inv, tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    FTICrowdsale
Line:        622
Source: 
>       token.mint(address(this), mintAmount);
>       token.transfer(inv, tokens);
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FTIToken
Line:        425
Source: 
> contract FTIToken is ERC20Burnable, ERC20Mintable {
>   string public constant name = "FTI NEWS Token";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   string public constant symbol = "TECH";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FTIToken
Line:        426
Source: 
>   string public constant name = "FTI NEWS Token";
>   string public constant symbol = "TECH";
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>   uint8 public constant decimals = 10;

[0m
