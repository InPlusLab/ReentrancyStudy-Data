Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        35
Source: 
>     */
>     function changeMapping(address map) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mappingContract = IBMapping(map); 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        47
Source: 
>     */
>     function bookKeeping(uint256 amount) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        54
Source: 
>     // NestNode receive and settlement
>     function nodeGet() public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(msg.sender) == address(tx.origin));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        66
Source: 
>     // NestNode transfer settlement
>     function nodeCount(address fromAdd, address toAdd) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(supermanContract) == address(msg.sender));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        85
Source: 
>     // NestNode receivable amount
>     function checkNodeNum() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        66
Source: 
>     // NestNode transfer settlement
>     function nodeCount(address fromAdd, address toAdd) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(address(supermanContract) == address(msg.sender));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        35
Source: 
>     */
>     function changeMapping(address map) public onlyOwner{
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         mappingContract = IBMapping(map); 

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        94
Source: 
>     modifier onlyOwner(){
>         require(mappingContract.checkOwners(msg.sender));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        37
Source: 
>         mappingContract = IBMapping(map); 
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        38
Source: 
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        39
Source: 
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress("nodeAssignmentData")));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        40
Source: 
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));
>         nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress("nodeAssignmentData")));
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        10
Source: 
>  */
> contract NEST_NodeAssignment {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NEST_NodeSave
Line:        108
Source: 
> // NEST node save contract
> contract NEST_NodeSave {
> ^^^^^^^^^^^^^^^^^^^^^^^^
>     function turnOut(uint256 amount, address to) public returns(uint256);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    NEST_NodeAssignmentData
Line:        113
Source: 
> // NestNode assignment data contract
> contract NEST_NodeAssignmentData {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     function addNest(uint256 amount) public;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        13
Source: 
>     using SafeMath for uint256;
>     IBMapping mappingContract;                              //  Mapping contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     IBNEST nestContract;                                    //  NEST contract

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        14
Source: 
>     IBMapping mappingContract;                              //  Mapping contract
>     IBNEST nestContract;                                    //  NEST contract
>     ^^^^^^^^^^^^^^^^^^^
>     SuperMan supermanContract;                              //  NestNode contract

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        15
Source: 
>     IBNEST nestContract;                                    //  NEST contract
>     SuperMan supermanContract;                              //  NestNode contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     NEST_NodeSave nodeSave;                                 //  NestNode save contract

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        16
Source: 
>     SuperMan supermanContract;                              //  NestNode contract
>     NEST_NodeSave nodeSave;                                 //  NestNode save contract
>     ^^^^^^^^^^^^^^^^^^^^^^
>     NEST_NodeAssignmentData nodeAssignmentData;             //  NestNode data assignment contract

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        17
Source: 
>     NEST_NodeSave nodeSave;                                 //  NestNode save contract
>     NEST_NodeAssignmentData nodeAssignmentData;             //  NestNode data assignment contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        26
Source: 
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        27
Source: 
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress("nodeAssignmentData")));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        94
Source: 
>     modifier onlyOwner(){
>         require(mappingContract.checkOwners(msg.sender));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         _;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        38
Source: 
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));
>                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        39
Source: 
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress("nodeAssignmentData")));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        49
Source: 
>         require(amount > 0);
>         require(nestContract.transferFrom(address(msg.sender), address(nodeSave), amount));
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeAssignmentData.addNest(amount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        56
Source: 
>         require(address(msg.sender) == address(tx.origin));
>         require(supermanContract.balanceOf(address(msg.sender)) > 0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        57
Source: 
>         require(supermanContract.balanceOf(address(msg.sender)) > 0);
>         uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        58
Source: 
>         uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();
>         uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        59
Source: 
>         uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));
>         uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);
>                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(nestContract.balanceOf(address(nodeSave)) >= getAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        60
Source: 
>         uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);
>         require(nestContract.balanceOf(address(nodeSave)) >= getAmount);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeSave.turnOut(getAmount,address(msg.sender));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        68
Source: 
>         require(address(supermanContract) == address(msg.sender));
>         require(supermanContract.balanceOf(address(fromAdd)) > 0);
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        69
Source: 
>         require(supermanContract.balanceOf(address(fromAdd)) > 0);
>         uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();
>                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 amountFrom = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(fromAdd)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        70
Source: 
>         uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();
>         uint256 amountFrom = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(fromAdd)));
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 getAmountFrom = amountFrom.mul(supermanContract.balanceOf(address(fromAdd))).div(1500);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        71
Source: 
>         uint256 amountFrom = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(fromAdd)));
>         uint256 getAmountFrom = amountFrom.mul(supermanContract.balanceOf(address(fromAdd))).div(1500);
>                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (nestContract.balanceOf(address(nodeSave)) >= getAmountFrom) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        72
Source: 
>         uint256 getAmountFrom = amountFrom.mul(supermanContract.balanceOf(address(fromAdd))).div(1500);
>         if (nestContract.balanceOf(address(nodeSave)) >= getAmountFrom) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nodeSave.turnOut(getAmountFrom,address(fromAdd));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        76
Source: 
>         }
>         uint256 amountTo = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(toAdd)));
>                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         uint256 getAmountTo = amountTo.mul(supermanContract.balanceOf(address(toAdd))).div(1500);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        77
Source: 
>         uint256 amountTo = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(toAdd)));
>         uint256 getAmountTo = amountTo.mul(supermanContract.balanceOf(address(toAdd))).div(1500);
>                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (nestContract.balanceOf(address(nodeSave)) >= getAmountTo) {

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        78
Source: 
>         uint256 getAmountTo = amountTo.mul(supermanContract.balanceOf(address(toAdd))).div(1500);
>         if (nestContract.balanceOf(address(nodeSave)) >= getAmountTo) {
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nodeSave.turnOut(getAmountTo,address(toAdd));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        86
Source: 
>     function checkNodeNum() public view returns (uint256) {
>          uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();
>                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        87
Source: 
>          uint256 allAmount = nodeAssignmentData.checkNodeAllAmount();
>          uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        88
Source: 
>          uint256 amount = allAmount.sub(nodeAssignmentData.checkNodeLatestAmount(address(msg.sender)));
>          uint256 getAmount = amount.mul(supermanContract.balanceOf(address(msg.sender))).div(1500);
>                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>          return getAmount; 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        25
Source: 
>         mappingContract = IBMapping(map); 
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        28
Source: 
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));
>         nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress("nodeAssignmentData")));
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        37
Source: 
>         mappingContract = IBMapping(map); 
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));
>                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        40
Source: 
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));
>         nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress("nodeAssignmentData")));
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        50
Source: 
>         require(nestContract.transferFrom(address(msg.sender), address(nodeSave), amount));
>         nodeAssignmentData.addNest(amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        61
Source: 
>         require(nestContract.balanceOf(address(nodeSave)) >= getAmount);
>         nodeSave.turnOut(getAmount,address(msg.sender));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeAssignmentData.addNodeLatestAmount(address(msg.sender),allAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        62
Source: 
>         nodeSave.turnOut(getAmount,address(msg.sender));
>         nodeAssignmentData.addNodeLatestAmount(address(msg.sender),allAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        73
Source: 
>         if (nestContract.balanceOf(address(nodeSave)) >= getAmountFrom) {
>             nodeSave.turnOut(getAmountFrom,address(fromAdd));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nodeAssignmentData.addNodeLatestAmount(address(fromAdd),allAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        74
Source: 
>             nodeSave.turnOut(getAmountFrom,address(fromAdd));
>             nodeAssignmentData.addNodeLatestAmount(address(fromAdd),allAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        79
Source: 
>         if (nestContract.balanceOf(address(nodeSave)) >= getAmountTo) {
>             nodeSave.turnOut(getAmountTo,address(toAdd));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nodeAssignmentData.addNodeLatestAmount(address(toAdd),allAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        80
Source: 
>             nodeSave.turnOut(getAmountTo,address(toAdd));
>             nodeAssignmentData.addNodeLatestAmount(address(toAdd),allAmount);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        14
Source: 
>     IBMapping mappingContract;                              //  Mapping contract
>     IBNEST nestContract;                                    //  NEST contract
>     ^^^^^^^^^^^^^^^^^^^
>     SuperMan supermanContract;                              //  NestNode contract

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        15
Source: 
>     IBNEST nestContract;                                    //  NEST contract
>     SuperMan supermanContract;                              //  NestNode contract
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
>     NEST_NodeSave nodeSave;                                 //  NestNode save contract

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    NEST_NodeAssignment
Line:        16
Source: 
>     SuperMan supermanContract;                              //  NestNode contract
>     NEST_NodeSave nodeSave;                                 //  NestNode save contract
>     ^^^^^^^^^^^^^^^^^^^^^^
>     NEST_NodeAssignmentData nodeAssignmentData;             //  NestNode data assignment contract

[0m
[0;35mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Conflict
Contract:    SafeMath
Line:        149
Source: 
> library SafeMath {
>     int256 constant private INT256_MIN = -2**255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        36
Source: 
>     function changeMapping(address map) public onlyOwner{
>         mappingContract = IBMapping(map); 
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        37
Source: 
>         mappingContract = IBMapping(map); 
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        38
Source: 
>         nestContract = IBNEST(address(mappingContract.checkAddress("nest")));
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        39
Source: 
>         supermanContract = SuperMan(address(mappingContract.checkAddress("nestNode")));
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress("nodeAssignmentData")));

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        40
Source: 
>         nodeSave = NEST_NodeSave(address(mappingContract.checkAddress("nestNodeSave")));
>         nodeAssignmentData = NEST_NodeAssignmentData(address(mappingContract.checkAddress("nodeAssignmentData")));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        61
Source: 
>         require(nestContract.balanceOf(address(nodeSave)) >= getAmount);
>         nodeSave.turnOut(getAmount,address(msg.sender));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         nodeAssignmentData.addNodeLatestAmount(address(msg.sender),allAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        73
Source: 
>         if (nestContract.balanceOf(address(nodeSave)) >= getAmountFrom) {
>             nodeSave.turnOut(getAmountFrom,address(fromAdd));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nodeAssignmentData.addNodeLatestAmount(address(fromAdd),allAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    NEST_NodeAssignment
Line:        79
Source: 
>         if (nestContract.balanceOf(address(nodeSave)) >= getAmountTo) {
>             nodeSave.turnOut(getAmountTo,address(toAdd));
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nodeAssignmentData.addNodeLatestAmount(address(toAdd),allAmount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    SafeMath
Line:        149
Source: 
> library SafeMath {
>     int256 constant private INT256_MIN = -2**255;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
