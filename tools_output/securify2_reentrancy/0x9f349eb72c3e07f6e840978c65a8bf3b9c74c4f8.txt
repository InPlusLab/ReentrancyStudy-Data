Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    EpochUtils
Line:        401
Source: 
> 
>     function getCurrentEpochNumber() public view override returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return getEpochNumber(now);

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KyberStaking
Line:        524
Source: 
>         require(
>             kncToken.transferFrom(staker, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "deposit: can not get token"

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    KyberStaking
Line:        563
Source: 
> 
>         (bool success, ) = address(this).call(
>                            ^^^^^^^^^^^^^^^^^^^
>             abi.encodeWithSignature(

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    KyberStaking
Line:        563
Source: 
> 
>         (bool success, ) = address(this).call(
>                            ^^^^^^^^^^^^^^^^^^^
>             abi.encodeWithSignature(

[0m
[0;31mSeverity:    INFO
Pattern:     Low Level Calls
Description: Usage of <address>.call should be avoided
Type:        Violation
Contract:    KyberStaking
Line:        803
Source: 
>                 // don't revert if KyberDao revert so data will be updated correctly
>                 (bool success, ) = address(kyberDao).call(
>                                    ^^^^^^^^^^^^^^^^^^^^^^^
>                     abi.encodeWithSignature(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    EpochUtils
Line:        405
Source: 
> 
>     function getEpochNumber(uint256 timestamp) public view override returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (timestamp < firstEpochStartTimestamp || epochPeriodInSeconds == 0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KyberStaking
Line:        516
Source: 
>      */
>     function deposit(uint256 amount) external override {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(amount > 0, "deposit: amount is 0");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    KyberStaking
Line:        588
Source: 
>      */
>     function initAndReturnStakerDataForCurrentEpoch(address staker)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KyberStaking
Line:        620
Source: 
>      */
>     function getStakerRawData(address staker, uint256 epoch)
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         external

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KyberStaking
Line:        744
Source: 
> 
>     function getLatestDelegatedStake(address staker) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stakerLatestData[staker].delegatedStake;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KyberStaking
Line:        748
Source: 
> 
>     function getLatestStakeBalance(address staker) external view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return stakerLatestData[staker].stake;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    KyberStaking
Line:        774
Source: 
>     */
>     function handleWithdrawal(
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^
>         address staker,

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KyberStaking
Line:        563
Source: 
> 
>         (bool success, ) = address(this).call(
>                            ^^^^^^^^^^^^^^^^^^^
>             abi.encodeWithSignature(

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    KyberStaking
Line:        579
Source: 
>         // transfer KNC back to staker
>         require(kncToken.transfer(staker, amount), "withdraw: can not transfer knc");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(curEpoch, staker, amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KyberStaking
Line:        563
Source: 
> 
>         (bool success, ) = address(this).call(
>          ^^^^^^^^^^^^
>             abi.encodeWithSignature(

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    KyberStaking
Line:        803
Source: 
>                 // don't revert if KyberDao revert so data will be updated correctly
>                 (bool success, ) = address(kyberDao).call(
>                  ^^^^^^^^^^^^
>                     abi.encodeWithSignature(

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KyberStaking
Line:        524
Source: 
>         require(
>             kncToken.transferFrom(staker, address(this), amount),
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             "deposit: can not get token"

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    KyberStaking
Line:        579
Source: 
>         // transfer KNC back to staker
>         require(kncToken.transfer(staker, amount), "withdraw: can not transfer knc");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(curEpoch, staker, amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EpochUtils
Line:        398
Source: 
> 
>     uint256 public override epochPeriodInSeconds;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint256 public override firstEpochStartTimestamp;

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    EpochUtils
Line:        399
Source: 
>     uint256 public override epochPeriodInSeconds;
>     uint256 public override firstEpochStartTimestamp;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        834
Source: 
>             // not delegate to anyone, consider as delegate to yourself
>             stakerLatestData[staker].representative = staker;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             representative = staker;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        842
Source: 
>         if (!hasInited[epoch][staker]) {
>             hasInited[epoch][staker] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             StakerData storage stakerData = stakerPerEpochData[epoch][staker];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        844
Source: 
>             StakerData storage stakerData = stakerPerEpochData[epoch][staker];
>             stakerData.representative = representative;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakerData.delegatedStake = ldStake;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        845
Source: 
>             stakerData.representative = representative;
>             stakerData.delegatedStake = ldStake;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakerData.stake = lStakeBal;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        846
Source: 
>             stakerData.delegatedStake = ldStake;
>             stakerData.stake = lStakeBal;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        852
Source: 
>         if (!hasInited[epoch + 1][staker]) {
>             hasInited[epoch + 1][staker] = true;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             StakerData storage nextEpochStakerData = stakerPerEpochData[epoch + 1][staker];

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        854
Source: 
>             StakerData storage nextEpochStakerData = stakerPerEpochData[epoch + 1][staker];
>             nextEpochStakerData.representative = representative;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nextEpochStakerData.delegatedStake = ldStake;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        855
Source: 
>             nextEpochStakerData.representative = representative;
>             nextEpochStakerData.delegatedStake = ldStake;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             nextEpochStakerData.stake = lStakeBal;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    KyberStaking
Line:        856
Source: 
>             nextEpochStakerData.delegatedStake = ldStake;
>             nextEpochStakerData.stake = lStakeBal;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        83
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _notEntered = false;
>         ^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KyberStaking
Line:        530
Source: 
> 
>         stakerPerEpochData[curEpoch + 1][staker].stake =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakerPerEpochData[curEpoch + 1][staker].stake.add(amount);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    KyberStaking
Line:        532
Source: 
>             stakerPerEpochData[curEpoch + 1][staker].stake.add(amount);
>         stakerLatestData[staker].stake =
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             stakerLatestData[staker].stake.add(amount);

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        59
Source: 
> contract ReentrancyGuard {
>     bool private _notEntered;
>     ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
