Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    PunkDrop
Line:        112
Source: 
> 
> 	IPunk PUNKS = IPunk(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        73
Source: 
>      */
>     function owner() public view returns (address) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        92
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        73
Source: 
>      */
>     function owner() public view returns (address) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _owner;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        92
Source: 
>      */
>     function renounceOwnership() public virtual onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit OwnershipTransferred(_owner, address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Ownable
Line:        101
Source: 
>      */
>     function transferOwnership(address newOwner) public virtual onlyOwner {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(newOwner != address(0), "Ownable: new owner is the zero address");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PunkDrop
Line:        138
Source: 
> 
> 	function dropPunk(string calldata _seed) external onlyOwner {
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(punksToDrop > 0, "PunkDrop: Party is over.");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    PunkDrop
Line:        155
Source: 
> 
> 	function evacPunk(uint256 _id) external onlyOwner{
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		PUNKS.transferPunk(msg.sender, _id);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    PunkDrop
Line:        151
Source: 
> 		punksToDrop--;
> 		PUNKS.transferPunk(winner, wonPunk);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit PunkDropped(winner, wonPunk);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PunkDrop
Line:        112
Source: 
> 
> 	IPunk PUNKS = IPunk(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    PunkDrop
Line:        130
Source: 
> 	function logAddresses(address[] calldata _addresses) external onlyOwner {
> 		uint256 _tickets = ticketsLeft;
>     ^^^^^^^^^^^^^^^^
> 		require(_tickets + _addresses.length <= 150, "PunkDrop: Too many logged tickets");

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    PunkDrop
Line:        112
Source: 
> 
> 	IPunk PUNKS = IPunk(0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PunkDrop
Line:        151
Source: 
> 		punksToDrop--;
> 		PUNKS.transferPunk(winner, wonPunk);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit PunkDropped(winner, wonPunk);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    PunkDrop
Line:        156
Source: 
> 	function evacPunk(uint256 _id) external onlyOwner{
> 		PUNKS.transferPunk(msg.sender, _id);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PunkDrop
Line:        114
Source: 
> 
> 	uint256 public  punksToDrop;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(uint256 => uint256) public  punkSet;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    PunkDrop
Line:        116
Source: 
> 	mapping(uint256 => uint256) public  punkSet;
> 	uint256 public ticketsLeft;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(uint256 => address) public tickets;

[0m
