Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Managed
Line:        107
Source: 
> 	// ------------------------------------------------------------------------
> 	function setGatewayManager(address addr) public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(addr > address(0), "cannot setGatewayManager to 0x0");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        155
Source: 
> 	// ------------------------------------------------------------------------
> 	function totalSupply() public view returns (uint) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return _totalSupply.sub(balances[address(0)]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        163
Source: 
> 	// ------------------------------------------------------------------------
> 	function stopTrade() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "already stop trade");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        172
Source: 
> 	// ------------------------------------------------------------------------
> 	function startTrade() public onlyOwner {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(_stopTrade, "already start trade");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        198
Source: 
> 	// ------------------------------------------------------------------------
> 	function transfer(address to, uint tokens) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        227
Source: 
> 	// ------------------------------------------------------------------------
> 	function approve(address spender, uint tokens) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        246
Source: 
> 	// ------------------------------------------------------------------------
> 	function transferFrom(address from, address to, uint tokens) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        275
Source: 
> 	// ------------------------------------------------------------------------
> 	function allowance(address tokenOwner, address spender) public view returns (uint) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        286
Source: 
> 	// ------------------------------------------------------------------------
> 	function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender != spender, "msg.sender == spender");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        307
Source: 
> 	// ------------------------------------------------------------------------
> 	function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ERC20Interface(tokenAddress).transfer(owner, tokens);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        317
Source: 
> 	// ------------------------------------------------------------------------
> 	function swap(address swapAddr) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!mswap[swapAddr], "already swap");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        330
Source: 
> 
> 	function isGatewayAddress(address gAddr) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return mgatewayAddress[gAddr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        349
Source: 
> 	// ------------------------------------------------------------------------
> 	function mint(address minter, uint256 _value) public onlyManager {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        362
Source: 
> 	// ------------------------------------------------------------------------
> 	function depositGatewayAdd(address gatewayAddr) public onlyManager {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    FletaV2Token
Line:        373
Source: 
> 	// ------------------------------------------------------------------------
> 	function depositGatewayRemove(address gatewayAddr) public onlyManager {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Locked Ether
Description: Contracts that may receive ether must also allow users to
             extract the deposited ether from the contract.
Type:        Violation
Contract:    FletaV2Token
Line:        117
Source: 
> // ----------------------------------------------------------------------------
> contract FletaV2Token is ERC20Interface, Owned, Managed {
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	using SafeMath for uint;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        198
Source: 
> 	// ------------------------------------------------------------------------
> 	function transfer(address to, uint tokens) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        246
Source: 
> 	// ------------------------------------------------------------------------
> 	function transferFrom(address from, address to, uint tokens) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        349
Source: 
> 	// ------------------------------------------------------------------------
> 	function mint(address minter, uint256 _value) public onlyManager {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    FletaV2Token
Line:        362
Source: 
> 	// ------------------------------------------------------------------------
> 	function depositGatewayAdd(address gatewayAddr) public onlyManager {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        227
Source: 
> 	// ------------------------------------------------------------------------
> 	function approve(address spender, uint tokens) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        275
Source: 
> 	// ------------------------------------------------------------------------
> 	function allowance(address tokenOwner, address spender) public view returns (uint) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        286
Source: 
> 	// ------------------------------------------------------------------------
> 	function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender != spender, "msg.sender == spender");

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        307
Source: 
> 	// ------------------------------------------------------------------------
> 	function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return ERC20Interface(tokenAddress).transfer(owner, tokens);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        330
Source: 
> 
> 	function isGatewayAddress(address gAddr) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return mgatewayAddress[gAddr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    FletaV2Token
Line:        373
Source: 
> 	// ------------------------------------------------------------------------
> 	function depositGatewayRemove(address gatewayAddr) public onlyManager {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(!_stopTrade, "stop trade");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    FletaV2Token
Line:        325
Source: 
> 			mswap[swapAddr] = true;
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			balances[swapAddr] = balances[swapAddr].add(_value);

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    FletaV2Token
Line:        325
Source: 
> 			mswap[swapAddr] = true;
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);
>    ^^^^^^^^^^^
> 			balances[swapAddr] = balances[swapAddr].add(_value);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        123
Source: 
> 	uint8 public decimals;
> 	uint _totalSupply;
>  ^^^^^^^^^^^^^^^^^
> 	bool _stopTrade;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        124
Source: 
> 	uint _totalSupply;
> 	bool _stopTrade;
>  ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        126
Source: 
> 
> 	mapping(address => uint) balances;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => mapping(address => uint)) allowed;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        127
Source: 
> 	mapping(address => uint) balances;
> 	mapping(address => mapping(address => uint)) allowed;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        131
Source: 
> 	address public v1Address;
> 	mapping(address => bool) mswap;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => bool) mgatewayAddress;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    FletaV2Token
Line:        132
Source: 
> 	mapping(address => bool) mswap;
> 	mapping(address => bool) mgatewayAddress;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FletaV2Token
Line:        147
Source: 
> 
> 		_totalSupply = ERC20Interface(v1Addr).totalSupply();
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		v1Address = v1Addr;

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FletaV2Token
Line:        187
Source: 
> 		}
> 		return ERC20Interface(v1Address).balanceOf(tokenOwner).add(balances[tokenOwner]);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    FletaV2Token
Line:        325
Source: 
> 			mswap[swapAddr] = true;
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);
>                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			balances[swapAddr] = balances[swapAddr].add(_value);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FletaV2Token
Line:        291
Source: 
> 		emit Approval(msg.sender, spender, tokens);
> 		ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    FletaV2Token
Line:        308
Source: 
> 	function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool) {
> 		return ERC20Interface(tokenAddress).transfer(owner, tokens);
>          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	}

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FletaV2Token
Line:        123
Source: 
> 	uint8 public decimals;
> 	uint _totalSupply;
>  ^^^^^^^^^^^^^^^^^
> 	bool _stopTrade;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FletaV2Token
Line:        124
Source: 
> 	uint _totalSupply;
> 	bool _stopTrade;
>  ^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    FletaV2Token
Line:        130
Source: 
> 	//Changes v2
> 	address public v1Address;
>  ^^^^^^^^^^^^^^^^^^^^^^^^
> 	mapping(address => bool) mswap;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FletaV2Token
Line:        208
Source: 
> 			//balances[to] = balances[to].sub(tokens);
> 			_totalSupply = _totalSupply.sub(tokens);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			emit Transfer(to, address(0), tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FletaV2Token
Line:        211
Source: 
> 		} else {
> 			balances[to] = balances[to].add(tokens);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FletaV2Token
Line:        231
Source: 
> 
> 		allowed[msg.sender][spender] = tokens;
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		emit Approval(msg.sender, spender, tokens);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    FletaV2Token
Line:        252
Source: 
> 
> 		balances[from] = balances[from].sub(tokens);
>   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		if(from != to && from != msg.sender) {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FletaV2Token
Line:        324
Source: 
> 		if (!mswap[swapAddr]) {
> 			mswap[swapAddr] = true;
>    ^^^^^^^^^^^^^^^^^^^^^^
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    FletaV2Token
Line:        326
Source: 
> 			uint _value = ERC20Interface(v1Address).balanceOf(swapAddr);
> 			balances[swapAddr] = balances[swapAddr].add(_value);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Owned
Line:        76
Source: 
> contract Owned {
> 	address public owner;
>  ^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Managed
Line:        93
Source: 
> contract Managed is Owned {
> 	address public manager;
>  ^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FletaV2Token
Line:        120
Source: 
> 
> 	string public symbol;
>  ^^^^^^^^^^^^^^^^^^^^
> 	string public name;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FletaV2Token
Line:        121
Source: 
> 	string public symbol;
> 	string public name;
>  ^^^^^^^^^^^^^^^^^^
> 	uint8 public decimals;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    FletaV2Token
Line:        122
Source: 
> 	string public name;
> 	uint8 public decimals;
>  ^^^^^^^^^^^^^^^^^^^^^
> 	uint _totalSupply;

[0m
