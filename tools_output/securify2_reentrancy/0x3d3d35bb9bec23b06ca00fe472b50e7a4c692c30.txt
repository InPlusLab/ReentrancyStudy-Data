[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Presale
Line:        32
Source: 
>     address[] public keys;
>     uint public initialTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Team3D
Line:        48
Source: 
>     uint256 startBlock;
>     uint256 _totalSupply = 50000000 * (10 ** 18);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Presale presale;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        59
Source: 
> 
>     function initialize(address _presaleAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!initialized);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        73
Source: 
> 
>     function distributePresale(uint _min, uint _max) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(msg.sender==owner);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        81
Source: 
> 
>     function totalSupply() public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return _totalSupply;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        85
Source: 
> 
>     function balanceOf(address addr) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[addr];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        89
Source: 
> 
>     function allowance(address addr, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[addr][spender];

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        104
Source: 
> 
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        118
Source: 
> 
>     function transferFrom(address from, address to, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(value <= balances[from]);

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        132
Source: 
> 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(spender != address(0));

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Team3D
Line:        139
Source: 
> 
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(spender != address(0));

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Team3D
Line:        63
Source: 
>         presale = Presale(_presaleAddr);
>         balances[tx.origin] = presale.initialTokens();
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Team3D
Line:        64
Source: 
>         balances[tx.origin] = presale.initialTokens();
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();
>                                                ^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Team3D
Line:        69
Source: 
> 
>         emit Transfer(address(0), tx.origin, presale.initialTokens());
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Team3D
Line:        70
Source: 
>         emit Transfer(address(0), tx.origin, presale.initialTokens());
>         emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    Team3D
Line:        114
Source: 
>         emit Approval(msg.sender, spender, tokens);
>         ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Team3D
Line:        76
Source: 
>         for (uint i=_min; i < _max; i++) {
>             address _addr = presale.keys(i);
>                             ^^^^^^^^^^^^^^^
>             transfer(_addr, presale.balances(_addr));

[0m
[0;31mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Violation
Contract:    Team3D
Line:        77
Source: 
>             address _addr = presale.keys(i);
>             transfer(_addr, presale.balances(_addr));
>                             ^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Team3D
Line:        132
Source: 
> 
>     function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(spender != address(0));

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Team3D
Line:        139
Source: 
> 
>     function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(spender != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Team3D
Line:        59
Source: 
> 
>     function initialize(address _presaleAddr) public {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(!initialized);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Team3D
Line:        85
Source: 
> 
>     function balanceOf(address addr) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return balances[addr];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Team3D
Line:        89
Source: 
> 
>     function allowance(address addr, address spender) public view returns (uint256) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return allowed[addr][spender];

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Team3D
Line:        104
Source: 
> 
>     function approve(address spender, uint256 value) public returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(spender != address(0));

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Team3D
Line:        111
Source: 
> 
>     function approveAndCall(address spender, uint256 tokens, bytes calldata data) external returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         allowed[msg.sender][spender] = tokens;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Team3D
Line:        63
Source: 
>         presale = Presale(_presaleAddr);
>         balances[tx.origin] = presale.initialTokens();
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Team3D
Line:        64
Source: 
>         balances[tx.origin] = presale.initialTokens();
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();
>                                                ^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Team3D
Line:        69
Source: 
> 
>         emit Transfer(address(0), tx.origin, presale.initialTokens());
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Team3D
Line:        70
Source: 
>         emit Transfer(address(0), tx.origin, presale.initialTokens());
>         emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Team3D
Line:        41
Source: 
>     mapping (address => mapping (address => uint256)) private allowed;
>     string public constant name  = "Vidya";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "VIDYA";

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Team3D
Line:        42
Source: 
>     string public constant name  = "Vidya";
>     string public constant symbol = "VIDYA";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Team3D
Line:        43
Source: 
>     string public constant symbol = "VIDYA";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    Team3D
Line:        76
Source: 
>         for (uint i=_min; i < _max; i++) {
>             address _addr = presale.keys(i);
>             ^^^^^^^^^^^^^
>             transfer(_addr, presale.balances(_addr));

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        1
Source: 
> pragma solidity ^0.5.17;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 
> /*

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Team3D
Line:        45
Source: 
> 
>     address owner;
>     ^^^^^^^^^^^^^
>     bool initialized;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Team3D
Line:        46
Source: 
>     address owner;
>     bool initialized;
>     ^^^^^^^^^^^^^^^^
>     uint256 startBlock;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Team3D
Line:        47
Source: 
>     bool initialized;
>     uint256 startBlock;
>     ^^^^^^^^^^^^^^^^^^
>     uint256 _totalSupply = 50000000 * (10 ** 18);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Team3D
Line:        48
Source: 
>     uint256 startBlock;
>     uint256 _totalSupply = 50000000 * (10 ** 18);
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     Presale presale;

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Team3D
Line:        49
Source: 
>     uint256 _totalSupply = 50000000 * (10 ** 18);
>     Presale presale;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Team3D
Line:        48
Source: 
>     uint256 startBlock;
>     uint256 _totalSupply = 50000000 * (10 ** 18);
>                            ^^^^^^^^
>     Presale presale;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Team3D
Line:        54
Source: 
>         if (block.number < startBlock + 10) {
>             require(tx.gasprice <= 2000000000000);
>                                    ^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Team3D
Line:        76
Source: 
>         for (uint i=_min; i < _max; i++) {
>             address _addr = presale.keys(i);
>                             ^^^^^^^^^^^^^^^
>             transfer(_addr, presale.balances(_addr));

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Team3D
Line:        77
Source: 
>             address _addr = presale.keys(i);
>             transfer(_addr, presale.balances(_addr));
>                             ^^^^^^^^^^^^^^^^^^^^^^^
>             }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Team3D
Line:        63
Source: 
>         presale = Presale(_presaleAddr);
>         balances[tx.origin] = presale.initialTokens();
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Team3D
Line:        64
Source: 
>         balances[tx.origin] = presale.initialTokens();
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();
>                                                ^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Team3D
Line:        69
Source: 
> 
>         emit Transfer(address(0), tx.origin, presale.initialTokens());
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Team3D
Line:        70
Source: 
>         emit Transfer(address(0), tx.origin, presale.initialTokens());
>         emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Team3D
Line:        114
Source: 
>         emit Approval(msg.sender, spender, tokens);
>         ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         return true;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Team3D
Line:        45
Source: 
> 
>     address owner;
>     ^^^^^^^^^^^^^
>     bool initialized;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Team3D
Line:        46
Source: 
>     address owner;
>     bool initialized;
>     ^^^^^^^^^^^^^^^^
>     uint256 startBlock;

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Team3D
Line:        47
Source: 
>     bool initialized;
>     uint256 startBlock;
>     ^^^^^^^^^^^^^^^^^^
>     uint256 _totalSupply = 50000000 * (10 ** 18);

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Team3D
Line:        49
Source: 
>     uint256 _totalSupply = 50000000 * (10 ** 18);
>     Presale presale;
>     ^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    Presale
Line:        32
Source: 
>     address[] public keys;
>     uint public initialTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        61
Source: 
>         require(!initialized);
>         owner = tx.origin;
>         ^^^^^^^^^^^^^^^^^
>         presale = Presale(_presaleAddr);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        62
Source: 
>         owner = tx.origin;
>         presale = Presale(_presaleAddr);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[tx.origin] = presale.initialTokens();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        63
Source: 
>         presale = Presale(_presaleAddr);
>         balances[tx.origin] = presale.initialTokens();
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        66
Source: 
>         
>         startBlock = block.number;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^
>         initialized = true;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        67
Source: 
>         startBlock = block.number;
>         initialized = true;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        106
Source: 
>         require(spender != address(0));
>         allowed[msg.sender][spender] = value;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, value);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        112
Source: 
>     function approveAndCall(address spender, uint256 tokens, bytes calldata data) external returns (bool) {
>         allowed[msg.sender][spender] = tokens;
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, tokens);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        134
Source: 
>         require(spender != address(0));
>         allowed[msg.sender][spender] = allowed[msg.sender][spender].add(addedValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, allowed[msg.sender][spender]);

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Team3D
Line:        141
Source: 
>         require(spender != address(0));
>         allowed[msg.sender][spender] = allowed[msg.sender][spender].sub(subtractedValue);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Approval(msg.sender, spender, allowed[msg.sender][spender]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Team3D
Line:        63
Source: 
>         presale = Presale(_presaleAddr);
>         balances[tx.origin] = presale.initialTokens();
>                               ^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Team3D
Line:        64
Source: 
>         balances[tx.origin] = presale.initialTokens();
>         balances[msg.sender] =  _totalSupply - presale.initialTokens();
>                                                ^^^^^^^^^^^^^^^^^^^^^^^
>         

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Team3D
Line:        69
Source: 
> 
>         emit Transfer(address(0), tx.origin, presale.initialTokens());
>                                              ^^^^^^^^^^^^^^^^^^^^^^^
>         emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Team3D
Line:        70
Source: 
>         emit Transfer(address(0), tx.origin, presale.initialTokens());
>         emit Transfer(address(0), msg.sender, _totalSupply - presale.initialTokens());
>                                                              ^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Presale
Line:        30
Source: 
> contract Presale {
>     mapping (address => uint256) public balances;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     address[] public keys;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Presale
Line:        31
Source: 
>     mapping (address => uint256) public balances;
>     address[] public keys;
>     ^^^^^^^^^^^^^^^^^^^^^
>     uint public initialTokens;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Presale
Line:        32
Source: 
>     address[] public keys;
>     uint public initialTokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Team3D
Line:        41
Source: 
>     mapping (address => mapping (address => uint256)) private allowed;
>     string public constant name  = "Vidya";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     string public constant symbol = "VIDYA";

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Team3D
Line:        42
Source: 
>     string public constant name  = "Vidya";
>     string public constant symbol = "VIDYA";
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     uint8 public constant decimals = 18;

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    Team3D
Line:        43
Source: 
>     string public constant symbol = "VIDYA";
>     uint8 public constant decimals = 18;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
