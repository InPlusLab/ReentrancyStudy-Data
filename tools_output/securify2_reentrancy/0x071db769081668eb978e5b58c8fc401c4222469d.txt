Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    SimpleDAO
Line:        20
Source: 
> 
> 	address payable private splitter = 0xF287d505377Ef7D39DfEC6e28c7EF62BD056AAD6;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	address payable[] private targets;

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SimpleDAO
Line:        51
Source: 
> 	function process() public {
> 		if (ethPoly.dividendsOf(address(this)) > 0) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			ethPoly.withdraw();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SimpleDAO
Line:        52
Source: 
> 		if (ethPoly.dividendsOf(address(this)) > 0) {
> 			ethPoly.withdraw();
>    ^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SimpleDAO
Line:        56
Source: 
> 		if (_balance > 0) {
> 			splitter.transfer(_balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SimpleDAO
Line:        64
Source: 
> 		if (totalVotes() >= MIN_VOTES) {
> 			ethPoly.liquidate(ethPoly.balanceOf(address(this)) * LIQUIDATION_PERCENT / 100);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			process();

[0m
[0;33mSeverity:    HIGH
Pattern:     External call in loop
Description: If a single call in the loop fails or revers, it will
             cause all other calls to fail as well.
Type:        Warning
Contract:    SimpleDAO
Line:        64
Source: 
> 		if (totalVotes() >= MIN_VOTES) {
> 			ethPoly.liquidate(ethPoly.balanceOf(address(this)) * LIQUIDATION_PERCENT / 100);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			process();

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SimpleDAO
Line:        45
Source: 
> 
> 	function setETHPoly(ETHPoly _ethPoly) external {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		require(msg.sender == deployer);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    SimpleDAO
Line:        86
Source: 
> 	
> 	function voted(address _user) public view returns (bool) {
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		return votes[_user];

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SimpleDAO
Line:        64
Source: 
> 		if (totalVotes() >= MIN_VOTES) {
> 			ethPoly.liquidate(ethPoly.balanceOf(address(this)) * LIQUIDATION_PERCENT / 100);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			process();

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    SimpleDAO
Line:        64
Source: 
> 		if (totalVotes() >= MIN_VOTES) {
> 			ethPoly.liquidate(ethPoly.balanceOf(address(this)) * LIQUIDATION_PERCENT / 100);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			process();

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SimpleDAO
Line:        54
Source: 
> 		}
> 		uint256 _balance = address(this).balance;
>   ^^^^^^^^^^^^^^^^
> 		if (_balance > 0) {

[0m
[0;31mSeverity:    INFO
Pattern:     Solidity Naming Convention
Description: Reports declarations that do not adhere to Solidity's
             naming convention.
Type:        Violation
Contract:    SimpleDAO
Line:        77
Source: 
> 	function totalVotes() public view returns (uint256) {
> 		uint256 _count = 0;
>   ^^^^^^^^^^^^^^
> 		for (uint256 i = 0; i < targets.length; i++) {

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        6
Source: 
> // SPDX-License-Identifier: MIT
> pragma solidity ^0.6.12;
> ^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    SimpleDAO
Line:        56
Source: 
> 		if (_balance > 0) {
> 			splitter.transfer(_balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    SimpleDAO
Line:        56
Source: 
> 		if (_balance > 0) {
> 			splitter.transfer(_balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    SimpleDAO
Line:        56
Source: 
> 		if (_balance > 0) {
> 			splitter.transfer(_balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SimpleDAO
Line:        51
Source: 
> 	function process() public {
> 		if (ethPoly.dividendsOf(address(this)) > 0) {
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			ethPoly.withdraw();

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    SimpleDAO
Line:        64
Source: 
> 		if (totalVotes() >= MIN_VOTES) {
> 			ethPoly.liquidate(ethPoly.balanceOf(address(this)) * LIQUIDATION_PERCENT / 100);
>                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			process();

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SimpleDAO
Line:        52
Source: 
> 		if (ethPoly.dividendsOf(address(this)) > 0) {
> 			ethPoly.withdraw();
>    ^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    SimpleDAO
Line:        64
Source: 
> 		if (totalVotes() >= MIN_VOTES) {
> 			ethPoly.liquidate(ethPoly.balanceOf(address(this)) * LIQUIDATION_PERCENT / 100);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			process();

[0m
[0;31mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Violation
Contract:    SimpleDAO
Line:        25
Source: 
> 	address private deployer;
> 	ETHPoly private ethPoly;
>  ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    SimpleDAO
Line:        56
Source: 
> 		if (_balance > 0) {
> 			splitter.transfer(_balance);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    SimpleDAO
Line:        93
Source: 
> 		for (uint256 i = 0; i < targets.length; i++) {
> 			votes[targets[i]] = false;
>    ^^^^^^^^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SimpleDAO
Line:        52
Source: 
> 		if (ethPoly.dividendsOf(address(this)) > 0) {
> 			ethPoly.withdraw();
>    ^^^^^^^^^^^^^^^^^^
> 		}

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    SimpleDAO
Line:        64
Source: 
> 		if (totalVotes() >= MIN_VOTES) {
> 			ethPoly.liquidate(ethPoly.balanceOf(address(this)) * LIQUIDATION_PERCENT / 100);
>    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			process();

[0m
