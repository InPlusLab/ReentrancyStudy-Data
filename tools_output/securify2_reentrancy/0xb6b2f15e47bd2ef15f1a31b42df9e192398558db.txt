Environment variable LD_LIBRARY_PATH not set. Setting it up...
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Payout
Line:        9
Source: 
> {
> address payable public address1 = 0x8dDd4c51a5dCfb83E070f04bF5C4F98b3FdA6977;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> address public owner = 0x482F222e30D49BF9606a0F6DEa7c210698B367F9;

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Payout
Line:        10
Source: 
> address payable public address1 = 0x8dDd4c51a5dCfb83E070f04bF5C4F98b3FdA6977;
> address public owner = 0x482F222e30D49BF9606a0F6DEa7c210698B367F9;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	

[0m
[0;31mSeverity:    INFO
Pattern:     Constable State Variables
Description: State variables that do not change should be declared as
             constants.
Type:        Violation
Contract:    Payout
Line:        12
Source: 
> 	
> uint256 public previousPayouts = 1435000000000000000;
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> uint256 public countPayouts = 0;

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Payout
Line:        20
Source: 
> 
> function triggerPayouts() public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Payout
Line:        27
Source: 
> 
> function transferAllFundsOut(address payable _address) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Payout
Line:        34
Source: 
> 
> function totalPayouts() view public returns (uint256)
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Payout
Line:        27
Source: 
> 
> function transferAllFundsOut(address payable _address) public
> ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> {

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Reentrancy with constant gas
Description: Ether transfers (such as send and transfer) that are
             followed by state changes may be reentrant.
Type:        Violation
Contract:    Payout
Line:        23
Source: 
> 	uint totalPayout = address(this).balance;
> 	if(!address1.send(totalPayout)) revert();	
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	countPayouts += totalPayout;

[0m
[0;31mSeverity:    LOW
Pattern:     Solidity pragma directives
Description: Avoid complex solidity version pragma statements.
Type:        Violation
Contract:    None
Line:        5
Source: 
> 
> pragma solidity ^0.6.1;
> ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Payout
Line:        12
Source: 
> 	
> uint256 public previousPayouts = 1435000000000000000;
>                                  ^^^^^^^^^^^^^^^^^^^
> uint256 public countPayouts = 0;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Payout
Line:        23
Source: 
> 	uint totalPayout = address(this).balance;
> 	if(!address1.send(totalPayout)) revert();	
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	countPayouts += totalPayout;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Amount
Description: The amount of ether transferred must not be influenced by
             other transactions.
Type:        Violation
Contract:    Payout
Line:        30
Source: 
> 	if (msg.sender == owner)
> 		if(!_address.send(address(this).balance))
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			revert();	

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Ether Receiver
Description: The receiver of ether transfers must not be influenced by
             other transactions.
Type:        Violation
Contract:    Payout
Line:        23
Source: 
> 	uint totalPayout = address(this).balance;
> 	if(!address1.send(totalPayout)) revert();	
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	countPayouts += totalPayout;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Transaction Order Affects Execution of Ether Transfer
Description: Ether transfers whose execution can be manipulated by
             other transactions must be inspected for unintended
             behavior.
Type:        Violation
Contract:    Payout
Line:        30
Source: 
> 	if (msg.sender == owner)
> 		if(!_address.send(address(this).balance))
>       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 			revert();	

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted Ether Flow
Description: The execution of ether flows should be restricted to an
             authorized set of users.
Type:        Violation
Contract:    Payout
Line:        23
Source: 
> 	uint totalPayout = address(this).balance;
> 	if(!address1.send(totalPayout)) revert();	
>      ^^^^^^^^^^^^^^^^^^^^^^^^^^
> 	countPayouts += totalPayout;

[0m
[0;31mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Violation
Contract:    Payout
Line:        24
Source: 
> 	if(!address1.send(totalPayout)) revert();	
> 	countPayouts += totalPayout;
>  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
> }

[0m
