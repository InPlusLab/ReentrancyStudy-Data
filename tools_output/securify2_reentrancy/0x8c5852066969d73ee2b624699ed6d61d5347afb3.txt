Environment variable LD_LIBRARY_PATH not set. Setting it up...
pragma directive defines a prior version to 0.6.6. Changing pragma version to 0.6.6....
[0;31mSeverity:    LOW
Pattern:     External Calls of Functions
Description: A public function that is never called within the
             contract should be marked as external
Type:        Violation
Contract:    Planets
Line:        349
Source: 
>     /// @return True if withdraw is successful
>     function withdraw(address _token, bool _rewardOnly) public contractAlive nonReentrant returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(entryBlock[msg.sender][_token]>0, "Please make sure you have made a deposit.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Planets
Line:        349
Source: 
>     /// @return True if withdraw is successful
>     function withdraw(address _token, bool _rewardOnly) public contractAlive nonReentrant returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(entryBlock[msg.sender][_token]>0, "Please make sure you have made a deposit.");

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Planets
Line:        369
Source: 
>     // @param _amount Amount of reward token to withdraw
>     function adminWithdraw(uint256 _amount) external govOnly {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         require(adminDeadline>block.timestamp);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Warning
Contract:    Planets
Line:        397
Source: 
>     /// @return True if address change is successful
>     function transferGov(address _governance) external govOnly returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         governance = _governance;

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Missing Input Validation
Description: Method arguments must be sanitized before they are used
             in computations.
Type:        Violation
Contract:    Planets
Line:        378
Source: 
>     /// @return True if token adding is successful
>     function addToken(address _token, uint256 _reward) external govOnly returns (bool) {
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         tokens[_token] = true;

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Planets
Line:        306
Source: 
>         require(tokens[_token] == true, "Token is not allowed for deposit.");
>         require(IERC20(_token).allowance(msg.sender, address(this)) >= _amount, "You do not have enough allowance for this operation.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (entryBlock[msg.sender][_token]>0) {

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Planets
Line:        312
Source: 
>         }
>         IERC20(_token).transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender][_token] = balances[msg.sender][_token].add(_amount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Planets
Line:        331
Source: 
>             require(balances[_receiver][_token]>0, "Token balance must be bigger than 0");
>             IERC20(_token).transfer(_receiver, balances[_receiver][_token]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalValue[_token] = totalValue[_token].sub(balances[_receiver][_token]);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Planets
Line:        339
Source: 
>         }
>         IERC20(rewardToken).transfer(_receiver, rewardAmount.mul(100000000000000000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalDistributed = totalDistributed.add(rewardAmount);

[0m
[0;33mSeverity:    MEDIUM
Pattern:     No-Ether-Involved Reentrancy
Description: Reentrancy that involves no ether
Type:        Warning
Contract:    Planets
Line:        359
Source: 
>         require(balances[msg.sender][_token]>0, "You do not have balance to withdraw");
>         IERC20(_token).transfer(msg.sender, balances[msg.sender][_token]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalValue[_token] = totalValue[_token].sub(balances[msg.sender][_token]);

[0m
[0;31mSeverity:    INFO
Pattern:     State variables default visibility
Description: Visibility of state variables should be stated explicitly
Type:        Violation
Contract:    Planets
Line:        274
Source: 
>     uint256 public totalDistributed;
>     mapping (address=>bool) tokens;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address=>mapping (address=>uint256)) public entryBlock;

[0m
[0;31mSeverity:    INFO
Pattern:     Too Many Digit Literals
Description: Usage of assembly in Solidity code is discouraged.
Type:        Violation
Contract:    Planets
Line:        339
Source: 
>         }
>         IERC20(rewardToken).transfer(_receiver, rewardAmount.mul(100000000000000000));
>                                                                  ^^^^^^^^^^^^^^^^^^
>         totalDistributed = totalDistributed.add(rewardAmount);

[0m
[0;33mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Warning
Contract:    Planets
Line:        306
Source: 
>         require(tokens[_token] == true, "Token is not allowed for deposit.");
>         require(IERC20(_token).allowance(msg.sender, address(this)) >= _amount, "You do not have enough allowance for this operation.");
>                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         if (entryBlock[msg.sender][_token]>0) {

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Planets
Line:        312
Source: 
>         }
>         IERC20(_token).transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender][_token] = balances[msg.sender][_token].add(_amount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Planets
Line:        331
Source: 
>             require(balances[_receiver][_token]>0, "Token balance must be bigger than 0");
>             IERC20(_token).transfer(_receiver, balances[_receiver][_token]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalValue[_token] = totalValue[_token].sub(balances[_receiver][_token]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Planets
Line:        339
Source: 
>         }
>         IERC20(rewardToken).transfer(_receiver, rewardAmount.mul(100000000000000000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalDistributed = totalDistributed.add(rewardAmount);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Planets
Line:        359
Source: 
>         require(balances[msg.sender][_token]>0, "You do not have balance to withdraw");
>         IERC20(_token).transfer(msg.sender, balances[msg.sender][_token]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalValue[_token] = totalValue[_token].sub(balances[msg.sender][_token]);

[0m
[0;31mSeverity:    HIGH
Pattern:     Unhandled Exception
Description: The return value of statements that may return error
             values must be explicitly checked.
Type:        Violation
Contract:    Planets
Line:        371
Source: 
>         require(adminDeadline>block.timestamp);
>         IERC20(rewardToken).transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    HIGH
Pattern:     Uninitialized State Variable
Description: State variables should be explicitly initialized.
Type:        Warning
Contract:    Planets
Line:        273
Source: 
>     uint256 public adminDeadline;
>     uint256 public totalDistributed;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     mapping (address=>bool) tokens;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        41
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _status = _ENTERED;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Planets
Line:        313
Source: 
>         IERC20(_token).transferFrom(msg.sender, address(this), _amount);
>         balances[msg.sender][_token] = balances[msg.sender][_token].add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalValue[_token] = totalValue[_token].add(_amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Planets
Line:        314
Source: 
>         balances[msg.sender][_token] = balances[msg.sender][_token].add(_amount);
>         totalValue[_token] = totalValue[_token].add(_amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Deposit(msg.sender, _token, _amount);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        47
Source: 
>         // https://eips.ethereum.org/EIPS/eip-2200)
>         _status = _NOT_ENTERED;
>         ^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Planets
Line:        332
Source: 
>             IERC20(_token).transfer(_receiver, balances[_receiver][_token]);
>             totalValue[_token] = totalValue[_token].sub(balances[_receiver][_token]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             balances[_receiver][_token] = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Planets
Line:        333
Source: 
>             totalValue[_token] = totalValue[_token].sub(balances[_receiver][_token]);
>             balances[_receiver][_token] = 0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             entryBlock[_receiver][_token] = 0;

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Planets
Line:        334
Source: 
>             balances[_receiver][_token] = 0;
>             entryBlock[_receiver][_token] = 0;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Planets
Line:        340
Source: 
>         IERC20(rewardToken).transfer(_receiver, rewardAmount.mul(100000000000000000));
>         totalDistributed = totalDistributed.add(rewardAmount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         emit Withdraw(_receiver, _token, rewardAmount, _rewardOnly);

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    Planets
Line:        337
Source: 
>         } else {
>             entryBlock[_receiver][_token] = block.number;
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         }

[0m
[0;33mSeverity:    CRITICAL
Pattern:     Unrestricted write to storage
Description: Contract fields that can be modified by any user must be
             inspected.
Type:        Warning
Contract:    ReentrancyGuard
Line:        41
Source: 
>         // Any calls to nonReentrant after this point will fail
>         _status = _ENTERED;
>         ^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Planets
Line:        312
Source: 
>         }
>         IERC20(_token).transferFrom(msg.sender, address(this), _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         balances[msg.sender][_token] = balances[msg.sender][_token].add(_amount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Planets
Line:        331
Source: 
>             require(balances[_receiver][_token]>0, "Token balance must be bigger than 0");
>             IERC20(_token).transfer(_receiver, balances[_receiver][_token]);
>             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>             totalValue[_token] = totalValue[_token].sub(balances[_receiver][_token]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Planets
Line:        339
Source: 
>         }
>         IERC20(rewardToken).transfer(_receiver, rewardAmount.mul(100000000000000000));
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalDistributed = totalDistributed.add(rewardAmount);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Planets
Line:        359
Source: 
>         require(balances[msg.sender][_token]>0, "You do not have balance to withdraw");
>         IERC20(_token).transfer(msg.sender, balances[msg.sender][_token]);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>         totalValue[_token] = totalValue[_token].sub(balances[msg.sender][_token]);

[0m
[0;31mSeverity:    MEDIUM
Pattern:     Unused Return Pattern
Description: The value returned by an external function call is never
             used
Type:        Violation
Contract:    Planets
Line:        371
Source: 
>         require(adminDeadline>block.timestamp);
>         IERC20(rewardToken).transfer(msg.sender, _amount);
>         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>     }

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        21
Source: 
>     uint256 private constant _NOT_ENTERED = 1;
>     uint256 private constant _ENTERED = 2;
>     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;31mSeverity:    INFO
Pattern:     Unused State Variable
Description: Unused state variables should be removed.
Type:        Violation
Contract:    ReentrancyGuard
Line:        23
Source: 
> 
>     uint256 private _status;
>     ^^^^^^^^^^^^^^^^^^^^^^^
> 

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Planets
Line:        287
Source: 
>         killed = false;
>         adminDeadline = block.timestamp.add(86400);
>                         ^^^^^^^^^^^^^^^
>     }

[0m
[0;35mSeverity:    LOW
Pattern:     Usage of block timestamp
Description: Returned value relies on block timestamp.
Type:        Conflict
Contract:    Planets
Line:        370
Source: 
>     function adminWithdraw(uint256 _amount) external govOnly {
>         require(adminDeadline>block.timestamp);
>                               ^^^^^^^^^^^^^^^
>         IERC20(rewardToken).transfer(msg.sender, _amount);

[0m
